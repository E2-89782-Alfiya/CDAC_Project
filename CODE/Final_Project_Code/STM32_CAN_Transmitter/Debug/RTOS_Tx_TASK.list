
RTOS_Tx_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800afc8  0800afc8  0000bfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e4  0800b4e4  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b4e4  0800b4e4  0000c4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4ec  0800b4ec  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4ec  0800b4ec  0000c4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4f0  0800b4f0  0000c4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b4f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          00004340  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004518  20004518  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001754f  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ad  00000000  00000000  00024757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00027c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7c  00000000  00000000  00029008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025804  00000000  00000000  00029f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001568f  00000000  00000000  0004f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4f45  00000000  00000000  00064e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149d5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006934  00000000  00000000  00149da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001506d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afac 	.word	0x0800afac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800afac 	.word	0x0800afac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <delay_us>:
#include "dht11.h"

extern TIM_HandleTypeDef htim2;

void delay_us (uint32_t time)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <delay_us+0x2c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8001030:	bf00      	nop
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <delay_us+0x2c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	d8f9      	bhi.n	8001032 <delay_us+0x12>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	2000054c 	.word	0x2000054c

08001050 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f002 f972 	bl	8003368 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f002 f954 	bl	8003368 <HAL_GPIO_Init>
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <DHT11_Start>:

//#define DHT11_PORT GPIOA
//#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 80010cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <DHT11_Start+0x44>)
 80010d2:	f7ff ffbd 	bl	8001050 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <DHT11_Start+0x44>)
 80010de:	f002 faf7 	bl	80036d0 <HAL_GPIO_WritePin>
	delay_us(20000);
 80010e2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80010e6:	f7ff ff9b 	bl	8001020 <delay_us>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	4806      	ldr	r0, [pc, #24]	@ (800110c <DHT11_Start+0x44>)
 80010f2:	f002 faed 	bl	80036d0 <HAL_GPIO_WritePin>
	delay_us (20);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f7ff ff92 	bl	8001020 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 80010fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <DHT11_Start+0x44>)
 8001102:	f7ff ffc3 	bl	800108c <Set_Pin_Input>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020c00 	.word	0x40020c00

08001110 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8001116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111a:	4817      	ldr	r0, [pc, #92]	@ (8001178 <DHT11_Check_Response+0x68>)
 800111c:	f7ff ffb6 	bl	800108c <Set_Pin_Input>
	uint8_t Response = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8001124:	2028      	movs	r0, #40	@ 0x28
 8001126:	f7ff ff7b 	bl	8001020 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800112a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <DHT11_Check_Response+0x68>)
 8001130:	f002 fab6 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <DHT11_Check_Response+0x4a>
	{
		delay_us (80);
 800113a:	2050      	movs	r0, #80	@ 0x50
 800113c:	f7ff ff70 	bl	8001020 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001140:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <DHT11_Check_Response+0x68>)
 8001146:	f002 faab 	bl	80036a0 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <DHT11_Check_Response+0x46>
 8001150:	2301      	movs	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	e001      	b.n	800115a <DHT11_Check_Response+0x4a>
		else Response = -1;
 8001156:	23ff      	movs	r3, #255	@ 0xff
 8001158:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800115a:	bf00      	nop
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <DHT11_Check_Response+0x68>)
 8001162:	f002 fa9d 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f7      	bne.n	800115c <DHT11_Check_Response+0x4c>
	return Response;
 800116c:	79fb      	ldrb	r3, [r7, #7]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40020c00 	.word	0x40020c00

0800117c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001182:	2300      	movs	r3, #0
 8001184:	71bb      	strb	r3, [r7, #6]
 8001186:	e03a      	b.n	80011fe <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001188:	bf00      	nop
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	4820      	ldr	r0, [pc, #128]	@ (8001210 <DHT11_Read+0x94>)
 8001190:	f002 fa86 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f7      	beq.n	800118a <DHT11_Read+0xe>
		delay_us (40);
 800119a:	2028      	movs	r0, #40	@ 0x28
 800119c:	f7ff ff40 	bl	8001020 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80011a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a4:	481a      	ldr	r0, [pc, #104]	@ (8001210 <DHT11_Read+0x94>)
 80011a6:	f002 fa7b 	bl	80036a0 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10e      	bne.n	80011ce <DHT11_Read+0x52>
			i&= ~(1<<(7-j));
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2201      	movs	r2, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4013      	ands	r3, r2
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	e00b      	b.n	80011e6 <DHT11_Read+0x6a>
		else i|= (1<<(7-j));
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	f1c3 0307 	rsb	r3, r3, #7
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80011e6:	bf00      	nop
 80011e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <DHT11_Read+0x94>)
 80011ee:	f002 fa57 	bl	80036a0 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f7      	bne.n	80011e8 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3301      	adds	r3, #1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b07      	cmp	r3, #7
 8001202:	d9c1      	bls.n	8001188 <DHT11_Read+0xc>
	}
	return i;
 8001204:	79fb      	ldrb	r3, [r7, #7]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020c00 	.word	0x40020c00

08001214 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <vApplicationGetIdleTaskMemory+0x2c>)
 8001224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <vApplicationGetIdleTaskMemory+0x30>)
 800122a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200001f4 	.word	0x200001f4
 8001244:	20000294 	.word	0x20000294

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b09c      	sub	sp, #112	@ 0x70
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fef9 	bl	8002044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f88d 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 fa45 	bl	80016e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800125a:	f000 f8f3 	bl	8001444 <MX_ADC1_Init>
  MX_ADC2_Init();
 800125e:	f000 f943 	bl	80014e8 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001262:	f000 f993 	bl	800158c <MX_CAN1_Init>
  MX_TIM2_Init();
 8001266:	f000 f9c7 	bl	80015f8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800126a:	f000 fa11 	bl	8001690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800126e:	4835      	ldr	r0, [pc, #212]	@ (8001344 <main+0xfc>)
 8001270:	f001 fc25 	bl	8002abe <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8001274:	2101      	movs	r1, #1
 8001276:	4833      	ldr	r0, [pc, #204]	@ (8001344 <main+0xfc>)
 8001278:	f001 fd35 	bl	8002ce6 <HAL_CAN_ActivateNotification>

  HAL_TIM_Base_Start(&htim2);
 800127c:	4832      	ldr	r0, [pc, #200]	@ (8001348 <main+0x100>)
 800127e:	f002 ff75 	bl	800416c <HAL_TIM_Base_Start>

  // Configure CAN Tx Header
   TxHeader.DLC = 8;                            // Data length = 8 bytes
 8001282:	4b32      	ldr	r3, [pc, #200]	@ (800134c <main+0x104>)
 8001284:	2208      	movs	r2, #8
 8001286:	611a      	str	r2, [r3, #16]
   TxHeader.RTR = CAN_RTR_DATA;                // Remote Transmission Request = DATA
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <main+0x104>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
   TxHeader.IDE = CAN_ID_STD;                  // Standard Identifier
 800128e:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <main+0x104>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
   TxHeader.StdId = 0x0A9;                      // Identifier
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <main+0x104>)
 8001296:	22a9      	movs	r2, #169	@ 0xa9
 8001298:	601a      	str	r2, [r3, #0]
   TxHeader.ExtId = 0x00;                       // Not used for standard ID
 800129a:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <main+0x104>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
   TxHeader.TransmitGlobalTime = DISABLE;      // Disable timestamp
 80012a0:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <main+0x104>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	751a      	strb	r2, [r3, #20]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80012a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <main+0x108>)
 80012a8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 f806 	bl	80052d2 <osThreadCreate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <main+0x10c>)
 80012ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

   osThreadDef(analogTask, StartSensorAnalogTask, osPriorityNormal, 0, 256);
 80012cc:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <main+0x110>)
 80012ce:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80012d2:	461d      	mov	r5, r3
 80012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   analogTaskHandle = osThreadCreate(osThread(analogTask), NULL);
 80012e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fff3 	bl	80052d2 <osThreadCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <main+0x114>)
 80012f0:	6013      	str	r3, [r2, #0]

   osThreadDef(dhtTask, StartSensorDHTTask, osPriorityBelowNormal, 0, 256);
 80012f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <main+0x118>)
 80012f4:	f107 041c 	add.w	r4, r7, #28
 80012f8:	461d      	mov	r5, r3
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   dhtTaskHandle = osThreadCreate(osThread(dhtTask), NULL);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f003 ffe0 	bl	80052d2 <osThreadCreate>
 8001312:	4603      	mov	r3, r0
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <main+0x11c>)
 8001316:	6013      	str	r3, [r2, #0]

   osThreadDef(canTxTask, StartCanTxTask, osPriorityLow, 0, 256);
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <main+0x120>)
 800131a:	463c      	mov	r4, r7
 800131c:	461d      	mov	r5, r3
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 800132a:	463b      	mov	r3, r7
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f003 ffcf 	bl	80052d2 <osThreadCreate>
 8001334:	4603      	mov	r3, r0
 8001336:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <main+0x124>)
 8001338:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800133a:	f003 ffc3 	bl	80052c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133e:	bf00      	nop
 8001340:	e7fd      	b.n	800133e <main+0xf6>
 8001342:	bf00      	nop
 8001344:	20000524 	.word	0x20000524
 8001348:	2000054c 	.word	0x2000054c
 800134c:	200005ec 	.word	0x200005ec
 8001350:	0800afd4 	.word	0x0800afd4
 8001354:	200005dc 	.word	0x200005dc
 8001358:	0800affc 	.word	0x0800affc
 800135c:	200005e0 	.word	0x200005e0
 8001360:	0800b020 	.word	0x0800b020
 8001364:	200005e4 	.word	0x200005e4
 8001368:	0800b048 	.word	0x0800b048
 800136c:	200005e8 	.word	0x200005e8

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	@ 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	@ 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f006 f9d9 	bl	8007736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <SystemClock_Config+0xcc>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	4a27      	ldr	r2, [pc, #156]	@ (800143c <SystemClock_Config+0xcc>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <SystemClock_Config+0xcc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <SystemClock_Config+0xd0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <SystemClock_Config+0xd0>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013e4:	2348      	movs	r3, #72	@ 0x48
 80013e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 f99f 	bl	8003738 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001400:	f000 fb14 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fc00 	bl	8003c28 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800142e:	f000 fafd 	bl	8001a2c <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	@ 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001458:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <MX_ADC1_Init+0x9c>)
 800145a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MX_ADC1_Init+0x98>)
 800145e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001462:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_ADC1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <MX_ADC1_Init+0xa0>)
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001492:	2201      	movs	r2, #1
 8001494:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_ADC1_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_ADC1_Init+0x98>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a4:	480d      	ldr	r0, [pc, #52]	@ (80014dc <MX_ADC1_Init+0x98>)
 80014a6:	f000 fe0f 	bl	80020c8 <HAL_ADC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014b0:	f000 fabc 	bl	8001a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_ADC1_Init+0x98>)
 80014c6:	f000 ffe1 	bl	800248c <HAL_ADC_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014d0:	f000 faac 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000494 	.word	0x20000494
 80014e0:	40012000 	.word	0x40012000
 80014e4:	0f000001 	.word	0x0f000001

080014e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014fa:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <MX_ADC2_Init+0x98>)
 80014fc:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <MX_ADC2_Init+0x9c>)
 80014fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001502:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001506:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_ADC2_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MX_ADC2_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MX_ADC2_Init+0x98>)
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <MX_ADC2_Init+0xa0>)
 800152c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001536:	2201      	movs	r2, #1
 8001538:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_ADC2_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_ADC2_Init+0x98>)
 8001544:	2201      	movs	r2, #1
 8001546:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001548:	480d      	ldr	r0, [pc, #52]	@ (8001580 <MX_ADC2_Init+0x98>)
 800154a:	f000 fdbd 	bl	80020c8 <HAL_ADC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001554:	f000 fa6a 	bl	8001a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001558:	2303      	movs	r3, #3
 800155a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_ADC2_Init+0x98>)
 800156a:	f000 ff8f 	bl	800248c <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001574:	f000 fa5a 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200004dc 	.word	0x200004dc
 8001584:	40012100 	.word	0x40012100
 8001588:	0f000001 	.word	0x0f000001

0800158c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <MX_CAN1_Init+0x64>)
 8001592:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <MX_CAN1_Init+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <MX_CAN1_Init+0x64>)
 8001598:	2212      	movs	r2, #18
 800159a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <MX_CAN1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_CAN1_Init+0x64>)
 80015dc:	f001 f974 	bl	80028c8 <HAL_CAN_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80015e6:	f000 fa21 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000524 	.word	0x20000524
 80015f4:	40006400 	.word	0x40006400

080015f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_TIM2_Init+0x94>)
 8001616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800161a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <MX_TIM2_Init+0x94>)
 800161e:	2247      	movs	r2, #71	@ 0x47
 8001620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_TIM2_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_TIM2_Init+0x94>)
 800162a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800162e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_TIM2_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <MX_TIM2_Init+0x94>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800163c:	4813      	ldr	r0, [pc, #76]	@ (800168c <MX_TIM2_Init+0x94>)
 800163e:	f002 fd45 	bl	80040cc <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001648:	f000 f9f0 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <MX_TIM2_Init+0x94>)
 800165a:	f002 ff4f 	bl	80044fc <HAL_TIM_ConfigClockSource>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001664:	f000 f9e2 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_TIM2_Init+0x94>)
 8001676:	f003 f971 	bl	800495c <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001680:	f000 f9d4 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000054c 	.word	0x2000054c

08001690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_USART2_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c8:	f003 f9d8 	bl	8004a7c <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f9ab 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000594 	.word	0x20000594
 80016e0:	40004400 	.word	0x40004400

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a26      	ldr	r2, [pc, #152]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <MX_GPIO_Init+0xb8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <MX_GPIO_Init+0xb8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a18      	ldr	r2, [pc, #96]	@ (800179c <MX_GPIO_Init+0xb8>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a11      	ldr	r2, [pc, #68]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <MX_GPIO_Init+0xb8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 41a2 	mov.w	r1, #20736	@ 0x5100
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <MX_GPIO_Init+0xbc>)
 8001772:	f001 ffad 	bl	80036d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14;
 8001776:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_GPIO_Init+0xbc>)
 8001790:	f001 fdea 	bl	8003368 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	@ 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020c00 	.word	0x40020c00

080017a4 <StartSensorAnalogTask>:

/* USER CODE BEGIN 4 */

void StartSensorAnalogTask(void const * argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	 uint16_t adcVal;

	    for(;;)
	    {
	        // Read ADC1 (LDR on channel 1)
	        HAL_ADC_Start(&hadc1);
 80017ac:	4817      	ldr	r0, [pc, #92]	@ (800180c <StartSensorAnalogTask+0x68>)
 80017ae:	f000 fccf 	bl	8002150 <HAL_ADC_Start>
	        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80017b2:	210a      	movs	r1, #10
 80017b4:	4815      	ldr	r0, [pc, #84]	@ (800180c <StartSensorAnalogTask+0x68>)
 80017b6:	f000 fdd0 	bl	800235a <HAL_ADC_PollForConversion>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <StartSensorAnalogTask+0x2c>
	        {
	            adcVal = HAL_ADC_GetValue(&hadc1);
 80017c0:	4812      	ldr	r0, [pc, #72]	@ (800180c <StartSensorAnalogTask+0x68>)
 80017c2:	f000 fe55 	bl	8002470 <HAL_ADC_GetValue>
 80017c6:	4603      	mov	r3, r0
 80017c8:	81fb      	strh	r3, [r7, #14]
	            sensorData.ldr = adcVal; // direct write
 80017ca:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <StartSensorAnalogTask+0x6c>)
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	8013      	strh	r3, [r2, #0]
	        }
	        HAL_ADC_Stop(&hadc1);
 80017d0:	480e      	ldr	r0, [pc, #56]	@ (800180c <StartSensorAnalogTask+0x68>)
 80017d2:	f000 fd8f 	bl	80022f4 <HAL_ADC_Stop>

	        // Read ADC2 (MQ5 on channel 3)
	        HAL_ADC_Start(&hadc2);
 80017d6:	480f      	ldr	r0, [pc, #60]	@ (8001814 <StartSensorAnalogTask+0x70>)
 80017d8:	f000 fcba 	bl	8002150 <HAL_ADC_Start>
	        if(HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 80017dc:	210a      	movs	r1, #10
 80017de:	480d      	ldr	r0, [pc, #52]	@ (8001814 <StartSensorAnalogTask+0x70>)
 80017e0:	f000 fdbb 	bl	800235a <HAL_ADC_PollForConversion>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <StartSensorAnalogTask+0x56>
	        {
	            adcVal = HAL_ADC_GetValue(&hadc2);
 80017ea:	480a      	ldr	r0, [pc, #40]	@ (8001814 <StartSensorAnalogTask+0x70>)
 80017ec:	f000 fe40 	bl	8002470 <HAL_ADC_GetValue>
 80017f0:	4603      	mov	r3, r0
 80017f2:	81fb      	strh	r3, [r7, #14]
	            sensorData.mq5 = adcVal; // direct write
 80017f4:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <StartSensorAnalogTask+0x6c>)
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	8053      	strh	r3, [r2, #2]
	        }
	        HAL_ADC_Stop(&hadc2);
 80017fa:	4806      	ldr	r0, [pc, #24]	@ (8001814 <StartSensorAnalogTask+0x70>)
 80017fc:	f000 fd7a 	bl	80022f4 <HAL_ADC_Stop>

	        osDelay(1000);
 8001800:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001804:	f003 fdb1 	bl	800536a <osDelay>
	        HAL_ADC_Start(&hadc1);
 8001808:	e7d0      	b.n	80017ac <StartSensorAnalogTask+0x8>
 800180a:	bf00      	nop
 800180c:	20000494 	.word	0x20000494
 8001810:	20000610 	.word	0x20000610
 8001814:	200004dc 	.word	0x200004dc

08001818 <StartSensorDHTTask>:


}

void StartSensorDHTTask(void const * argument)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2, sum, check;

	    for (;;)
	    {
	        DHT11_Start();
 8001820:	f7ff fc52 	bl	80010c8 <DHT11_Start>
	        if (DHT11_Check_Response())
 8001824:	f7ff fc74 	bl	8001110 <DHT11_Check_Response>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d031      	beq.n	8001892 <StartSensorDHTTask+0x7a>
	        {
	            Rh_byte1    = DHT11_Read();
 800182e:	f7ff fca5 	bl	800117c <DHT11_Read>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	            Rh_byte2    = DHT11_Read();
 8001836:	f7ff fca1 	bl	800117c <DHT11_Read>
 800183a:	4603      	mov	r3, r0
 800183c:	73bb      	strb	r3, [r7, #14]
	            Temp_byte1  = DHT11_Read();
 800183e:	f7ff fc9d 	bl	800117c <DHT11_Read>
 8001842:	4603      	mov	r3, r0
 8001844:	737b      	strb	r3, [r7, #13]
	            Temp_byte2  = DHT11_Read();
 8001846:	f7ff fc99 	bl	800117c <DHT11_Read>
 800184a:	4603      	mov	r3, r0
 800184c:	733b      	strb	r3, [r7, #12]
	            sum         = DHT11_Read();
 800184e:	f7ff fc95 	bl	800117c <DHT11_Read>
 8001852:	4603      	mov	r3, r0
 8001854:	72fb      	strb	r3, [r7, #11]

	            check = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	4413      	add	r3, r2
 800185c:	b2da      	uxtb	r2, r3
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	4413      	add	r3, r2
 8001862:	b2da      	uxtb	r2, r3
 8001864:	7b3b      	ldrb	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	72bb      	strb	r3, [r7, #10]

	            if (check == sum)
 800186a:	7aba      	ldrb	r2, [r7, #10]
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	429a      	cmp	r2, r3
 8001870:	d10f      	bne.n	8001892 <StartSensorDHTTask+0x7a>
	            {
	                // Direct update to global sensorData without mutex or queue
	                sensorData.humidity    = Rh_byte1;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <StartSensorDHTTask+0x84>)
 800187e:	edc3 7a02 	vstr	s15, [r3, #8]
	                sensorData.temperature = Temp_byte1;  // DHT11 decimal part usually zero
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <StartSensorDHTTask+0x84>)
 800188e:	edc3 7a01 	vstr	s15, [r3, #4]
	            }
	        }

	        osDelay(1000);  // Wait 3 seconds
 8001892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001896:	f003 fd68 	bl	800536a <osDelay>
	        DHT11_Start();
 800189a:	e7c1      	b.n	8001820 <StartSensorDHTTask+0x8>
 800189c:	20000610 	.word	0x20000610

080018a0 <StartCanTxTask>:



}
void StartCanTxTask(void const * argument)
{
 80018a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a4:	b09a      	sub	sp, #104	@ 0x68
 80018a6:	af06      	add	r7, sp, #24
 80018a8:	6078      	str	r0, [r7, #4]
	    //SensorData_t localCopy;

	    for(;;)
	    {
	        //  copy global sensorData
	        localCopy = sensorData;
 80018aa:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <StartCanTxTask+0x134>)
 80018ac:	4a4a      	ldr	r2, [pc, #296]	@ (80019d8 <StartCanTxTask+0x138>)
 80018ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	        // Prepare UART output string
	        snprintf(uartBuf, sizeof(uartBuf), "LDR=%u, MQ5=%u, Temperature.=%.1fC, Humidity=%.1f%%\r\n",localCopy.ldr, localCopy.mq5, localCopy.temperature, localCopy.humidity);
 80018b4:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <StartCanTxTask+0x134>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	4698      	mov	r8, r3
 80018ba:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <StartCanTxTask+0x134>)
 80018bc:	885b      	ldrh	r3, [r3, #2]
 80018be:	461e      	mov	r6, r3
 80018c0:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <StartCanTxTask+0x134>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe3f 	bl	8000548 <__aeabi_f2d>
 80018ca:	4604      	mov	r4, r0
 80018cc:	460d      	mov	r5, r1
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <StartCanTxTask+0x134>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	f107 000c 	add.w	r0, r7, #12
 80018e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80018e8:	9600      	str	r6, [sp, #0]
 80018ea:	4643      	mov	r3, r8
 80018ec:	4a3b      	ldr	r2, [pc, #236]	@ (80019dc <StartCanTxTask+0x13c>)
 80018ee:	2140      	movs	r1, #64	@ 0x40
 80018f0:	f005 fe86 	bl	8007600 <sniprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fcb9 	bl	8000270 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	f107 010c 	add.w	r1, r7, #12
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800190a:	4835      	ldr	r0, [pc, #212]	@ (80019e0 <StartCanTxTask+0x140>)
 800190c:	f003 f906 	bl	8004b1c <HAL_UART_Transmit>

	        // Prepare CAN Tx data (8 bytes)
	        TxData[0] = (localCopy.ldr >> 8) & 0xFF;
 8001910:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <StartCanTxTask+0x134>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	b29b      	uxth	r3, r3
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <StartCanTxTask+0x144>)
 800191c:	701a      	strb	r2, [r3, #0]
	        TxData[1] = localCopy.ldr & 0xFF;
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <StartCanTxTask+0x134>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <StartCanTxTask+0x144>)
 8001926:	705a      	strb	r2, [r3, #1]
	        TxData[2] = (localCopy.mq5 >> 8) & 0xFF;
 8001928:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <StartCanTxTask+0x134>)
 800192a:	885b      	ldrh	r3, [r3, #2]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <StartCanTxTask+0x144>)
 8001934:	709a      	strb	r2, [r3, #2]
	        TxData[3] = localCopy.mq5 & 0xFF;
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <StartCanTxTask+0x134>)
 8001938:	885b      	ldrh	r3, [r3, #2]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <StartCanTxTask+0x144>)
 800193e:	70da      	strb	r2, [r3, #3]

	        uint16_t tempInt = (uint16_t)(localCopy.temperature );
 8001940:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <StartCanTxTask+0x134>)
 8001942:	edd3 7a01 	vldr	s15, [r3, #4]
 8001946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194a:	ee17 3a90 	vmov	r3, s15
 800194e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	        uint16_t humInt = (uint16_t)(localCopy.humidity );
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <StartCanTxTask+0x134>)
 8001954:	edd3 7a02 	vldr	s15, [r3, #8]
 8001958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
 8001960:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	        TxData[4] = (tempInt >> 8) & 0xFF;
 8001964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <StartCanTxTask+0x144>)
 8001970:	711a      	strb	r2, [r3, #4]
	        TxData[5] = tempInt & 0xFF;
 8001972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <StartCanTxTask+0x144>)
 800197a:	715a      	strb	r2, [r3, #5]
	        TxData[6] = (humInt >> 8) & 0xFF;
 800197c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <StartCanTxTask+0x144>)
 8001988:	719a      	strb	r2, [r3, #6]
	        TxData[7] = humInt & 0xFF;
 800198a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <StartCanTxTask+0x144>)
 8001992:	71da      	strb	r2, [r3, #7]

	        if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <StartCanTxTask+0x148>)
 8001996:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <StartCanTxTask+0x144>)
 8001998:	4914      	ldr	r1, [pc, #80]	@ (80019ec <StartCanTxTask+0x14c>)
 800199a:	4815      	ldr	r0, [pc, #84]	@ (80019f0 <StartCanTxTask+0x150>)
 800199c:	f001 f8d3 	bl	8002b46 <HAL_CAN_AddTxMessage>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <StartCanTxTask+0x114>
	        {
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // RED LED on error
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ac:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <StartCanTxTask+0x154>)
 80019ae:	f001 fe8f 	bl	80036d0 <HAL_GPIO_WritePin>
 80019b2:	e00a      	b.n	80019ca <StartCanTxTask+0x12a>
	        }
	        else
	        {
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);              // GREEN LED toggle
 80019b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b8:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <StartCanTxTask+0x154>)
 80019ba:	f001 fea2 	bl	8003702 <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // RED LED off
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019c4:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <StartCanTxTask+0x154>)
 80019c6:	f001 fe83 	bl	80036d0 <HAL_GPIO_WritePin>
	        }

	        osDelay(3000);
 80019ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80019ce:	f003 fccc 	bl	800536a <osDelay>
	    {
 80019d2:	e76a      	b.n	80018aa <StartCanTxTask+0xa>
 80019d4:	2000061c 	.word	0x2000061c
 80019d8:	20000610 	.word	0x20000610
 80019dc:	0800b064 	.word	0x0800b064
 80019e0:	20000594 	.word	0x20000594
 80019e4:	20000604 	.word	0x20000604
 80019e8:	2000060c 	.word	0x2000060c
 80019ec:	200005ec 	.word	0x200005ec
 80019f0:	20000524 	.word	0x20000524
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f003 fcb2 	bl	800536a <osDelay>
 8001a06:	e7fb      	b.n	8001a00 <StartDefaultTask+0x8>

08001a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a1a:	f000 fb35 	bl	8002088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40001000 	.word	0x40001000

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <Error_Handler+0x8>

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_MspInit+0x54>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	4a11      	ldr	r2, [pc, #68]	@ (8001a8c <HAL_MspInit+0x54>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_MspInit+0x54>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_MspInit+0x54>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <HAL_MspInit+0x54>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <HAL_MspInit+0x54>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	210f      	movs	r1, #15
 8001a7a:	f06f 0001 	mvn.w	r0, #1
 8001a7e:	f001 fc49 	bl	8003314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2e      	ldr	r2, [pc, #184]	@ (8001b68 <HAL_ADC_MspInit+0xd8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d128      	bne.n	8001b04 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a25      	ldr	r2, [pc, #148]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	481c      	ldr	r0, [pc, #112]	@ (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001afe:	f001 fc33 	bl	8003368 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b02:	e02c      	b.n	8001b5e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	@ (8001b74 <HAL_ADC_MspInit+0xe4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d127      	bne.n	8001b5e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a15      	ldr	r2, [pc, #84]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001b18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MQ5_Pin;
 8001b46:	2308      	movs	r3, #8
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MQ5_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001b5a:	f001 fc05 	bl	8003368 <HAL_GPIO_Init>
}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	@ 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40012100 	.word	0x40012100

08001b78 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	@ 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <HAL_CAN_MspInit+0x94>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d134      	bne.n	8001c04 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_CAN_MspInit+0x98>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c10 <HAL_CAN_MspInit+0x98>)
 8001ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_CAN_MspInit+0x98>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001be4:	2309      	movs	r3, #9
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	@ (8001c14 <HAL_CAN_MspInit+0x9c>)
 8001bf0:	f001 fbba 	bl	8003368 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2013      	movs	r0, #19
 8001bfa:	f001 fb8b 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001bfe:	2013      	movs	r0, #19
 8001c00:	f001 fba4 	bl	800334c <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	@ 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40006400 	.word	0x40006400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c28:	d10d      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_TIM_Base_MspInit+0x3c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	@ (8001c54 <HAL_TIM_Base_MspInit+0x3c>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_TIM_Base_MspInit+0x3c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_UART_MspInit+0x84>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d12b      	bne.n	8001cd2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cb2:	2360      	movs	r3, #96	@ 0x60
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <HAL_UART_MspInit+0x8c>)
 8001cce:	f001 fb4b 	bl	8003368 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020c00 	.word	0x40020c00

08001ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	@ 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d14:	f107 0210 	add.w	r2, r7, #16
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f9a2 	bl	8004068 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d2e:	f002 f973 	bl	8004018 <HAL_RCC_GetPCLK1Freq>
 8001d32:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d34:	e004      	b.n	8001d40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d36:	f002 f96f 	bl	8004018 <HAL_RCC_GetPCLK1Freq>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <HAL_InitTick+0xe8>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d50:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <HAL_InitTick+0xf0>)
 8001d52:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d74:	4817      	ldr	r0, [pc, #92]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d76:	f002 f9a9 	bl	80040cc <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11b      	bne.n	8001dc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d88:	4812      	ldr	r0, [pc, #72]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d8a:	f002 fa57 	bl	800423c <HAL_TIM_Base_Start_IT>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d111      	bne.n	8001dc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d9c:	2036      	movs	r0, #54	@ 0x36
 8001d9e:	f001 fad5 	bl	800334c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d808      	bhi.n	8001dba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	2036      	movs	r0, #54	@ 0x36
 8001dae:	f001 fab1 	bl	8003314 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <HAL_InitTick+0xf4>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e002      	b.n	8001dc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3738      	adds	r7, #56	@ 0x38
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	20000628 	.word	0x20000628
 8001dd8:	40001000 	.word	0x40001000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <CAN1_TX_IRQHandler+0x10>)
 8001e1e:	f000 ff88 	bl	8002d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000524 	.word	0x20000524

08001e2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <TIM6_DAC_IRQHandler+0x10>)
 8001e32:	f002 fa73 	bl	800431c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000628 	.word	0x20000628

08001e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_kill>:

int _kill(int pid, int sig)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5a:	f005 fd1d 	bl	8007898 <__errno>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2216      	movs	r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
  return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_exit>:

void _exit (int status)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ffe7 	bl	8001e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e82:	bf00      	nop
 8001e84:	e7fd      	b.n	8001e82 <_exit+0x12>

08001e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e00a      	b.n	8001eae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e98:	f3af 8000 	nop.w
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf0      	blt.n	8001e98 <_read+0x12>
  }

  return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e009      	b.n	8001ee6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	60ba      	str	r2, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf1      	blt.n	8001ed2 <_write+0x12>
  }
  return len;
 8001eee:	687b      	ldr	r3, [r7, #4]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_close>:

int _close(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f20:	605a      	str	r2, [r3, #4]
  return 0;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_isatty>:

int _isatty(int file)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	@ (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f005 fc82 	bl	8007898 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20020000 	.word	0x20020000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	20000670 	.word	0x20000670
 8001fc8:	20004518 	.word	0x20004518

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <SystemInit+0x20>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <SystemInit+0x20>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002028 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ff4:	f7ff ffea 	bl	8001fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffa:	490d      	ldr	r1, [pc, #52]	@ (8002030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8002034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002010:	4c0a      	ldr	r4, [pc, #40]	@ (800203c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201e:	f005 fc41 	bl	80078a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7ff f911 	bl	8001248 <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002034:	0800b4f4 	.word	0x0800b4f4
  ldr r2, =_sbss
 8002038:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800203c:	20004518 	.word	0x20004518

08002040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC_IRQHandler>
	...

08002044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002048:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <HAL_Init+0x40>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_Init+0x40>)
 800205a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_Init+0x40>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f001 f946 	bl	80032fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	200f      	movs	r0, #15
 8002074:	f7ff fe38 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fcde 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000674 	.word	0x20000674

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	@ (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000674 	.word	0x20000674

080020c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e033      	b.n	8002146 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fcd2 	bl	8001a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800210e:	f023 0302 	bic.w	r3, r3, #2
 8002112:	f043 0202 	orr.w	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fad8 	bl	80026d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40
 8002136:	e001      	b.n	800213c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_Start+0x1a>
 8002166:	2302      	movs	r3, #2
 8002168:	e0b2      	b.n	80022d0 <HAL_ADC_Start+0x180>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d018      	beq.n	80021b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002190:	4b52      	ldr	r3, [pc, #328]	@ (80022dc <HAL_ADC_Start+0x18c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a52      	ldr	r2, [pc, #328]	@ (80022e0 <HAL_ADC_Start+0x190>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0c9a      	lsrs	r2, r3, #18
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021a4:	e002      	b.n	80021ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f9      	bne.n	80021a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d17a      	bne.n	80022b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021fe:	d106      	bne.n	800220e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	f023 0206 	bic.w	r2, r3, #6
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	@ 0x44
 800220c:	e002      	b.n	8002214 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221c:	4b31      	ldr	r3, [pc, #196]	@ (80022e4 <HAL_ADC_Start+0x194>)
 800221e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002228:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2b00      	cmp	r3, #0
 8002234:	d12a      	bne.n	800228c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <HAL_ADC_Start+0x198>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d015      	beq.n	800226c <HAL_ADC_Start+0x11c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a29      	ldr	r2, [pc, #164]	@ (80022ec <HAL_ADC_Start+0x19c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d105      	bne.n	8002256 <HAL_ADC_Start+0x106>
 800224a:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <HAL_ADC_Start+0x194>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a25      	ldr	r2, [pc, #148]	@ (80022f0 <HAL_ADC_Start+0x1a0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d136      	bne.n	80022ce <HAL_ADC_Start+0x17e>
 8002260:	4b20      	ldr	r3, [pc, #128]	@ (80022e4 <HAL_ADC_Start+0x194>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d130      	bne.n	80022ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d129      	bne.n	80022ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	e020      	b.n	80022ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a15      	ldr	r2, [pc, #84]	@ (80022e8 <HAL_ADC_Start+0x198>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d11b      	bne.n	80022ce <HAL_ADC_Start+0x17e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d114      	bne.n	80022ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	e00b      	b.n	80022ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20000000 	.word	0x20000000
 80022e0:	431bde83 	.word	0x431bde83
 80022e4:	40012300 	.word	0x40012300
 80022e8:	40012000 	.word	0x40012000
 80022ec:	40012100 	.word	0x40012100
 80022f0:	40012200 	.word	0x40012200

080022f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Stop+0x16>
 8002306:	2302      	movs	r3, #2
 8002308:	e021      	b.n	800234e <HAL_ADC_Stop+0x5a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d113      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002386:	d10b      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e063      	b.n	8002468 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a0:	f7ff fe86 	bl	80020b0 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023a6:	e021      	b.n	80023ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ae:	d01d      	beq.n	80023ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x6c>
 80023b6:	f7ff fe7b 	bl	80020b0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d212      	bcs.n	80023ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d00b      	beq.n	80023ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f043 0204 	orr.w	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e03d      	b.n	8002468 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d1d6      	bne.n	80023a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f06f 0212 	mvn.w	r2, #18
 8002402:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d123      	bne.n	8002466 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11f      	bne.n	8002466 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800243e:	2b00      	cmp	r3, #0
 8002440:	d111      	bne.n	8002466 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1c>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e105      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x228>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d925      	bls.n	8002504 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b1e      	subs	r3, #30
 80024ce:	2207      	movs	r2, #7
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43da      	mvns	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	400a      	ands	r2, r1
 80024dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68d9      	ldr	r1, [r3, #12]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4403      	add	r3, r0
 80024f6:	3b1e      	subs	r3, #30
 80024f8:	409a      	lsls	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	e022      	b.n	800254a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6919      	ldr	r1, [r3, #16]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	2207      	movs	r2, #7
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	400a      	ands	r2, r1
 8002526:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6919      	ldr	r1, [r3, #16]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	4603      	mov	r3, r0
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4403      	add	r3, r0
 8002540:	409a      	lsls	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b06      	cmp	r3, #6
 8002550:	d824      	bhi.n	800259c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b05      	subs	r3, #5
 8002564:	221f      	movs	r2, #31
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b05      	subs	r3, #5
 800258e:	fa00 f203 	lsl.w	r2, r0, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	@ 0x34
 800259a:	e04c      	b.n	8002636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d824      	bhi.n	80025ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b23      	subs	r3, #35	@ 0x23
 80025b6:	221f      	movs	r2, #31
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43da      	mvns	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	400a      	ands	r2, r1
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b23      	subs	r3, #35	@ 0x23
 80025e0:	fa00 f203 	lsl.w	r2, r0, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80025ec:	e023      	b.n	8002636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	3b41      	subs	r3, #65	@ 0x41
 8002600:	221f      	movs	r2, #31
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	400a      	ands	r2, r1
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	3b41      	subs	r3, #65	@ 0x41
 800262a:	fa00 f203 	lsl.w	r2, r0, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002636:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <HAL_ADC_ConfigChannel+0x234>)
 8002638:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	@ (80026c4 <HAL_ADC_ConfigChannel+0x238>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d109      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1cc>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b12      	cmp	r3, #18
 800264a:	d105      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_ADC_ConfigChannel+0x238>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d123      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x21e>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b10      	cmp	r3, #16
 8002668:	d003      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x1e6>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b11      	cmp	r3, #17
 8002670:	d11b      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d111      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <HAL_ADC_ConfigChannel+0x240>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	0c9a      	lsrs	r2, r3, #18
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800269c:	e002      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f9      	bne.n	800269e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40012300 	.word	0x40012300
 80026c4:	40012000 	.word	0x40012000
 80026c8:	20000000 	.word	0x20000000
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4b79      	ldr	r3, [pc, #484]	@ (80028c0 <ADC_Init+0x1f0>)
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	4a58      	ldr	r2, [pc, #352]	@ (80028c4 <ADC_Init+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e00f      	b.n	80027ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0202 	bic.w	r2, r2, #2
 80027dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800280a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800281a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	3b01      	subs	r3, #1
 8002828:	035a      	lsls	r2, r3, #13
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e007      	b.n	8002844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002842:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002852:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	3b01      	subs	r3, #1
 8002860:	051a      	lsls	r2, r3, #20
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002886:	025a      	lsls	r2, r3, #9
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	029a      	lsls	r2, r3, #10
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012300 	.word	0x40012300
 80028c4:	0f000001 	.word	0x0f000001

080028c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0ed      	b.n	8002ab6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff f946 	bl	8001b78 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028fc:	f7ff fbd8 	bl	80020b0 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002902:	e012      	b.n	800292a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002904:	f7ff fbd4 	bl	80020b0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b0a      	cmp	r3, #10
 8002910:	d90b      	bls.n	800292a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2205      	movs	r2, #5
 8002922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0c5      	b.n	8002ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0e5      	beq.n	8002904 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0202 	bic.w	r2, r2, #2
 8002946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002948:	f7ff fbb2 	bl	80020b0 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800294e:	e012      	b.n	8002976 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002950:	f7ff fbae 	bl	80020b0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b0a      	cmp	r3, #10
 800295c:	d90b      	bls.n	8002976 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2205      	movs	r2, #5
 800296e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e09f      	b.n	8002ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e5      	bne.n	8002950 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7e1b      	ldrb	r3, [r3, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d108      	bne.n	800299e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e007      	b.n	80029ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7e5b      	ldrb	r3, [r3, #25]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e007      	b.n	80029d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7e9b      	ldrb	r3, [r3, #26]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e007      	b.n	8002a02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0220 	bic.w	r2, r2, #32
 8002a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7edb      	ldrb	r3, [r3, #27]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d108      	bne.n	8002a1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0210 	bic.w	r2, r2, #16
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e007      	b.n	8002a2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0210 	orr.w	r2, r2, #16
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7f1b      	ldrb	r3, [r3, #28]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d108      	bne.n	8002a46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0208 	orr.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e007      	b.n	8002a56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0208 	bic.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7f5b      	ldrb	r3, [r3, #29]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d108      	bne.n	8002a70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0204 	orr.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e007      	b.n	8002a80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	ea42 0103 	orr.w	r1, r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d12e      	bne.n	8002b30 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aea:	f7ff fae1 	bl	80020b0 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002af0:	e012      	b.n	8002b18 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002af2:	f7ff fadd 	bl	80020b0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b0a      	cmp	r3, #10
 8002afe:	d90b      	bls.n	8002b18 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e012      	b.n	8002b3e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e5      	bne.n	8002af2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e006      	b.n	8002b3e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b089      	sub	sp, #36	@ 0x24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <HAL_CAN_AddTxMessage+0x2c>
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f040 80ad 	bne.w	8002ccc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8095 	beq.w	8002cbc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	0e1b      	lsrs	r3, r3, #24
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	6809      	ldr	r1, [r1, #0]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	440b      	add	r3, r1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e00f      	b.n	8002bea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bd4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bde:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3318      	adds	r3, #24
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	440b      	add	r3, r1
 8002be8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	7d1b      	ldrb	r3, [r3, #20]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d111      	bne.n	8002c2a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3318      	adds	r3, #24
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	3304      	adds	r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	6811      	ldr	r1, [r2, #0]
 8002c1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3318      	adds	r3, #24
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	440b      	add	r3, r1
 8002c26:	3304      	adds	r3, #4
 8002c28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3307      	adds	r3, #7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	061a      	lsls	r2, r3, #24
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3306      	adds	r3, #6
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3305      	adds	r3, #5
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	4313      	orrs	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	3204      	adds	r2, #4
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6811      	ldr	r1, [r2, #0]
 8002c52:	ea43 0200 	orr.w	r2, r3, r0
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002c60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3303      	adds	r3, #3
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	061a      	lsls	r2, r3, #24
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	4610      	mov	r0, r2
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	6811      	ldr	r1, [r2, #0]
 8002c88:	ea43 0200 	orr.w	r2, r3, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002c96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3318      	adds	r3, #24
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	440b      	add	r3, r1
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e00e      	b.n	8002cda <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e006      	b.n	8002cda <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3724      	adds	r7, #36	@ 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <HAL_CAN_ActivateNotification+0x1e>
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d109      	bne.n	8002d18 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6959      	ldr	r1, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e006      	b.n	8002d26 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b08a      	sub	sp, #40	@ 0x28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d07c      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d023      	beq.n	8002dca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f983 	bl	80030a0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d9a:	e016      	b.n	8002dca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	e00c      	b.n	8002dca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc2:	e002      	b.n	8002dca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f989 	bl	80030dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d024      	beq.n	8002e1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f963 	bl	80030b4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dee:	e016      	b.n	8002e1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e02:	e00c      	b.n	8002e1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	e002      	b.n	8002e1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f969 	bl	80030f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d024      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f943 	bl	80030c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e42:	e016      	b.n	8002e72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	e00c      	b.n	8002e72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6a:	e002      	b.n	8002e72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f949 	bl	8003104 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2210      	movs	r2, #16
 8002e94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f93a 	bl	800312c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f921 	bl	8003118 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2208      	movs	r2, #8
 8002f14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f91c 	bl	8003154 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f903 	bl	8003140 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f906 	bl	8003168 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2208      	movs	r2, #8
 8002f76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f8ff 	bl	800317c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d07b      	beq.n	8003080 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d072      	beq.n	8003078 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d043      	beq.n	8003078 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03e      	beq.n	8003078 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003000:	2b60      	cmp	r3, #96	@ 0x60
 8003002:	d02b      	beq.n	800305c <HAL_CAN_IRQHandler+0x32a>
 8003004:	2b60      	cmp	r3, #96	@ 0x60
 8003006:	d82e      	bhi.n	8003066 <HAL_CAN_IRQHandler+0x334>
 8003008:	2b50      	cmp	r3, #80	@ 0x50
 800300a:	d022      	beq.n	8003052 <HAL_CAN_IRQHandler+0x320>
 800300c:	2b50      	cmp	r3, #80	@ 0x50
 800300e:	d82a      	bhi.n	8003066 <HAL_CAN_IRQHandler+0x334>
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	d019      	beq.n	8003048 <HAL_CAN_IRQHandler+0x316>
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d826      	bhi.n	8003066 <HAL_CAN_IRQHandler+0x334>
 8003018:	2b30      	cmp	r3, #48	@ 0x30
 800301a:	d010      	beq.n	800303e <HAL_CAN_IRQHandler+0x30c>
 800301c:	2b30      	cmp	r3, #48	@ 0x30
 800301e:	d822      	bhi.n	8003066 <HAL_CAN_IRQHandler+0x334>
 8003020:	2b10      	cmp	r3, #16
 8003022:	d002      	beq.n	800302a <HAL_CAN_IRQHandler+0x2f8>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d005      	beq.n	8003034 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003028:	e01d      	b.n	8003066 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003032:	e019      	b.n	8003068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	f043 0310 	orr.w	r3, r3, #16
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800303c:	e014      	b.n	8003068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	f043 0320 	orr.w	r3, r3, #32
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003046:	e00f      	b.n	8003068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003050:	e00a      	b.n	8003068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800305a:	e005      	b.n	8003068 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003064:	e000      	b.n	8003068 <HAL_CAN_IRQHandler+0x336>
            break;
 8003066:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003076:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2204      	movs	r2, #4
 800307e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f87c 	bl	8003190 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003098:	bf00      	nop
 800309a:	3728      	adds	r7, #40	@ 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	@ (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	@ (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	@ (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	@ 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff4c 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003326:	f7ff ff61 	bl	80031ec <__NVIC_GetPriorityGrouping>
 800332a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	6978      	ldr	r0, [r7, #20]
 8003332:	f7ff ffb1 	bl	8003298 <NVIC_EncodePriority>
 8003336:	4602      	mov	r2, r0
 8003338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff80 	bl	8003244 <__NVIC_SetPriority>
}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff54 	bl	8003208 <__NVIC_EnableIRQ>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	@ 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e16b      	b.n	800365c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003384:	2201      	movs	r2, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	f040 815a 	bne.w	8003656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d005      	beq.n	80033ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d130      	bne.n	800341c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	2203      	movs	r2, #3
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 0201 	and.w	r2, r3, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b03      	cmp	r3, #3
 8003426:	d017      	beq.n	8003458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d123      	bne.n	80034ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0203 	and.w	r2, r3, #3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80b4 	beq.w	8003656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b60      	ldr	r3, [pc, #384]	@ (8003674 <HAL_GPIO_Init+0x30c>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003674 <HAL_GPIO_Init+0x30c>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003674 <HAL_GPIO_Init+0x30c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350a:	4a5b      	ldr	r2, [pc, #364]	@ (8003678 <HAL_GPIO_Init+0x310>)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	220f      	movs	r2, #15
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a52      	ldr	r2, [pc, #328]	@ (800367c <HAL_GPIO_Init+0x314>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <HAL_GPIO_Init+0x226>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a51      	ldr	r2, [pc, #324]	@ (8003680 <HAL_GPIO_Init+0x318>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d025      	beq.n	800358a <HAL_GPIO_Init+0x222>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a50      	ldr	r2, [pc, #320]	@ (8003684 <HAL_GPIO_Init+0x31c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <HAL_GPIO_Init+0x21e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4f      	ldr	r2, [pc, #316]	@ (8003688 <HAL_GPIO_Init+0x320>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d019      	beq.n	8003582 <HAL_GPIO_Init+0x21a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4e      	ldr	r2, [pc, #312]	@ (800368c <HAL_GPIO_Init+0x324>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0x216>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4d      	ldr	r2, [pc, #308]	@ (8003690 <HAL_GPIO_Init+0x328>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00d      	beq.n	800357a <HAL_GPIO_Init+0x212>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4c      	ldr	r2, [pc, #304]	@ (8003694 <HAL_GPIO_Init+0x32c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <HAL_GPIO_Init+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4b      	ldr	r2, [pc, #300]	@ (8003698 <HAL_GPIO_Init+0x330>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_GPIO_Init+0x20a>
 800356e:	2307      	movs	r3, #7
 8003570:	e00e      	b.n	8003590 <HAL_GPIO_Init+0x228>
 8003572:	2308      	movs	r3, #8
 8003574:	e00c      	b.n	8003590 <HAL_GPIO_Init+0x228>
 8003576:	2306      	movs	r3, #6
 8003578:	e00a      	b.n	8003590 <HAL_GPIO_Init+0x228>
 800357a:	2305      	movs	r3, #5
 800357c:	e008      	b.n	8003590 <HAL_GPIO_Init+0x228>
 800357e:	2304      	movs	r3, #4
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x228>
 8003582:	2303      	movs	r3, #3
 8003584:	e004      	b.n	8003590 <HAL_GPIO_Init+0x228>
 8003586:	2302      	movs	r3, #2
 8003588:	e002      	b.n	8003590 <HAL_GPIO_Init+0x228>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x228>
 800358e:	2300      	movs	r3, #0
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	f002 0203 	and.w	r2, r2, #3
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4093      	lsls	r3, r2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a0:	4935      	ldr	r1, [pc, #212]	@ (8003678 <HAL_GPIO_Init+0x310>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <HAL_GPIO_Init+0x334>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a32      	ldr	r2, [pc, #200]	@ (800369c <HAL_GPIO_Init+0x334>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b30      	ldr	r3, [pc, #192]	@ (800369c <HAL_GPIO_Init+0x334>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a27      	ldr	r2, [pc, #156]	@ (800369c <HAL_GPIO_Init+0x334>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003602:	4b26      	ldr	r3, [pc, #152]	@ (800369c <HAL_GPIO_Init+0x334>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003626:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_GPIO_Init+0x334>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800362c:	4b1b      	ldr	r3, [pc, #108]	@ (800369c <HAL_GPIO_Init+0x334>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003650:	4a12      	ldr	r2, [pc, #72]	@ (800369c <HAL_GPIO_Init+0x334>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	f67f ae90 	bls.w	8003384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3724      	adds	r7, #36	@ 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40013800 	.word	0x40013800
 800367c:	40020000 	.word	0x40020000
 8003680:	40020400 	.word	0x40020400
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40021000 	.word	0x40021000
 8003690:	40021400 	.word	0x40021400
 8003694:	40021800 	.word	0x40021800
 8003698:	40021c00 	.word	0x40021c00
 800369c:	40013c00 	.word	0x40013c00

080036a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e001      	b.n	80036c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e0:	787b      	ldrb	r3, [r7, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ec:	e003      	b.n	80036f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	619a      	str	r2, [r3, #24]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43d9      	mvns	r1, r3
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	400b      	ands	r3, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e267      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d075      	beq.n	8003842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003756:	4b88      	ldr	r3, [pc, #544]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b04      	cmp	r3, #4
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b85      	ldr	r3, [pc, #532]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800376a:	2b08      	cmp	r3, #8
 800376c:	d112      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b82      	ldr	r3, [pc, #520]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	4b7e      	ldr	r3, [pc, #504]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05b      	beq.n	8003840 <HAL_RCC_OscConfig+0x108>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d157      	bne.n	8003840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e242      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x74>
 800379e:	4b76      	ldr	r3, [pc, #472]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x98>
 80037b6:	4b70      	ldr	r3, [pc, #448]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xb0>
 80037d0:	4b69      	ldr	r3, [pc, #420]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a68      	ldr	r2, [pc, #416]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b66      	ldr	r3, [pc, #408]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a65      	ldr	r2, [pc, #404]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fc5e 	bl	80020b0 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe fc5a 	bl	80020b0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e207      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xc0>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fc4a 	bl	80020b0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe fc46 	bl	80020b0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	@ 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1f3      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	4b51      	ldr	r3, [pc, #324]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0xe8>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d063      	beq.n	8003916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800384e:	4b4a      	ldr	r3, [pc, #296]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003862:	2b08      	cmp	r3, #8
 8003864:	d11c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b44      	ldr	r3, [pc, #272]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4b41      	ldr	r3, [pc, #260]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x152>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1c7      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b3b      	ldr	r3, [pc, #236]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4937      	ldr	r1, [pc, #220]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b34      	ldr	r3, [pc, #208]	@ (800397c <HAL_RCC_OscConfig+0x244>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe fbff 	bl	80020b0 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b6:	f7fe fbfb 	bl	80020b0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1a8      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b28      	ldr	r3, [pc, #160]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4925      	ldr	r1, [pc, #148]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b24      	ldr	r3, [pc, #144]	@ (800397c <HAL_RCC_OscConfig+0x244>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe fbde 	bl	80020b0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fe fbda 	bl	80020b0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e187      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d036      	beq.n	8003990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <HAL_RCC_OscConfig+0x248>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fe fbbe 	bl	80020b0 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fe fbba 	bl	80020b0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e167      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_RCC_OscConfig+0x240>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x200>
 8003956:	e01b      	b.n	8003990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003958:	4b09      	ldr	r3, [pc, #36]	@ (8003980 <HAL_RCC_OscConfig+0x248>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7fe fba7 	bl	80020b0 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	e00e      	b.n	8003984 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003966:	f7fe fba3 	bl	80020b0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d907      	bls.n	8003984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e150      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	4b88      	ldr	r3, [pc, #544]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ea      	bne.n	8003966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8097 	beq.w	8003acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b81      	ldr	r3, [pc, #516]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039be:	4b7a      	ldr	r3, [pc, #488]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b77      	ldr	r3, [pc, #476]	@ (8003bac <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b74      	ldr	r3, [pc, #464]	@ (8003bac <HAL_RCC_OscConfig+0x474>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a73      	ldr	r2, [pc, #460]	@ (8003bac <HAL_RCC_OscConfig+0x474>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fb63 	bl	80020b0 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe fb5f 	bl	80020b0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e10c      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b6a      	ldr	r3, [pc, #424]	@ (8003bac <HAL_RCC_OscConfig+0x474>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2ea>
 8003a14:	4b64      	ldr	r3, [pc, #400]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a18:	4a63      	ldr	r2, [pc, #396]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a20:	e01c      	b.n	8003a5c <HAL_RCC_OscConfig+0x324>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x30c>
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0x324>
 8003a44:	4b58      	ldr	r3, [pc, #352]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a57      	ldr	r2, [pc, #348]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a50:	4b55      	ldr	r3, [pc, #340]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a54:	4a54      	ldr	r2, [pc, #336]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f023 0304 	bic.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe fb24 	bl	80020b0 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fb20 	bl	80020b0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0cb      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	4b49      	ldr	r3, [pc, #292]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RCC_OscConfig+0x334>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fe fb0e 	bl	80020b0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe fb0a 	bl	80020b0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0b5      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b39      	ldr	r3, [pc, #228]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	4a38      	ldr	r2, [pc, #224]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a1 	beq.w	8003c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad6:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d05c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d141      	bne.n	8003b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fe fade 	bl	80020b0 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe fada 	bl	80020b0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e087      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	491b      	ldr	r1, [pc, #108]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b40:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fe fab3 	bl	80020b0 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fe faaf 	bl	80020b0 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e05c      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x416>
 8003b6c:	e054      	b.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fa9c 	bl	80020b0 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fe fa98 	bl	80020b0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e045      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x444>
 8003b9a:	e03d      	b.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e038      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <HAL_RCC_OscConfig+0x4ec>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d028      	beq.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d121      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0cc      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b68      	ldr	r3, [pc, #416]	@ (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d90c      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b65      	ldr	r3, [pc, #404]	@ (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b63      	ldr	r3, [pc, #396]	@ (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b8      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7c:	4b59      	ldr	r3, [pc, #356]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a58      	ldr	r2, [pc, #352]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c94:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a52      	ldr	r2, [pc, #328]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b50      	ldr	r3, [pc, #320]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	494d      	ldr	r1, [pc, #308]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d044      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d119      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e07f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e067      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b37      	ldr	r3, [pc, #220]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4934      	ldr	r1, [pc, #208]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fe f9ca 	bl	80020b0 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fe f9c6 	bl	80020b0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b25      	ldr	r3, [pc, #148]	@ (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d20c      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b22      	ldr	r3, [pc, #136]	@ (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b20      	ldr	r3, [pc, #128]	@ (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e032      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4916      	ldr	r1, [pc, #88]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9a:	4b12      	ldr	r3, [pc, #72]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	490e      	ldr	r1, [pc, #56]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dae:	f000 f821 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	490a      	ldr	r1, [pc, #40]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd ff8a 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023c00 	.word	0x40023c00
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0800b0a4 	.word	0x0800b0a4
 8003dec:	20000000 	.word	0x20000000
 8003df0:	20000004 	.word	0x20000004

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b094      	sub	sp, #80	@ 0x50
 8003dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e0c:	4b79      	ldr	r3, [pc, #484]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d00d      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x40>
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	f200 80e1 	bhi.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x34>
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e26:	e0db      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b73      	ldr	r3, [pc, #460]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e2c:	e0db      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e2e:	4b73      	ldr	r3, [pc, #460]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8003e30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e32:	e0d8      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d063      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	2200      	movs	r2, #0
 8003e52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e5e:	2300      	movs	r3, #0
 8003e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	0159      	lsls	r1, r3, #5
 8003e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e78:	0150      	lsls	r0, r2, #5
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4621      	mov	r1, r4
 8003e80:	1a51      	subs	r1, r2, r1
 8003e82:	6139      	str	r1, [r7, #16]
 8003e84:	4629      	mov	r1, r5
 8003e86:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e98:	4659      	mov	r1, fp
 8003e9a:	018b      	lsls	r3, r1, #6
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	018a      	lsls	r2, r1, #6
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8003eac:	4659      	mov	r1, fp
 8003eae:	eb63 0901 	sbc.w	r9, r3, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec6:	4690      	mov	r8, r2
 8003ec8:	4699      	mov	r9, r3
 8003eca:	4623      	mov	r3, r4
 8003ecc:	eb18 0303 	adds.w	r3, r8, r3
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	eb49 0303 	adc.w	r3, r9, r3
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	024b      	lsls	r3, r1, #9
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	024a      	lsls	r2, r1, #9
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efa:	2200      	movs	r2, #0
 8003efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f04:	f7fc fec0 	bl	8000c88 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f10:	e058      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f12:	4b38      	ldr	r3, [pc, #224]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	0159      	lsls	r1, r3, #5
 8003f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3e:	0150      	lsls	r0, r2, #5
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4641      	mov	r1, r8
 8003f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f64:	ebb2 040a 	subs.w	r4, r2, sl
 8003f68:	eb63 050b 	sbc.w	r5, r3, fp
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	00eb      	lsls	r3, r5, #3
 8003f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7a:	00e2      	lsls	r2, r4, #3
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	461d      	mov	r5, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	18e3      	adds	r3, r4, r3
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	464b      	mov	r3, r9
 8003f88:	eb45 0303 	adc.w	r3, r5, r3
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	028b      	lsls	r3, r1, #10
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	028a      	lsls	r2, r1, #10
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	61fa      	str	r2, [r7, #28]
 8003fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb8:	f7fc fe66 	bl	8000c88 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003fd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3750      	adds	r7, #80	@ 0x50
 8003fec:	46bd      	mov	sp, r7
 8003fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	00f42400 	.word	0x00f42400
 8003ffc:	007a1200 	.word	0x007a1200

08004000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_RCC_GetHCLKFreq+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000000 	.word	0x20000000

08004018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800401c:	f7ff fff0 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0a9b      	lsrs	r3, r3, #10
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	@ (800403c <HAL_RCC_GetPCLK1Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	0800b0b4 	.word	0x0800b0b4

08004040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004044:	f7ff ffdc 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0b5b      	lsrs	r3, r3, #13
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	@ (8004064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	0800b0b4 	.word	0x0800b0b4

08004068 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	220f      	movs	r2, #15
 8004076:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004078:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004084:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004090:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800409c:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	08db      	lsrs	r3, r3, #3
 80040a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040aa:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <HAL_RCC_GetClockConfig+0x60>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40023c00 	.word	0x40023c00

080040cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e041      	b.n	8004162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fd90 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fae6 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d001      	beq.n	8004184 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e046      	b.n	8004212 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <HAL_TIM_Base_Start+0xb4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d01d      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004224 <HAL_TIM_Base_Start+0xb8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <HAL_TIM_Base_Start+0xbc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1c      	ldr	r2, [pc, #112]	@ (800422c <HAL_TIM_Base_Start+0xc0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <HAL_TIM_Base_Start+0xc4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <HAL_TIM_Base_Start+0xc8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIM_Base_Start+0x70>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <HAL_TIM_Base_Start+0xcc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d111      	bne.n	8004200 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d010      	beq.n	8004210 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fe:	e007      	b.n	8004210 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40010400 	.word	0x40010400
 8004234:	40014000 	.word	0x40014000
 8004238:	40001800 	.word	0x40001800

0800423c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e04e      	b.n	80042f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a23      	ldr	r2, [pc, #140]	@ (8004300 <HAL_TIM_Base_Start_IT+0xc4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d01d      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <HAL_TIM_Base_Start_IT+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	@ (8004308 <HAL_TIM_Base_Start_IT+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1c      	ldr	r2, [pc, #112]	@ (800430c <HAL_TIM_Base_Start_IT+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004310 <HAL_TIM_Base_Start_IT+0xd4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x80>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_TIM_Base_Start_IT+0xdc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d010      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	e007      	b.n	80042f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40001800 	.word	0x40001800

0800431c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d020      	beq.n	8004380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0202 	mvn.w	r2, #2
 8004350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f999 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f98b 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f99c 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01b      	beq.n	80043cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0204 	mvn.w	r2, #4
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f973 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f965 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f976 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0208 	mvn.w	r2, #8
 80043e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f94d 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f93f 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f950 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b00      	cmp	r3, #0
 8004420:	d020      	beq.n	8004464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2208      	movs	r2, #8
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f927 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f919 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f92a 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0201 	mvn.w	r2, #1
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fd fac0 	bl	8001a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fade 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8fb 	bl	80046c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0220 	mvn.w	r2, #32
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fab0 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b4      	b.n	8004682 <HAL_TIM_ConfigClockSource+0x186>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004550:	d03e      	beq.n	80045d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004556:	f200 8087 	bhi.w	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455e:	f000 8086 	beq.w	800466e <HAL_TIM_ConfigClockSource+0x172>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d87f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b70      	cmp	r3, #112	@ 0x70
 800456a:	d01a      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xa6>
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d87b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d050      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x11a>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d877      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d03c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xfa>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d873      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d058      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x13a>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d86f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d064      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d86b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d060      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d867      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d05a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	e062      	b.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	f000 f9b3 	bl	800491c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
      break;
 80045ce:	e04f      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	f000 f99c 	bl	800491c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f2:	609a      	str	r2, [r3, #8]
      break;
 80045f4:	e03c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	461a      	mov	r2, r3
 8004604:	f000 f910 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2150      	movs	r1, #80	@ 0x50
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f969 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004614:	e02c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 f92f 	bl	8004886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2160      	movs	r1, #96	@ 0x60
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f959 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004634:	e01c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 f8f0 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2140      	movs	r1, #64	@ 0x40
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f949 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004654:	e00c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 f940 	bl	80048e6 <TIM_ITRx_SetConfig>
      break;
 8004666:	e003      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e000      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800466e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a43      	ldr	r2, [pc, #268]	@ (80047fc <TIM_Base_SetConfig+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fa:	d00f      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a40      	ldr	r2, [pc, #256]	@ (8004800 <TIM_Base_SetConfig+0x124>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00b      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3f      	ldr	r2, [pc, #252]	@ (8004804 <TIM_Base_SetConfig+0x128>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3e      	ldr	r2, [pc, #248]	@ (8004808 <TIM_Base_SetConfig+0x12c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3d      	ldr	r2, [pc, #244]	@ (800480c <TIM_Base_SetConfig+0x130>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <TIM_Base_SetConfig+0x120>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d027      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2f      	ldr	r2, [pc, #188]	@ (8004800 <TIM_Base_SetConfig+0x124>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d023      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2e      	ldr	r2, [pc, #184]	@ (8004804 <TIM_Base_SetConfig+0x128>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <TIM_Base_SetConfig+0x12c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2c      	ldr	r2, [pc, #176]	@ (800480c <TIM_Base_SetConfig+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d017      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2b      	ldr	r2, [pc, #172]	@ (8004810 <TIM_Base_SetConfig+0x134>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2a      	ldr	r2, [pc, #168]	@ (8004814 <TIM_Base_SetConfig+0x138>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a29      	ldr	r2, [pc, #164]	@ (8004818 <TIM_Base_SetConfig+0x13c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a28      	ldr	r2, [pc, #160]	@ (800481c <TIM_Base_SetConfig+0x140>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a27      	ldr	r2, [pc, #156]	@ (8004820 <TIM_Base_SetConfig+0x144>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <TIM_Base_SetConfig+0x148>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0e      	ldr	r2, [pc, #56]	@ (80047fc <TIM_Base_SetConfig+0x120>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_Base_SetConfig+0xf2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a10      	ldr	r2, [pc, #64]	@ (800480c <TIM_Base_SetConfig+0x130>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d103      	bne.n	80047d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f043 0204 	orr.w	r2, r3, #4
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40010400 	.word	0x40010400
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800
 800481c:	40001800 	.word	0x40001800
 8004820:	40001c00 	.word	0x40001c00
 8004824:	40002000 	.word	0x40002000

08004828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 030a 	bic.w	r3, r3, #10
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 0210 	bic.w	r2, r3, #16
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	031b      	lsls	r3, r3, #12
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	f043 0307 	orr.w	r3, r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	431a      	orrs	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e05a      	b.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a21      	ldr	r2, [pc, #132]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c0:	d01d      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1a      	ldr	r2, [pc, #104]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a15      	ldr	r2, [pc, #84]	@ (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10c      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40001800 	.word	0x40001800

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e042      	b.n	8004b14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd f8d8 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	@ 0x24
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f973 	bl	8004dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	@ 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d175      	bne.n	8004c28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Transmit+0x2c>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e06e      	b.n	8004c2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2221      	movs	r2, #33	@ 0x21
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5a:	f7fd faa9 	bl	80020b0 <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	88fa      	ldrh	r2, [r7, #6]
 8004b6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b74:	d108      	bne.n	8004b88 <HAL_UART_Transmit+0x6c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	e003      	b.n	8004b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b90:	e02e      	b.n	8004bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2180      	movs	r1, #128	@ 0x80
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f848 	bl	8004c32 <UART_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e03a      	b.n	8004c2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e007      	b.n	8004be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1cb      	bne.n	8004b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2140      	movs	r1, #64	@ 0x40
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f814 	bl	8004c32 <UART_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e006      	b.n	8004c2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c42:	e03b      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c4a:	d037      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fd fa30 	bl	80020b0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	6a3a      	ldr	r2, [r7, #32]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e03a      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d023      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b80      	cmp	r3, #128	@ 0x80
 8004c78:	d020      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d01d      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d116      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f81d 	bl	8004ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2208      	movs	r2, #8
 8004cae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e00f      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d0b4      	beq.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b095      	sub	sp, #84	@ 0x54
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3314      	adds	r3, #20
 8004d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d119      	bne.n	8004d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f023 0310 	bic.w	r3, r3, #16
 8004d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d7c:	61ba      	str	r2, [r7, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6979      	ldr	r1, [r7, #20]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e5      	bne.n	8004d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d9e:	bf00      	nop
 8004da0:	3754      	adds	r7, #84	@ 0x54
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0c0      	sub	sp, #256	@ 0x100
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	ea40 0301 	orr.w	r3, r0, r1
 8004dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e04:	f021 010c 	bic.w	r1, r1, #12
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	ea40 0301 	orr.w	r3, r0, r1
 8004e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005078 <UART_SetConfig+0x2cc>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d005      	beq.n	8004e4c <UART_SetConfig+0xa0>
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b8d      	ldr	r3, [pc, #564]	@ (800507c <UART_SetConfig+0x2d0>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7ff f8f8 	bl	8004040 <HAL_RCC_GetPCLK2Freq>
 8004e50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7ff f8df 	bl	8004018 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e68:	f040 810c 	bne.w	8005084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e86:	415b      	adcs	r3, r3
 8004e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e8e:	4621      	mov	r1, r4
 8004e90:	eb12 0801 	adds.w	r8, r2, r1
 8004e94:	4629      	mov	r1, r5
 8004e96:	eb43 0901 	adc.w	r9, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	eb18 0303 	adds.w	r3, r8, r3
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	eb49 0303 	adc.w	r3, r9, r3
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eda:	460b      	mov	r3, r1
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	eb42 0303 	adc.w	r3, r2, r3
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ef0:	f7fb feca 	bl	8000c88 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4b61      	ldr	r3, [pc, #388]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	011c      	lsls	r4, r3, #4
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f24:	4641      	mov	r1, r8
 8004f26:	eb12 0a01 	adds.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f44:	4692      	mov	sl, r2
 8004f46:	469b      	mov	fp, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb4b 0303 	adc.w	r3, fp, r3
 8004f58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f70:	460b      	mov	r3, r1
 8004f72:	18db      	adds	r3, r3, r3
 8004f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f76:	4613      	mov	r3, r2
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f86:	f7fb fe7f 	bl	8000c88 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004f92:	fba3 2301 	umull	r2, r3, r3, r1
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2264      	movs	r2, #100	@ 0x64
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	1acb      	subs	r3, r1, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fa6:	4b36      	ldr	r3, [pc, #216]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd8:	4641      	mov	r1, r8
 8004fda:	1851      	adds	r1, r2, r1
 8004fdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fde:	4649      	mov	r1, r9
 8004fe0:	414b      	adcs	r3, r1
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	00cb      	lsls	r3, r1, #3
 8004ff4:	4651      	mov	r1, sl
 8004ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	00ca      	lsls	r2, r1, #3
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	4603      	mov	r3, r0
 8005004:	4642      	mov	r2, r8
 8005006:	189b      	adds	r3, r3, r2
 8005008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800500c:	464b      	mov	r3, r9
 800500e:	460a      	mov	r2, r1
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005024:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800502c:	460b      	mov	r3, r1
 800502e:	18db      	adds	r3, r3, r3
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005032:	4613      	mov	r3, r2
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800503e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005042:	f7fb fe21 	bl	8000c88 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <UART_SetConfig+0x2d4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	@ 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	3332      	adds	r3, #50	@ 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <UART_SetConfig+0x2d4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005074:	e106      	b.n	8005284 <UART_SetConfig+0x4d8>
 8005076:	bf00      	nop
 8005078:	40011000 	.word	0x40011000
 800507c:	40011400 	.word	0x40011400
 8005080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800508e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005096:	4642      	mov	r2, r8
 8005098:	464b      	mov	r3, r9
 800509a:	1891      	adds	r1, r2, r2
 800509c:	6239      	str	r1, [r7, #32]
 800509e:	415b      	adcs	r3, r3
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a6:	4641      	mov	r1, r8
 80050a8:	1854      	adds	r4, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0501 	adc.w	r5, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050cc:	464b      	mov	r3, r9
 80050ce:	eb45 0303 	adc.w	r3, r5, r3
 80050d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050f2:	4629      	mov	r1, r5
 80050f4:	008b      	lsls	r3, r1, #2
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fc:	4621      	mov	r1, r4
 80050fe:	008a      	lsls	r2, r1, #2
 8005100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005104:	f7fb fdc0 	bl	8000c88 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4b60      	ldr	r3, [pc, #384]	@ (8005290 <UART_SetConfig+0x4e4>)
 800510e:	fba3 2302 	umull	r2, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	011c      	lsls	r4, r3, #4
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	1891      	adds	r1, r2, r2
 800512e:	61b9      	str	r1, [r7, #24]
 8005130:	415b      	adcs	r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005138:	4641      	mov	r1, r8
 800513a:	1851      	adds	r1, r2, r1
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	4649      	mov	r1, r9
 8005140:	414b      	adcs	r3, r1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005150:	4659      	mov	r1, fp
 8005152:	00cb      	lsls	r3, r1, #3
 8005154:	4651      	mov	r1, sl
 8005156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515a:	4651      	mov	r1, sl
 800515c:	00ca      	lsls	r2, r1, #3
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	4603      	mov	r3, r0
 8005164:	4642      	mov	r2, r8
 8005166:	189b      	adds	r3, r3, r2
 8005168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800516c:	464b      	mov	r3, r9
 800516e:	460a      	mov	r2, r1
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005190:	4649      	mov	r1, r9
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	4641      	mov	r1, r8
 8005196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519a:	4641      	mov	r1, r8
 800519c:	008a      	lsls	r2, r1, #2
 800519e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051a2:	f7fb fd71 	bl	8000c88 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	@ 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	3332      	adds	r3, #50	@ 0x32
 80051c0:	4a33      	ldr	r2, [pc, #204]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051cc:	441c      	add	r4, r3
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051dc:	4642      	mov	r2, r8
 80051de:	464b      	mov	r3, r9
 80051e0:	1891      	adds	r1, r2, r2
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	415b      	adcs	r3, r3
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ec:	4641      	mov	r1, r8
 80051ee:	1851      	adds	r1, r2, r1
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	4649      	mov	r1, r9
 80051f4:	414b      	adcs	r3, r1
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005204:	4659      	mov	r1, fp
 8005206:	00cb      	lsls	r3, r1, #3
 8005208:	4651      	mov	r1, sl
 800520a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520e:	4651      	mov	r1, sl
 8005210:	00ca      	lsls	r2, r1, #3
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	4603      	mov	r3, r0
 8005218:	4642      	mov	r2, r8
 800521a:	189b      	adds	r3, r3, r2
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800521e:	464b      	mov	r3, r9
 8005220:	460a      	mov	r2, r1
 8005222:	eb42 0303 	adc.w	r3, r2, r3
 8005226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	663b      	str	r3, [r7, #96]	@ 0x60
 8005232:	667a      	str	r2, [r7, #100]	@ 0x64
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005240:	4649      	mov	r1, r9
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524a:	4641      	mov	r1, r8
 800524c:	008a      	lsls	r2, r1, #2
 800524e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005252:	f7fb fd19 	bl	8000c88 <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <UART_SetConfig+0x4e4>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	@ 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	@ 0x32
 800526e:	4a08      	ldr	r2, [pc, #32]	@ (8005290 <UART_SetConfig+0x4e4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4422      	add	r2, r4
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800528a:	46bd      	mov	sp, r7
 800528c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005290:	51eb851f 	.word	0x51eb851f

08005294 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a6:	2b84      	cmp	r3, #132	@ 0x84
 80052a8:	d005      	beq.n	80052b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	3303      	adds	r3, #3
 80052b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052c8:	f000 fafc 	bl	80058c4 <vTaskStartScheduler>
  
  return osOK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d4:	b089      	sub	sp, #36	@ 0x24
 80052d6:	af04      	add	r7, sp, #16
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d020      	beq.n	8005326 <osThreadCreate+0x54>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01c      	beq.n	8005326 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685c      	ldr	r4, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691e      	ldr	r6, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ffc8 	bl	8005294 <makeFreeRtosPriority>
 8005304:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800530e:	9202      	str	r2, [sp, #8]
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	9100      	str	r1, [sp, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4632      	mov	r2, r6
 8005318:	4629      	mov	r1, r5
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f8ed 	bl	80054fa <xTaskCreateStatic>
 8005320:	4603      	mov	r3, r0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e01c      	b.n	8005360 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685c      	ldr	r4, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005332:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ffaa 	bl	8005294 <makeFreeRtosPriority>
 8005340:	4602      	mov	r2, r0
 8005342:	f107 030c 	add.w	r3, r7, #12
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	9200      	str	r2, [sp, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	4632      	mov	r2, r6
 800534e:	4629      	mov	r1, r5
 8005350:	4620      	mov	r0, r4
 8005352:	f000 f932 	bl	80055ba <xTaskCreate>
 8005356:	4603      	mov	r3, r0
 8005358:	2b01      	cmp	r3, #1
 800535a:	d001      	beq.n	8005360 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005360:	68fb      	ldr	r3, [r7, #12]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800536a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <osDelay+0x16>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	e000      	b.n	8005382 <osDelay+0x18>
 8005380:	2301      	movs	r3, #1
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa68 	bl	8005858 <vTaskDelay>
  
  return osOK;
 8005388:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f103 0208 	add.w	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f103 0208 	add.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f103 0208 	add.w	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800544a:	d103      	bne.n	8005454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e00c      	b.n	800546e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3308      	adds	r3, #8
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e002      	b.n	8005462 <vListInsert+0x2e>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	429a      	cmp	r2, r3
 800546c:	d2f6      	bcs.n	800545c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6892      	ldr	r2, [r2, #8]
 80054bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6852      	ldr	r2, [r2, #4]
 80054c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d103      	bne.n	80054da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b08e      	sub	sp, #56	@ 0x38
 80054fe:	af04      	add	r7, sp, #16
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	e7fd      	b.n	8005522 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <xTaskCreateStatic+0x4a>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61fb      	str	r3, [r7, #28]
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005544:	23a0      	movs	r3, #160	@ 0xa0
 8005546:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2ba0      	cmp	r3, #160	@ 0xa0
 800554c:	d00b      	beq.n	8005566 <xTaskCreateStatic+0x6c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61bb      	str	r3, [r7, #24]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005566:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01e      	beq.n	80055ac <xTaskCreateStatic+0xb2>
 800556e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	2202      	movs	r2, #2
 8005582:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005586:	2300      	movs	r3, #0
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	9302      	str	r3, [sp, #8]
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f850 	bl	8005644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055a6:	f000 f8ed 	bl	8005784 <prvAddNewTaskToReadyList>
 80055aa:	e001      	b.n	80055b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055b0:	697b      	ldr	r3, [r7, #20]
	}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3728      	adds	r7, #40	@ 0x28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08c      	sub	sp, #48	@ 0x30
 80055be:	af04      	add	r7, sp, #16
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ff02 	bl	80063d8 <pvPortMalloc>
 80055d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055dc:	20a0      	movs	r0, #160	@ 0xa0
 80055de:	f000 fefb 	bl	80063d8 <pvPortMalloc>
 80055e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80055f0:	e005      	b.n	80055fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f000 ffbe 	bl	8006574 <vPortFree>
 80055f8:	e001      	b.n	80055fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d017      	beq.n	8005634 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	2300      	movs	r3, #0
 8005610:	9303      	str	r3, [sp, #12]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f80e 	bl	8005644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005628:	69f8      	ldr	r0, [r7, #28]
 800562a:	f000 f8ab 	bl	8005784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800562e:	2301      	movs	r3, #1
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e002      	b.n	800563a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005638:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800563a:	69bb      	ldr	r3, [r7, #24]
	}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800565c:	3b01      	subs	r3, #1
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	617b      	str	r3, [r7, #20]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01f      	beq.n	80056d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e012      	b.n	80056c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	7819      	ldrb	r1, [r3, #0]
 80056a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	3334      	adds	r3, #52	@ 0x34
 80056aa:	460a      	mov	r2, r1
 80056ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3301      	adds	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d9e9      	bls.n	800569a <prvInitialiseNewTask+0x56>
 80056c6:	e000      	b.n	80056ca <prvInitialiseNewTask+0x86>
			{
				break;
 80056c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056d2:	e003      	b.n	80056dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d901      	bls.n	80056e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056e2:	2306      	movs	r3, #6
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	2200      	movs	r2, #0
 80056f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fa:	3304      	adds	r3, #4
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fe68 	bl	80053d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	3318      	adds	r3, #24
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fe63 	bl	80053d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005710:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	f1c3 0207 	rsb	r2, r3, #7
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005720:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	2200      	movs	r2, #0
 8005726:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	2200      	movs	r2, #0
 800572e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	334c      	adds	r3, #76	@ 0x4c
 8005736:	224c      	movs	r2, #76	@ 0x4c
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f001 fffb 	bl	8007736 <memset>
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	4a0d      	ldr	r2, [pc, #52]	@ (8005778 <prvInitialiseNewTask+0x134>)
 8005744:	651a      	str	r2, [r3, #80]	@ 0x50
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	4a0c      	ldr	r2, [pc, #48]	@ (800577c <prvInitialiseNewTask+0x138>)
 800574a:	655a      	str	r2, [r3, #84]	@ 0x54
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	4a0c      	ldr	r2, [pc, #48]	@ (8005780 <prvInitialiseNewTask+0x13c>)
 8005750:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	69b8      	ldr	r0, [r7, #24]
 8005758:	f000 fc2a 	bl	8005fb0 <pxPortInitialiseStack>
 800575c:	4602      	mov	r2, r0
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800576e:	bf00      	nop
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200043cc 	.word	0x200043cc
 800577c:	20004434 	.word	0x20004434
 8005780:	2000449c 	.word	0x2000449c

08005784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800578c:	f000 fd44 	bl	8006218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005790:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <prvAddNewTaskToReadyList+0xb8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	4a29      	ldr	r2, [pc, #164]	@ (800583c <prvAddNewTaskToReadyList+0xb8>)
 8005798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800579a:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <prvAddNewTaskToReadyList+0xbc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057a2:	4a27      	ldr	r2, [pc, #156]	@ (8005840 <prvAddNewTaskToReadyList+0xbc>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057a8:	4b24      	ldr	r3, [pc, #144]	@ (800583c <prvAddNewTaskToReadyList+0xb8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d110      	bne.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057b0:	f000 fad4 	bl	8005d5c <prvInitialiseTaskLists>
 80057b4:	e00d      	b.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057b6:	4b23      	ldr	r3, [pc, #140]	@ (8005844 <prvAddNewTaskToReadyList+0xc0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057be:	4b20      	ldr	r3, [pc, #128]	@ (8005840 <prvAddNewTaskToReadyList+0xbc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d802      	bhi.n	80057d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005840 <prvAddNewTaskToReadyList+0xbc>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <prvAddNewTaskToReadyList+0xc4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <prvAddNewTaskToReadyList+0xc4>)
 80057da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	4b19      	ldr	r3, [pc, #100]	@ (800584c <prvAddNewTaskToReadyList+0xc8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	4a18      	ldr	r2, [pc, #96]	@ (800584c <prvAddNewTaskToReadyList+0xc8>)
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <prvAddNewTaskToReadyList+0xcc>)
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f7ff fdf1 	bl	80053ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800580a:	f000 fd37 	bl	800627c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800580e:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <prvAddNewTaskToReadyList+0xc0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <prvAddNewTaskToReadyList+0xbc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d207      	bcs.n	8005834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <prvAddNewTaskToReadyList+0xd0>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000778 	.word	0x20000778
 8005840:	20000678 	.word	0x20000678
 8005844:	20000784 	.word	0x20000784
 8005848:	20000794 	.word	0x20000794
 800584c:	20000780 	.word	0x20000780
 8005850:	2000067c 	.word	0x2000067c
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800586a:	4b14      	ldr	r3, [pc, #80]	@ (80058bc <vTaskDelay+0x64>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <vTaskDelay+0x32>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60bb      	str	r3, [r7, #8]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800588a:	f000 f885 	bl	8005998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800588e:	2100      	movs	r1, #0
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fb27 	bl	8005ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005896:	f000 f88d 	bl	80059b4 <xTaskResumeAll>
 800589a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <vTaskDelay+0x68>)
 80058a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200007a0 	.word	0x200007a0
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058d2:	463a      	mov	r2, r7
 80058d4:	1d39      	adds	r1, r7, #4
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fb fc9a 	bl	8001214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	9202      	str	r2, [sp, #8]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	2300      	movs	r3, #0
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	460a      	mov	r2, r1
 80058f2:	4921      	ldr	r1, [pc, #132]	@ (8005978 <vTaskStartScheduler+0xb4>)
 80058f4:	4821      	ldr	r0, [pc, #132]	@ (800597c <vTaskStartScheduler+0xb8>)
 80058f6:	f7ff fe00 	bl	80054fa <xTaskCreateStatic>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4a20      	ldr	r2, [pc, #128]	@ (8005980 <vTaskStartScheduler+0xbc>)
 80058fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005900:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <vTaskStartScheduler+0xbc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e001      	b.n	8005912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d11b      	bne.n	8005950 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	613b      	str	r3, [r7, #16]
}
 800592a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800592c:	4b15      	ldr	r3, [pc, #84]	@ (8005984 <vTaskStartScheduler+0xc0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	334c      	adds	r3, #76	@ 0x4c
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <vTaskStartScheduler+0xc4>)
 8005934:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005936:	4b15      	ldr	r3, [pc, #84]	@ (800598c <vTaskStartScheduler+0xc8>)
 8005938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800593c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800593e:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <vTaskStartScheduler+0xcc>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005944:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <vTaskStartScheduler+0xd0>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800594a:	f000 fbc1 	bl	80060d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800594e:	e00f      	b.n	8005970 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005956:	d10b      	bne.n	8005970 <vTaskStartScheduler+0xac>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <vTaskStartScheduler+0xa8>
}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	0800b09c 	.word	0x0800b09c
 800597c:	08005d2d 	.word	0x08005d2d
 8005980:	2000079c 	.word	0x2000079c
 8005984:	20000678 	.word	0x20000678
 8005988:	2000001c 	.word	0x2000001c
 800598c:	20000798 	.word	0x20000798
 8005990:	20000784 	.word	0x20000784
 8005994:	2000077c 	.word	0x2000077c

08005998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800599c:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <vTaskSuspendAll+0x18>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a03      	ldr	r2, [pc, #12]	@ (80059b0 <vTaskSuspendAll+0x18>)
 80059a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	200007a0 	.word	0x200007a0

080059b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059c2:	4b42      	ldr	r3, [pc, #264]	@ (8005acc <xTaskResumeAll+0x118>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	603b      	str	r3, [r7, #0]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059e2:	f000 fc19 	bl	8006218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059e6:	4b39      	ldr	r3, [pc, #228]	@ (8005acc <xTaskResumeAll+0x118>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4a37      	ldr	r2, [pc, #220]	@ (8005acc <xTaskResumeAll+0x118>)
 80059ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f0:	4b36      	ldr	r3, [pc, #216]	@ (8005acc <xTaskResumeAll+0x118>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d161      	bne.n	8005abc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059f8:	4b35      	ldr	r3, [pc, #212]	@ (8005ad0 <xTaskResumeAll+0x11c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05d      	beq.n	8005abc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a00:	e02e      	b.n	8005a60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a02:	4b34      	ldr	r3, [pc, #208]	@ (8005ad4 <xTaskResumeAll+0x120>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fd49 	bl	80054a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fd44 	bl	80054a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	2201      	movs	r2, #1
 8005a24:	409a      	lsls	r2, r3
 8005a26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad8 <xTaskResumeAll+0x124>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad8 <xTaskResumeAll+0x124>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a27      	ldr	r2, [pc, #156]	@ (8005adc <xTaskResumeAll+0x128>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7ff fcd0 	bl	80053ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	4b23      	ldr	r3, [pc, #140]	@ (8005ae0 <xTaskResumeAll+0x12c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ae4 <xTaskResumeAll+0x130>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a60:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad4 <xTaskResumeAll+0x120>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1cc      	bne.n	8005a02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a6e:	f000 fa19 	bl	8005ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae8 <xTaskResumeAll+0x134>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a7e:	f000 f837 	bl	8005af0 <xTaskIncrementTick>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a88:	4b16      	ldr	r3, [pc, #88]	@ (8005ae4 <xTaskResumeAll+0x130>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f1      	bne.n	8005a7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <xTaskResumeAll+0x134>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005aa0:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <xTaskResumeAll+0x130>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005aac:	4b0f      	ldr	r3, [pc, #60]	@ (8005aec <xTaskResumeAll+0x138>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005abc:	f000 fbde 	bl	800627c <vPortExitCritical>

	return xAlreadyYielded;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200007a0 	.word	0x200007a0
 8005ad0:	20000778 	.word	0x20000778
 8005ad4:	20000738 	.word	0x20000738
 8005ad8:	20000780 	.word	0x20000780
 8005adc:	2000067c 	.word	0x2000067c
 8005ae0:	20000678 	.word	0x20000678
 8005ae4:	2000078c 	.word	0x2000078c
 8005ae8:	20000788 	.word	0x20000788
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005afa:	4b4f      	ldr	r3, [pc, #316]	@ (8005c38 <xTaskIncrementTick+0x148>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 808f 	bne.w	8005c22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b04:	4b4d      	ldr	r3, [pc, #308]	@ (8005c3c <xTaskIncrementTick+0x14c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8005c3c <xTaskIncrementTick+0x14c>)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d121      	bne.n	8005b5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b18:	4b49      	ldr	r3, [pc, #292]	@ (8005c40 <xTaskIncrementTick+0x150>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	603b      	str	r3, [r7, #0]
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	e7fd      	b.n	8005b36 <xTaskIncrementTick+0x46>
 8005b3a:	4b41      	ldr	r3, [pc, #260]	@ (8005c40 <xTaskIncrementTick+0x150>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	4b40      	ldr	r3, [pc, #256]	@ (8005c44 <xTaskIncrementTick+0x154>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a3e      	ldr	r2, [pc, #248]	@ (8005c40 <xTaskIncrementTick+0x150>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	4a3e      	ldr	r2, [pc, #248]	@ (8005c44 <xTaskIncrementTick+0x154>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c48 <xTaskIncrementTick+0x158>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a3c      	ldr	r2, [pc, #240]	@ (8005c48 <xTaskIncrementTick+0x158>)
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	f000 f9a4 	bl	8005ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <xTaskIncrementTick+0x15c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d348      	bcc.n	8005bf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b66:	4b36      	ldr	r3, [pc, #216]	@ (8005c40 <xTaskIncrementTick+0x150>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b70:	4b36      	ldr	r3, [pc, #216]	@ (8005c4c <xTaskIncrementTick+0x15c>)
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b76:	601a      	str	r2, [r3, #0]
					break;
 8005b78:	e03e      	b.n	8005bf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7a:	4b31      	ldr	r3, [pc, #196]	@ (8005c40 <xTaskIncrementTick+0x150>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d203      	bcs.n	8005b9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b92:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <xTaskIncrementTick+0x15c>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b98:	e02e      	b.n	8005bf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fc81 	bl	80054a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fc78 	bl	80054a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	2201      	movs	r2, #1
 8005bbc:	409a      	lsls	r2, r3
 8005bbe:	4b24      	ldr	r3, [pc, #144]	@ (8005c50 <xTaskIncrementTick+0x160>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <xTaskIncrementTick+0x160>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c54 <xTaskIncrementTick+0x164>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7ff fc04 	bl	80053ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <xTaskIncrementTick+0x168>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d3b9      	bcc.n	8005b66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf6:	e7b6      	b.n	8005b66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bf8:	4b17      	ldr	r3, [pc, #92]	@ (8005c58 <xTaskIncrementTick+0x168>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfe:	4915      	ldr	r1, [pc, #84]	@ (8005c54 <xTaskIncrementTick+0x164>)
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d901      	bls.n	8005c14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c14:	4b11      	ldr	r3, [pc, #68]	@ (8005c5c <xTaskIncrementTick+0x16c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e004      	b.n	8005c2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c22:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <xTaskIncrementTick+0x170>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a0d      	ldr	r2, [pc, #52]	@ (8005c60 <xTaskIncrementTick+0x170>)
 8005c2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c2c:	697b      	ldr	r3, [r7, #20]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	200007a0 	.word	0x200007a0
 8005c3c:	2000077c 	.word	0x2000077c
 8005c40:	20000730 	.word	0x20000730
 8005c44:	20000734 	.word	0x20000734
 8005c48:	20000790 	.word	0x20000790
 8005c4c:	20000798 	.word	0x20000798
 8005c50:	20000780 	.word	0x20000780
 8005c54:	2000067c 	.word	0x2000067c
 8005c58:	20000678 	.word	0x20000678
 8005c5c:	2000078c 	.word	0x2000078c
 8005c60:	20000788 	.word	0x20000788

08005c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d14 <vTaskSwitchContext+0xb0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c72:	4b29      	ldr	r3, [pc, #164]	@ (8005d18 <vTaskSwitchContext+0xb4>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c78:	e045      	b.n	8005d06 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005c7a:	4b27      	ldr	r3, [pc, #156]	@ (8005d18 <vTaskSwitchContext+0xb4>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c80:	4b26      	ldr	r3, [pc, #152]	@ (8005d1c <vTaskSwitchContext+0xb8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	fab3 f383 	clz	r3, r3
 8005c8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	f1c3 031f 	rsb	r3, r3, #31
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	4922      	ldr	r1, [pc, #136]	@ (8005d20 <vTaskSwitchContext+0xbc>)
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	607b      	str	r3, [r7, #4]
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	e7fd      	b.n	8005cbe <vTaskSwitchContext+0x5a>
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4a14      	ldr	r2, [pc, #80]	@ (8005d20 <vTaskSwitchContext+0xbc>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d104      	bne.n	8005cf2 <vTaskSwitchContext+0x8e>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8005d24 <vTaskSwitchContext+0xc0>)
 8005cfa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cfc:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <vTaskSwitchContext+0xc0>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	334c      	adds	r3, #76	@ 0x4c
 8005d02:	4a09      	ldr	r2, [pc, #36]	@ (8005d28 <vTaskSwitchContext+0xc4>)
 8005d04:	6013      	str	r3, [r2, #0]
}
 8005d06:	bf00      	nop
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	200007a0 	.word	0x200007a0
 8005d18:	2000078c 	.word	0x2000078c
 8005d1c:	20000780 	.word	0x20000780
 8005d20:	2000067c 	.word	0x2000067c
 8005d24:	20000678 	.word	0x20000678
 8005d28:	2000001c 	.word	0x2000001c

08005d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d34:	f000 f852 	bl	8005ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <prvIdleTask+0x28>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d9f9      	bls.n	8005d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <prvIdleTask+0x2c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d50:	e7f0      	b.n	8005d34 <prvIdleTask+0x8>
 8005d52:	bf00      	nop
 8005d54:	2000067c 	.word	0x2000067c
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e00c      	b.n	8005d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a12      	ldr	r2, [pc, #72]	@ (8005dbc <prvInitialiseTaskLists+0x60>)
 8005d74:	4413      	add	r3, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fb0b 	bl	8005392 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b06      	cmp	r3, #6
 8005d86:	d9ef      	bls.n	8005d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d88:	480d      	ldr	r0, [pc, #52]	@ (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005d8a:	f7ff fb02 	bl	8005392 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d8e:	480d      	ldr	r0, [pc, #52]	@ (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005d90:	f7ff faff 	bl	8005392 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d94:	480c      	ldr	r0, [pc, #48]	@ (8005dc8 <prvInitialiseTaskLists+0x6c>)
 8005d96:	f7ff fafc 	bl	8005392 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d9a:	480c      	ldr	r0, [pc, #48]	@ (8005dcc <prvInitialiseTaskLists+0x70>)
 8005d9c:	f7ff faf9 	bl	8005392 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005da0:	480b      	ldr	r0, [pc, #44]	@ (8005dd0 <prvInitialiseTaskLists+0x74>)
 8005da2:	f7ff faf6 	bl	8005392 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <prvInitialiseTaskLists+0x78>)
 8005da8:	4a05      	ldr	r2, [pc, #20]	@ (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <prvInitialiseTaskLists+0x7c>)
 8005dae:	4a05      	ldr	r2, [pc, #20]	@ (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	2000067c 	.word	0x2000067c
 8005dc0:	20000708 	.word	0x20000708
 8005dc4:	2000071c 	.word	0x2000071c
 8005dc8:	20000738 	.word	0x20000738
 8005dcc:	2000074c 	.word	0x2000074c
 8005dd0:	20000764 	.word	0x20000764
 8005dd4:	20000730 	.word	0x20000730
 8005dd8:	20000734 	.word	0x20000734

08005ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de2:	e019      	b.n	8005e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005de4:	f000 fa18 	bl	8006218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <prvCheckTasksWaitingTermination+0x50>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fb56 	bl	80054a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a0b      	ldr	r2, [pc, #44]	@ (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e0e:	f000 fa35 	bl	800627c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f810 	bl	8005e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e1      	bne.n	8005de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2000074c 	.word	0x2000074c
 8005e30:	20000778 	.word	0x20000778
 8005e34:	20000760 	.word	0x20000760

08005e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	334c      	adds	r3, #76	@ 0x4c
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fc93 	bl	8007770 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fb8b 	bl	8006574 <vPortFree>
				vPortFree( pxTCB );
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fb88 	bl	8006574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e64:	e019      	b.n	8005e9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d103      	bne.n	8005e78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fb7f 	bl	8006574 <vPortFree>
	}
 8005e76:	e010      	b.n	8005e9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d00b      	beq.n	8005e9a <prvDeleteTCB+0x62>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <prvDeleteTCB+0x5e>
	}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8005edc <prvResetNextTaskUnblockTime+0x38>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ebc:	e008      	b.n	8005ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebe:	4b07      	ldr	r3, [pc, #28]	@ (8005edc <prvResetNextTaskUnblockTime+0x38>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a04      	ldr	r2, [pc, #16]	@ (8005ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ece:	6013      	str	r3, [r2, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20000730 	.word	0x20000730
 8005ee0:	20000798 	.word	0x20000798

08005ee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eee:	4b29      	ldr	r3, [pc, #164]	@ (8005f94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef4:	4b28      	ldr	r3, [pc, #160]	@ (8005f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fad3 	bl	80054a6 <uxListRemove>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f06:	4b24      	ldr	r3, [pc, #144]	@ (8005f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43da      	mvns	r2, r3
 8005f14:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	4a20      	ldr	r2, [pc, #128]	@ (8005f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f24:	d10a      	bne.n	8005f3c <prvAddCurrentTaskToDelayedList+0x58>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	481a      	ldr	r0, [pc, #104]	@ (8005fa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f36:	f7ff fa59 	bl	80053ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f3a:	e026      	b.n	8005f8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4413      	add	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f44:	4b14      	ldr	r3, [pc, #80]	@ (8005f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d209      	bcs.n	8005f68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f54:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b0f      	ldr	r3, [pc, #60]	@ (8005f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f7ff fa67 	bl	8005434 <vListInsert>
}
 8005f66:	e010      	b.n	8005f8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f68:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7ff fa5d 	bl	8005434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d202      	bcs.n	8005f8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f84:	4a09      	ldr	r2, [pc, #36]	@ (8005fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6013      	str	r3, [r2, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	2000077c 	.word	0x2000077c
 8005f98:	20000678 	.word	0x20000678
 8005f9c:	20000780 	.word	0x20000780
 8005fa0:	20000764 	.word	0x20000764
 8005fa4:	20000734 	.word	0x20000734
 8005fa8:	20000730 	.word	0x20000730
 8005fac:	20000798 	.word	0x20000798

08005fb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b04      	subs	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8006014 <pxPortInitialiseStack+0x64>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b14      	subs	r3, #20
 8005fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f06f 0202 	mvn.w	r2, #2
 8005ffe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3b20      	subs	r3, #32
 8006004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	08006019 	.word	0x08006019

08006018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006022:	4b13      	ldr	r3, [pc, #76]	@ (8006070 <prvTaskExitError+0x58>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800602a:	d00b      	beq.n	8006044 <prvTaskExitError+0x2c>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <prvTaskExitError+0x28>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60bb      	str	r3, [r7, #8]
}
 8006056:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006058:	bf00      	nop
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0fc      	beq.n	800605a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	2000000c 	.word	0x2000000c
	...

08006080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006080:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <pxCurrentTCBConst2>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	6808      	ldr	r0, [r1, #0]
 8006086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	f380 8809 	msr	PSP, r0
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	4770      	bx	lr
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst2>:
 80060a0:	20000678 	.word	0x20000678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop

080060a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060a8:	4808      	ldr	r0, [pc, #32]	@ (80060cc <prvPortStartFirstTask+0x24>)
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	6800      	ldr	r0, [r0, #0]
 80060ae:	f380 8808 	msr	MSP, r0
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f380 8814 	msr	CONTROL, r0
 80060ba:	b662      	cpsie	i
 80060bc:	b661      	cpsie	f
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	df00      	svc	0
 80060c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ca:	bf00      	nop
 80060cc:	e000ed08 	.word	0xe000ed08

080060d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060d6:	4b47      	ldr	r3, [pc, #284]	@ (80061f4 <xPortStartScheduler+0x124>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a47      	ldr	r2, [pc, #284]	@ (80061f8 <xPortStartScheduler+0x128>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10b      	bne.n	80060f8 <xPortStartScheduler+0x28>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060f8:	4b3e      	ldr	r3, [pc, #248]	@ (80061f4 <xPortStartScheduler+0x124>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3f      	ldr	r2, [pc, #252]	@ (80061fc <xPortStartScheduler+0x12c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10b      	bne.n	800611a <xPortStartScheduler+0x4a>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	613b      	str	r3, [r7, #16]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800611a:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <xPortStartScheduler+0x130>)
 800611c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	22ff      	movs	r2, #255	@ 0xff
 800612a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b31      	ldr	r3, [pc, #196]	@ (8006204 <xPortStartScheduler+0x134>)
 8006140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006142:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <xPortStartScheduler+0x138>)
 8006144:	2207      	movs	r2, #7
 8006146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006148:	e009      	b.n	800615e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800614a:	4b2f      	ldr	r3, [pc, #188]	@ (8006208 <xPortStartScheduler+0x138>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	4a2d      	ldr	r2, [pc, #180]	@ (8006208 <xPortStartScheduler+0x138>)
 8006152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006166:	2b80      	cmp	r3, #128	@ 0x80
 8006168:	d0ef      	beq.n	800614a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800616a:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <xPortStartScheduler+0x138>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1c3 0307 	rsb	r3, r3, #7
 8006172:	2b04      	cmp	r3, #4
 8006174:	d00b      	beq.n	800618e <xPortStartScheduler+0xbe>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60bb      	str	r3, [r7, #8]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800618e:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <xPortStartScheduler+0x138>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	4a1c      	ldr	r2, [pc, #112]	@ (8006208 <xPortStartScheduler+0x138>)
 8006196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <xPortStartScheduler+0x138>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061a0:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <xPortStartScheduler+0x138>)
 80061a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061ac:	4b17      	ldr	r3, [pc, #92]	@ (800620c <xPortStartScheduler+0x13c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a16      	ldr	r2, [pc, #88]	@ (800620c <xPortStartScheduler+0x13c>)
 80061b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061b8:	4b14      	ldr	r3, [pc, #80]	@ (800620c <xPortStartScheduler+0x13c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a13      	ldr	r2, [pc, #76]	@ (800620c <xPortStartScheduler+0x13c>)
 80061be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061c4:	f000 f8da 	bl	800637c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061c8:	4b11      	ldr	r3, [pc, #68]	@ (8006210 <xPortStartScheduler+0x140>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061ce:	f000 f8f9 	bl	80063c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <xPortStartScheduler+0x144>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006214 <xPortStartScheduler+0x144>)
 80061d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061de:	f7ff ff63 	bl	80060a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061e2:	f7ff fd3f 	bl	8005c64 <vTaskSwitchContext>
	prvTaskExitError();
 80061e6:	f7ff ff17 	bl	8006018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	e000ed00 	.word	0xe000ed00
 80061f8:	410fc271 	.word	0x410fc271
 80061fc:	410fc270 	.word	0x410fc270
 8006200:	e000e400 	.word	0xe000e400
 8006204:	200007a4 	.word	0x200007a4
 8006208:	200007a8 	.word	0x200007a8
 800620c:	e000ed20 	.word	0xe000ed20
 8006210:	2000000c 	.word	0x2000000c
 8006214:	e000ef34 	.word	0xe000ef34

08006218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006232:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <vPortEnterCritical+0x5c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a0e      	ldr	r2, [pc, #56]	@ (8006274 <vPortEnterCritical+0x5c>)
 800623a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800623c:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <vPortEnterCritical+0x5c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d110      	bne.n	8006266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006244:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <vPortEnterCritical+0x60>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <vPortEnterCritical+0x4e>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	603b      	str	r3, [r7, #0]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <vPortEnterCritical+0x4a>
	}
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006282:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <vPortExitCritical+0x26>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	607b      	str	r3, [r7, #4]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <vPortExitCritical+0x50>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a08      	ldr	r2, [pc, #32]	@ (80062cc <vPortExitCritical+0x50>)
 80062aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062ac:	4b07      	ldr	r3, [pc, #28]	@ (80062cc <vPortExitCritical+0x50>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <vPortExitCritical+0x44>
 80062b4:	2300      	movs	r3, #0
 80062b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	2000000c 	.word	0x2000000c

080062d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062d0:	f3ef 8009 	mrs	r0, PSP
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <pxCurrentTCBConst>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f01e 0f10 	tst.w	lr, #16
 80062e0:	bf08      	it	eq
 80062e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80062f4:	f380 8811 	msr	BASEPRI, r0
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f7ff fcb0 	bl	8005c64 <vTaskSwitchContext>
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f380 8811 	msr	BASEPRI, r0
 800630c:	bc09      	pop	{r0, r3}
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006316:	f01e 0f10 	tst.w	lr, #16
 800631a:	bf08      	it	eq
 800631c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006320:	f380 8809 	msr	PSP, r0
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst>:
 8006330:	20000678 	.word	0x20000678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	607b      	str	r3, [r7, #4]
}
 8006350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006352:	f7ff fbcd 	bl	8005af0 <xTaskIncrementTick>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800635c:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <SysTick_Handler+0x40>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f383 8811 	msr	BASEPRI, r3
}
 800636e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006380:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <vPortSetupTimerInterrupt+0x34>)
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006386:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <vPortSetupTimerInterrupt+0x38>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800638c:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <vPortSetupTimerInterrupt+0x3c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <vPortSetupTimerInterrupt+0x40>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	4a09      	ldr	r2, [pc, #36]	@ (80063c0 <vPortSetupTimerInterrupt+0x44>)
 800639a:	3b01      	subs	r3, #1
 800639c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800639e:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <vPortSetupTimerInterrupt+0x34>)
 80063a0:	2207      	movs	r2, #7
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e010 	.word	0xe000e010
 80063b4:	e000e018 	.word	0xe000e018
 80063b8:	20000000 	.word	0x20000000
 80063bc:	10624dd3 	.word	0x10624dd3
 80063c0:	e000e014 	.word	0xe000e014

080063c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80063d4 <vPortEnableVFP+0x10>
 80063c8:	6801      	ldr	r1, [r0, #0]
 80063ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063ce:	6001      	str	r1, [r0, #0]
 80063d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063d2:	bf00      	nop
 80063d4:	e000ed88 	.word	0xe000ed88

080063d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063e4:	f7ff fad8 	bl	8005998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063e8:	4b5c      	ldr	r3, [pc, #368]	@ (800655c <pvPortMalloc+0x184>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063f0:	f000 f924 	bl	800663c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006560 <pvPortMalloc+0x188>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8095 	bne.w	800652c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01e      	beq.n	8006446 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006408:	2208      	movs	r2, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d015      	beq.n	8006446 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f023 0307 	bic.w	r3, r3, #7
 8006420:	3308      	adds	r3, #8
 8006422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <pvPortMalloc+0x6e>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	617b      	str	r3, [r7, #20]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d06f      	beq.n	800652c <pvPortMalloc+0x154>
 800644c:	4b45      	ldr	r3, [pc, #276]	@ (8006564 <pvPortMalloc+0x18c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d86a      	bhi.n	800652c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006456:	4b44      	ldr	r3, [pc, #272]	@ (8006568 <pvPortMalloc+0x190>)
 8006458:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800645a:	4b43      	ldr	r3, [pc, #268]	@ (8006568 <pvPortMalloc+0x190>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006460:	e004      	b.n	800646c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d903      	bls.n	800647e <pvPortMalloc+0xa6>
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f1      	bne.n	8006462 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800647e:	4b37      	ldr	r3, [pc, #220]	@ (800655c <pvPortMalloc+0x184>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006484:	429a      	cmp	r2, r3
 8006486:	d051      	beq.n	800652c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2208      	movs	r2, #8
 800648e:	4413      	add	r3, r2
 8006490:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	2308      	movs	r3, #8
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d920      	bls.n	80064ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00b      	beq.n	80064d4 <pvPortMalloc+0xfc>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	613b      	str	r3, [r7, #16]
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	e7fd      	b.n	80064d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064e6:	69b8      	ldr	r0, [r7, #24]
 80064e8:	f000 f90a 	bl	8006700 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006564 <pvPortMalloc+0x18c>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006564 <pvPortMalloc+0x18c>)
 80064f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006564 <pvPortMalloc+0x18c>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b1b      	ldr	r3, [pc, #108]	@ (800656c <pvPortMalloc+0x194>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d203      	bcs.n	800650e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006506:	4b17      	ldr	r3, [pc, #92]	@ (8006564 <pvPortMalloc+0x18c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a18      	ldr	r2, [pc, #96]	@ (800656c <pvPortMalloc+0x194>)
 800650c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4b13      	ldr	r3, [pc, #76]	@ (8006560 <pvPortMalloc+0x188>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	431a      	orrs	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006522:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <pvPortMalloc+0x198>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3301      	adds	r3, #1
 8006528:	4a11      	ldr	r2, [pc, #68]	@ (8006570 <pvPortMalloc+0x198>)
 800652a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800652c:	f7ff fa42 	bl	80059b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <pvPortMalloc+0x17a>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60fb      	str	r3, [r7, #12]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <pvPortMalloc+0x176>
	return pvReturn;
 8006552:	69fb      	ldr	r3, [r7, #28]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3728      	adds	r7, #40	@ 0x28
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200043b4 	.word	0x200043b4
 8006560:	200043c8 	.word	0x200043c8
 8006564:	200043b8 	.word	0x200043b8
 8006568:	200043ac 	.word	0x200043ac
 800656c:	200043bc 	.word	0x200043bc
 8006570:	200043c0 	.word	0x200043c0

08006574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d04f      	beq.n	8006626 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006586:	2308      	movs	r3, #8
 8006588:	425b      	negs	r3, r3
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	4b25      	ldr	r3, [pc, #148]	@ (8006630 <vPortFree+0xbc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <vPortFree+0x46>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	60fb      	str	r3, [r7, #12]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <vPortFree+0x66>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60bb      	str	r3, [r7, #8]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <vPortFree+0xbc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01e      	beq.n	8006626 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11a      	bne.n	8006626 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006630 <vPortFree+0xbc>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	401a      	ands	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006600:	f7ff f9ca 	bl	8005998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	4b0a      	ldr	r3, [pc, #40]	@ (8006634 <vPortFree+0xc0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4413      	add	r3, r2
 800660e:	4a09      	ldr	r2, [pc, #36]	@ (8006634 <vPortFree+0xc0>)
 8006610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006612:	6938      	ldr	r0, [r7, #16]
 8006614:	f000 f874 	bl	8006700 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006618:	4b07      	ldr	r3, [pc, #28]	@ (8006638 <vPortFree+0xc4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a06      	ldr	r2, [pc, #24]	@ (8006638 <vPortFree+0xc4>)
 8006620:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006622:	f7ff f9c7 	bl	80059b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200043c8 	.word	0x200043c8
 8006634:	200043b8 	.word	0x200043b8
 8006638:	200043c4 	.word	0x200043c4

0800663c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006642:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006646:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006648:	4b27      	ldr	r3, [pc, #156]	@ (80066e8 <prvHeapInit+0xac>)
 800664a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00c      	beq.n	8006670 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3307      	adds	r3, #7
 800665a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0307 	bic.w	r3, r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	4a1f      	ldr	r2, [pc, #124]	@ (80066e8 <prvHeapInit+0xac>)
 800666c:	4413      	add	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006674:	4a1d      	ldr	r2, [pc, #116]	@ (80066ec <prvHeapInit+0xb0>)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800667a:	4b1c      	ldr	r3, [pc, #112]	@ (80066ec <prvHeapInit+0xb0>)
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4413      	add	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006688:	2208      	movs	r2, #8
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4a15      	ldr	r2, [pc, #84]	@ (80066f0 <prvHeapInit+0xb4>)
 800669c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800669e:	4b14      	ldr	r3, [pc, #80]	@ (80066f0 <prvHeapInit+0xb4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066a6:	4b12      	ldr	r3, [pc, #72]	@ (80066f0 <prvHeapInit+0xb4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066bc:	4b0c      	ldr	r3, [pc, #48]	@ (80066f0 <prvHeapInit+0xb4>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4a0a      	ldr	r2, [pc, #40]	@ (80066f4 <prvHeapInit+0xb8>)
 80066ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a09      	ldr	r2, [pc, #36]	@ (80066f8 <prvHeapInit+0xbc>)
 80066d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066d4:	4b09      	ldr	r3, [pc, #36]	@ (80066fc <prvHeapInit+0xc0>)
 80066d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80066da:	601a      	str	r2, [r3, #0]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	200007ac 	.word	0x200007ac
 80066ec:	200043ac 	.word	0x200043ac
 80066f0:	200043b4 	.word	0x200043b4
 80066f4:	200043bc 	.word	0x200043bc
 80066f8:	200043b8 	.word	0x200043b8
 80066fc:	200043c8 	.word	0x200043c8

08006700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <prvInsertBlockIntoFreeList+0xac>)
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e002      	b.n	8006714 <prvInsertBlockIntoFreeList+0x14>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	429a      	cmp	r2, r3
 800671c:	d8f7      	bhi.n	800670e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	4413      	add	r3, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d108      	bne.n	8006742 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	441a      	add	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	441a      	add	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d118      	bne.n	8006788 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b15      	ldr	r3, [pc, #84]	@ (80067b0 <prvInsertBlockIntoFreeList+0xb0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d00d      	beq.n	800677e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e008      	b.n	8006790 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800677e:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e003      	b.n	8006790 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d002      	beq.n	800679e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	200043ac 	.word	0x200043ac
 80067b0:	200043b4 	.word	0x200043b4

080067b4 <__cvt>:
 80067b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	ec57 6b10 	vmov	r6, r7, d0
 80067bc:	2f00      	cmp	r7, #0
 80067be:	460c      	mov	r4, r1
 80067c0:	4619      	mov	r1, r3
 80067c2:	463b      	mov	r3, r7
 80067c4:	bfbb      	ittet	lt
 80067c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067ca:	461f      	movlt	r7, r3
 80067cc:	2300      	movge	r3, #0
 80067ce:	232d      	movlt	r3, #45	@ 0x2d
 80067d0:	700b      	strb	r3, [r1, #0]
 80067d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067d8:	4691      	mov	r9, r2
 80067da:	f023 0820 	bic.w	r8, r3, #32
 80067de:	bfbc      	itt	lt
 80067e0:	4632      	movlt	r2, r6
 80067e2:	4616      	movlt	r6, r2
 80067e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067e8:	d005      	beq.n	80067f6 <__cvt+0x42>
 80067ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067ee:	d100      	bne.n	80067f2 <__cvt+0x3e>
 80067f0:	3401      	adds	r4, #1
 80067f2:	2102      	movs	r1, #2
 80067f4:	e000      	b.n	80067f8 <__cvt+0x44>
 80067f6:	2103      	movs	r1, #3
 80067f8:	ab03      	add	r3, sp, #12
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	ab02      	add	r3, sp, #8
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	ec47 6b10 	vmov	d0, r6, r7
 8006804:	4653      	mov	r3, sl
 8006806:	4622      	mov	r2, r4
 8006808:	f001 f912 	bl	8007a30 <_dtoa_r>
 800680c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006810:	4605      	mov	r5, r0
 8006812:	d119      	bne.n	8006848 <__cvt+0x94>
 8006814:	f019 0f01 	tst.w	r9, #1
 8006818:	d00e      	beq.n	8006838 <__cvt+0x84>
 800681a:	eb00 0904 	add.w	r9, r0, r4
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4630      	mov	r0, r6
 8006824:	4639      	mov	r1, r7
 8006826:	f7fa f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800682a:	b108      	cbz	r0, 8006830 <__cvt+0x7c>
 800682c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006830:	2230      	movs	r2, #48	@ 0x30
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	454b      	cmp	r3, r9
 8006836:	d31e      	bcc.n	8006876 <__cvt+0xc2>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800683c:	1b5b      	subs	r3, r3, r5
 800683e:	4628      	mov	r0, r5
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	b004      	add	sp, #16
 8006844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800684c:	eb00 0904 	add.w	r9, r0, r4
 8006850:	d1e5      	bne.n	800681e <__cvt+0x6a>
 8006852:	7803      	ldrb	r3, [r0, #0]
 8006854:	2b30      	cmp	r3, #48	@ 0x30
 8006856:	d10a      	bne.n	800686e <__cvt+0xba>
 8006858:	2200      	movs	r2, #0
 800685a:	2300      	movs	r3, #0
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7fa f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8006864:	b918      	cbnz	r0, 800686e <__cvt+0xba>
 8006866:	f1c4 0401 	rsb	r4, r4, #1
 800686a:	f8ca 4000 	str.w	r4, [sl]
 800686e:	f8da 3000 	ldr.w	r3, [sl]
 8006872:	4499      	add	r9, r3
 8006874:	e7d3      	b.n	800681e <__cvt+0x6a>
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	9103      	str	r1, [sp, #12]
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e7d9      	b.n	8006832 <__cvt+0x7e>

0800687e <__exponent>:
 800687e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006880:	2900      	cmp	r1, #0
 8006882:	bfba      	itte	lt
 8006884:	4249      	neglt	r1, r1
 8006886:	232d      	movlt	r3, #45	@ 0x2d
 8006888:	232b      	movge	r3, #43	@ 0x2b
 800688a:	2909      	cmp	r1, #9
 800688c:	7002      	strb	r2, [r0, #0]
 800688e:	7043      	strb	r3, [r0, #1]
 8006890:	dd29      	ble.n	80068e6 <__exponent+0x68>
 8006892:	f10d 0307 	add.w	r3, sp, #7
 8006896:	461d      	mov	r5, r3
 8006898:	270a      	movs	r7, #10
 800689a:	461a      	mov	r2, r3
 800689c:	fbb1 f6f7 	udiv	r6, r1, r7
 80068a0:	fb07 1416 	mls	r4, r7, r6, r1
 80068a4:	3430      	adds	r4, #48	@ 0x30
 80068a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068aa:	460c      	mov	r4, r1
 80068ac:	2c63      	cmp	r4, #99	@ 0x63
 80068ae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80068b2:	4631      	mov	r1, r6
 80068b4:	dcf1      	bgt.n	800689a <__exponent+0x1c>
 80068b6:	3130      	adds	r1, #48	@ 0x30
 80068b8:	1e94      	subs	r4, r2, #2
 80068ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068be:	1c41      	adds	r1, r0, #1
 80068c0:	4623      	mov	r3, r4
 80068c2:	42ab      	cmp	r3, r5
 80068c4:	d30a      	bcc.n	80068dc <__exponent+0x5e>
 80068c6:	f10d 0309 	add.w	r3, sp, #9
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	42ac      	cmp	r4, r5
 80068ce:	bf88      	it	hi
 80068d0:	2300      	movhi	r3, #0
 80068d2:	3302      	adds	r3, #2
 80068d4:	4403      	add	r3, r0
 80068d6:	1a18      	subs	r0, r3, r0
 80068d8:	b003      	add	sp, #12
 80068da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068e4:	e7ed      	b.n	80068c2 <__exponent+0x44>
 80068e6:	2330      	movs	r3, #48	@ 0x30
 80068e8:	3130      	adds	r1, #48	@ 0x30
 80068ea:	7083      	strb	r3, [r0, #2]
 80068ec:	70c1      	strb	r1, [r0, #3]
 80068ee:	1d03      	adds	r3, r0, #4
 80068f0:	e7f1      	b.n	80068d6 <__exponent+0x58>
	...

080068f4 <_printf_float>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	b08d      	sub	sp, #52	@ 0x34
 80068fa:	460c      	mov	r4, r1
 80068fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006900:	4616      	mov	r6, r2
 8006902:	461f      	mov	r7, r3
 8006904:	4605      	mov	r5, r0
 8006906:	f000 ff1f 	bl	8007748 <_localeconv_r>
 800690a:	6803      	ldr	r3, [r0, #0]
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	4618      	mov	r0, r3
 8006910:	f7f9 fcae 	bl	8000270 <strlen>
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	f8d8 3000 	ldr.w	r3, [r8]
 800691c:	9005      	str	r0, [sp, #20]
 800691e:	3307      	adds	r3, #7
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	f103 0208 	add.w	r2, r3, #8
 8006928:	f894 a018 	ldrb.w	sl, [r4, #24]
 800692c:	f8d4 b000 	ldr.w	fp, [r4]
 8006930:	f8c8 2000 	str.w	r2, [r8]
 8006934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006938:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800693c:	9307      	str	r3, [sp, #28]
 800693e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bbc <_printf_float+0x2c8>)
 800694c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006950:	f7fa f8ec 	bl	8000b2c <__aeabi_dcmpun>
 8006954:	bb70      	cbnz	r0, 80069b4 <_printf_float+0xc0>
 8006956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695a:	4b98      	ldr	r3, [pc, #608]	@ (8006bbc <_printf_float+0x2c8>)
 800695c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006960:	f7fa f8c6 	bl	8000af0 <__aeabi_dcmple>
 8006964:	bb30      	cbnz	r0, 80069b4 <_printf_float+0xc0>
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7fa f8b5 	bl	8000adc <__aeabi_dcmplt>
 8006972:	b110      	cbz	r0, 800697a <_printf_float+0x86>
 8006974:	232d      	movs	r3, #45	@ 0x2d
 8006976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800697a:	4a91      	ldr	r2, [pc, #580]	@ (8006bc0 <_printf_float+0x2cc>)
 800697c:	4b91      	ldr	r3, [pc, #580]	@ (8006bc4 <_printf_float+0x2d0>)
 800697e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006982:	bf8c      	ite	hi
 8006984:	4690      	movhi	r8, r2
 8006986:	4698      	movls	r8, r3
 8006988:	2303      	movs	r3, #3
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	f02b 0304 	bic.w	r3, fp, #4
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	9700      	str	r7, [sp, #0]
 8006998:	4633      	mov	r3, r6
 800699a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f9d2 	bl	8006d48 <_printf_common>
 80069a4:	3001      	adds	r0, #1
 80069a6:	f040 808d 	bne.w	8006ac4 <_printf_float+0x1d0>
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069ae:	b00d      	add	sp, #52	@ 0x34
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	4649      	mov	r1, r9
 80069bc:	f7fa f8b6 	bl	8000b2c <__aeabi_dcmpun>
 80069c0:	b140      	cbz	r0, 80069d4 <_printf_float+0xe0>
 80069c2:	464b      	mov	r3, r9
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfbc      	itt	lt
 80069c8:	232d      	movlt	r3, #45	@ 0x2d
 80069ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069ce:	4a7e      	ldr	r2, [pc, #504]	@ (8006bc8 <_printf_float+0x2d4>)
 80069d0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bcc <_printf_float+0x2d8>)
 80069d2:	e7d4      	b.n	800697e <_printf_float+0x8a>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069da:	9206      	str	r2, [sp, #24]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	d13b      	bne.n	8006a58 <_printf_float+0x164>
 80069e0:	2306      	movs	r3, #6
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069e8:	2300      	movs	r3, #0
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80069f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069f4:	ab09      	add	r3, sp, #36	@ 0x24
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	ec49 8b10 	vmov	d0, r8, r9
 80069fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7ff fed6 	bl	80067b4 <__cvt>
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a0c:	2b47      	cmp	r3, #71	@ 0x47
 8006a0e:	4680      	mov	r8, r0
 8006a10:	d129      	bne.n	8006a66 <_printf_float+0x172>
 8006a12:	1cc8      	adds	r0, r1, #3
 8006a14:	db02      	blt.n	8006a1c <_printf_float+0x128>
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	dd41      	ble.n	8006aa0 <_printf_float+0x1ac>
 8006a1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a20:	fa5f fa8a 	uxtb.w	sl, sl
 8006a24:	3901      	subs	r1, #1
 8006a26:	4652      	mov	r2, sl
 8006a28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a2e:	f7ff ff26 	bl	800687e <__exponent>
 8006a32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a34:	1813      	adds	r3, r2, r0
 8006a36:	2a01      	cmp	r2, #1
 8006a38:	4681      	mov	r9, r0
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	dc02      	bgt.n	8006a44 <_printf_float+0x150>
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	07d2      	lsls	r2, r2, #31
 8006a42:	d501      	bpl.n	8006a48 <_printf_float+0x154>
 8006a44:	3301      	adds	r3, #1
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0a2      	beq.n	8006996 <_printf_float+0xa2>
 8006a50:	232d      	movs	r3, #45	@ 0x2d
 8006a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a56:	e79e      	b.n	8006996 <_printf_float+0xa2>
 8006a58:	9a06      	ldr	r2, [sp, #24]
 8006a5a:	2a47      	cmp	r2, #71	@ 0x47
 8006a5c:	d1c2      	bne.n	80069e4 <_printf_float+0xf0>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1c0      	bne.n	80069e4 <_printf_float+0xf0>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7bd      	b.n	80069e2 <_printf_float+0xee>
 8006a66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a6a:	d9db      	bls.n	8006a24 <_printf_float+0x130>
 8006a6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a70:	d118      	bne.n	8006aa4 <_printf_float+0x1b0>
 8006a72:	2900      	cmp	r1, #0
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	dd0b      	ble.n	8006a90 <_printf_float+0x19c>
 8006a78:	6121      	str	r1, [r4, #16]
 8006a7a:	b913      	cbnz	r3, 8006a82 <_printf_float+0x18e>
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	07d0      	lsls	r0, r2, #31
 8006a80:	d502      	bpl.n	8006a88 <_printf_float+0x194>
 8006a82:	3301      	adds	r3, #1
 8006a84:	440b      	add	r3, r1
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a8a:	f04f 0900 	mov.w	r9, #0
 8006a8e:	e7db      	b.n	8006a48 <_printf_float+0x154>
 8006a90:	b913      	cbnz	r3, 8006a98 <_printf_float+0x1a4>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	07d2      	lsls	r2, r2, #31
 8006a96:	d501      	bpl.n	8006a9c <_printf_float+0x1a8>
 8006a98:	3302      	adds	r3, #2
 8006a9a:	e7f4      	b.n	8006a86 <_printf_float+0x192>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e7f2      	b.n	8006a86 <_printf_float+0x192>
 8006aa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	db05      	blt.n	8006ab6 <_printf_float+0x1c2>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	6121      	str	r1, [r4, #16]
 8006aae:	07d8      	lsls	r0, r3, #31
 8006ab0:	d5ea      	bpl.n	8006a88 <_printf_float+0x194>
 8006ab2:	1c4b      	adds	r3, r1, #1
 8006ab4:	e7e7      	b.n	8006a86 <_printf_float+0x192>
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	bfd4      	ite	le
 8006aba:	f1c1 0202 	rsble	r2, r1, #2
 8006abe:	2201      	movgt	r2, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	e7e0      	b.n	8006a86 <_printf_float+0x192>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	055a      	lsls	r2, r3, #21
 8006ac8:	d407      	bmi.n	8006ada <_printf_float+0x1e6>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d12b      	bne.n	8006b30 <_printf_float+0x23c>
 8006ad8:	e767      	b.n	80069aa <_printf_float+0xb6>
 8006ada:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ade:	f240 80dd 	bls.w	8006c9c <_printf_float+0x3a8>
 8006ae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f7f9 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d033      	beq.n	8006b5a <_printf_float+0x266>
 8006af2:	4a37      	ldr	r2, [pc, #220]	@ (8006bd0 <_printf_float+0x2dc>)
 8006af4:	2301      	movs	r3, #1
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f af54 	beq.w	80069aa <_printf_float+0xb6>
 8006b02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b06:	4543      	cmp	r3, r8
 8006b08:	db02      	blt.n	8006b10 <_printf_float+0x21c>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	07d8      	lsls	r0, r3, #31
 8006b0e:	d50f      	bpl.n	8006b30 <_printf_float+0x23c>
 8006b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af45 	beq.w	80069aa <_printf_float+0xb6>
 8006b20:	f04f 0900 	mov.w	r9, #0
 8006b24:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006b28:	f104 0a1a 	add.w	sl, r4, #26
 8006b2c:	45c8      	cmp	r8, r9
 8006b2e:	dc09      	bgt.n	8006b44 <_printf_float+0x250>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	079b      	lsls	r3, r3, #30
 8006b34:	f100 8103 	bmi.w	8006d3e <_printf_float+0x44a>
 8006b38:	68e0      	ldr	r0, [r4, #12]
 8006b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b3c:	4298      	cmp	r0, r3
 8006b3e:	bfb8      	it	lt
 8006b40:	4618      	movlt	r0, r3
 8006b42:	e734      	b.n	80069ae <_printf_float+0xba>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4652      	mov	r2, sl
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af2b 	beq.w	80069aa <_printf_float+0xb6>
 8006b54:	f109 0901 	add.w	r9, r9, #1
 8006b58:	e7e8      	b.n	8006b2c <_printf_float+0x238>
 8006b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc39      	bgt.n	8006bd4 <_printf_float+0x2e0>
 8006b60:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <_printf_float+0x2dc>)
 8006b62:	2301      	movs	r3, #1
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f af1d 	beq.w	80069aa <_printf_float+0xb6>
 8006b70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b74:	ea59 0303 	orrs.w	r3, r9, r3
 8006b78:	d102      	bne.n	8006b80 <_printf_float+0x28c>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	07d9      	lsls	r1, r3, #31
 8006b7e:	d5d7      	bpl.n	8006b30 <_printf_float+0x23c>
 8006b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af0d 	beq.w	80069aa <_printf_float+0xb6>
 8006b90:	f04f 0a00 	mov.w	sl, #0
 8006b94:	f104 0b1a 	add.w	fp, r4, #26
 8006b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9a:	425b      	negs	r3, r3
 8006b9c:	4553      	cmp	r3, sl
 8006b9e:	dc01      	bgt.n	8006ba4 <_printf_float+0x2b0>
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	e793      	b.n	8006acc <_printf_float+0x1d8>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f aefb 	beq.w	80069aa <_printf_float+0xb6>
 8006bb4:	f10a 0a01 	add.w	sl, sl, #1
 8006bb8:	e7ee      	b.n	8006b98 <_printf_float+0x2a4>
 8006bba:	bf00      	nop
 8006bbc:	7fefffff 	.word	0x7fefffff
 8006bc0:	0800b0c0 	.word	0x0800b0c0
 8006bc4:	0800b0bc 	.word	0x0800b0bc
 8006bc8:	0800b0c8 	.word	0x0800b0c8
 8006bcc:	0800b0c4 	.word	0x0800b0c4
 8006bd0:	0800b0cc 	.word	0x0800b0cc
 8006bd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	bfa8      	it	ge
 8006bde:	4653      	movge	r3, sl
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	4699      	mov	r9, r3
 8006be4:	dc36      	bgt.n	8006c54 <_printf_float+0x360>
 8006be6:	f04f 0b00 	mov.w	fp, #0
 8006bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bee:	f104 021a 	add.w	r2, r4, #26
 8006bf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	eba3 0309 	sub.w	r3, r3, r9
 8006bfa:	455b      	cmp	r3, fp
 8006bfc:	dc31      	bgt.n	8006c62 <_printf_float+0x36e>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	459a      	cmp	sl, r3
 8006c02:	dc3a      	bgt.n	8006c7a <_printf_float+0x386>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07da      	lsls	r2, r3, #31
 8006c08:	d437      	bmi.n	8006c7a <_printf_float+0x386>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c10:	9b06      	ldr	r3, [sp, #24]
 8006c12:	ebaa 0303 	sub.w	r3, sl, r3
 8006c16:	4599      	cmp	r9, r3
 8006c18:	bfa8      	it	ge
 8006c1a:	4699      	movge	r9, r3
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	dc33      	bgt.n	8006c8a <_printf_float+0x396>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c2a:	f104 0b1a 	add.w	fp, r4, #26
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	ebaa 0303 	sub.w	r3, sl, r3
 8006c34:	eba3 0309 	sub.w	r3, r3, r9
 8006c38:	4543      	cmp	r3, r8
 8006c3a:	f77f af79 	ble.w	8006b30 <_printf_float+0x23c>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	465a      	mov	r2, fp
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f aeae 	beq.w	80069aa <_printf_float+0xb6>
 8006c4e:	f108 0801 	add.w	r8, r8, #1
 8006c52:	e7ec      	b.n	8006c2e <_printf_float+0x33a>
 8006c54:	4642      	mov	r2, r8
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d1c2      	bne.n	8006be6 <_printf_float+0x2f2>
 8006c60:	e6a3      	b.n	80069aa <_printf_float+0xb6>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	9206      	str	r2, [sp, #24]
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae9c 	beq.w	80069aa <_printf_float+0xb6>
 8006c72:	9a06      	ldr	r2, [sp, #24]
 8006c74:	f10b 0b01 	add.w	fp, fp, #1
 8006c78:	e7bb      	b.n	8006bf2 <_printf_float+0x2fe>
 8006c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	d1c0      	bne.n	8006c0a <_printf_float+0x316>
 8006c88:	e68f      	b.n	80069aa <_printf_float+0xb6>
 8006c8a:	9a06      	ldr	r2, [sp, #24]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	4442      	add	r2, r8
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	d1c3      	bne.n	8006c22 <_printf_float+0x32e>
 8006c9a:	e686      	b.n	80069aa <_printf_float+0xb6>
 8006c9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ca0:	f1ba 0f01 	cmp.w	sl, #1
 8006ca4:	dc01      	bgt.n	8006caa <_printf_float+0x3b6>
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d536      	bpl.n	8006d18 <_printf_float+0x424>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4642      	mov	r2, r8
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae78 	beq.w	80069aa <_printf_float+0xb6>
 8006cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f43f ae70 	beq.w	80069aa <_printf_float+0xb6>
 8006cca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006cd6:	f7f9 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cda:	b9c0      	cbnz	r0, 8006d0e <_printf_float+0x41a>
 8006cdc:	4653      	mov	r3, sl
 8006cde:	f108 0201 	add.w	r2, r8, #1
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d10c      	bne.n	8006d06 <_printf_float+0x412>
 8006cec:	e65d      	b.n	80069aa <_printf_float+0xb6>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	465a      	mov	r2, fp
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f ae56 	beq.w	80069aa <_printf_float+0xb6>
 8006cfe:	f108 0801 	add.w	r8, r8, #1
 8006d02:	45d0      	cmp	r8, sl
 8006d04:	dbf3      	blt.n	8006cee <_printf_float+0x3fa>
 8006d06:	464b      	mov	r3, r9
 8006d08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d0c:	e6df      	b.n	8006ace <_printf_float+0x1da>
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	f104 0b1a 	add.w	fp, r4, #26
 8006d16:	e7f4      	b.n	8006d02 <_printf_float+0x40e>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	e7e1      	b.n	8006ce2 <_printf_float+0x3ee>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	464a      	mov	r2, r9
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f ae3e 	beq.w	80069aa <_printf_float+0xb6>
 8006d2e:	f108 0801 	add.w	r8, r8, #1
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	dcf0      	bgt.n	8006d1e <_printf_float+0x42a>
 8006d3c:	e6fc      	b.n	8006b38 <_printf_float+0x244>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	f104 0919 	add.w	r9, r4, #25
 8006d46:	e7f4      	b.n	8006d32 <_printf_float+0x43e>

08006d48 <_printf_common>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	4698      	mov	r8, r3
 8006d50:	688a      	ldr	r2, [r1, #8]
 8006d52:	690b      	ldr	r3, [r1, #16]
 8006d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bfb8      	it	lt
 8006d5c:	4613      	movlt	r3, r2
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d64:	4607      	mov	r7, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b10a      	cbz	r2, 8006d6e <_printf_common+0x26>
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	0699      	lsls	r1, r3, #26
 8006d72:	bf42      	ittt	mi
 8006d74:	6833      	ldrmi	r3, [r6, #0]
 8006d76:	3302      	addmi	r3, #2
 8006d78:	6033      	strmi	r3, [r6, #0]
 8006d7a:	6825      	ldr	r5, [r4, #0]
 8006d7c:	f015 0506 	ands.w	r5, r5, #6
 8006d80:	d106      	bne.n	8006d90 <_printf_common+0x48>
 8006d82:	f104 0a19 	add.w	sl, r4, #25
 8006d86:	68e3      	ldr	r3, [r4, #12]
 8006d88:	6832      	ldr	r2, [r6, #0]
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	42ab      	cmp	r3, r5
 8006d8e:	dc26      	bgt.n	8006dde <_printf_common+0x96>
 8006d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	3b00      	subs	r3, #0
 8006d98:	bf18      	it	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	0692      	lsls	r2, r2, #26
 8006d9e:	d42b      	bmi.n	8006df8 <_printf_common+0xb0>
 8006da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006da4:	4641      	mov	r1, r8
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c8      	blx	r9
 8006daa:	3001      	adds	r0, #1
 8006dac:	d01e      	beq.n	8006dec <_printf_common+0xa4>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	f003 0306 	and.w	r3, r3, #6
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	bf02      	ittt	eq
 8006dba:	68e5      	ldreq	r5, [r4, #12]
 8006dbc:	6833      	ldreq	r3, [r6, #0]
 8006dbe:	1aed      	subeq	r5, r5, r3
 8006dc0:	68a3      	ldr	r3, [r4, #8]
 8006dc2:	bf0c      	ite	eq
 8006dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dc8:	2500      	movne	r5, #0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	bfc4      	itt	gt
 8006dce:	1a9b      	subgt	r3, r3, r2
 8006dd0:	18ed      	addgt	r5, r5, r3
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	341a      	adds	r4, #26
 8006dd6:	42b5      	cmp	r5, r6
 8006dd8:	d11a      	bne.n	8006e10 <_printf_common+0xc8>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e008      	b.n	8006df0 <_printf_common+0xa8>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4652      	mov	r2, sl
 8006de2:	4641      	mov	r1, r8
 8006de4:	4638      	mov	r0, r7
 8006de6:	47c8      	blx	r9
 8006de8:	3001      	adds	r0, #1
 8006dea:	d103      	bne.n	8006df4 <_printf_common+0xac>
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	3501      	adds	r5, #1
 8006df6:	e7c6      	b.n	8006d86 <_printf_common+0x3e>
 8006df8:	18e1      	adds	r1, r4, r3
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	2030      	movs	r0, #48	@ 0x30
 8006dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e02:	4422      	add	r2, r4
 8006e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	e7c7      	b.n	8006da0 <_printf_common+0x58>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4622      	mov	r2, r4
 8006e14:	4641      	mov	r1, r8
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c8      	blx	r9
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d0e6      	beq.n	8006dec <_printf_common+0xa4>
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7d9      	b.n	8006dd6 <_printf_common+0x8e>
	...

08006e24 <_printf_i>:
 8006e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	7e0f      	ldrb	r7, [r1, #24]
 8006e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e2c:	2f78      	cmp	r7, #120	@ 0x78
 8006e2e:	4691      	mov	r9, r2
 8006e30:	4680      	mov	r8, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	469a      	mov	sl, r3
 8006e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e3a:	d807      	bhi.n	8006e4c <_printf_i+0x28>
 8006e3c:	2f62      	cmp	r7, #98	@ 0x62
 8006e3e:	d80a      	bhi.n	8006e56 <_printf_i+0x32>
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	f000 80d1 	beq.w	8006fe8 <_printf_i+0x1c4>
 8006e46:	2f58      	cmp	r7, #88	@ 0x58
 8006e48:	f000 80b8 	beq.w	8006fbc <_printf_i+0x198>
 8006e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e54:	e03a      	b.n	8006ecc <_printf_i+0xa8>
 8006e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e5a:	2b15      	cmp	r3, #21
 8006e5c:	d8f6      	bhi.n	8006e4c <_printf_i+0x28>
 8006e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e64 <_printf_i+0x40>)
 8006e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006e4d 	.word	0x08006e4d
 8006e70:	08006e4d 	.word	0x08006e4d
 8006e74:	08006e4d 	.word	0x08006e4d
 8006e78:	08006e4d 	.word	0x08006e4d
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006e4d 	.word	0x08006e4d
 8006e84:	08006e4d 	.word	0x08006e4d
 8006e88:	08006e4d 	.word	0x08006e4d
 8006e8c:	08006e4d 	.word	0x08006e4d
 8006e90:	08006fcf 	.word	0x08006fcf
 8006e94:	08006efb 	.word	0x08006efb
 8006e98:	08006f89 	.word	0x08006f89
 8006e9c:	08006e4d 	.word	0x08006e4d
 8006ea0:	08006e4d 	.word	0x08006e4d
 8006ea4:	08006ff1 	.word	0x08006ff1
 8006ea8:	08006e4d 	.word	0x08006e4d
 8006eac:	08006efb 	.word	0x08006efb
 8006eb0:	08006e4d 	.word	0x08006e4d
 8006eb4:	08006e4d 	.word	0x08006e4d
 8006eb8:	08006f91 	.word	0x08006f91
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6032      	str	r2, [r6, #0]
 8006ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e09c      	b.n	800700a <_printf_i+0x1e6>
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	1d19      	adds	r1, r3, #4
 8006ed6:	6031      	str	r1, [r6, #0]
 8006ed8:	0606      	lsls	r6, r0, #24
 8006eda:	d501      	bpl.n	8006ee0 <_printf_i+0xbc>
 8006edc:	681d      	ldr	r5, [r3, #0]
 8006ede:	e003      	b.n	8006ee8 <_printf_i+0xc4>
 8006ee0:	0645      	lsls	r5, r0, #25
 8006ee2:	d5fb      	bpl.n	8006edc <_printf_i+0xb8>
 8006ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	da03      	bge.n	8006ef4 <_printf_i+0xd0>
 8006eec:	232d      	movs	r3, #45	@ 0x2d
 8006eee:	426d      	negs	r5, r5
 8006ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef4:	4858      	ldr	r0, [pc, #352]	@ (8007058 <_printf_i+0x234>)
 8006ef6:	230a      	movs	r3, #10
 8006ef8:	e011      	b.n	8006f1e <_printf_i+0xfa>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	0608      	lsls	r0, r1, #24
 8006f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f04:	d402      	bmi.n	8006f0c <_printf_i+0xe8>
 8006f06:	0649      	lsls	r1, r1, #25
 8006f08:	bf48      	it	mi
 8006f0a:	b2ad      	uxthmi	r5, r5
 8006f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f0e:	4852      	ldr	r0, [pc, #328]	@ (8007058 <_printf_i+0x234>)
 8006f10:	6033      	str	r3, [r6, #0]
 8006f12:	bf14      	ite	ne
 8006f14:	230a      	movne	r3, #10
 8006f16:	2308      	moveq	r3, #8
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f1e:	6866      	ldr	r6, [r4, #4]
 8006f20:	60a6      	str	r6, [r4, #8]
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	db05      	blt.n	8006f32 <_printf_i+0x10e>
 8006f26:	6821      	ldr	r1, [r4, #0]
 8006f28:	432e      	orrs	r6, r5
 8006f2a:	f021 0104 	bic.w	r1, r1, #4
 8006f2e:	6021      	str	r1, [r4, #0]
 8006f30:	d04b      	beq.n	8006fca <_printf_i+0x1a6>
 8006f32:	4616      	mov	r6, r2
 8006f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f38:	fb03 5711 	mls	r7, r3, r1, r5
 8006f3c:	5dc7      	ldrb	r7, [r0, r7]
 8006f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f42:	462f      	mov	r7, r5
 8006f44:	42bb      	cmp	r3, r7
 8006f46:	460d      	mov	r5, r1
 8006f48:	d9f4      	bls.n	8006f34 <_printf_i+0x110>
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d10b      	bne.n	8006f66 <_printf_i+0x142>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	07df      	lsls	r7, r3, #31
 8006f52:	d508      	bpl.n	8006f66 <_printf_i+0x142>
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	6861      	ldr	r1, [r4, #4]
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	bfde      	ittt	le
 8006f5c:	2330      	movle	r3, #48	@ 0x30
 8006f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f62:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f66:	1b92      	subs	r2, r2, r6
 8006f68:	6122      	str	r2, [r4, #16]
 8006f6a:	f8cd a000 	str.w	sl, [sp]
 8006f6e:	464b      	mov	r3, r9
 8006f70:	aa03      	add	r2, sp, #12
 8006f72:	4621      	mov	r1, r4
 8006f74:	4640      	mov	r0, r8
 8006f76:	f7ff fee7 	bl	8006d48 <_printf_common>
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d14a      	bne.n	8007014 <_printf_i+0x1f0>
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f82:	b004      	add	sp, #16
 8006f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	f043 0320 	orr.w	r3, r3, #32
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	4832      	ldr	r0, [pc, #200]	@ (800705c <_printf_i+0x238>)
 8006f92:	2778      	movs	r7, #120	@ 0x78
 8006f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	6831      	ldr	r1, [r6, #0]
 8006f9c:	061f      	lsls	r7, r3, #24
 8006f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fa2:	d402      	bmi.n	8006faa <_printf_i+0x186>
 8006fa4:	065f      	lsls	r7, r3, #25
 8006fa6:	bf48      	it	mi
 8006fa8:	b2ad      	uxthmi	r5, r5
 8006faa:	6031      	str	r1, [r6, #0]
 8006fac:	07d9      	lsls	r1, r3, #31
 8006fae:	bf44      	itt	mi
 8006fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8006fb4:	6023      	strmi	r3, [r4, #0]
 8006fb6:	b11d      	cbz	r5, 8006fc0 <_printf_i+0x19c>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	e7ad      	b.n	8006f18 <_printf_i+0xf4>
 8006fbc:	4826      	ldr	r0, [pc, #152]	@ (8007058 <_printf_i+0x234>)
 8006fbe:	e7e9      	b.n	8006f94 <_printf_i+0x170>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	f023 0320 	bic.w	r3, r3, #32
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	e7f6      	b.n	8006fb8 <_printf_i+0x194>
 8006fca:	4616      	mov	r6, r2
 8006fcc:	e7bd      	b.n	8006f4a <_printf_i+0x126>
 8006fce:	6833      	ldr	r3, [r6, #0]
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	6961      	ldr	r1, [r4, #20]
 8006fd4:	1d18      	adds	r0, r3, #4
 8006fd6:	6030      	str	r0, [r6, #0]
 8006fd8:	062e      	lsls	r6, r5, #24
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	d501      	bpl.n	8006fe2 <_printf_i+0x1be>
 8006fde:	6019      	str	r1, [r3, #0]
 8006fe0:	e002      	b.n	8006fe8 <_printf_i+0x1c4>
 8006fe2:	0668      	lsls	r0, r5, #25
 8006fe4:	d5fb      	bpl.n	8006fde <_printf_i+0x1ba>
 8006fe6:	8019      	strh	r1, [r3, #0]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	4616      	mov	r6, r2
 8006fee:	e7bc      	b.n	8006f6a <_printf_i+0x146>
 8006ff0:	6833      	ldr	r3, [r6, #0]
 8006ff2:	1d1a      	adds	r2, r3, #4
 8006ff4:	6032      	str	r2, [r6, #0]
 8006ff6:	681e      	ldr	r6, [r3, #0]
 8006ff8:	6862      	ldr	r2, [r4, #4]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7f9 f8e7 	bl	80001d0 <memchr>
 8007002:	b108      	cbz	r0, 8007008 <_printf_i+0x1e4>
 8007004:	1b80      	subs	r0, r0, r6
 8007006:	6060      	str	r0, [r4, #4]
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	6123      	str	r3, [r4, #16]
 800700c:	2300      	movs	r3, #0
 800700e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007012:	e7aa      	b.n	8006f6a <_printf_i+0x146>
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	4632      	mov	r2, r6
 8007018:	4649      	mov	r1, r9
 800701a:	4640      	mov	r0, r8
 800701c:	47d0      	blx	sl
 800701e:	3001      	adds	r0, #1
 8007020:	d0ad      	beq.n	8006f7e <_printf_i+0x15a>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	079b      	lsls	r3, r3, #30
 8007026:	d413      	bmi.n	8007050 <_printf_i+0x22c>
 8007028:	68e0      	ldr	r0, [r4, #12]
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	4298      	cmp	r0, r3
 800702e:	bfb8      	it	lt
 8007030:	4618      	movlt	r0, r3
 8007032:	e7a6      	b.n	8006f82 <_printf_i+0x15e>
 8007034:	2301      	movs	r3, #1
 8007036:	4632      	mov	r2, r6
 8007038:	4649      	mov	r1, r9
 800703a:	4640      	mov	r0, r8
 800703c:	47d0      	blx	sl
 800703e:	3001      	adds	r0, #1
 8007040:	d09d      	beq.n	8006f7e <_printf_i+0x15a>
 8007042:	3501      	adds	r5, #1
 8007044:	68e3      	ldr	r3, [r4, #12]
 8007046:	9903      	ldr	r1, [sp, #12]
 8007048:	1a5b      	subs	r3, r3, r1
 800704a:	42ab      	cmp	r3, r5
 800704c:	dcf2      	bgt.n	8007034 <_printf_i+0x210>
 800704e:	e7eb      	b.n	8007028 <_printf_i+0x204>
 8007050:	2500      	movs	r5, #0
 8007052:	f104 0619 	add.w	r6, r4, #25
 8007056:	e7f5      	b.n	8007044 <_printf_i+0x220>
 8007058:	0800b0ce 	.word	0x0800b0ce
 800705c:	0800b0df 	.word	0x0800b0df

08007060 <_scanf_float>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b087      	sub	sp, #28
 8007066:	4691      	mov	r9, r2
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	688b      	ldr	r3, [r1, #8]
 800706c:	1e5a      	subs	r2, r3, #1
 800706e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007072:	bf81      	itttt	hi
 8007074:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007078:	eb03 0b05 	addhi.w	fp, r3, r5
 800707c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007080:	608b      	strhi	r3, [r1, #8]
 8007082:	680b      	ldr	r3, [r1, #0]
 8007084:	460a      	mov	r2, r1
 8007086:	f04f 0500 	mov.w	r5, #0
 800708a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800708e:	f842 3b1c 	str.w	r3, [r2], #28
 8007092:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007096:	4680      	mov	r8, r0
 8007098:	460c      	mov	r4, r1
 800709a:	bf98      	it	ls
 800709c:	f04f 0b00 	movls.w	fp, #0
 80070a0:	9201      	str	r2, [sp, #4]
 80070a2:	4616      	mov	r6, r2
 80070a4:	46aa      	mov	sl, r5
 80070a6:	462f      	mov	r7, r5
 80070a8:	9502      	str	r5, [sp, #8]
 80070aa:	68a2      	ldr	r2, [r4, #8]
 80070ac:	b15a      	cbz	r2, 80070c6 <_scanf_float+0x66>
 80070ae:	f8d9 3000 	ldr.w	r3, [r9]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80070b6:	d863      	bhi.n	8007180 <_scanf_float+0x120>
 80070b8:	2b40      	cmp	r3, #64	@ 0x40
 80070ba:	d83b      	bhi.n	8007134 <_scanf_float+0xd4>
 80070bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070c0:	b2c8      	uxtb	r0, r1
 80070c2:	280e      	cmp	r0, #14
 80070c4:	d939      	bls.n	800713a <_scanf_float+0xda>
 80070c6:	b11f      	cbz	r7, 80070d0 <_scanf_float+0x70>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80070d4:	f1ba 0f01 	cmp.w	sl, #1
 80070d8:	f200 8114 	bhi.w	8007304 <_scanf_float+0x2a4>
 80070dc:	9b01      	ldr	r3, [sp, #4]
 80070de:	429e      	cmp	r6, r3
 80070e0:	f200 8105 	bhi.w	80072ee <_scanf_float+0x28e>
 80070e4:	2001      	movs	r0, #1
 80070e6:	b007      	add	sp, #28
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80070f0:	2a0d      	cmp	r2, #13
 80070f2:	d8e8      	bhi.n	80070c6 <_scanf_float+0x66>
 80070f4:	a101      	add	r1, pc, #4	@ (adr r1, 80070fc <_scanf_float+0x9c>)
 80070f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007245 	.word	0x08007245
 8007100:	080070c7 	.word	0x080070c7
 8007104:	080070c7 	.word	0x080070c7
 8007108:	080070c7 	.word	0x080070c7
 800710c:	080072a1 	.word	0x080072a1
 8007110:	0800727b 	.word	0x0800727b
 8007114:	080070c7 	.word	0x080070c7
 8007118:	080070c7 	.word	0x080070c7
 800711c:	08007253 	.word	0x08007253
 8007120:	080070c7 	.word	0x080070c7
 8007124:	080070c7 	.word	0x080070c7
 8007128:	080070c7 	.word	0x080070c7
 800712c:	080070c7 	.word	0x080070c7
 8007130:	0800720f 	.word	0x0800720f
 8007134:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007138:	e7da      	b.n	80070f0 <_scanf_float+0x90>
 800713a:	290e      	cmp	r1, #14
 800713c:	d8c3      	bhi.n	80070c6 <_scanf_float+0x66>
 800713e:	a001      	add	r0, pc, #4	@ (adr r0, 8007144 <_scanf_float+0xe4>)
 8007140:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007144:	080071ff 	.word	0x080071ff
 8007148:	080070c7 	.word	0x080070c7
 800714c:	080071ff 	.word	0x080071ff
 8007150:	0800728f 	.word	0x0800728f
 8007154:	080070c7 	.word	0x080070c7
 8007158:	080071a1 	.word	0x080071a1
 800715c:	080071e5 	.word	0x080071e5
 8007160:	080071e5 	.word	0x080071e5
 8007164:	080071e5 	.word	0x080071e5
 8007168:	080071e5 	.word	0x080071e5
 800716c:	080071e5 	.word	0x080071e5
 8007170:	080071e5 	.word	0x080071e5
 8007174:	080071e5 	.word	0x080071e5
 8007178:	080071e5 	.word	0x080071e5
 800717c:	080071e5 	.word	0x080071e5
 8007180:	2b6e      	cmp	r3, #110	@ 0x6e
 8007182:	d809      	bhi.n	8007198 <_scanf_float+0x138>
 8007184:	2b60      	cmp	r3, #96	@ 0x60
 8007186:	d8b1      	bhi.n	80070ec <_scanf_float+0x8c>
 8007188:	2b54      	cmp	r3, #84	@ 0x54
 800718a:	d07b      	beq.n	8007284 <_scanf_float+0x224>
 800718c:	2b59      	cmp	r3, #89	@ 0x59
 800718e:	d19a      	bne.n	80070c6 <_scanf_float+0x66>
 8007190:	2d07      	cmp	r5, #7
 8007192:	d198      	bne.n	80070c6 <_scanf_float+0x66>
 8007194:	2508      	movs	r5, #8
 8007196:	e02f      	b.n	80071f8 <_scanf_float+0x198>
 8007198:	2b74      	cmp	r3, #116	@ 0x74
 800719a:	d073      	beq.n	8007284 <_scanf_float+0x224>
 800719c:	2b79      	cmp	r3, #121	@ 0x79
 800719e:	e7f6      	b.n	800718e <_scanf_float+0x12e>
 80071a0:	6821      	ldr	r1, [r4, #0]
 80071a2:	05c8      	lsls	r0, r1, #23
 80071a4:	d51e      	bpl.n	80071e4 <_scanf_float+0x184>
 80071a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071aa:	6021      	str	r1, [r4, #0]
 80071ac:	3701      	adds	r7, #1
 80071ae:	f1bb 0f00 	cmp.w	fp, #0
 80071b2:	d003      	beq.n	80071bc <_scanf_float+0x15c>
 80071b4:	3201      	adds	r2, #1
 80071b6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80071ba:	60a2      	str	r2, [r4, #8]
 80071bc:	68a3      	ldr	r3, [r4, #8]
 80071be:	3b01      	subs	r3, #1
 80071c0:	60a3      	str	r3, [r4, #8]
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	3301      	adds	r3, #1
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f8c9 3004 	str.w	r3, [r9, #4]
 80071d4:	f340 8082 	ble.w	80072dc <_scanf_float+0x27c>
 80071d8:	f8d9 3000 	ldr.w	r3, [r9]
 80071dc:	3301      	adds	r3, #1
 80071de:	f8c9 3000 	str.w	r3, [r9]
 80071e2:	e762      	b.n	80070aa <_scanf_float+0x4a>
 80071e4:	eb1a 0105 	adds.w	r1, sl, r5
 80071e8:	f47f af6d 	bne.w	80070c6 <_scanf_float+0x66>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80071f2:	6022      	str	r2, [r4, #0]
 80071f4:	460d      	mov	r5, r1
 80071f6:	468a      	mov	sl, r1
 80071f8:	f806 3b01 	strb.w	r3, [r6], #1
 80071fc:	e7de      	b.n	80071bc <_scanf_float+0x15c>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	0610      	lsls	r0, r2, #24
 8007202:	f57f af60 	bpl.w	80070c6 <_scanf_float+0x66>
 8007206:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	e7f4      	b.n	80071f8 <_scanf_float+0x198>
 800720e:	f1ba 0f00 	cmp.w	sl, #0
 8007212:	d10c      	bne.n	800722e <_scanf_float+0x1ce>
 8007214:	b977      	cbnz	r7, 8007234 <_scanf_float+0x1d4>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800721c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007220:	d108      	bne.n	8007234 <_scanf_float+0x1d4>
 8007222:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	f04f 0a01 	mov.w	sl, #1
 800722c:	e7e4      	b.n	80071f8 <_scanf_float+0x198>
 800722e:	f1ba 0f02 	cmp.w	sl, #2
 8007232:	d050      	beq.n	80072d6 <_scanf_float+0x276>
 8007234:	2d01      	cmp	r5, #1
 8007236:	d002      	beq.n	800723e <_scanf_float+0x1de>
 8007238:	2d04      	cmp	r5, #4
 800723a:	f47f af44 	bne.w	80070c6 <_scanf_float+0x66>
 800723e:	3501      	adds	r5, #1
 8007240:	b2ed      	uxtb	r5, r5
 8007242:	e7d9      	b.n	80071f8 <_scanf_float+0x198>
 8007244:	f1ba 0f01 	cmp.w	sl, #1
 8007248:	f47f af3d 	bne.w	80070c6 <_scanf_float+0x66>
 800724c:	f04f 0a02 	mov.w	sl, #2
 8007250:	e7d2      	b.n	80071f8 <_scanf_float+0x198>
 8007252:	b975      	cbnz	r5, 8007272 <_scanf_float+0x212>
 8007254:	2f00      	cmp	r7, #0
 8007256:	f47f af37 	bne.w	80070c8 <_scanf_float+0x68>
 800725a:	6822      	ldr	r2, [r4, #0]
 800725c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007260:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007264:	f040 8103 	bne.w	800746e <_scanf_float+0x40e>
 8007268:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	2501      	movs	r5, #1
 8007270:	e7c2      	b.n	80071f8 <_scanf_float+0x198>
 8007272:	2d03      	cmp	r5, #3
 8007274:	d0e3      	beq.n	800723e <_scanf_float+0x1de>
 8007276:	2d05      	cmp	r5, #5
 8007278:	e7df      	b.n	800723a <_scanf_float+0x1da>
 800727a:	2d02      	cmp	r5, #2
 800727c:	f47f af23 	bne.w	80070c6 <_scanf_float+0x66>
 8007280:	2503      	movs	r5, #3
 8007282:	e7b9      	b.n	80071f8 <_scanf_float+0x198>
 8007284:	2d06      	cmp	r5, #6
 8007286:	f47f af1e 	bne.w	80070c6 <_scanf_float+0x66>
 800728a:	2507      	movs	r5, #7
 800728c:	e7b4      	b.n	80071f8 <_scanf_float+0x198>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	0591      	lsls	r1, r2, #22
 8007292:	f57f af18 	bpl.w	80070c6 <_scanf_float+0x66>
 8007296:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	9702      	str	r7, [sp, #8]
 800729e:	e7ab      	b.n	80071f8 <_scanf_float+0x198>
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072a6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072aa:	d005      	beq.n	80072b8 <_scanf_float+0x258>
 80072ac:	0550      	lsls	r0, r2, #21
 80072ae:	f57f af0a 	bpl.w	80070c6 <_scanf_float+0x66>
 80072b2:	2f00      	cmp	r7, #0
 80072b4:	f000 80db 	beq.w	800746e <_scanf_float+0x40e>
 80072b8:	0591      	lsls	r1, r2, #22
 80072ba:	bf58      	it	pl
 80072bc:	9902      	ldrpl	r1, [sp, #8]
 80072be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072c2:	bf58      	it	pl
 80072c4:	1a79      	subpl	r1, r7, r1
 80072c6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072ca:	bf58      	it	pl
 80072cc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072d0:	6022      	str	r2, [r4, #0]
 80072d2:	2700      	movs	r7, #0
 80072d4:	e790      	b.n	80071f8 <_scanf_float+0x198>
 80072d6:	f04f 0a03 	mov.w	sl, #3
 80072da:	e78d      	b.n	80071f8 <_scanf_float+0x198>
 80072dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072e0:	4649      	mov	r1, r9
 80072e2:	4640      	mov	r0, r8
 80072e4:	4798      	blx	r3
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f43f aedf 	beq.w	80070aa <_scanf_float+0x4a>
 80072ec:	e6eb      	b.n	80070c6 <_scanf_float+0x66>
 80072ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072f6:	464a      	mov	r2, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	4798      	blx	r3
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	3b01      	subs	r3, #1
 8007300:	6123      	str	r3, [r4, #16]
 8007302:	e6eb      	b.n	80070dc <_scanf_float+0x7c>
 8007304:	1e6b      	subs	r3, r5, #1
 8007306:	2b06      	cmp	r3, #6
 8007308:	d824      	bhi.n	8007354 <_scanf_float+0x2f4>
 800730a:	2d02      	cmp	r5, #2
 800730c:	d836      	bhi.n	800737c <_scanf_float+0x31c>
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	429e      	cmp	r6, r3
 8007312:	f67f aee7 	bls.w	80070e4 <_scanf_float+0x84>
 8007316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800731a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800731e:	464a      	mov	r2, r9
 8007320:	4640      	mov	r0, r8
 8007322:	4798      	blx	r3
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	3b01      	subs	r3, #1
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	e7f0      	b.n	800730e <_scanf_float+0x2ae>
 800732c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007330:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007334:	464a      	mov	r2, r9
 8007336:	4640      	mov	r0, r8
 8007338:	4798      	blx	r3
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	3b01      	subs	r3, #1
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007344:	fa5f fa8a 	uxtb.w	sl, sl
 8007348:	f1ba 0f02 	cmp.w	sl, #2
 800734c:	d1ee      	bne.n	800732c <_scanf_float+0x2cc>
 800734e:	3d03      	subs	r5, #3
 8007350:	b2ed      	uxtb	r5, r5
 8007352:	1b76      	subs	r6, r6, r5
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	05da      	lsls	r2, r3, #23
 8007358:	d530      	bpl.n	80073bc <_scanf_float+0x35c>
 800735a:	055b      	lsls	r3, r3, #21
 800735c:	d511      	bpl.n	8007382 <_scanf_float+0x322>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	429e      	cmp	r6, r3
 8007362:	f67f aebf 	bls.w	80070e4 <_scanf_float+0x84>
 8007366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800736a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800736e:	464a      	mov	r2, r9
 8007370:	4640      	mov	r0, r8
 8007372:	4798      	blx	r3
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	3b01      	subs	r3, #1
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	e7f0      	b.n	800735e <_scanf_float+0x2fe>
 800737c:	46aa      	mov	sl, r5
 800737e:	46b3      	mov	fp, r6
 8007380:	e7de      	b.n	8007340 <_scanf_float+0x2e0>
 8007382:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	2965      	cmp	r1, #101	@ 0x65
 800738a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800738e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007392:	6123      	str	r3, [r4, #16]
 8007394:	d00c      	beq.n	80073b0 <_scanf_float+0x350>
 8007396:	2945      	cmp	r1, #69	@ 0x45
 8007398:	d00a      	beq.n	80073b0 <_scanf_float+0x350>
 800739a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800739e:	464a      	mov	r2, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	4798      	blx	r3
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	1eb5      	subs	r5, r6, #2
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073b4:	464a      	mov	r2, r9
 80073b6:	4640      	mov	r0, r8
 80073b8:	4798      	blx	r3
 80073ba:	462e      	mov	r6, r5
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	f012 0210 	ands.w	r2, r2, #16
 80073c2:	d001      	beq.n	80073c8 <_scanf_float+0x368>
 80073c4:	2000      	movs	r0, #0
 80073c6:	e68e      	b.n	80070e6 <_scanf_float+0x86>
 80073c8:	7032      	strb	r2, [r6, #0]
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d4:	d125      	bne.n	8007422 <_scanf_float+0x3c2>
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	429f      	cmp	r7, r3
 80073da:	d00a      	beq.n	80073f2 <_scanf_float+0x392>
 80073dc:	1bda      	subs	r2, r3, r7
 80073de:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80073e2:	429e      	cmp	r6, r3
 80073e4:	bf28      	it	cs
 80073e6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80073ea:	4922      	ldr	r1, [pc, #136]	@ (8007474 <_scanf_float+0x414>)
 80073ec:	4630      	mov	r0, r6
 80073ee:	f000 f93d 	bl	800766c <siprintf>
 80073f2:	9901      	ldr	r1, [sp, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	4640      	mov	r0, r8
 80073f8:	f002 fc96 	bl	8009d28 <_strtod_r>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f011 0f02 	tst.w	r1, #2
 8007406:	ec57 6b10 	vmov	r6, r7, d0
 800740a:	f103 0204 	add.w	r2, r3, #4
 800740e:	d015      	beq.n	800743c <_scanf_float+0x3dc>
 8007410:	9903      	ldr	r1, [sp, #12]
 8007412:	600a      	str	r2, [r1, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	e9c3 6700 	strd	r6, r7, [r3]
 800741a:	68e3      	ldr	r3, [r4, #12]
 800741c:	3301      	adds	r3, #1
 800741e:	60e3      	str	r3, [r4, #12]
 8007420:	e7d0      	b.n	80073c4 <_scanf_float+0x364>
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0e4      	beq.n	80073f2 <_scanf_float+0x392>
 8007428:	9905      	ldr	r1, [sp, #20]
 800742a:	230a      	movs	r3, #10
 800742c:	3101      	adds	r1, #1
 800742e:	4640      	mov	r0, r8
 8007430:	f002 fcfa 	bl	8009e28 <_strtol_r>
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	9e05      	ldr	r6, [sp, #20]
 8007438:	1ac2      	subs	r2, r0, r3
 800743a:	e7d0      	b.n	80073de <_scanf_float+0x37e>
 800743c:	f011 0f04 	tst.w	r1, #4
 8007440:	9903      	ldr	r1, [sp, #12]
 8007442:	600a      	str	r2, [r1, #0]
 8007444:	d1e6      	bne.n	8007414 <_scanf_float+0x3b4>
 8007446:	681d      	ldr	r5, [r3, #0]
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	f7f9 fb6c 	bl	8000b2c <__aeabi_dcmpun>
 8007454:	b128      	cbz	r0, 8007462 <_scanf_float+0x402>
 8007456:	4808      	ldr	r0, [pc, #32]	@ (8007478 <_scanf_float+0x418>)
 8007458:	f000 fa5a 	bl	8007910 <nanf>
 800745c:	ed85 0a00 	vstr	s0, [r5]
 8007460:	e7db      	b.n	800741a <_scanf_float+0x3ba>
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	f7f9 fbbf 	bl	8000be8 <__aeabi_d2f>
 800746a:	6028      	str	r0, [r5, #0]
 800746c:	e7d5      	b.n	800741a <_scanf_float+0x3ba>
 800746e:	2700      	movs	r7, #0
 8007470:	e62e      	b.n	80070d0 <_scanf_float+0x70>
 8007472:	bf00      	nop
 8007474:	0800b0f0 	.word	0x0800b0f0
 8007478:	0800b231 	.word	0x0800b231

0800747c <std>:
 800747c:	2300      	movs	r3, #0
 800747e:	b510      	push	{r4, lr}
 8007480:	4604      	mov	r4, r0
 8007482:	e9c0 3300 	strd	r3, r3, [r0]
 8007486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800748a:	6083      	str	r3, [r0, #8]
 800748c:	8181      	strh	r1, [r0, #12]
 800748e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007490:	81c2      	strh	r2, [r0, #14]
 8007492:	6183      	str	r3, [r0, #24]
 8007494:	4619      	mov	r1, r3
 8007496:	2208      	movs	r2, #8
 8007498:	305c      	adds	r0, #92	@ 0x5c
 800749a:	f000 f94c 	bl	8007736 <memset>
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <std+0x58>)
 80074a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <std+0x5c>)
 80074a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <std+0x60>)
 80074a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074aa:	4b0d      	ldr	r3, [pc, #52]	@ (80074e0 <std+0x64>)
 80074ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80074ae:	4b0d      	ldr	r3, [pc, #52]	@ (80074e4 <std+0x68>)
 80074b0:	6224      	str	r4, [r4, #32]
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d006      	beq.n	80074c4 <std+0x48>
 80074b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ba:	4294      	cmp	r4, r2
 80074bc:	d002      	beq.n	80074c4 <std+0x48>
 80074be:	33d0      	adds	r3, #208	@ 0xd0
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d105      	bne.n	80074d0 <std+0x54>
 80074c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074cc:	f000 ba0e 	b.w	80078ec <__retarget_lock_init_recursive>
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop
 80074d4:	080076b1 	.word	0x080076b1
 80074d8:	080076d3 	.word	0x080076d3
 80074dc:	0800770b 	.word	0x0800770b
 80074e0:	0800772f 	.word	0x0800772f
 80074e4:	200043cc 	.word	0x200043cc

080074e8 <stdio_exit_handler>:
 80074e8:	4a02      	ldr	r2, [pc, #8]	@ (80074f4 <stdio_exit_handler+0xc>)
 80074ea:	4903      	ldr	r1, [pc, #12]	@ (80074f8 <stdio_exit_handler+0x10>)
 80074ec:	4803      	ldr	r0, [pc, #12]	@ (80074fc <stdio_exit_handler+0x14>)
 80074ee:	f000 b869 	b.w	80075c4 <_fwalk_sglue>
 80074f2:	bf00      	nop
 80074f4:	20000010 	.word	0x20000010
 80074f8:	0800a1e5 	.word	0x0800a1e5
 80074fc:	20000020 	.word	0x20000020

08007500 <cleanup_stdio>:
 8007500:	6841      	ldr	r1, [r0, #4]
 8007502:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <cleanup_stdio+0x34>)
 8007504:	4299      	cmp	r1, r3
 8007506:	b510      	push	{r4, lr}
 8007508:	4604      	mov	r4, r0
 800750a:	d001      	beq.n	8007510 <cleanup_stdio+0x10>
 800750c:	f002 fe6a 	bl	800a1e4 <_fflush_r>
 8007510:	68a1      	ldr	r1, [r4, #8]
 8007512:	4b09      	ldr	r3, [pc, #36]	@ (8007538 <cleanup_stdio+0x38>)
 8007514:	4299      	cmp	r1, r3
 8007516:	d002      	beq.n	800751e <cleanup_stdio+0x1e>
 8007518:	4620      	mov	r0, r4
 800751a:	f002 fe63 	bl	800a1e4 <_fflush_r>
 800751e:	68e1      	ldr	r1, [r4, #12]
 8007520:	4b06      	ldr	r3, [pc, #24]	@ (800753c <cleanup_stdio+0x3c>)
 8007522:	4299      	cmp	r1, r3
 8007524:	d004      	beq.n	8007530 <cleanup_stdio+0x30>
 8007526:	4620      	mov	r0, r4
 8007528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800752c:	f002 be5a 	b.w	800a1e4 <_fflush_r>
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	200043cc 	.word	0x200043cc
 8007538:	20004434 	.word	0x20004434
 800753c:	2000449c 	.word	0x2000449c

08007540 <global_stdio_init.part.0>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <global_stdio_init.part.0+0x30>)
 8007544:	4c0b      	ldr	r4, [pc, #44]	@ (8007574 <global_stdio_init.part.0+0x34>)
 8007546:	4a0c      	ldr	r2, [pc, #48]	@ (8007578 <global_stdio_init.part.0+0x38>)
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	4620      	mov	r0, r4
 800754c:	2200      	movs	r2, #0
 800754e:	2104      	movs	r1, #4
 8007550:	f7ff ff94 	bl	800747c <std>
 8007554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007558:	2201      	movs	r2, #1
 800755a:	2109      	movs	r1, #9
 800755c:	f7ff ff8e 	bl	800747c <std>
 8007560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007564:	2202      	movs	r2, #2
 8007566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756a:	2112      	movs	r1, #18
 800756c:	f7ff bf86 	b.w	800747c <std>
 8007570:	20004504 	.word	0x20004504
 8007574:	200043cc 	.word	0x200043cc
 8007578:	080074e9 	.word	0x080074e9

0800757c <__sfp_lock_acquire>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__sfp_lock_acquire+0x8>)
 800757e:	f000 b9b6 	b.w	80078ee <__retarget_lock_acquire_recursive>
 8007582:	bf00      	nop
 8007584:	2000450d 	.word	0x2000450d

08007588 <__sfp_lock_release>:
 8007588:	4801      	ldr	r0, [pc, #4]	@ (8007590 <__sfp_lock_release+0x8>)
 800758a:	f000 b9b1 	b.w	80078f0 <__retarget_lock_release_recursive>
 800758e:	bf00      	nop
 8007590:	2000450d 	.word	0x2000450d

08007594 <__sinit>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4604      	mov	r4, r0
 8007598:	f7ff fff0 	bl	800757c <__sfp_lock_acquire>
 800759c:	6a23      	ldr	r3, [r4, #32]
 800759e:	b11b      	cbz	r3, 80075a8 <__sinit+0x14>
 80075a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a4:	f7ff bff0 	b.w	8007588 <__sfp_lock_release>
 80075a8:	4b04      	ldr	r3, [pc, #16]	@ (80075bc <__sinit+0x28>)
 80075aa:	6223      	str	r3, [r4, #32]
 80075ac:	4b04      	ldr	r3, [pc, #16]	@ (80075c0 <__sinit+0x2c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f5      	bne.n	80075a0 <__sinit+0xc>
 80075b4:	f7ff ffc4 	bl	8007540 <global_stdio_init.part.0>
 80075b8:	e7f2      	b.n	80075a0 <__sinit+0xc>
 80075ba:	bf00      	nop
 80075bc:	08007501 	.word	0x08007501
 80075c0:	20004504 	.word	0x20004504

080075c4 <_fwalk_sglue>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	4607      	mov	r7, r0
 80075ca:	4688      	mov	r8, r1
 80075cc:	4614      	mov	r4, r2
 80075ce:	2600      	movs	r6, #0
 80075d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075d4:	f1b9 0901 	subs.w	r9, r9, #1
 80075d8:	d505      	bpl.n	80075e6 <_fwalk_sglue+0x22>
 80075da:	6824      	ldr	r4, [r4, #0]
 80075dc:	2c00      	cmp	r4, #0
 80075de:	d1f7      	bne.n	80075d0 <_fwalk_sglue+0xc>
 80075e0:	4630      	mov	r0, r6
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d907      	bls.n	80075fc <_fwalk_sglue+0x38>
 80075ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075f0:	3301      	adds	r3, #1
 80075f2:	d003      	beq.n	80075fc <_fwalk_sglue+0x38>
 80075f4:	4629      	mov	r1, r5
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	4306      	orrs	r6, r0
 80075fc:	3568      	adds	r5, #104	@ 0x68
 80075fe:	e7e9      	b.n	80075d4 <_fwalk_sglue+0x10>

08007600 <sniprintf>:
 8007600:	b40c      	push	{r2, r3}
 8007602:	b530      	push	{r4, r5, lr}
 8007604:	4b18      	ldr	r3, [pc, #96]	@ (8007668 <sniprintf+0x68>)
 8007606:	1e0c      	subs	r4, r1, #0
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	b09d      	sub	sp, #116	@ 0x74
 800760c:	da08      	bge.n	8007620 <sniprintf+0x20>
 800760e:	238b      	movs	r3, #139	@ 0x8b
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007616:	b01d      	add	sp, #116	@ 0x74
 8007618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800761c:	b002      	add	sp, #8
 800761e:	4770      	bx	lr
 8007620:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007624:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800762e:	bf14      	ite	ne
 8007630:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007634:	4623      	moveq	r3, r4
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800763e:	9002      	str	r0, [sp, #8]
 8007640:	9006      	str	r0, [sp, #24]
 8007642:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007646:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007648:	ab21      	add	r3, sp, #132	@ 0x84
 800764a:	a902      	add	r1, sp, #8
 800764c:	4628      	mov	r0, r5
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	f002 fc48 	bl	8009ee4 <_svfiprintf_r>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	bfbc      	itt	lt
 8007658:	238b      	movlt	r3, #139	@ 0x8b
 800765a:	602b      	strlt	r3, [r5, #0]
 800765c:	2c00      	cmp	r4, #0
 800765e:	d0da      	beq.n	8007616 <sniprintf+0x16>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e7d6      	b.n	8007616 <sniprintf+0x16>
 8007668:	2000001c 	.word	0x2000001c

0800766c <siprintf>:
 800766c:	b40e      	push	{r1, r2, r3}
 800766e:	b510      	push	{r4, lr}
 8007670:	b09d      	sub	sp, #116	@ 0x74
 8007672:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007674:	9002      	str	r0, [sp, #8]
 8007676:	9006      	str	r0, [sp, #24]
 8007678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800767c:	480a      	ldr	r0, [pc, #40]	@ (80076a8 <siprintf+0x3c>)
 800767e:	9107      	str	r1, [sp, #28]
 8007680:	9104      	str	r1, [sp, #16]
 8007682:	490a      	ldr	r1, [pc, #40]	@ (80076ac <siprintf+0x40>)
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	2400      	movs	r4, #0
 800768c:	a902      	add	r1, sp, #8
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007694:	f002 fc26 	bl	8009ee4 <_svfiprintf_r>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	701c      	strb	r4, [r3, #0]
 800769c:	b01d      	add	sp, #116	@ 0x74
 800769e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a2:	b003      	add	sp, #12
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	2000001c 	.word	0x2000001c
 80076ac:	ffff0208 	.word	0xffff0208

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 f8ca 	bl	8007850 <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__swrite>:
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	461f      	mov	r7, r3
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	05db      	lsls	r3, r3, #23
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4616      	mov	r6, r2
 80076e2:	d505      	bpl.n	80076f0 <__swrite+0x1e>
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	2302      	movs	r3, #2
 80076ea:	2200      	movs	r2, #0
 80076ec:	f000 f89e 	bl	800782c <_lseek_r>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	f000 b8b5 	b.w	8007874 <_write_r>

0800770a <__sseek>:
 800770a:	b510      	push	{r4, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 f88b 	bl	800782c <_lseek_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	bf15      	itete	ne
 800771c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800771e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007726:	81a3      	strheq	r3, [r4, #12]
 8007728:	bf18      	it	ne
 800772a:	81a3      	strhne	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__sclose>:
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 b80d 	b.w	8007750 <_close_r>

08007736 <memset>:
 8007736:	4402      	add	r2, r0
 8007738:	4603      	mov	r3, r0
 800773a:	4293      	cmp	r3, r2
 800773c:	d100      	bne.n	8007740 <memset+0xa>
 800773e:	4770      	bx	lr
 8007740:	f803 1b01 	strb.w	r1, [r3], #1
 8007744:	e7f9      	b.n	800773a <memset+0x4>
	...

08007748 <_localeconv_r>:
 8007748:	4800      	ldr	r0, [pc, #0]	@ (800774c <_localeconv_r+0x4>)
 800774a:	4770      	bx	lr
 800774c:	2000015c 	.word	0x2000015c

08007750 <_close_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	@ (800776c <_close_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7fa fbcc 	bl	8001ef8 <_close>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_close_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_close_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20004508 	.word	0x20004508

08007770 <_reclaim_reent>:
 8007770:	4b2d      	ldr	r3, [pc, #180]	@ (8007828 <_reclaim_reent+0xb8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4283      	cmp	r3, r0
 8007776:	b570      	push	{r4, r5, r6, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	d053      	beq.n	8007824 <_reclaim_reent+0xb4>
 800777c:	69c3      	ldr	r3, [r0, #28]
 800777e:	b31b      	cbz	r3, 80077c8 <_reclaim_reent+0x58>
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	b163      	cbz	r3, 800779e <_reclaim_reent+0x2e>
 8007784:	2500      	movs	r5, #0
 8007786:	69e3      	ldr	r3, [r4, #28]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	5959      	ldr	r1, [r3, r5]
 800778c:	b9b1      	cbnz	r1, 80077bc <_reclaim_reent+0x4c>
 800778e:	3504      	adds	r5, #4
 8007790:	2d80      	cmp	r5, #128	@ 0x80
 8007792:	d1f8      	bne.n	8007786 <_reclaim_reent+0x16>
 8007794:	69e3      	ldr	r3, [r4, #28]
 8007796:	4620      	mov	r0, r4
 8007798:	68d9      	ldr	r1, [r3, #12]
 800779a:	f000 ff19 	bl	80085d0 <_free_r>
 800779e:	69e3      	ldr	r3, [r4, #28]
 80077a0:	6819      	ldr	r1, [r3, #0]
 80077a2:	b111      	cbz	r1, 80077aa <_reclaim_reent+0x3a>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 ff13 	bl	80085d0 <_free_r>
 80077aa:	69e3      	ldr	r3, [r4, #28]
 80077ac:	689d      	ldr	r5, [r3, #8]
 80077ae:	b15d      	cbz	r5, 80077c8 <_reclaim_reent+0x58>
 80077b0:	4629      	mov	r1, r5
 80077b2:	4620      	mov	r0, r4
 80077b4:	682d      	ldr	r5, [r5, #0]
 80077b6:	f000 ff0b 	bl	80085d0 <_free_r>
 80077ba:	e7f8      	b.n	80077ae <_reclaim_reent+0x3e>
 80077bc:	680e      	ldr	r6, [r1, #0]
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 ff06 	bl	80085d0 <_free_r>
 80077c4:	4631      	mov	r1, r6
 80077c6:	e7e1      	b.n	800778c <_reclaim_reent+0x1c>
 80077c8:	6961      	ldr	r1, [r4, #20]
 80077ca:	b111      	cbz	r1, 80077d2 <_reclaim_reent+0x62>
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 feff 	bl	80085d0 <_free_r>
 80077d2:	69e1      	ldr	r1, [r4, #28]
 80077d4:	b111      	cbz	r1, 80077dc <_reclaim_reent+0x6c>
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 fefa 	bl	80085d0 <_free_r>
 80077dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80077de:	b111      	cbz	r1, 80077e6 <_reclaim_reent+0x76>
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fef5 	bl	80085d0 <_free_r>
 80077e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e8:	b111      	cbz	r1, 80077f0 <_reclaim_reent+0x80>
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fef0 	bl	80085d0 <_free_r>
 80077f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80077f2:	b111      	cbz	r1, 80077fa <_reclaim_reent+0x8a>
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 feeb 	bl	80085d0 <_free_r>
 80077fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80077fc:	b111      	cbz	r1, 8007804 <_reclaim_reent+0x94>
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fee6 	bl	80085d0 <_free_r>
 8007804:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007806:	b111      	cbz	r1, 800780e <_reclaim_reent+0x9e>
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fee1 	bl	80085d0 <_free_r>
 800780e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007810:	b111      	cbz	r1, 8007818 <_reclaim_reent+0xa8>
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fedc 	bl	80085d0 <_free_r>
 8007818:	6a23      	ldr	r3, [r4, #32]
 800781a:	b11b      	cbz	r3, 8007824 <_reclaim_reent+0xb4>
 800781c:	4620      	mov	r0, r4
 800781e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007822:	4718      	bx	r3
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	bf00      	nop
 8007828:	2000001c 	.word	0x2000001c

0800782c <_lseek_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	@ (800784c <_lseek_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fa fb83 	bl	8001f46 <_lseek>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_lseek_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_lseek_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20004508 	.word	0x20004508

08007850 <_read_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	@ (8007870 <_read_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7fa fb11 	bl	8001e86 <_read>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_read_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_read_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20004508 	.word	0x20004508

08007874 <_write_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4d07      	ldr	r5, [pc, #28]	@ (8007894 <_write_r+0x20>)
 8007878:	4604      	mov	r4, r0
 800787a:	4608      	mov	r0, r1
 800787c:	4611      	mov	r1, r2
 800787e:	2200      	movs	r2, #0
 8007880:	602a      	str	r2, [r5, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	f7fa fb1c 	bl	8001ec0 <_write>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_write_r+0x1e>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_write_r+0x1e>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	20004508 	.word	0x20004508

08007898 <__errno>:
 8007898:	4b01      	ldr	r3, [pc, #4]	@ (80078a0 <__errno+0x8>)
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	2000001c 	.word	0x2000001c

080078a4 <__libc_init_array>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4d0d      	ldr	r5, [pc, #52]	@ (80078dc <__libc_init_array+0x38>)
 80078a8:	4c0d      	ldr	r4, [pc, #52]	@ (80078e0 <__libc_init_array+0x3c>)
 80078aa:	1b64      	subs	r4, r4, r5
 80078ac:	10a4      	asrs	r4, r4, #2
 80078ae:	2600      	movs	r6, #0
 80078b0:	42a6      	cmp	r6, r4
 80078b2:	d109      	bne.n	80078c8 <__libc_init_array+0x24>
 80078b4:	4d0b      	ldr	r5, [pc, #44]	@ (80078e4 <__libc_init_array+0x40>)
 80078b6:	4c0c      	ldr	r4, [pc, #48]	@ (80078e8 <__libc_init_array+0x44>)
 80078b8:	f003 fb78 	bl	800afac <_init>
 80078bc:	1b64      	subs	r4, r4, r5
 80078be:	10a4      	asrs	r4, r4, #2
 80078c0:	2600      	movs	r6, #0
 80078c2:	42a6      	cmp	r6, r4
 80078c4:	d105      	bne.n	80078d2 <__libc_init_array+0x2e>
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078cc:	4798      	blx	r3
 80078ce:	3601      	adds	r6, #1
 80078d0:	e7ee      	b.n	80078b0 <__libc_init_array+0xc>
 80078d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d6:	4798      	blx	r3
 80078d8:	3601      	adds	r6, #1
 80078da:	e7f2      	b.n	80078c2 <__libc_init_array+0x1e>
 80078dc:	0800b4ec 	.word	0x0800b4ec
 80078e0:	0800b4ec 	.word	0x0800b4ec
 80078e4:	0800b4ec 	.word	0x0800b4ec
 80078e8:	0800b4f0 	.word	0x0800b4f0

080078ec <__retarget_lock_init_recursive>:
 80078ec:	4770      	bx	lr

080078ee <__retarget_lock_acquire_recursive>:
 80078ee:	4770      	bx	lr

080078f0 <__retarget_lock_release_recursive>:
 80078f0:	4770      	bx	lr

080078f2 <memcpy>:
 80078f2:	440a      	add	r2, r1
 80078f4:	4291      	cmp	r1, r2
 80078f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80078fa:	d100      	bne.n	80078fe <memcpy+0xc>
 80078fc:	4770      	bx	lr
 80078fe:	b510      	push	{r4, lr}
 8007900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007908:	4291      	cmp	r1, r2
 800790a:	d1f9      	bne.n	8007900 <memcpy+0xe>
 800790c:	bd10      	pop	{r4, pc}
	...

08007910 <nanf>:
 8007910:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007918 <nanf+0x8>
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	7fc00000 	.word	0x7fc00000

0800791c <quorem>:
 800791c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	6903      	ldr	r3, [r0, #16]
 8007922:	690c      	ldr	r4, [r1, #16]
 8007924:	42a3      	cmp	r3, r4
 8007926:	4607      	mov	r7, r0
 8007928:	db7e      	blt.n	8007a28 <quorem+0x10c>
 800792a:	3c01      	subs	r4, #1
 800792c:	f101 0814 	add.w	r8, r1, #20
 8007930:	00a3      	lsls	r3, r4, #2
 8007932:	f100 0514 	add.w	r5, r0, #20
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007946:	3301      	adds	r3, #1
 8007948:	429a      	cmp	r2, r3
 800794a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800794e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007952:	d32e      	bcc.n	80079b2 <quorem+0x96>
 8007954:	f04f 0a00 	mov.w	sl, #0
 8007958:	46c4      	mov	ip, r8
 800795a:	46ae      	mov	lr, r5
 800795c:	46d3      	mov	fp, sl
 800795e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007962:	b298      	uxth	r0, r3
 8007964:	fb06 a000 	mla	r0, r6, r0, sl
 8007968:	0c02      	lsrs	r2, r0, #16
 800796a:	0c1b      	lsrs	r3, r3, #16
 800796c:	fb06 2303 	mla	r3, r6, r3, r2
 8007970:	f8de 2000 	ldr.w	r2, [lr]
 8007974:	b280      	uxth	r0, r0
 8007976:	b292      	uxth	r2, r2
 8007978:	1a12      	subs	r2, r2, r0
 800797a:	445a      	add	r2, fp
 800797c:	f8de 0000 	ldr.w	r0, [lr]
 8007980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007984:	b29b      	uxth	r3, r3
 8007986:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800798a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800798e:	b292      	uxth	r2, r2
 8007990:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007994:	45e1      	cmp	r9, ip
 8007996:	f84e 2b04 	str.w	r2, [lr], #4
 800799a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800799e:	d2de      	bcs.n	800795e <quorem+0x42>
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	58eb      	ldr	r3, [r5, r3]
 80079a4:	b92b      	cbnz	r3, 80079b2 <quorem+0x96>
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	429d      	cmp	r5, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	d32f      	bcc.n	8007a10 <quorem+0xf4>
 80079b0:	613c      	str	r4, [r7, #16]
 80079b2:	4638      	mov	r0, r7
 80079b4:	f001 f9c8 	bl	8008d48 <__mcmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	db25      	blt.n	8007a08 <quorem+0xec>
 80079bc:	4629      	mov	r1, r5
 80079be:	2000      	movs	r0, #0
 80079c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80079c4:	f8d1 c000 	ldr.w	ip, [r1]
 80079c8:	fa1f fe82 	uxth.w	lr, r2
 80079cc:	fa1f f38c 	uxth.w	r3, ip
 80079d0:	eba3 030e 	sub.w	r3, r3, lr
 80079d4:	4403      	add	r3, r0
 80079d6:	0c12      	lsrs	r2, r2, #16
 80079d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e6:	45c1      	cmp	r9, r8
 80079e8:	f841 3b04 	str.w	r3, [r1], #4
 80079ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079f0:	d2e6      	bcs.n	80079c0 <quorem+0xa4>
 80079f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079fa:	b922      	cbnz	r2, 8007a06 <quorem+0xea>
 80079fc:	3b04      	subs	r3, #4
 80079fe:	429d      	cmp	r5, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	d30b      	bcc.n	8007a1c <quorem+0x100>
 8007a04:	613c      	str	r4, [r7, #16]
 8007a06:	3601      	adds	r6, #1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	b003      	add	sp, #12
 8007a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	3b04      	subs	r3, #4
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	d1cb      	bne.n	80079b0 <quorem+0x94>
 8007a18:	3c01      	subs	r4, #1
 8007a1a:	e7c6      	b.n	80079aa <quorem+0x8e>
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d1ef      	bne.n	8007a04 <quorem+0xe8>
 8007a24:	3c01      	subs	r4, #1
 8007a26:	e7ea      	b.n	80079fe <quorem+0xe2>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7ee      	b.n	8007a0a <quorem+0xee>
 8007a2c:	0000      	movs	r0, r0
	...

08007a30 <_dtoa_r>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	69c7      	ldr	r7, [r0, #28]
 8007a36:	b097      	sub	sp, #92	@ 0x5c
 8007a38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007a3c:	ec55 4b10 	vmov	r4, r5, d0
 8007a40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007a42:	9107      	str	r1, [sp, #28]
 8007a44:	4681      	mov	r9, r0
 8007a46:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a48:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a4a:	b97f      	cbnz	r7, 8007a6c <_dtoa_r+0x3c>
 8007a4c:	2010      	movs	r0, #16
 8007a4e:	f000 fe09 	bl	8008664 <malloc>
 8007a52:	4602      	mov	r2, r0
 8007a54:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a58:	b920      	cbnz	r0, 8007a64 <_dtoa_r+0x34>
 8007a5a:	4ba9      	ldr	r3, [pc, #676]	@ (8007d00 <_dtoa_r+0x2d0>)
 8007a5c:	21ef      	movs	r1, #239	@ 0xef
 8007a5e:	48a9      	ldr	r0, [pc, #676]	@ (8007d04 <_dtoa_r+0x2d4>)
 8007a60:	f002 fc2e 	bl	800a2c0 <__assert_func>
 8007a64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a68:	6007      	str	r7, [r0, #0]
 8007a6a:	60c7      	str	r7, [r0, #12]
 8007a6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	b159      	cbz	r1, 8007a8c <_dtoa_r+0x5c>
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	604a      	str	r2, [r1, #4]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4093      	lsls	r3, r2
 8007a7c:	608b      	str	r3, [r1, #8]
 8007a7e:	4648      	mov	r0, r9
 8007a80:	f000 fee6 	bl	8008850 <_Bfree>
 8007a84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	1e2b      	subs	r3, r5, #0
 8007a8e:	bfb9      	ittee	lt
 8007a90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	9305      	strlt	r3, [sp, #20]
 8007a96:	2300      	movge	r3, #0
 8007a98:	6033      	strge	r3, [r6, #0]
 8007a9a:	9f05      	ldr	r7, [sp, #20]
 8007a9c:	4b9a      	ldr	r3, [pc, #616]	@ (8007d08 <_dtoa_r+0x2d8>)
 8007a9e:	bfbc      	itt	lt
 8007aa0:	2201      	movlt	r2, #1
 8007aa2:	6032      	strlt	r2, [r6, #0]
 8007aa4:	43bb      	bics	r3, r7
 8007aa6:	d112      	bne.n	8007ace <_dtoa_r+0x9e>
 8007aa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007aaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ab4:	4323      	orrs	r3, r4
 8007ab6:	f000 855a 	beq.w	800856e <_dtoa_r+0xb3e>
 8007aba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007abc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007d1c <_dtoa_r+0x2ec>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 855c 	beq.w	800857e <_dtoa_r+0xb4e>
 8007ac6:	f10a 0303 	add.w	r3, sl, #3
 8007aca:	f000 bd56 	b.w	800857a <_dtoa_r+0xb4a>
 8007ace:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	ec51 0b17 	vmov	r0, r1, d7
 8007ad8:	2300      	movs	r3, #0
 8007ada:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ade:	f7f8 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	b158      	cbz	r0, 8007afe <_dtoa_r+0xce>
 8007ae6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ae8:	2301      	movs	r3, #1
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007aee:	b113      	cbz	r3, 8007af6 <_dtoa_r+0xc6>
 8007af0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007af2:	4b86      	ldr	r3, [pc, #536]	@ (8007d0c <_dtoa_r+0x2dc>)
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007d20 <_dtoa_r+0x2f0>
 8007afa:	f000 bd40 	b.w	800857e <_dtoa_r+0xb4e>
 8007afe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007b02:	aa14      	add	r2, sp, #80	@ 0x50
 8007b04:	a915      	add	r1, sp, #84	@ 0x54
 8007b06:	4648      	mov	r0, r9
 8007b08:	f001 fa3e 	bl	8008f88 <__d2b>
 8007b0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b10:	9002      	str	r0, [sp, #8]
 8007b12:	2e00      	cmp	r6, #0
 8007b14:	d078      	beq.n	8007c08 <_dtoa_r+0x1d8>
 8007b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b30:	4619      	mov	r1, r3
 8007b32:	2200      	movs	r2, #0
 8007b34:	4b76      	ldr	r3, [pc, #472]	@ (8007d10 <_dtoa_r+0x2e0>)
 8007b36:	f7f8 fba7 	bl	8000288 <__aeabi_dsub>
 8007b3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ce8 <_dtoa_r+0x2b8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	a36a      	add	r3, pc, #424	@ (adr r3, 8007cf0 <_dtoa_r+0x2c0>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fb9f 	bl	800028c <__adddf3>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	460d      	mov	r5, r1
 8007b54:	f7f8 fce6 	bl	8000524 <__aeabi_i2d>
 8007b58:	a367      	add	r3, pc, #412	@ (adr r3, 8007cf8 <_dtoa_r+0x2c8>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f7f8 fd4b 	bl	80005f8 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4620      	mov	r0, r4
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7f8 fb8f 	bl	800028c <__adddf3>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	f7f8 fff1 	bl	8000b58 <__aeabi_d2iz>
 8007b76:	2200      	movs	r2, #0
 8007b78:	4607      	mov	r7, r0
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 ffac 	bl	8000adc <__aeabi_dcmplt>
 8007b84:	b140      	cbz	r0, 8007b98 <_dtoa_r+0x168>
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7f8 fccc 	bl	8000524 <__aeabi_i2d>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	462b      	mov	r3, r5
 8007b90:	f7f8 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b94:	b900      	cbnz	r0, 8007b98 <_dtoa_r+0x168>
 8007b96:	3f01      	subs	r7, #1
 8007b98:	2f16      	cmp	r7, #22
 8007b9a:	d852      	bhi.n	8007c42 <_dtoa_r+0x212>
 8007b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8007d14 <_dtoa_r+0x2e4>)
 8007b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007baa:	f7f8 ff97 	bl	8000adc <__aeabi_dcmplt>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d049      	beq.n	8007c46 <_dtoa_r+0x216>
 8007bb2:	3f01      	subs	r7, #1
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bba:	1b9b      	subs	r3, r3, r6
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	bf45      	ittet	mi
 8007bc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007bc4:	9300      	strmi	r3, [sp, #0]
 8007bc6:	2300      	movpl	r3, #0
 8007bc8:	2300      	movmi	r3, #0
 8007bca:	9206      	str	r2, [sp, #24]
 8007bcc:	bf54      	ite	pl
 8007bce:	9300      	strpl	r3, [sp, #0]
 8007bd0:	9306      	strmi	r3, [sp, #24]
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	db39      	blt.n	8007c4a <_dtoa_r+0x21a>
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007bda:	443b      	add	r3, r7
 8007bdc:	9306      	str	r3, [sp, #24]
 8007bde:	2300      	movs	r3, #0
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	9b07      	ldr	r3, [sp, #28]
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d863      	bhi.n	8007cb0 <_dtoa_r+0x280>
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	bfc4      	itt	gt
 8007bec:	3b04      	subgt	r3, #4
 8007bee:	9307      	strgt	r3, [sp, #28]
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bf6:	bfcc      	ite	gt
 8007bf8:	2400      	movgt	r4, #0
 8007bfa:	2401      	movle	r4, #1
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d863      	bhi.n	8007cc8 <_dtoa_r+0x298>
 8007c00:	e8df f003 	tbb	[pc, r3]
 8007c04:	2b375452 	.word	0x2b375452
 8007c08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c0c:	441e      	add	r6, r3
 8007c0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	bfc1      	itttt	gt
 8007c16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c1a:	409f      	lslgt	r7, r3
 8007c1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c24:	bfd6      	itet	le
 8007c26:	f1c3 0320 	rsble	r3, r3, #32
 8007c2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c2e:	fa04 f003 	lslle.w	r0, r4, r3
 8007c32:	f7f8 fc67 	bl	8000504 <__aeabi_ui2d>
 8007c36:	2201      	movs	r2, #1
 8007c38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c3c:	3e01      	subs	r6, #1
 8007c3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c40:	e776      	b.n	8007b30 <_dtoa_r+0x100>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7b7      	b.n	8007bb6 <_dtoa_r+0x186>
 8007c46:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c48:	e7b6      	b.n	8007bb8 <_dtoa_r+0x188>
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	1bdb      	subs	r3, r3, r7
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	427b      	negs	r3, r7
 8007c52:	9308      	str	r3, [sp, #32]
 8007c54:	2300      	movs	r3, #0
 8007c56:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c58:	e7c3      	b.n	8007be2 <_dtoa_r+0x1b2>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c60:	eb07 0b03 	add.w	fp, r7, r3
 8007c64:	f10b 0301 	add.w	r3, fp, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	bfb8      	it	lt
 8007c6e:	2301      	movlt	r3, #1
 8007c70:	e006      	b.n	8007c80 <_dtoa_r+0x250>
 8007c72:	2301      	movs	r3, #1
 8007c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	dd28      	ble.n	8007cce <_dtoa_r+0x29e>
 8007c7c:	469b      	mov	fp, r3
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c84:	2100      	movs	r1, #0
 8007c86:	2204      	movs	r2, #4
 8007c88:	f102 0514 	add.w	r5, r2, #20
 8007c8c:	429d      	cmp	r5, r3
 8007c8e:	d926      	bls.n	8007cde <_dtoa_r+0x2ae>
 8007c90:	6041      	str	r1, [r0, #4]
 8007c92:	4648      	mov	r0, r9
 8007c94:	f000 fd9c 	bl	80087d0 <_Balloc>
 8007c98:	4682      	mov	sl, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d142      	bne.n	8007d24 <_dtoa_r+0x2f4>
 8007c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d18 <_dtoa_r+0x2e8>)
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ca6:	e6da      	b.n	8007a5e <_dtoa_r+0x2e>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e7e3      	b.n	8007c74 <_dtoa_r+0x244>
 8007cac:	2300      	movs	r3, #0
 8007cae:	e7d5      	b.n	8007c5c <_dtoa_r+0x22c>
 8007cb0:	2401      	movs	r4, #1
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9307      	str	r3, [sp, #28]
 8007cb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007cb8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8007cc2:	2312      	movs	r3, #18
 8007cc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cc6:	e7db      	b.n	8007c80 <_dtoa_r+0x250>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ccc:	e7f4      	b.n	8007cb8 <_dtoa_r+0x288>
 8007cce:	f04f 0b01 	mov.w	fp, #1
 8007cd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007cdc:	e7d0      	b.n	8007c80 <_dtoa_r+0x250>
 8007cde:	3101      	adds	r1, #1
 8007ce0:	0052      	lsls	r2, r2, #1
 8007ce2:	e7d1      	b.n	8007c88 <_dtoa_r+0x258>
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	636f4361 	.word	0x636f4361
 8007cec:	3fd287a7 	.word	0x3fd287a7
 8007cf0:	8b60c8b3 	.word	0x8b60c8b3
 8007cf4:	3fc68a28 	.word	0x3fc68a28
 8007cf8:	509f79fb 	.word	0x509f79fb
 8007cfc:	3fd34413 	.word	0x3fd34413
 8007d00:	0800b102 	.word	0x0800b102
 8007d04:	0800b119 	.word	0x0800b119
 8007d08:	7ff00000 	.word	0x7ff00000
 8007d0c:	0800b0cd 	.word	0x0800b0cd
 8007d10:	3ff80000 	.word	0x3ff80000
 8007d14:	0800b2c8 	.word	0x0800b2c8
 8007d18:	0800b171 	.word	0x0800b171
 8007d1c:	0800b0fe 	.word	0x0800b0fe
 8007d20:	0800b0cc 	.word	0x0800b0cc
 8007d24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d28:	6018      	str	r0, [r3, #0]
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	2b0e      	cmp	r3, #14
 8007d2e:	f200 80a1 	bhi.w	8007e74 <_dtoa_r+0x444>
 8007d32:	2c00      	cmp	r4, #0
 8007d34:	f000 809e 	beq.w	8007e74 <_dtoa_r+0x444>
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	dd33      	ble.n	8007da4 <_dtoa_r+0x374>
 8007d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8007fb0 <_dtoa_r+0x580>)
 8007d3e:	f007 020f 	and.w	r2, r7, #15
 8007d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d46:	ed93 7b00 	vldr	d7, [r3]
 8007d4a:	05f8      	lsls	r0, r7, #23
 8007d4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d54:	d516      	bpl.n	8007d84 <_dtoa_r+0x354>
 8007d56:	4b97      	ldr	r3, [pc, #604]	@ (8007fb4 <_dtoa_r+0x584>)
 8007d58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d60:	f7f8 fd74 	bl	800084c <__aeabi_ddiv>
 8007d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d68:	f004 040f 	and.w	r4, r4, #15
 8007d6c:	2603      	movs	r6, #3
 8007d6e:	4d91      	ldr	r5, [pc, #580]	@ (8007fb4 <_dtoa_r+0x584>)
 8007d70:	b954      	cbnz	r4, 8007d88 <_dtoa_r+0x358>
 8007d72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d7a:	f7f8 fd67 	bl	800084c <__aeabi_ddiv>
 8007d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d82:	e028      	b.n	8007dd6 <_dtoa_r+0x3a6>
 8007d84:	2602      	movs	r6, #2
 8007d86:	e7f2      	b.n	8007d6e <_dtoa_r+0x33e>
 8007d88:	07e1      	lsls	r1, r4, #31
 8007d8a:	d508      	bpl.n	8007d9e <_dtoa_r+0x36e>
 8007d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d94:	f7f8 fc30 	bl	80005f8 <__aeabi_dmul>
 8007d98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	1064      	asrs	r4, r4, #1
 8007da0:	3508      	adds	r5, #8
 8007da2:	e7e5      	b.n	8007d70 <_dtoa_r+0x340>
 8007da4:	f000 80af 	beq.w	8007f06 <_dtoa_r+0x4d6>
 8007da8:	427c      	negs	r4, r7
 8007daa:	4b81      	ldr	r3, [pc, #516]	@ (8007fb0 <_dtoa_r+0x580>)
 8007dac:	4d81      	ldr	r5, [pc, #516]	@ (8007fb4 <_dtoa_r+0x584>)
 8007dae:	f004 020f 	and.w	r2, r4, #15
 8007db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dbe:	f7f8 fc1b 	bl	80005f8 <__aeabi_dmul>
 8007dc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dc6:	1124      	asrs	r4, r4, #4
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2602      	movs	r6, #2
 8007dcc:	2c00      	cmp	r4, #0
 8007dce:	f040 808f 	bne.w	8007ef0 <_dtoa_r+0x4c0>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1d3      	bne.n	8007d7e <_dtoa_r+0x34e>
 8007dd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007dd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 8094 	beq.w	8007f0a <_dtoa_r+0x4da>
 8007de2:	4b75      	ldr	r3, [pc, #468]	@ (8007fb8 <_dtoa_r+0x588>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fe77 	bl	8000adc <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f000 808b 	beq.w	8007f0a <_dtoa_r+0x4da>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8087 	beq.w	8007f0a <_dtoa_r+0x4da>
 8007dfc:	f1bb 0f00 	cmp.w	fp, #0
 8007e00:	dd34      	ble.n	8007e6c <_dtoa_r+0x43c>
 8007e02:	4620      	mov	r0, r4
 8007e04:	4b6d      	ldr	r3, [pc, #436]	@ (8007fbc <_dtoa_r+0x58c>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fbf5 	bl	80005f8 <__aeabi_dmul>
 8007e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e12:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007e16:	3601      	adds	r6, #1
 8007e18:	465c      	mov	r4, fp
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f7f8 fb82 	bl	8000524 <__aeabi_i2d>
 8007e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	4b65      	ldr	r3, [pc, #404]	@ (8007fc0 <_dtoa_r+0x590>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f7f8 fa2e 	bl	800028c <__adddf3>
 8007e30:	4605      	mov	r5, r0
 8007e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e36:	2c00      	cmp	r4, #0
 8007e38:	d16a      	bne.n	8007f10 <_dtoa_r+0x4e0>
 8007e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e3e:	4b61      	ldr	r3, [pc, #388]	@ (8007fc4 <_dtoa_r+0x594>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	f7f8 fa21 	bl	8000288 <__aeabi_dsub>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4633      	mov	r3, r6
 8007e52:	f7f8 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f040 8298 	bne.w	800838c <_dtoa_r+0x95c>
 8007e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e60:	462a      	mov	r2, r5
 8007e62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e66:	f7f8 fe39 	bl	8000adc <__aeabi_dcmplt>
 8007e6a:	bb38      	cbnz	r0, 8007ebc <_dtoa_r+0x48c>
 8007e6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f2c0 8157 	blt.w	800812a <_dtoa_r+0x6fa>
 8007e7c:	2f0e      	cmp	r7, #14
 8007e7e:	f300 8154 	bgt.w	800812a <_dtoa_r+0x6fa>
 8007e82:	4b4b      	ldr	r3, [pc, #300]	@ (8007fb0 <_dtoa_r+0x580>)
 8007e84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e88:	ed93 7b00 	vldr	d7, [r3]
 8007e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	ed8d 7b00 	vstr	d7, [sp]
 8007e94:	f280 80e5 	bge.w	8008062 <_dtoa_r+0x632>
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f300 80e1 	bgt.w	8008062 <_dtoa_r+0x632>
 8007ea0:	d10c      	bne.n	8007ebc <_dtoa_r+0x48c>
 8007ea2:	4b48      	ldr	r3, [pc, #288]	@ (8007fc4 <_dtoa_r+0x594>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	ec51 0b17 	vmov	r0, r1, d7
 8007eaa:	f7f8 fba5 	bl	80005f8 <__aeabi_dmul>
 8007eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eb2:	f7f8 fe27 	bl	8000b04 <__aeabi_dcmpge>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f000 8266 	beq.w	8008388 <_dtoa_r+0x958>
 8007ebc:	2400      	movs	r4, #0
 8007ebe:	4625      	mov	r5, r4
 8007ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ec2:	4656      	mov	r6, sl
 8007ec4:	ea6f 0803 	mvn.w	r8, r3
 8007ec8:	2700      	movs	r7, #0
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4648      	mov	r0, r9
 8007ece:	f000 fcbf 	bl	8008850 <_Bfree>
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	f000 80bd 	beq.w	8008052 <_dtoa_r+0x622>
 8007ed8:	b12f      	cbz	r7, 8007ee6 <_dtoa_r+0x4b6>
 8007eda:	42af      	cmp	r7, r5
 8007edc:	d003      	beq.n	8007ee6 <_dtoa_r+0x4b6>
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4648      	mov	r0, r9
 8007ee2:	f000 fcb5 	bl	8008850 <_Bfree>
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4648      	mov	r0, r9
 8007eea:	f000 fcb1 	bl	8008850 <_Bfree>
 8007eee:	e0b0      	b.n	8008052 <_dtoa_r+0x622>
 8007ef0:	07e2      	lsls	r2, r4, #31
 8007ef2:	d505      	bpl.n	8007f00 <_dtoa_r+0x4d0>
 8007ef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ef8:	f7f8 fb7e 	bl	80005f8 <__aeabi_dmul>
 8007efc:	3601      	adds	r6, #1
 8007efe:	2301      	movs	r3, #1
 8007f00:	1064      	asrs	r4, r4, #1
 8007f02:	3508      	adds	r5, #8
 8007f04:	e762      	b.n	8007dcc <_dtoa_r+0x39c>
 8007f06:	2602      	movs	r6, #2
 8007f08:	e765      	b.n	8007dd6 <_dtoa_r+0x3a6>
 8007f0a:	9c03      	ldr	r4, [sp, #12]
 8007f0c:	46b8      	mov	r8, r7
 8007f0e:	e784      	b.n	8007e1a <_dtoa_r+0x3ea>
 8007f10:	4b27      	ldr	r3, [pc, #156]	@ (8007fb0 <_dtoa_r+0x580>)
 8007f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f1c:	4454      	add	r4, sl
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d054      	beq.n	8007fcc <_dtoa_r+0x59c>
 8007f22:	4929      	ldr	r1, [pc, #164]	@ (8007fc8 <_dtoa_r+0x598>)
 8007f24:	2000      	movs	r0, #0
 8007f26:	f7f8 fc91 	bl	800084c <__aeabi_ddiv>
 8007f2a:	4633      	mov	r3, r6
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	f7f8 f9ab 	bl	8000288 <__aeabi_dsub>
 8007f32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f36:	4656      	mov	r6, sl
 8007f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f3c:	f7f8 fe0c 	bl	8000b58 <__aeabi_d2iz>
 8007f40:	4605      	mov	r5, r0
 8007f42:	f7f8 faef 	bl	8000524 <__aeabi_i2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f4e:	f7f8 f99b 	bl	8000288 <__aeabi_dsub>
 8007f52:	3530      	adds	r5, #48	@ 0x30
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f5c:	f806 5b01 	strb.w	r5, [r6], #1
 8007f60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f64:	f7f8 fdba 	bl	8000adc <__aeabi_dcmplt>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d172      	bne.n	8008052 <_dtoa_r+0x622>
 8007f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f70:	4911      	ldr	r1, [pc, #68]	@ (8007fb8 <_dtoa_r+0x588>)
 8007f72:	2000      	movs	r0, #0
 8007f74:	f7f8 f988 	bl	8000288 <__aeabi_dsub>
 8007f78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f7c:	f7f8 fdae 	bl	8000adc <__aeabi_dcmplt>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f040 80b4 	bne.w	80080ee <_dtoa_r+0x6be>
 8007f86:	42a6      	cmp	r6, r4
 8007f88:	f43f af70 	beq.w	8007e6c <_dtoa_r+0x43c>
 8007f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <_dtoa_r+0x58c>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	f7f8 fb30 	bl	80005f8 <__aeabi_dmul>
 8007f98:	4b08      	ldr	r3, [pc, #32]	@ (8007fbc <_dtoa_r+0x58c>)
 8007f9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa4:	f7f8 fb28 	bl	80005f8 <__aeabi_dmul>
 8007fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fac:	e7c4      	b.n	8007f38 <_dtoa_r+0x508>
 8007fae:	bf00      	nop
 8007fb0:	0800b2c8 	.word	0x0800b2c8
 8007fb4:	0800b2a0 	.word	0x0800b2a0
 8007fb8:	3ff00000 	.word	0x3ff00000
 8007fbc:	40240000 	.word	0x40240000
 8007fc0:	401c0000 	.word	0x401c0000
 8007fc4:	40140000 	.word	0x40140000
 8007fc8:	3fe00000 	.word	0x3fe00000
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007fda:	4656      	mov	r6, sl
 8007fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe0:	f7f8 fdba 	bl	8000b58 <__aeabi_d2iz>
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	f7f8 fa9d 	bl	8000524 <__aeabi_i2d>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff2:	f7f8 f949 	bl	8000288 <__aeabi_dsub>
 8007ff6:	3530      	adds	r5, #48	@ 0x30
 8007ff8:	f806 5b01 	strb.w	r5, [r6], #1
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	42a6      	cmp	r6, r4
 8008002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	d124      	bne.n	8008056 <_dtoa_r+0x626>
 800800c:	4baf      	ldr	r3, [pc, #700]	@ (80082cc <_dtoa_r+0x89c>)
 800800e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008012:	f7f8 f93b 	bl	800028c <__adddf3>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800801e:	f7f8 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008022:	2800      	cmp	r0, #0
 8008024:	d163      	bne.n	80080ee <_dtoa_r+0x6be>
 8008026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800802a:	49a8      	ldr	r1, [pc, #672]	@ (80082cc <_dtoa_r+0x89c>)
 800802c:	2000      	movs	r0, #0
 800802e:	f7f8 f92b 	bl	8000288 <__aeabi_dsub>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800803a:	f7f8 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f af14 	beq.w	8007e6c <_dtoa_r+0x43c>
 8008044:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008046:	1e73      	subs	r3, r6, #1
 8008048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800804a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800804e:	2b30      	cmp	r3, #48	@ 0x30
 8008050:	d0f8      	beq.n	8008044 <_dtoa_r+0x614>
 8008052:	4647      	mov	r7, r8
 8008054:	e03b      	b.n	80080ce <_dtoa_r+0x69e>
 8008056:	4b9e      	ldr	r3, [pc, #632]	@ (80082d0 <_dtoa_r+0x8a0>)
 8008058:	f7f8 face 	bl	80005f8 <__aeabi_dmul>
 800805c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008060:	e7bc      	b.n	8007fdc <_dtoa_r+0x5ac>
 8008062:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008066:	4656      	mov	r6, sl
 8008068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800806c:	4620      	mov	r0, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 fbec 	bl	800084c <__aeabi_ddiv>
 8008074:	f7f8 fd70 	bl	8000b58 <__aeabi_d2iz>
 8008078:	4680      	mov	r8, r0
 800807a:	f7f8 fa53 	bl	8000524 <__aeabi_i2d>
 800807e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008082:	f7f8 fab9 	bl	80005f8 <__aeabi_dmul>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008092:	f7f8 f8f9 	bl	8000288 <__aeabi_dsub>
 8008096:	f806 4b01 	strb.w	r4, [r6], #1
 800809a:	9d03      	ldr	r5, [sp, #12]
 800809c:	eba6 040a 	sub.w	r4, r6, sl
 80080a0:	42a5      	cmp	r5, r4
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	d133      	bne.n	8008110 <_dtoa_r+0x6e0>
 80080a8:	f7f8 f8f0 	bl	800028c <__adddf3>
 80080ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	f7f8 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 80080b8:	b9c0      	cbnz	r0, 80080ec <_dtoa_r+0x6bc>
 80080ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080be:	4620      	mov	r0, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c6:	b110      	cbz	r0, 80080ce <_dtoa_r+0x69e>
 80080c8:	f018 0f01 	tst.w	r8, #1
 80080cc:	d10e      	bne.n	80080ec <_dtoa_r+0x6bc>
 80080ce:	9902      	ldr	r1, [sp, #8]
 80080d0:	4648      	mov	r0, r9
 80080d2:	f000 fbbd 	bl	8008850 <_Bfree>
 80080d6:	2300      	movs	r3, #0
 80080d8:	7033      	strb	r3, [r6, #0]
 80080da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080dc:	3701      	adds	r7, #1
 80080de:	601f      	str	r7, [r3, #0]
 80080e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 824b 	beq.w	800857e <_dtoa_r+0xb4e>
 80080e8:	601e      	str	r6, [r3, #0]
 80080ea:	e248      	b.n	800857e <_dtoa_r+0xb4e>
 80080ec:	46b8      	mov	r8, r7
 80080ee:	4633      	mov	r3, r6
 80080f0:	461e      	mov	r6, r3
 80080f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f6:	2a39      	cmp	r2, #57	@ 0x39
 80080f8:	d106      	bne.n	8008108 <_dtoa_r+0x6d8>
 80080fa:	459a      	cmp	sl, r3
 80080fc:	d1f8      	bne.n	80080f0 <_dtoa_r+0x6c0>
 80080fe:	2230      	movs	r2, #48	@ 0x30
 8008100:	f108 0801 	add.w	r8, r8, #1
 8008104:	f88a 2000 	strb.w	r2, [sl]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	3201      	adds	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e7a0      	b.n	8008052 <_dtoa_r+0x622>
 8008110:	4b6f      	ldr	r3, [pc, #444]	@ (80082d0 <_dtoa_r+0x8a0>)
 8008112:	2200      	movs	r2, #0
 8008114:	f7f8 fa70 	bl	80005f8 <__aeabi_dmul>
 8008118:	2200      	movs	r2, #0
 800811a:	2300      	movs	r3, #0
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	f7f8 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008124:	2800      	cmp	r0, #0
 8008126:	d09f      	beq.n	8008068 <_dtoa_r+0x638>
 8008128:	e7d1      	b.n	80080ce <_dtoa_r+0x69e>
 800812a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800812c:	2a00      	cmp	r2, #0
 800812e:	f000 80ea 	beq.w	8008306 <_dtoa_r+0x8d6>
 8008132:	9a07      	ldr	r2, [sp, #28]
 8008134:	2a01      	cmp	r2, #1
 8008136:	f300 80cd 	bgt.w	80082d4 <_dtoa_r+0x8a4>
 800813a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800813c:	2a00      	cmp	r2, #0
 800813e:	f000 80c1 	beq.w	80082c4 <_dtoa_r+0x894>
 8008142:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008146:	9c08      	ldr	r4, [sp, #32]
 8008148:	9e00      	ldr	r6, [sp, #0]
 800814a:	9a00      	ldr	r2, [sp, #0]
 800814c:	441a      	add	r2, r3
 800814e:	9200      	str	r2, [sp, #0]
 8008150:	9a06      	ldr	r2, [sp, #24]
 8008152:	2101      	movs	r1, #1
 8008154:	441a      	add	r2, r3
 8008156:	4648      	mov	r0, r9
 8008158:	9206      	str	r2, [sp, #24]
 800815a:	f000 fc77 	bl	8008a4c <__i2b>
 800815e:	4605      	mov	r5, r0
 8008160:	b166      	cbz	r6, 800817c <_dtoa_r+0x74c>
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd09      	ble.n	800817c <_dtoa_r+0x74c>
 8008168:	42b3      	cmp	r3, r6
 800816a:	9a00      	ldr	r2, [sp, #0]
 800816c:	bfa8      	it	ge
 800816e:	4633      	movge	r3, r6
 8008170:	1ad2      	subs	r2, r2, r3
 8008172:	9200      	str	r2, [sp, #0]
 8008174:	9a06      	ldr	r2, [sp, #24]
 8008176:	1af6      	subs	r6, r6, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	9306      	str	r3, [sp, #24]
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	b30b      	cbz	r3, 80081c4 <_dtoa_r+0x794>
 8008180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80c6 	beq.w	8008314 <_dtoa_r+0x8e4>
 8008188:	2c00      	cmp	r4, #0
 800818a:	f000 80c0 	beq.w	800830e <_dtoa_r+0x8de>
 800818e:	4629      	mov	r1, r5
 8008190:	4622      	mov	r2, r4
 8008192:	4648      	mov	r0, r9
 8008194:	f000 fd12 	bl	8008bbc <__pow5mult>
 8008198:	9a02      	ldr	r2, [sp, #8]
 800819a:	4601      	mov	r1, r0
 800819c:	4605      	mov	r5, r0
 800819e:	4648      	mov	r0, r9
 80081a0:	f000 fc6a 	bl	8008a78 <__multiply>
 80081a4:	9902      	ldr	r1, [sp, #8]
 80081a6:	4680      	mov	r8, r0
 80081a8:	4648      	mov	r0, r9
 80081aa:	f000 fb51 	bl	8008850 <_Bfree>
 80081ae:	9b08      	ldr	r3, [sp, #32]
 80081b0:	1b1b      	subs	r3, r3, r4
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	f000 80b1 	beq.w	800831a <_dtoa_r+0x8ea>
 80081b8:	9a08      	ldr	r2, [sp, #32]
 80081ba:	4641      	mov	r1, r8
 80081bc:	4648      	mov	r0, r9
 80081be:	f000 fcfd 	bl	8008bbc <__pow5mult>
 80081c2:	9002      	str	r0, [sp, #8]
 80081c4:	2101      	movs	r1, #1
 80081c6:	4648      	mov	r0, r9
 80081c8:	f000 fc40 	bl	8008a4c <__i2b>
 80081cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081ce:	4604      	mov	r4, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 81d8 	beq.w	8008586 <_dtoa_r+0xb56>
 80081d6:	461a      	mov	r2, r3
 80081d8:	4601      	mov	r1, r0
 80081da:	4648      	mov	r0, r9
 80081dc:	f000 fcee 	bl	8008bbc <__pow5mult>
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	4604      	mov	r4, r0
 80081e6:	f300 809f 	bgt.w	8008328 <_dtoa_r+0x8f8>
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 8097 	bne.w	8008320 <_dtoa_r+0x8f0>
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f040 8093 	bne.w	8008324 <_dtoa_r+0x8f4>
 80081fe:	9b05      	ldr	r3, [sp, #20]
 8008200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008204:	0d1b      	lsrs	r3, r3, #20
 8008206:	051b      	lsls	r3, r3, #20
 8008208:	b133      	cbz	r3, 8008218 <_dtoa_r+0x7e8>
 800820a:	9b00      	ldr	r3, [sp, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	9b06      	ldr	r3, [sp, #24]
 8008212:	3301      	adds	r3, #1
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	2301      	movs	r3, #1
 8008218:	9308      	str	r3, [sp, #32]
 800821a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 81b8 	beq.w	8008592 <_dtoa_r+0xb62>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008228:	6918      	ldr	r0, [r3, #16]
 800822a:	f000 fbc3 	bl	80089b4 <__hi0bits>
 800822e:	f1c0 0020 	rsb	r0, r0, #32
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	4418      	add	r0, r3
 8008236:	f010 001f 	ands.w	r0, r0, #31
 800823a:	f000 8082 	beq.w	8008342 <_dtoa_r+0x912>
 800823e:	f1c0 0320 	rsb	r3, r0, #32
 8008242:	2b04      	cmp	r3, #4
 8008244:	dd73      	ble.n	800832e <_dtoa_r+0x8fe>
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	f1c0 001c 	rsb	r0, r0, #28
 800824c:	4403      	add	r3, r0
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	9b06      	ldr	r3, [sp, #24]
 8008252:	4403      	add	r3, r0
 8008254:	4406      	add	r6, r0
 8008256:	9306      	str	r3, [sp, #24]
 8008258:	9b00      	ldr	r3, [sp, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dd05      	ble.n	800826a <_dtoa_r+0x83a>
 800825e:	9902      	ldr	r1, [sp, #8]
 8008260:	461a      	mov	r2, r3
 8008262:	4648      	mov	r0, r9
 8008264:	f000 fd04 	bl	8008c70 <__lshift>
 8008268:	9002      	str	r0, [sp, #8]
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	dd05      	ble.n	800827c <_dtoa_r+0x84c>
 8008270:	4621      	mov	r1, r4
 8008272:	461a      	mov	r2, r3
 8008274:	4648      	mov	r0, r9
 8008276:	f000 fcfb 	bl	8008c70 <__lshift>
 800827a:	4604      	mov	r4, r0
 800827c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d061      	beq.n	8008346 <_dtoa_r+0x916>
 8008282:	9802      	ldr	r0, [sp, #8]
 8008284:	4621      	mov	r1, r4
 8008286:	f000 fd5f 	bl	8008d48 <__mcmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	da5b      	bge.n	8008346 <_dtoa_r+0x916>
 800828e:	2300      	movs	r3, #0
 8008290:	9902      	ldr	r1, [sp, #8]
 8008292:	220a      	movs	r2, #10
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fafd 	bl	8008894 <__multadd>
 800829a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829c:	9002      	str	r0, [sp, #8]
 800829e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8177 	beq.w	8008596 <_dtoa_r+0xb66>
 80082a8:	4629      	mov	r1, r5
 80082aa:	2300      	movs	r3, #0
 80082ac:	220a      	movs	r2, #10
 80082ae:	4648      	mov	r0, r9
 80082b0:	f000 faf0 	bl	8008894 <__multadd>
 80082b4:	f1bb 0f00 	cmp.w	fp, #0
 80082b8:	4605      	mov	r5, r0
 80082ba:	dc6f      	bgt.n	800839c <_dtoa_r+0x96c>
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	dc49      	bgt.n	8008356 <_dtoa_r+0x926>
 80082c2:	e06b      	b.n	800839c <_dtoa_r+0x96c>
 80082c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082ca:	e73c      	b.n	8008146 <_dtoa_r+0x716>
 80082cc:	3fe00000 	.word	0x3fe00000
 80082d0:	40240000 	.word	0x40240000
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	1e5c      	subs	r4, r3, #1
 80082d8:	9b08      	ldr	r3, [sp, #32]
 80082da:	42a3      	cmp	r3, r4
 80082dc:	db09      	blt.n	80082f2 <_dtoa_r+0x8c2>
 80082de:	1b1c      	subs	r4, r3, r4
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f6bf af30 	bge.w	8008148 <_dtoa_r+0x718>
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	9a03      	ldr	r2, [sp, #12]
 80082ec:	1a9e      	subs	r6, r3, r2
 80082ee:	2300      	movs	r3, #0
 80082f0:	e72b      	b.n	800814a <_dtoa_r+0x71a>
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082f6:	9408      	str	r4, [sp, #32]
 80082f8:	1ae3      	subs	r3, r4, r3
 80082fa:	441a      	add	r2, r3
 80082fc:	9e00      	ldr	r6, [sp, #0]
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	920d      	str	r2, [sp, #52]	@ 0x34
 8008302:	2400      	movs	r4, #0
 8008304:	e721      	b.n	800814a <_dtoa_r+0x71a>
 8008306:	9c08      	ldr	r4, [sp, #32]
 8008308:	9e00      	ldr	r6, [sp, #0]
 800830a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800830c:	e728      	b.n	8008160 <_dtoa_r+0x730>
 800830e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008312:	e751      	b.n	80081b8 <_dtoa_r+0x788>
 8008314:	9a08      	ldr	r2, [sp, #32]
 8008316:	9902      	ldr	r1, [sp, #8]
 8008318:	e750      	b.n	80081bc <_dtoa_r+0x78c>
 800831a:	f8cd 8008 	str.w	r8, [sp, #8]
 800831e:	e751      	b.n	80081c4 <_dtoa_r+0x794>
 8008320:	2300      	movs	r3, #0
 8008322:	e779      	b.n	8008218 <_dtoa_r+0x7e8>
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	e777      	b.n	8008218 <_dtoa_r+0x7e8>
 8008328:	2300      	movs	r3, #0
 800832a:	9308      	str	r3, [sp, #32]
 800832c:	e779      	b.n	8008222 <_dtoa_r+0x7f2>
 800832e:	d093      	beq.n	8008258 <_dtoa_r+0x828>
 8008330:	9a00      	ldr	r2, [sp, #0]
 8008332:	331c      	adds	r3, #28
 8008334:	441a      	add	r2, r3
 8008336:	9200      	str	r2, [sp, #0]
 8008338:	9a06      	ldr	r2, [sp, #24]
 800833a:	441a      	add	r2, r3
 800833c:	441e      	add	r6, r3
 800833e:	9206      	str	r2, [sp, #24]
 8008340:	e78a      	b.n	8008258 <_dtoa_r+0x828>
 8008342:	4603      	mov	r3, r0
 8008344:	e7f4      	b.n	8008330 <_dtoa_r+0x900>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	46b8      	mov	r8, r7
 800834c:	dc20      	bgt.n	8008390 <_dtoa_r+0x960>
 800834e:	469b      	mov	fp, r3
 8008350:	9b07      	ldr	r3, [sp, #28]
 8008352:	2b02      	cmp	r3, #2
 8008354:	dd1e      	ble.n	8008394 <_dtoa_r+0x964>
 8008356:	f1bb 0f00 	cmp.w	fp, #0
 800835a:	f47f adb1 	bne.w	8007ec0 <_dtoa_r+0x490>
 800835e:	4621      	mov	r1, r4
 8008360:	465b      	mov	r3, fp
 8008362:	2205      	movs	r2, #5
 8008364:	4648      	mov	r0, r9
 8008366:	f000 fa95 	bl	8008894 <__multadd>
 800836a:	4601      	mov	r1, r0
 800836c:	4604      	mov	r4, r0
 800836e:	9802      	ldr	r0, [sp, #8]
 8008370:	f000 fcea 	bl	8008d48 <__mcmp>
 8008374:	2800      	cmp	r0, #0
 8008376:	f77f ada3 	ble.w	8007ec0 <_dtoa_r+0x490>
 800837a:	4656      	mov	r6, sl
 800837c:	2331      	movs	r3, #49	@ 0x31
 800837e:	f806 3b01 	strb.w	r3, [r6], #1
 8008382:	f108 0801 	add.w	r8, r8, #1
 8008386:	e59f      	b.n	8007ec8 <_dtoa_r+0x498>
 8008388:	9c03      	ldr	r4, [sp, #12]
 800838a:	46b8      	mov	r8, r7
 800838c:	4625      	mov	r5, r4
 800838e:	e7f4      	b.n	800837a <_dtoa_r+0x94a>
 8008390:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8101 	beq.w	800859e <_dtoa_r+0xb6e>
 800839c:	2e00      	cmp	r6, #0
 800839e:	dd05      	ble.n	80083ac <_dtoa_r+0x97c>
 80083a0:	4629      	mov	r1, r5
 80083a2:	4632      	mov	r2, r6
 80083a4:	4648      	mov	r0, r9
 80083a6:	f000 fc63 	bl	8008c70 <__lshift>
 80083aa:	4605      	mov	r5, r0
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d05c      	beq.n	800846c <_dtoa_r+0xa3c>
 80083b2:	6869      	ldr	r1, [r5, #4]
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fa0b 	bl	80087d0 <_Balloc>
 80083ba:	4606      	mov	r6, r0
 80083bc:	b928      	cbnz	r0, 80083ca <_dtoa_r+0x99a>
 80083be:	4b82      	ldr	r3, [pc, #520]	@ (80085c8 <_dtoa_r+0xb98>)
 80083c0:	4602      	mov	r2, r0
 80083c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083c6:	f7ff bb4a 	b.w	8007a5e <_dtoa_r+0x2e>
 80083ca:	692a      	ldr	r2, [r5, #16]
 80083cc:	3202      	adds	r2, #2
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	f105 010c 	add.w	r1, r5, #12
 80083d4:	300c      	adds	r0, #12
 80083d6:	f7ff fa8c 	bl	80078f2 <memcpy>
 80083da:	2201      	movs	r2, #1
 80083dc:	4631      	mov	r1, r6
 80083de:	4648      	mov	r0, r9
 80083e0:	f000 fc46 	bl	8008c70 <__lshift>
 80083e4:	f10a 0301 	add.w	r3, sl, #1
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	eb0a 030b 	add.w	r3, sl, fp
 80083ee:	9308      	str	r3, [sp, #32]
 80083f0:	9b04      	ldr	r3, [sp, #16]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	462f      	mov	r7, r5
 80083f8:	9306      	str	r3, [sp, #24]
 80083fa:	4605      	mov	r5, r0
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	9802      	ldr	r0, [sp, #8]
 8008400:	4621      	mov	r1, r4
 8008402:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008406:	f7ff fa89 	bl	800791c <quorem>
 800840a:	4603      	mov	r3, r0
 800840c:	3330      	adds	r3, #48	@ 0x30
 800840e:	9003      	str	r0, [sp, #12]
 8008410:	4639      	mov	r1, r7
 8008412:	9802      	ldr	r0, [sp, #8]
 8008414:	9309      	str	r3, [sp, #36]	@ 0x24
 8008416:	f000 fc97 	bl	8008d48 <__mcmp>
 800841a:	462a      	mov	r2, r5
 800841c:	9004      	str	r0, [sp, #16]
 800841e:	4621      	mov	r1, r4
 8008420:	4648      	mov	r0, r9
 8008422:	f000 fcad 	bl	8008d80 <__mdiff>
 8008426:	68c2      	ldr	r2, [r0, #12]
 8008428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842a:	4606      	mov	r6, r0
 800842c:	bb02      	cbnz	r2, 8008470 <_dtoa_r+0xa40>
 800842e:	4601      	mov	r1, r0
 8008430:	9802      	ldr	r0, [sp, #8]
 8008432:	f000 fc89 	bl	8008d48 <__mcmp>
 8008436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008438:	4602      	mov	r2, r0
 800843a:	4631      	mov	r1, r6
 800843c:	4648      	mov	r0, r9
 800843e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008440:	9309      	str	r3, [sp, #36]	@ 0x24
 8008442:	f000 fa05 	bl	8008850 <_Bfree>
 8008446:	9b07      	ldr	r3, [sp, #28]
 8008448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800844a:	9e00      	ldr	r6, [sp, #0]
 800844c:	ea42 0103 	orr.w	r1, r2, r3
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	4319      	orrs	r1, r3
 8008454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008456:	d10d      	bne.n	8008474 <_dtoa_r+0xa44>
 8008458:	2b39      	cmp	r3, #57	@ 0x39
 800845a:	d027      	beq.n	80084ac <_dtoa_r+0xa7c>
 800845c:	9a04      	ldr	r2, [sp, #16]
 800845e:	2a00      	cmp	r2, #0
 8008460:	dd01      	ble.n	8008466 <_dtoa_r+0xa36>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	3331      	adds	r3, #49	@ 0x31
 8008466:	f88b 3000 	strb.w	r3, [fp]
 800846a:	e52e      	b.n	8007eca <_dtoa_r+0x49a>
 800846c:	4628      	mov	r0, r5
 800846e:	e7b9      	b.n	80083e4 <_dtoa_r+0x9b4>
 8008470:	2201      	movs	r2, #1
 8008472:	e7e2      	b.n	800843a <_dtoa_r+0xa0a>
 8008474:	9904      	ldr	r1, [sp, #16]
 8008476:	2900      	cmp	r1, #0
 8008478:	db04      	blt.n	8008484 <_dtoa_r+0xa54>
 800847a:	9807      	ldr	r0, [sp, #28]
 800847c:	4301      	orrs	r1, r0
 800847e:	9806      	ldr	r0, [sp, #24]
 8008480:	4301      	orrs	r1, r0
 8008482:	d120      	bne.n	80084c6 <_dtoa_r+0xa96>
 8008484:	2a00      	cmp	r2, #0
 8008486:	ddee      	ble.n	8008466 <_dtoa_r+0xa36>
 8008488:	9902      	ldr	r1, [sp, #8]
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	2201      	movs	r2, #1
 800848e:	4648      	mov	r0, r9
 8008490:	f000 fbee 	bl	8008c70 <__lshift>
 8008494:	4621      	mov	r1, r4
 8008496:	9002      	str	r0, [sp, #8]
 8008498:	f000 fc56 	bl	8008d48 <__mcmp>
 800849c:	2800      	cmp	r0, #0
 800849e:	9b00      	ldr	r3, [sp, #0]
 80084a0:	dc02      	bgt.n	80084a8 <_dtoa_r+0xa78>
 80084a2:	d1e0      	bne.n	8008466 <_dtoa_r+0xa36>
 80084a4:	07da      	lsls	r2, r3, #31
 80084a6:	d5de      	bpl.n	8008466 <_dtoa_r+0xa36>
 80084a8:	2b39      	cmp	r3, #57	@ 0x39
 80084aa:	d1da      	bne.n	8008462 <_dtoa_r+0xa32>
 80084ac:	2339      	movs	r3, #57	@ 0x39
 80084ae:	f88b 3000 	strb.w	r3, [fp]
 80084b2:	4633      	mov	r3, r6
 80084b4:	461e      	mov	r6, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084bc:	2a39      	cmp	r2, #57	@ 0x39
 80084be:	d04e      	beq.n	800855e <_dtoa_r+0xb2e>
 80084c0:	3201      	adds	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e501      	b.n	8007eca <_dtoa_r+0x49a>
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	dd03      	ble.n	80084d2 <_dtoa_r+0xaa2>
 80084ca:	2b39      	cmp	r3, #57	@ 0x39
 80084cc:	d0ee      	beq.n	80084ac <_dtoa_r+0xa7c>
 80084ce:	3301      	adds	r3, #1
 80084d0:	e7c9      	b.n	8008466 <_dtoa_r+0xa36>
 80084d2:	9a00      	ldr	r2, [sp, #0]
 80084d4:	9908      	ldr	r1, [sp, #32]
 80084d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084da:	428a      	cmp	r2, r1
 80084dc:	d028      	beq.n	8008530 <_dtoa_r+0xb00>
 80084de:	9902      	ldr	r1, [sp, #8]
 80084e0:	2300      	movs	r3, #0
 80084e2:	220a      	movs	r2, #10
 80084e4:	4648      	mov	r0, r9
 80084e6:	f000 f9d5 	bl	8008894 <__multadd>
 80084ea:	42af      	cmp	r7, r5
 80084ec:	9002      	str	r0, [sp, #8]
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	f04f 020a 	mov.w	r2, #10
 80084f6:	4639      	mov	r1, r7
 80084f8:	4648      	mov	r0, r9
 80084fa:	d107      	bne.n	800850c <_dtoa_r+0xadc>
 80084fc:	f000 f9ca 	bl	8008894 <__multadd>
 8008500:	4607      	mov	r7, r0
 8008502:	4605      	mov	r5, r0
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	e777      	b.n	80083fc <_dtoa_r+0x9cc>
 800850c:	f000 f9c2 	bl	8008894 <__multadd>
 8008510:	4629      	mov	r1, r5
 8008512:	4607      	mov	r7, r0
 8008514:	2300      	movs	r3, #0
 8008516:	220a      	movs	r2, #10
 8008518:	4648      	mov	r0, r9
 800851a:	f000 f9bb 	bl	8008894 <__multadd>
 800851e:	4605      	mov	r5, r0
 8008520:	e7f0      	b.n	8008504 <_dtoa_r+0xad4>
 8008522:	f1bb 0f00 	cmp.w	fp, #0
 8008526:	bfcc      	ite	gt
 8008528:	465e      	movgt	r6, fp
 800852a:	2601      	movle	r6, #1
 800852c:	4456      	add	r6, sl
 800852e:	2700      	movs	r7, #0
 8008530:	9902      	ldr	r1, [sp, #8]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	2201      	movs	r2, #1
 8008536:	4648      	mov	r0, r9
 8008538:	f000 fb9a 	bl	8008c70 <__lshift>
 800853c:	4621      	mov	r1, r4
 800853e:	9002      	str	r0, [sp, #8]
 8008540:	f000 fc02 	bl	8008d48 <__mcmp>
 8008544:	2800      	cmp	r0, #0
 8008546:	dcb4      	bgt.n	80084b2 <_dtoa_r+0xa82>
 8008548:	d102      	bne.n	8008550 <_dtoa_r+0xb20>
 800854a:	9b00      	ldr	r3, [sp, #0]
 800854c:	07db      	lsls	r3, r3, #31
 800854e:	d4b0      	bmi.n	80084b2 <_dtoa_r+0xa82>
 8008550:	4633      	mov	r3, r6
 8008552:	461e      	mov	r6, r3
 8008554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008558:	2a30      	cmp	r2, #48	@ 0x30
 800855a:	d0fa      	beq.n	8008552 <_dtoa_r+0xb22>
 800855c:	e4b5      	b.n	8007eca <_dtoa_r+0x49a>
 800855e:	459a      	cmp	sl, r3
 8008560:	d1a8      	bne.n	80084b4 <_dtoa_r+0xa84>
 8008562:	2331      	movs	r3, #49	@ 0x31
 8008564:	f108 0801 	add.w	r8, r8, #1
 8008568:	f88a 3000 	strb.w	r3, [sl]
 800856c:	e4ad      	b.n	8007eca <_dtoa_r+0x49a>
 800856e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008570:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80085cc <_dtoa_r+0xb9c>
 8008574:	b11b      	cbz	r3, 800857e <_dtoa_r+0xb4e>
 8008576:	f10a 0308 	add.w	r3, sl, #8
 800857a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	4650      	mov	r0, sl
 8008580:	b017      	add	sp, #92	@ 0x5c
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	9b07      	ldr	r3, [sp, #28]
 8008588:	2b01      	cmp	r3, #1
 800858a:	f77f ae2e 	ble.w	80081ea <_dtoa_r+0x7ba>
 800858e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	2001      	movs	r0, #1
 8008594:	e64d      	b.n	8008232 <_dtoa_r+0x802>
 8008596:	f1bb 0f00 	cmp.w	fp, #0
 800859a:	f77f aed9 	ble.w	8008350 <_dtoa_r+0x920>
 800859e:	4656      	mov	r6, sl
 80085a0:	9802      	ldr	r0, [sp, #8]
 80085a2:	4621      	mov	r1, r4
 80085a4:	f7ff f9ba 	bl	800791c <quorem>
 80085a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80085ac:	f806 3b01 	strb.w	r3, [r6], #1
 80085b0:	eba6 020a 	sub.w	r2, r6, sl
 80085b4:	4593      	cmp	fp, r2
 80085b6:	ddb4      	ble.n	8008522 <_dtoa_r+0xaf2>
 80085b8:	9902      	ldr	r1, [sp, #8]
 80085ba:	2300      	movs	r3, #0
 80085bc:	220a      	movs	r2, #10
 80085be:	4648      	mov	r0, r9
 80085c0:	f000 f968 	bl	8008894 <__multadd>
 80085c4:	9002      	str	r0, [sp, #8]
 80085c6:	e7eb      	b.n	80085a0 <_dtoa_r+0xb70>
 80085c8:	0800b171 	.word	0x0800b171
 80085cc:	0800b0f5 	.word	0x0800b0f5

080085d0 <_free_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4605      	mov	r5, r0
 80085d4:	2900      	cmp	r1, #0
 80085d6:	d041      	beq.n	800865c <_free_r+0x8c>
 80085d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085dc:	1f0c      	subs	r4, r1, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfb8      	it	lt
 80085e2:	18e4      	addlt	r4, r4, r3
 80085e4:	f000 f8e8 	bl	80087b8 <__malloc_lock>
 80085e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008660 <_free_r+0x90>)
 80085ea:	6813      	ldr	r3, [r2, #0]
 80085ec:	b933      	cbnz	r3, 80085fc <_free_r+0x2c>
 80085ee:	6063      	str	r3, [r4, #4]
 80085f0:	6014      	str	r4, [r2, #0]
 80085f2:	4628      	mov	r0, r5
 80085f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085f8:	f000 b8e4 	b.w	80087c4 <__malloc_unlock>
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d908      	bls.n	8008612 <_free_r+0x42>
 8008600:	6820      	ldr	r0, [r4, #0]
 8008602:	1821      	adds	r1, r4, r0
 8008604:	428b      	cmp	r3, r1
 8008606:	bf01      	itttt	eq
 8008608:	6819      	ldreq	r1, [r3, #0]
 800860a:	685b      	ldreq	r3, [r3, #4]
 800860c:	1809      	addeq	r1, r1, r0
 800860e:	6021      	streq	r1, [r4, #0]
 8008610:	e7ed      	b.n	80085ee <_free_r+0x1e>
 8008612:	461a      	mov	r2, r3
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	b10b      	cbz	r3, 800861c <_free_r+0x4c>
 8008618:	42a3      	cmp	r3, r4
 800861a:	d9fa      	bls.n	8008612 <_free_r+0x42>
 800861c:	6811      	ldr	r1, [r2, #0]
 800861e:	1850      	adds	r0, r2, r1
 8008620:	42a0      	cmp	r0, r4
 8008622:	d10b      	bne.n	800863c <_free_r+0x6c>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	4401      	add	r1, r0
 8008628:	1850      	adds	r0, r2, r1
 800862a:	4283      	cmp	r3, r0
 800862c:	6011      	str	r1, [r2, #0]
 800862e:	d1e0      	bne.n	80085f2 <_free_r+0x22>
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	6053      	str	r3, [r2, #4]
 8008636:	4408      	add	r0, r1
 8008638:	6010      	str	r0, [r2, #0]
 800863a:	e7da      	b.n	80085f2 <_free_r+0x22>
 800863c:	d902      	bls.n	8008644 <_free_r+0x74>
 800863e:	230c      	movs	r3, #12
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	e7d6      	b.n	80085f2 <_free_r+0x22>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	1821      	adds	r1, r4, r0
 8008648:	428b      	cmp	r3, r1
 800864a:	bf04      	itt	eq
 800864c:	6819      	ldreq	r1, [r3, #0]
 800864e:	685b      	ldreq	r3, [r3, #4]
 8008650:	6063      	str	r3, [r4, #4]
 8008652:	bf04      	itt	eq
 8008654:	1809      	addeq	r1, r1, r0
 8008656:	6021      	streq	r1, [r4, #0]
 8008658:	6054      	str	r4, [r2, #4]
 800865a:	e7ca      	b.n	80085f2 <_free_r+0x22>
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	20004514 	.word	0x20004514

08008664 <malloc>:
 8008664:	4b02      	ldr	r3, [pc, #8]	@ (8008670 <malloc+0xc>)
 8008666:	4601      	mov	r1, r0
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f000 b825 	b.w	80086b8 <_malloc_r>
 800866e:	bf00      	nop
 8008670:	2000001c 	.word	0x2000001c

08008674 <sbrk_aligned>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4e0f      	ldr	r6, [pc, #60]	@ (80086b4 <sbrk_aligned+0x40>)
 8008678:	460c      	mov	r4, r1
 800867a:	6831      	ldr	r1, [r6, #0]
 800867c:	4605      	mov	r5, r0
 800867e:	b911      	cbnz	r1, 8008686 <sbrk_aligned+0x12>
 8008680:	f001 fe04 	bl	800a28c <_sbrk_r>
 8008684:	6030      	str	r0, [r6, #0]
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f001 fdff 	bl	800a28c <_sbrk_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d103      	bne.n	800869a <sbrk_aligned+0x26>
 8008692:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008696:	4620      	mov	r0, r4
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	1cc4      	adds	r4, r0, #3
 800869c:	f024 0403 	bic.w	r4, r4, #3
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	d0f8      	beq.n	8008696 <sbrk_aligned+0x22>
 80086a4:	1a21      	subs	r1, r4, r0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f001 fdf0 	bl	800a28c <_sbrk_r>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1f2      	bne.n	8008696 <sbrk_aligned+0x22>
 80086b0:	e7ef      	b.n	8008692 <sbrk_aligned+0x1e>
 80086b2:	bf00      	nop
 80086b4:	20004510 	.word	0x20004510

080086b8 <_malloc_r>:
 80086b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	1ccd      	adds	r5, r1, #3
 80086be:	f025 0503 	bic.w	r5, r5, #3
 80086c2:	3508      	adds	r5, #8
 80086c4:	2d0c      	cmp	r5, #12
 80086c6:	bf38      	it	cc
 80086c8:	250c      	movcc	r5, #12
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	4606      	mov	r6, r0
 80086ce:	db01      	blt.n	80086d4 <_malloc_r+0x1c>
 80086d0:	42a9      	cmp	r1, r5
 80086d2:	d904      	bls.n	80086de <_malloc_r+0x26>
 80086d4:	230c      	movs	r3, #12
 80086d6:	6033      	str	r3, [r6, #0]
 80086d8:	2000      	movs	r0, #0
 80086da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087b4 <_malloc_r+0xfc>
 80086e2:	f000 f869 	bl	80087b8 <__malloc_lock>
 80086e6:	f8d8 3000 	ldr.w	r3, [r8]
 80086ea:	461c      	mov	r4, r3
 80086ec:	bb44      	cbnz	r4, 8008740 <_malloc_r+0x88>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7ff ffbf 	bl	8008674 <sbrk_aligned>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	4604      	mov	r4, r0
 80086fa:	d158      	bne.n	80087ae <_malloc_r+0xf6>
 80086fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008700:	4627      	mov	r7, r4
 8008702:	2f00      	cmp	r7, #0
 8008704:	d143      	bne.n	800878e <_malloc_r+0xd6>
 8008706:	2c00      	cmp	r4, #0
 8008708:	d04b      	beq.n	80087a2 <_malloc_r+0xea>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	4639      	mov	r1, r7
 800870e:	4630      	mov	r0, r6
 8008710:	eb04 0903 	add.w	r9, r4, r3
 8008714:	f001 fdba 	bl	800a28c <_sbrk_r>
 8008718:	4581      	cmp	r9, r0
 800871a:	d142      	bne.n	80087a2 <_malloc_r+0xea>
 800871c:	6821      	ldr	r1, [r4, #0]
 800871e:	1a6d      	subs	r5, r5, r1
 8008720:	4629      	mov	r1, r5
 8008722:	4630      	mov	r0, r6
 8008724:	f7ff ffa6 	bl	8008674 <sbrk_aligned>
 8008728:	3001      	adds	r0, #1
 800872a:	d03a      	beq.n	80087a2 <_malloc_r+0xea>
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	442b      	add	r3, r5
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	f8d8 3000 	ldr.w	r3, [r8]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	bb62      	cbnz	r2, 8008794 <_malloc_r+0xdc>
 800873a:	f8c8 7000 	str.w	r7, [r8]
 800873e:	e00f      	b.n	8008760 <_malloc_r+0xa8>
 8008740:	6822      	ldr	r2, [r4, #0]
 8008742:	1b52      	subs	r2, r2, r5
 8008744:	d420      	bmi.n	8008788 <_malloc_r+0xd0>
 8008746:	2a0b      	cmp	r2, #11
 8008748:	d917      	bls.n	800877a <_malloc_r+0xc2>
 800874a:	1961      	adds	r1, r4, r5
 800874c:	42a3      	cmp	r3, r4
 800874e:	6025      	str	r5, [r4, #0]
 8008750:	bf18      	it	ne
 8008752:	6059      	strne	r1, [r3, #4]
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	bf08      	it	eq
 8008758:	f8c8 1000 	streq.w	r1, [r8]
 800875c:	5162      	str	r2, [r4, r5]
 800875e:	604b      	str	r3, [r1, #4]
 8008760:	4630      	mov	r0, r6
 8008762:	f000 f82f 	bl	80087c4 <__malloc_unlock>
 8008766:	f104 000b 	add.w	r0, r4, #11
 800876a:	1d23      	adds	r3, r4, #4
 800876c:	f020 0007 	bic.w	r0, r0, #7
 8008770:	1ac2      	subs	r2, r0, r3
 8008772:	bf1c      	itt	ne
 8008774:	1a1b      	subne	r3, r3, r0
 8008776:	50a3      	strne	r3, [r4, r2]
 8008778:	e7af      	b.n	80086da <_malloc_r+0x22>
 800877a:	6862      	ldr	r2, [r4, #4]
 800877c:	42a3      	cmp	r3, r4
 800877e:	bf0c      	ite	eq
 8008780:	f8c8 2000 	streq.w	r2, [r8]
 8008784:	605a      	strne	r2, [r3, #4]
 8008786:	e7eb      	b.n	8008760 <_malloc_r+0xa8>
 8008788:	4623      	mov	r3, r4
 800878a:	6864      	ldr	r4, [r4, #4]
 800878c:	e7ae      	b.n	80086ec <_malloc_r+0x34>
 800878e:	463c      	mov	r4, r7
 8008790:	687f      	ldr	r7, [r7, #4]
 8008792:	e7b6      	b.n	8008702 <_malloc_r+0x4a>
 8008794:	461a      	mov	r2, r3
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	42a3      	cmp	r3, r4
 800879a:	d1fb      	bne.n	8008794 <_malloc_r+0xdc>
 800879c:	2300      	movs	r3, #0
 800879e:	6053      	str	r3, [r2, #4]
 80087a0:	e7de      	b.n	8008760 <_malloc_r+0xa8>
 80087a2:	230c      	movs	r3, #12
 80087a4:	6033      	str	r3, [r6, #0]
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f80c 	bl	80087c4 <__malloc_unlock>
 80087ac:	e794      	b.n	80086d8 <_malloc_r+0x20>
 80087ae:	6005      	str	r5, [r0, #0]
 80087b0:	e7d6      	b.n	8008760 <_malloc_r+0xa8>
 80087b2:	bf00      	nop
 80087b4:	20004514 	.word	0x20004514

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	@ (80087c0 <__malloc_lock+0x8>)
 80087ba:	f7ff b898 	b.w	80078ee <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	2000450c 	.word	0x2000450c

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	@ (80087cc <__malloc_unlock+0x8>)
 80087c6:	f7ff b893 	b.w	80078f0 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	2000450c 	.word	0x2000450c

080087d0 <_Balloc>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	69c6      	ldr	r6, [r0, #28]
 80087d4:	4604      	mov	r4, r0
 80087d6:	460d      	mov	r5, r1
 80087d8:	b976      	cbnz	r6, 80087f8 <_Balloc+0x28>
 80087da:	2010      	movs	r0, #16
 80087dc:	f7ff ff42 	bl	8008664 <malloc>
 80087e0:	4602      	mov	r2, r0
 80087e2:	61e0      	str	r0, [r4, #28]
 80087e4:	b920      	cbnz	r0, 80087f0 <_Balloc+0x20>
 80087e6:	4b18      	ldr	r3, [pc, #96]	@ (8008848 <_Balloc+0x78>)
 80087e8:	4818      	ldr	r0, [pc, #96]	@ (800884c <_Balloc+0x7c>)
 80087ea:	216b      	movs	r1, #107	@ 0x6b
 80087ec:	f001 fd68 	bl	800a2c0 <__assert_func>
 80087f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087f4:	6006      	str	r6, [r0, #0]
 80087f6:	60c6      	str	r6, [r0, #12]
 80087f8:	69e6      	ldr	r6, [r4, #28]
 80087fa:	68f3      	ldr	r3, [r6, #12]
 80087fc:	b183      	cbz	r3, 8008820 <_Balloc+0x50>
 80087fe:	69e3      	ldr	r3, [r4, #28]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008806:	b9b8      	cbnz	r0, 8008838 <_Balloc+0x68>
 8008808:	2101      	movs	r1, #1
 800880a:	fa01 f605 	lsl.w	r6, r1, r5
 800880e:	1d72      	adds	r2, r6, #5
 8008810:	0092      	lsls	r2, r2, #2
 8008812:	4620      	mov	r0, r4
 8008814:	f001 fd72 	bl	800a2fc <_calloc_r>
 8008818:	b160      	cbz	r0, 8008834 <_Balloc+0x64>
 800881a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800881e:	e00e      	b.n	800883e <_Balloc+0x6e>
 8008820:	2221      	movs	r2, #33	@ 0x21
 8008822:	2104      	movs	r1, #4
 8008824:	4620      	mov	r0, r4
 8008826:	f001 fd69 	bl	800a2fc <_calloc_r>
 800882a:	69e3      	ldr	r3, [r4, #28]
 800882c:	60f0      	str	r0, [r6, #12]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e4      	bne.n	80087fe <_Balloc+0x2e>
 8008834:	2000      	movs	r0, #0
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	6802      	ldr	r2, [r0, #0]
 800883a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800883e:	2300      	movs	r3, #0
 8008840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008844:	e7f7      	b.n	8008836 <_Balloc+0x66>
 8008846:	bf00      	nop
 8008848:	0800b102 	.word	0x0800b102
 800884c:	0800b182 	.word	0x0800b182

08008850 <_Bfree>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	69c6      	ldr	r6, [r0, #28]
 8008854:	4605      	mov	r5, r0
 8008856:	460c      	mov	r4, r1
 8008858:	b976      	cbnz	r6, 8008878 <_Bfree+0x28>
 800885a:	2010      	movs	r0, #16
 800885c:	f7ff ff02 	bl	8008664 <malloc>
 8008860:	4602      	mov	r2, r0
 8008862:	61e8      	str	r0, [r5, #28]
 8008864:	b920      	cbnz	r0, 8008870 <_Bfree+0x20>
 8008866:	4b09      	ldr	r3, [pc, #36]	@ (800888c <_Bfree+0x3c>)
 8008868:	4809      	ldr	r0, [pc, #36]	@ (8008890 <_Bfree+0x40>)
 800886a:	218f      	movs	r1, #143	@ 0x8f
 800886c:	f001 fd28 	bl	800a2c0 <__assert_func>
 8008870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008874:	6006      	str	r6, [r0, #0]
 8008876:	60c6      	str	r6, [r0, #12]
 8008878:	b13c      	cbz	r4, 800888a <_Bfree+0x3a>
 800887a:	69eb      	ldr	r3, [r5, #28]
 800887c:	6862      	ldr	r2, [r4, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008884:	6021      	str	r1, [r4, #0]
 8008886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	0800b102 	.word	0x0800b102
 8008890:	0800b182 	.word	0x0800b182

08008894 <__multadd>:
 8008894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008898:	690d      	ldr	r5, [r1, #16]
 800889a:	4607      	mov	r7, r0
 800889c:	460c      	mov	r4, r1
 800889e:	461e      	mov	r6, r3
 80088a0:	f101 0c14 	add.w	ip, r1, #20
 80088a4:	2000      	movs	r0, #0
 80088a6:	f8dc 3000 	ldr.w	r3, [ip]
 80088aa:	b299      	uxth	r1, r3
 80088ac:	fb02 6101 	mla	r1, r2, r1, r6
 80088b0:	0c1e      	lsrs	r6, r3, #16
 80088b2:	0c0b      	lsrs	r3, r1, #16
 80088b4:	fb02 3306 	mla	r3, r2, r6, r3
 80088b8:	b289      	uxth	r1, r1
 80088ba:	3001      	adds	r0, #1
 80088bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088c0:	4285      	cmp	r5, r0
 80088c2:	f84c 1b04 	str.w	r1, [ip], #4
 80088c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ca:	dcec      	bgt.n	80088a6 <__multadd+0x12>
 80088cc:	b30e      	cbz	r6, 8008912 <__multadd+0x7e>
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	dc19      	bgt.n	8008908 <__multadd+0x74>
 80088d4:	6861      	ldr	r1, [r4, #4]
 80088d6:	4638      	mov	r0, r7
 80088d8:	3101      	adds	r1, #1
 80088da:	f7ff ff79 	bl	80087d0 <_Balloc>
 80088de:	4680      	mov	r8, r0
 80088e0:	b928      	cbnz	r0, 80088ee <__multadd+0x5a>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <__multadd+0x84>)
 80088e6:	480d      	ldr	r0, [pc, #52]	@ (800891c <__multadd+0x88>)
 80088e8:	21ba      	movs	r1, #186	@ 0xba
 80088ea:	f001 fce9 	bl	800a2c0 <__assert_func>
 80088ee:	6922      	ldr	r2, [r4, #16]
 80088f0:	3202      	adds	r2, #2
 80088f2:	f104 010c 	add.w	r1, r4, #12
 80088f6:	0092      	lsls	r2, r2, #2
 80088f8:	300c      	adds	r0, #12
 80088fa:	f7fe fffa 	bl	80078f2 <memcpy>
 80088fe:	4621      	mov	r1, r4
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff ffa5 	bl	8008850 <_Bfree>
 8008906:	4644      	mov	r4, r8
 8008908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800890c:	3501      	adds	r5, #1
 800890e:	615e      	str	r6, [r3, #20]
 8008910:	6125      	str	r5, [r4, #16]
 8008912:	4620      	mov	r0, r4
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	0800b171 	.word	0x0800b171
 800891c:	0800b182 	.word	0x0800b182

08008920 <__s2b>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	4615      	mov	r5, r2
 8008928:	461f      	mov	r7, r3
 800892a:	2209      	movs	r2, #9
 800892c:	3308      	adds	r3, #8
 800892e:	4606      	mov	r6, r0
 8008930:	fb93 f3f2 	sdiv	r3, r3, r2
 8008934:	2100      	movs	r1, #0
 8008936:	2201      	movs	r2, #1
 8008938:	429a      	cmp	r2, r3
 800893a:	db09      	blt.n	8008950 <__s2b+0x30>
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff ff47 	bl	80087d0 <_Balloc>
 8008942:	b940      	cbnz	r0, 8008956 <__s2b+0x36>
 8008944:	4602      	mov	r2, r0
 8008946:	4b19      	ldr	r3, [pc, #100]	@ (80089ac <__s2b+0x8c>)
 8008948:	4819      	ldr	r0, [pc, #100]	@ (80089b0 <__s2b+0x90>)
 800894a:	21d3      	movs	r1, #211	@ 0xd3
 800894c:	f001 fcb8 	bl	800a2c0 <__assert_func>
 8008950:	0052      	lsls	r2, r2, #1
 8008952:	3101      	adds	r1, #1
 8008954:	e7f0      	b.n	8008938 <__s2b+0x18>
 8008956:	9b08      	ldr	r3, [sp, #32]
 8008958:	6143      	str	r3, [r0, #20]
 800895a:	2d09      	cmp	r5, #9
 800895c:	f04f 0301 	mov.w	r3, #1
 8008960:	6103      	str	r3, [r0, #16]
 8008962:	dd16      	ble.n	8008992 <__s2b+0x72>
 8008964:	f104 0909 	add.w	r9, r4, #9
 8008968:	46c8      	mov	r8, r9
 800896a:	442c      	add	r4, r5
 800896c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008970:	4601      	mov	r1, r0
 8008972:	3b30      	subs	r3, #48	@ 0x30
 8008974:	220a      	movs	r2, #10
 8008976:	4630      	mov	r0, r6
 8008978:	f7ff ff8c 	bl	8008894 <__multadd>
 800897c:	45a0      	cmp	r8, r4
 800897e:	d1f5      	bne.n	800896c <__s2b+0x4c>
 8008980:	f1a5 0408 	sub.w	r4, r5, #8
 8008984:	444c      	add	r4, r9
 8008986:	1b2d      	subs	r5, r5, r4
 8008988:	1963      	adds	r3, r4, r5
 800898a:	42bb      	cmp	r3, r7
 800898c:	db04      	blt.n	8008998 <__s2b+0x78>
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	340a      	adds	r4, #10
 8008994:	2509      	movs	r5, #9
 8008996:	e7f6      	b.n	8008986 <__s2b+0x66>
 8008998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800899c:	4601      	mov	r1, r0
 800899e:	3b30      	subs	r3, #48	@ 0x30
 80089a0:	220a      	movs	r2, #10
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7ff ff76 	bl	8008894 <__multadd>
 80089a8:	e7ee      	b.n	8008988 <__s2b+0x68>
 80089aa:	bf00      	nop
 80089ac:	0800b171 	.word	0x0800b171
 80089b0:	0800b182 	.word	0x0800b182

080089b4 <__hi0bits>:
 80089b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089b8:	4603      	mov	r3, r0
 80089ba:	bf36      	itet	cc
 80089bc:	0403      	lslcc	r3, r0, #16
 80089be:	2000      	movcs	r0, #0
 80089c0:	2010      	movcc	r0, #16
 80089c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089c6:	bf3c      	itt	cc
 80089c8:	021b      	lslcc	r3, r3, #8
 80089ca:	3008      	addcc	r0, #8
 80089cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089d0:	bf3c      	itt	cc
 80089d2:	011b      	lslcc	r3, r3, #4
 80089d4:	3004      	addcc	r0, #4
 80089d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089da:	bf3c      	itt	cc
 80089dc:	009b      	lslcc	r3, r3, #2
 80089de:	3002      	addcc	r0, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	db05      	blt.n	80089f0 <__hi0bits+0x3c>
 80089e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089e8:	f100 0001 	add.w	r0, r0, #1
 80089ec:	bf08      	it	eq
 80089ee:	2020      	moveq	r0, #32
 80089f0:	4770      	bx	lr

080089f2 <__lo0bits>:
 80089f2:	6803      	ldr	r3, [r0, #0]
 80089f4:	4602      	mov	r2, r0
 80089f6:	f013 0007 	ands.w	r0, r3, #7
 80089fa:	d00b      	beq.n	8008a14 <__lo0bits+0x22>
 80089fc:	07d9      	lsls	r1, r3, #31
 80089fe:	d421      	bmi.n	8008a44 <__lo0bits+0x52>
 8008a00:	0798      	lsls	r0, r3, #30
 8008a02:	bf49      	itett	mi
 8008a04:	085b      	lsrmi	r3, r3, #1
 8008a06:	089b      	lsrpl	r3, r3, #2
 8008a08:	2001      	movmi	r0, #1
 8008a0a:	6013      	strmi	r3, [r2, #0]
 8008a0c:	bf5c      	itt	pl
 8008a0e:	6013      	strpl	r3, [r2, #0]
 8008a10:	2002      	movpl	r0, #2
 8008a12:	4770      	bx	lr
 8008a14:	b299      	uxth	r1, r3
 8008a16:	b909      	cbnz	r1, 8008a1c <__lo0bits+0x2a>
 8008a18:	0c1b      	lsrs	r3, r3, #16
 8008a1a:	2010      	movs	r0, #16
 8008a1c:	b2d9      	uxtb	r1, r3
 8008a1e:	b909      	cbnz	r1, 8008a24 <__lo0bits+0x32>
 8008a20:	3008      	adds	r0, #8
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	0719      	lsls	r1, r3, #28
 8008a26:	bf04      	itt	eq
 8008a28:	091b      	lsreq	r3, r3, #4
 8008a2a:	3004      	addeq	r0, #4
 8008a2c:	0799      	lsls	r1, r3, #30
 8008a2e:	bf04      	itt	eq
 8008a30:	089b      	lsreq	r3, r3, #2
 8008a32:	3002      	addeq	r0, #2
 8008a34:	07d9      	lsls	r1, r3, #31
 8008a36:	d403      	bmi.n	8008a40 <__lo0bits+0x4e>
 8008a38:	085b      	lsrs	r3, r3, #1
 8008a3a:	f100 0001 	add.w	r0, r0, #1
 8008a3e:	d003      	beq.n	8008a48 <__lo0bits+0x56>
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	4770      	bx	lr
 8008a44:	2000      	movs	r0, #0
 8008a46:	4770      	bx	lr
 8008a48:	2020      	movs	r0, #32
 8008a4a:	4770      	bx	lr

08008a4c <__i2b>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	460c      	mov	r4, r1
 8008a50:	2101      	movs	r1, #1
 8008a52:	f7ff febd 	bl	80087d0 <_Balloc>
 8008a56:	4602      	mov	r2, r0
 8008a58:	b928      	cbnz	r0, 8008a66 <__i2b+0x1a>
 8008a5a:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <__i2b+0x24>)
 8008a5c:	4805      	ldr	r0, [pc, #20]	@ (8008a74 <__i2b+0x28>)
 8008a5e:	f240 1145 	movw	r1, #325	@ 0x145
 8008a62:	f001 fc2d 	bl	800a2c0 <__assert_func>
 8008a66:	2301      	movs	r3, #1
 8008a68:	6144      	str	r4, [r0, #20]
 8008a6a:	6103      	str	r3, [r0, #16]
 8008a6c:	bd10      	pop	{r4, pc}
 8008a6e:	bf00      	nop
 8008a70:	0800b171 	.word	0x0800b171
 8008a74:	0800b182 	.word	0x0800b182

08008a78 <__multiply>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	4617      	mov	r7, r2
 8008a7e:	690a      	ldr	r2, [r1, #16]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	bfa8      	it	ge
 8008a86:	463b      	movge	r3, r7
 8008a88:	4689      	mov	r9, r1
 8008a8a:	bfa4      	itt	ge
 8008a8c:	460f      	movge	r7, r1
 8008a8e:	4699      	movge	r9, r3
 8008a90:	693d      	ldr	r5, [r7, #16]
 8008a92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	eb05 060a 	add.w	r6, r5, sl
 8008a9e:	42b3      	cmp	r3, r6
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	bfb8      	it	lt
 8008aa4:	3101      	addlt	r1, #1
 8008aa6:	f7ff fe93 	bl	80087d0 <_Balloc>
 8008aaa:	b930      	cbnz	r0, 8008aba <__multiply+0x42>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b41      	ldr	r3, [pc, #260]	@ (8008bb4 <__multiply+0x13c>)
 8008ab0:	4841      	ldr	r0, [pc, #260]	@ (8008bb8 <__multiply+0x140>)
 8008ab2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ab6:	f001 fc03 	bl	800a2c0 <__assert_func>
 8008aba:	f100 0414 	add.w	r4, r0, #20
 8008abe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ac2:	4623      	mov	r3, r4
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4573      	cmp	r3, lr
 8008ac8:	d320      	bcc.n	8008b0c <__multiply+0x94>
 8008aca:	f107 0814 	add.w	r8, r7, #20
 8008ace:	f109 0114 	add.w	r1, r9, #20
 8008ad2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ad6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	1beb      	subs	r3, r5, r7
 8008ade:	3b15      	subs	r3, #21
 8008ae0:	f023 0303 	bic.w	r3, r3, #3
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	3715      	adds	r7, #21
 8008ae8:	42bd      	cmp	r5, r7
 8008aea:	bf38      	it	cc
 8008aec:	2304      	movcc	r3, #4
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	9103      	str	r1, [sp, #12]
 8008af4:	428b      	cmp	r3, r1
 8008af6:	d80c      	bhi.n	8008b12 <__multiply+0x9a>
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	dd03      	ble.n	8008b04 <__multiply+0x8c>
 8008afc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d055      	beq.n	8008bb0 <__multiply+0x138>
 8008b04:	6106      	str	r6, [r0, #16]
 8008b06:	b005      	add	sp, #20
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	f843 2b04 	str.w	r2, [r3], #4
 8008b10:	e7d9      	b.n	8008ac6 <__multiply+0x4e>
 8008b12:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b16:	f1ba 0f00 	cmp.w	sl, #0
 8008b1a:	d01f      	beq.n	8008b5c <__multiply+0xe4>
 8008b1c:	46c4      	mov	ip, r8
 8008b1e:	46a1      	mov	r9, r4
 8008b20:	2700      	movs	r7, #0
 8008b22:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b26:	f8d9 3000 	ldr.w	r3, [r9]
 8008b2a:	fa1f fb82 	uxth.w	fp, r2
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b34:	443b      	add	r3, r7
 8008b36:	f8d9 7000 	ldr.w	r7, [r9]
 8008b3a:	0c12      	lsrs	r2, r2, #16
 8008b3c:	0c3f      	lsrs	r7, r7, #16
 8008b3e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b42:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b4c:	4565      	cmp	r5, ip
 8008b4e:	f849 3b04 	str.w	r3, [r9], #4
 8008b52:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b56:	d8e4      	bhi.n	8008b22 <__multiply+0xaa>
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	50e7      	str	r7, [r4, r3]
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b62:	3104      	adds	r1, #4
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	d020      	beq.n	8008bac <__multiply+0x134>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	4647      	mov	r7, r8
 8008b6e:	46a4      	mov	ip, r4
 8008b70:	f04f 0a00 	mov.w	sl, #0
 8008b74:	f8b7 b000 	ldrh.w	fp, [r7]
 8008b78:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008b7c:	fb09 220b 	mla	r2, r9, fp, r2
 8008b80:	4452      	add	r2, sl
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b88:	f84c 3b04 	str.w	r3, [ip], #4
 8008b8c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008b90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b94:	f8bc 3000 	ldrh.w	r3, [ip]
 8008b98:	fb09 330a 	mla	r3, r9, sl, r3
 8008b9c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ba0:	42bd      	cmp	r5, r7
 8008ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ba6:	d8e5      	bhi.n	8008b74 <__multiply+0xfc>
 8008ba8:	9a01      	ldr	r2, [sp, #4]
 8008baa:	50a3      	str	r3, [r4, r2]
 8008bac:	3404      	adds	r4, #4
 8008bae:	e79f      	b.n	8008af0 <__multiply+0x78>
 8008bb0:	3e01      	subs	r6, #1
 8008bb2:	e7a1      	b.n	8008af8 <__multiply+0x80>
 8008bb4:	0800b171 	.word	0x0800b171
 8008bb8:	0800b182 	.word	0x0800b182

08008bbc <__pow5mult>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	f012 0203 	ands.w	r2, r2, #3
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	460e      	mov	r6, r1
 8008bca:	d007      	beq.n	8008bdc <__pow5mult+0x20>
 8008bcc:	4c25      	ldr	r4, [pc, #148]	@ (8008c64 <__pow5mult+0xa8>)
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bd6:	f7ff fe5d 	bl	8008894 <__multadd>
 8008bda:	4606      	mov	r6, r0
 8008bdc:	10ad      	asrs	r5, r5, #2
 8008bde:	d03d      	beq.n	8008c5c <__pow5mult+0xa0>
 8008be0:	69fc      	ldr	r4, [r7, #28]
 8008be2:	b97c      	cbnz	r4, 8008c04 <__pow5mult+0x48>
 8008be4:	2010      	movs	r0, #16
 8008be6:	f7ff fd3d 	bl	8008664 <malloc>
 8008bea:	4602      	mov	r2, r0
 8008bec:	61f8      	str	r0, [r7, #28]
 8008bee:	b928      	cbnz	r0, 8008bfc <__pow5mult+0x40>
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c68 <__pow5mult+0xac>)
 8008bf2:	481e      	ldr	r0, [pc, #120]	@ (8008c6c <__pow5mult+0xb0>)
 8008bf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bf8:	f001 fb62 	bl	800a2c0 <__assert_func>
 8008bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c00:	6004      	str	r4, [r0, #0]
 8008c02:	60c4      	str	r4, [r0, #12]
 8008c04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c0c:	b94c      	cbnz	r4, 8008c22 <__pow5mult+0x66>
 8008c0e:	f240 2171 	movw	r1, #625	@ 0x271
 8008c12:	4638      	mov	r0, r7
 8008c14:	f7ff ff1a 	bl	8008a4c <__i2b>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c1e:	4604      	mov	r4, r0
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	f04f 0900 	mov.w	r9, #0
 8008c26:	07eb      	lsls	r3, r5, #31
 8008c28:	d50a      	bpl.n	8008c40 <__pow5mult+0x84>
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4638      	mov	r0, r7
 8008c30:	f7ff ff22 	bl	8008a78 <__multiply>
 8008c34:	4631      	mov	r1, r6
 8008c36:	4680      	mov	r8, r0
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7ff fe09 	bl	8008850 <_Bfree>
 8008c3e:	4646      	mov	r6, r8
 8008c40:	106d      	asrs	r5, r5, #1
 8008c42:	d00b      	beq.n	8008c5c <__pow5mult+0xa0>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	b938      	cbnz	r0, 8008c58 <__pow5mult+0x9c>
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff ff13 	bl	8008a78 <__multiply>
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	f8c0 9000 	str.w	r9, [r0]
 8008c58:	4604      	mov	r4, r0
 8008c5a:	e7e4      	b.n	8008c26 <__pow5mult+0x6a>
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c62:	bf00      	nop
 8008c64:	0800b294 	.word	0x0800b294
 8008c68:	0800b102 	.word	0x0800b102
 8008c6c:	0800b182 	.word	0x0800b182

08008c70 <__lshift>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	6849      	ldr	r1, [r1, #4]
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	4607      	mov	r7, r0
 8008c82:	4691      	mov	r9, r2
 8008c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c88:	f108 0601 	add.w	r6, r8, #1
 8008c8c:	42b3      	cmp	r3, r6
 8008c8e:	db0b      	blt.n	8008ca8 <__lshift+0x38>
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff fd9d 	bl	80087d0 <_Balloc>
 8008c96:	4605      	mov	r5, r0
 8008c98:	b948      	cbnz	r0, 8008cae <__lshift+0x3e>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	4b28      	ldr	r3, [pc, #160]	@ (8008d40 <__lshift+0xd0>)
 8008c9e:	4829      	ldr	r0, [pc, #164]	@ (8008d44 <__lshift+0xd4>)
 8008ca0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ca4:	f001 fb0c 	bl	800a2c0 <__assert_func>
 8008ca8:	3101      	adds	r1, #1
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	e7ee      	b.n	8008c8c <__lshift+0x1c>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f100 0114 	add.w	r1, r0, #20
 8008cb4:	f100 0210 	add.w	r2, r0, #16
 8008cb8:	4618      	mov	r0, r3
 8008cba:	4553      	cmp	r3, sl
 8008cbc:	db33      	blt.n	8008d26 <__lshift+0xb6>
 8008cbe:	6920      	ldr	r0, [r4, #16]
 8008cc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cc4:	f104 0314 	add.w	r3, r4, #20
 8008cc8:	f019 091f 	ands.w	r9, r9, #31
 8008ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cd4:	d02b      	beq.n	8008d2e <__lshift+0xbe>
 8008cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cda:	468a      	mov	sl, r1
 8008cdc:	2200      	movs	r2, #0
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ce4:	4310      	orrs	r0, r2
 8008ce6:	f84a 0b04 	str.w	r0, [sl], #4
 8008cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cee:	459c      	cmp	ip, r3
 8008cf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cf4:	d8f3      	bhi.n	8008cde <__lshift+0x6e>
 8008cf6:	ebac 0304 	sub.w	r3, ip, r4
 8008cfa:	3b15      	subs	r3, #21
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	3304      	adds	r3, #4
 8008d02:	f104 0015 	add.w	r0, r4, #21
 8008d06:	4560      	cmp	r0, ip
 8008d08:	bf88      	it	hi
 8008d0a:	2304      	movhi	r3, #4
 8008d0c:	50ca      	str	r2, [r1, r3]
 8008d0e:	b10a      	cbz	r2, 8008d14 <__lshift+0xa4>
 8008d10:	f108 0602 	add.w	r6, r8, #2
 8008d14:	3e01      	subs	r6, #1
 8008d16:	4638      	mov	r0, r7
 8008d18:	612e      	str	r6, [r5, #16]
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	f7ff fd98 	bl	8008850 <_Bfree>
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d26:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	e7c5      	b.n	8008cba <__lshift+0x4a>
 8008d2e:	3904      	subs	r1, #4
 8008d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d38:	459c      	cmp	ip, r3
 8008d3a:	d8f9      	bhi.n	8008d30 <__lshift+0xc0>
 8008d3c:	e7ea      	b.n	8008d14 <__lshift+0xa4>
 8008d3e:	bf00      	nop
 8008d40:	0800b171 	.word	0x0800b171
 8008d44:	0800b182 	.word	0x0800b182

08008d48 <__mcmp>:
 8008d48:	690a      	ldr	r2, [r1, #16]
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	6900      	ldr	r0, [r0, #16]
 8008d4e:	1a80      	subs	r0, r0, r2
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	d10e      	bne.n	8008d72 <__mcmp+0x2a>
 8008d54:	3314      	adds	r3, #20
 8008d56:	3114      	adds	r1, #20
 8008d58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d68:	4295      	cmp	r5, r2
 8008d6a:	d003      	beq.n	8008d74 <__mcmp+0x2c>
 8008d6c:	d205      	bcs.n	8008d7a <__mcmp+0x32>
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d72:	bd30      	pop	{r4, r5, pc}
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d3f3      	bcc.n	8008d60 <__mcmp+0x18>
 8008d78:	e7fb      	b.n	8008d72 <__mcmp+0x2a>
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	e7f9      	b.n	8008d72 <__mcmp+0x2a>
	...

08008d80 <__mdiff>:
 8008d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	4689      	mov	r9, r1
 8008d86:	4606      	mov	r6, r0
 8008d88:	4611      	mov	r1, r2
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	f7ff ffdb 	bl	8008d48 <__mcmp>
 8008d92:	1e05      	subs	r5, r0, #0
 8008d94:	d112      	bne.n	8008dbc <__mdiff+0x3c>
 8008d96:	4629      	mov	r1, r5
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fd19 	bl	80087d0 <_Balloc>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__mdiff+0x2e>
 8008da2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ea0 <__mdiff+0x120>)
 8008da4:	f240 2137 	movw	r1, #567	@ 0x237
 8008da8:	483e      	ldr	r0, [pc, #248]	@ (8008ea4 <__mdiff+0x124>)
 8008daa:	f001 fa89 	bl	800a2c0 <__assert_func>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008db4:	4610      	mov	r0, r2
 8008db6:	b003      	add	sp, #12
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	bfbc      	itt	lt
 8008dbe:	464b      	movlt	r3, r9
 8008dc0:	46a1      	movlt	r9, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008dc8:	bfba      	itte	lt
 8008dca:	461c      	movlt	r4, r3
 8008dcc:	2501      	movlt	r5, #1
 8008dce:	2500      	movge	r5, #0
 8008dd0:	f7ff fcfe 	bl	80087d0 <_Balloc>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	b918      	cbnz	r0, 8008de0 <__mdiff+0x60>
 8008dd8:	4b31      	ldr	r3, [pc, #196]	@ (8008ea0 <__mdiff+0x120>)
 8008dda:	f240 2145 	movw	r1, #581	@ 0x245
 8008dde:	e7e3      	b.n	8008da8 <__mdiff+0x28>
 8008de0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008de4:	6926      	ldr	r6, [r4, #16]
 8008de6:	60c5      	str	r5, [r0, #12]
 8008de8:	f109 0310 	add.w	r3, r9, #16
 8008dec:	f109 0514 	add.w	r5, r9, #20
 8008df0:	f104 0e14 	add.w	lr, r4, #20
 8008df4:	f100 0b14 	add.w	fp, r0, #20
 8008df8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	46d9      	mov	r9, fp
 8008e04:	f04f 0c00 	mov.w	ip, #0
 8008e08:	9b01      	ldr	r3, [sp, #4]
 8008e0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e12:	9301      	str	r3, [sp, #4]
 8008e14:	fa1f f38a 	uxth.w	r3, sl
 8008e18:	4619      	mov	r1, r3
 8008e1a:	b283      	uxth	r3, r0
 8008e1c:	1acb      	subs	r3, r1, r3
 8008e1e:	0c00      	lsrs	r0, r0, #16
 8008e20:	4463      	add	r3, ip
 8008e22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e30:	4576      	cmp	r6, lr
 8008e32:	f849 3b04 	str.w	r3, [r9], #4
 8008e36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e3a:	d8e5      	bhi.n	8008e08 <__mdiff+0x88>
 8008e3c:	1b33      	subs	r3, r6, r4
 8008e3e:	3b15      	subs	r3, #21
 8008e40:	f023 0303 	bic.w	r3, r3, #3
 8008e44:	3415      	adds	r4, #21
 8008e46:	3304      	adds	r3, #4
 8008e48:	42a6      	cmp	r6, r4
 8008e4a:	bf38      	it	cc
 8008e4c:	2304      	movcc	r3, #4
 8008e4e:	441d      	add	r5, r3
 8008e50:	445b      	add	r3, fp
 8008e52:	461e      	mov	r6, r3
 8008e54:	462c      	mov	r4, r5
 8008e56:	4544      	cmp	r4, r8
 8008e58:	d30e      	bcc.n	8008e78 <__mdiff+0xf8>
 8008e5a:	f108 0103 	add.w	r1, r8, #3
 8008e5e:	1b49      	subs	r1, r1, r5
 8008e60:	f021 0103 	bic.w	r1, r1, #3
 8008e64:	3d03      	subs	r5, #3
 8008e66:	45a8      	cmp	r8, r5
 8008e68:	bf38      	it	cc
 8008e6a:	2100      	movcc	r1, #0
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e72:	b191      	cbz	r1, 8008e9a <__mdiff+0x11a>
 8008e74:	6117      	str	r7, [r2, #16]
 8008e76:	e79d      	b.n	8008db4 <__mdiff+0x34>
 8008e78:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e7c:	46e6      	mov	lr, ip
 8008e7e:	0c08      	lsrs	r0, r1, #16
 8008e80:	fa1c fc81 	uxtah	ip, ip, r1
 8008e84:	4471      	add	r1, lr
 8008e86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e8a:	b289      	uxth	r1, r1
 8008e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e90:	f846 1b04 	str.w	r1, [r6], #4
 8008e94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e98:	e7dd      	b.n	8008e56 <__mdiff+0xd6>
 8008e9a:	3f01      	subs	r7, #1
 8008e9c:	e7e7      	b.n	8008e6e <__mdiff+0xee>
 8008e9e:	bf00      	nop
 8008ea0:	0800b171 	.word	0x0800b171
 8008ea4:	0800b182 	.word	0x0800b182

08008ea8 <__ulp>:
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	ed8d 0b00 	vstr	d0, [sp]
 8008eae:	9a01      	ldr	r2, [sp, #4]
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef0 <__ulp+0x48>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dc08      	bgt.n	8008ece <__ulp+0x26>
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ec6:	da04      	bge.n	8008ed2 <__ulp+0x2a>
 8008ec8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ecc:	4113      	asrs	r3, r2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	e008      	b.n	8008ee4 <__ulp+0x3c>
 8008ed2:	f1a2 0314 	sub.w	r3, r2, #20
 8008ed6:	2b1e      	cmp	r3, #30
 8008ed8:	bfda      	itte	le
 8008eda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ede:	40da      	lsrle	r2, r3
 8008ee0:	2201      	movgt	r2, #1
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	ec41 0b10 	vmov	d0, r0, r1
 8008eec:	b002      	add	sp, #8
 8008eee:	4770      	bx	lr
 8008ef0:	7ff00000 	.word	0x7ff00000

08008ef4 <__b2d>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	6906      	ldr	r6, [r0, #16]
 8008efa:	f100 0814 	add.w	r8, r0, #20
 8008efe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f02:	1f37      	subs	r7, r6, #4
 8008f04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7ff fd53 	bl	80089b4 <__hi0bits>
 8008f0e:	f1c0 0320 	rsb	r3, r0, #32
 8008f12:	280a      	cmp	r0, #10
 8008f14:	600b      	str	r3, [r1, #0]
 8008f16:	491b      	ldr	r1, [pc, #108]	@ (8008f84 <__b2d+0x90>)
 8008f18:	dc15      	bgt.n	8008f46 <__b2d+0x52>
 8008f1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f22:	45b8      	cmp	r8, r7
 8008f24:	ea43 0501 	orr.w	r5, r3, r1
 8008f28:	bf34      	ite	cc
 8008f2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f2e:	2300      	movcs	r3, #0
 8008f30:	3015      	adds	r0, #21
 8008f32:	fa02 f000 	lsl.w	r0, r2, r0
 8008f36:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f3a:	4303      	orrs	r3, r0
 8008f3c:	461c      	mov	r4, r3
 8008f3e:	ec45 4b10 	vmov	d0, r4, r5
 8008f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f46:	45b8      	cmp	r8, r7
 8008f48:	bf3a      	itte	cc
 8008f4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f52:	2300      	movcs	r3, #0
 8008f54:	380b      	subs	r0, #11
 8008f56:	d012      	beq.n	8008f7e <__b2d+0x8a>
 8008f58:	f1c0 0120 	rsb	r1, r0, #32
 8008f5c:	fa23 f401 	lsr.w	r4, r3, r1
 8008f60:	4082      	lsls	r2, r0
 8008f62:	4322      	orrs	r2, r4
 8008f64:	4547      	cmp	r7, r8
 8008f66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f6a:	bf8c      	ite	hi
 8008f6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f70:	2200      	movls	r2, #0
 8008f72:	4083      	lsls	r3, r0
 8008f74:	40ca      	lsrs	r2, r1
 8008f76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	e7de      	b.n	8008f3c <__b2d+0x48>
 8008f7e:	ea42 0501 	orr.w	r5, r2, r1
 8008f82:	e7db      	b.n	8008f3c <__b2d+0x48>
 8008f84:	3ff00000 	.word	0x3ff00000

08008f88 <__d2b>:
 8008f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	2101      	movs	r1, #1
 8008f90:	ec59 8b10 	vmov	r8, r9, d0
 8008f94:	4616      	mov	r6, r2
 8008f96:	f7ff fc1b 	bl	80087d0 <_Balloc>
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	b930      	cbnz	r0, 8008fac <__d2b+0x24>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b23      	ldr	r3, [pc, #140]	@ (8009030 <__d2b+0xa8>)
 8008fa2:	4824      	ldr	r0, [pc, #144]	@ (8009034 <__d2b+0xac>)
 8008fa4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fa8:	f001 f98a 	bl	800a2c0 <__assert_func>
 8008fac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fb4:	b10d      	cbz	r5, 8008fba <__d2b+0x32>
 8008fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fba:	9301      	str	r3, [sp, #4]
 8008fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8008fc0:	d023      	beq.n	800900a <__d2b+0x82>
 8008fc2:	4668      	mov	r0, sp
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	f7ff fd14 	bl	80089f2 <__lo0bits>
 8008fca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fce:	b1d0      	cbz	r0, 8009006 <__d2b+0x7e>
 8008fd0:	f1c0 0320 	rsb	r3, r0, #32
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	40c2      	lsrs	r2, r0
 8008fdc:	6163      	str	r3, [r4, #20]
 8008fde:	9201      	str	r2, [sp, #4]
 8008fe0:	9b01      	ldr	r3, [sp, #4]
 8008fe2:	61a3      	str	r3, [r4, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf0c      	ite	eq
 8008fe8:	2201      	moveq	r2, #1
 8008fea:	2202      	movne	r2, #2
 8008fec:	6122      	str	r2, [r4, #16]
 8008fee:	b1a5      	cbz	r5, 800901a <__d2b+0x92>
 8008ff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ff4:	4405      	add	r5, r0
 8008ff6:	603d      	str	r5, [r7, #0]
 8008ff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ffc:	6030      	str	r0, [r6, #0]
 8008ffe:	4620      	mov	r0, r4
 8009000:	b003      	add	sp, #12
 8009002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009006:	6161      	str	r1, [r4, #20]
 8009008:	e7ea      	b.n	8008fe0 <__d2b+0x58>
 800900a:	a801      	add	r0, sp, #4
 800900c:	f7ff fcf1 	bl	80089f2 <__lo0bits>
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	6163      	str	r3, [r4, #20]
 8009014:	3020      	adds	r0, #32
 8009016:	2201      	movs	r2, #1
 8009018:	e7e8      	b.n	8008fec <__d2b+0x64>
 800901a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800901e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009022:	6038      	str	r0, [r7, #0]
 8009024:	6918      	ldr	r0, [r3, #16]
 8009026:	f7ff fcc5 	bl	80089b4 <__hi0bits>
 800902a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800902e:	e7e5      	b.n	8008ffc <__d2b+0x74>
 8009030:	0800b171 	.word	0x0800b171
 8009034:	0800b182 	.word	0x0800b182

08009038 <__ratio>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	b085      	sub	sp, #20
 800903e:	e9cd 1000 	strd	r1, r0, [sp]
 8009042:	a902      	add	r1, sp, #8
 8009044:	f7ff ff56 	bl	8008ef4 <__b2d>
 8009048:	9800      	ldr	r0, [sp, #0]
 800904a:	a903      	add	r1, sp, #12
 800904c:	ec55 4b10 	vmov	r4, r5, d0
 8009050:	f7ff ff50 	bl	8008ef4 <__b2d>
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	6919      	ldr	r1, [r3, #16]
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	1ac9      	subs	r1, r1, r3
 800905e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009062:	1a9b      	subs	r3, r3, r2
 8009064:	ec5b ab10 	vmov	sl, fp, d0
 8009068:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800906c:	2b00      	cmp	r3, #0
 800906e:	bfce      	itee	gt
 8009070:	462a      	movgt	r2, r5
 8009072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009076:	465a      	movle	r2, fp
 8009078:	462f      	mov	r7, r5
 800907a:	46d9      	mov	r9, fp
 800907c:	bfcc      	ite	gt
 800907e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009082:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009086:	464b      	mov	r3, r9
 8009088:	4652      	mov	r2, sl
 800908a:	4620      	mov	r0, r4
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 fbdd 	bl	800084c <__aeabi_ddiv>
 8009092:	ec41 0b10 	vmov	d0, r0, r1
 8009096:	b005      	add	sp, #20
 8009098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800909c <__copybits>:
 800909c:	3901      	subs	r1, #1
 800909e:	b570      	push	{r4, r5, r6, lr}
 80090a0:	1149      	asrs	r1, r1, #5
 80090a2:	6914      	ldr	r4, [r2, #16]
 80090a4:	3101      	adds	r1, #1
 80090a6:	f102 0314 	add.w	r3, r2, #20
 80090aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090b2:	1f05      	subs	r5, r0, #4
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d30c      	bcc.n	80090d2 <__copybits+0x36>
 80090b8:	1aa3      	subs	r3, r4, r2
 80090ba:	3b11      	subs	r3, #17
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	3211      	adds	r2, #17
 80090c2:	42a2      	cmp	r2, r4
 80090c4:	bf88      	it	hi
 80090c6:	2300      	movhi	r3, #0
 80090c8:	4418      	add	r0, r3
 80090ca:	2300      	movs	r3, #0
 80090cc:	4288      	cmp	r0, r1
 80090ce:	d305      	bcc.n	80090dc <__copybits+0x40>
 80090d0:	bd70      	pop	{r4, r5, r6, pc}
 80090d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80090d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80090da:	e7eb      	b.n	80090b4 <__copybits+0x18>
 80090dc:	f840 3b04 	str.w	r3, [r0], #4
 80090e0:	e7f4      	b.n	80090cc <__copybits+0x30>

080090e2 <__any_on>:
 80090e2:	f100 0214 	add.w	r2, r0, #20
 80090e6:	6900      	ldr	r0, [r0, #16]
 80090e8:	114b      	asrs	r3, r1, #5
 80090ea:	4298      	cmp	r0, r3
 80090ec:	b510      	push	{r4, lr}
 80090ee:	db11      	blt.n	8009114 <__any_on+0x32>
 80090f0:	dd0a      	ble.n	8009108 <__any_on+0x26>
 80090f2:	f011 011f 	ands.w	r1, r1, #31
 80090f6:	d007      	beq.n	8009108 <__any_on+0x26>
 80090f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090fc:	fa24 f001 	lsr.w	r0, r4, r1
 8009100:	fa00 f101 	lsl.w	r1, r0, r1
 8009104:	428c      	cmp	r4, r1
 8009106:	d10b      	bne.n	8009120 <__any_on+0x3e>
 8009108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800910c:	4293      	cmp	r3, r2
 800910e:	d803      	bhi.n	8009118 <__any_on+0x36>
 8009110:	2000      	movs	r0, #0
 8009112:	bd10      	pop	{r4, pc}
 8009114:	4603      	mov	r3, r0
 8009116:	e7f7      	b.n	8009108 <__any_on+0x26>
 8009118:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800911c:	2900      	cmp	r1, #0
 800911e:	d0f5      	beq.n	800910c <__any_on+0x2a>
 8009120:	2001      	movs	r0, #1
 8009122:	e7f6      	b.n	8009112 <__any_on+0x30>

08009124 <sulp>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	4604      	mov	r4, r0
 8009128:	460d      	mov	r5, r1
 800912a:	ec45 4b10 	vmov	d0, r4, r5
 800912e:	4616      	mov	r6, r2
 8009130:	f7ff feba 	bl	8008ea8 <__ulp>
 8009134:	ec51 0b10 	vmov	r0, r1, d0
 8009138:	b17e      	cbz	r6, 800915a <sulp+0x36>
 800913a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800913e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd09      	ble.n	800915a <sulp+0x36>
 8009146:	051b      	lsls	r3, r3, #20
 8009148:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800914c:	2400      	movs	r4, #0
 800914e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	ec41 0b10 	vmov	d0, r0, r1
 800915e:	bd70      	pop	{r4, r5, r6, pc}

08009160 <_strtod_l>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	b09f      	sub	sp, #124	@ 0x7c
 8009166:	460c      	mov	r4, r1
 8009168:	9217      	str	r2, [sp, #92]	@ 0x5c
 800916a:	2200      	movs	r2, #0
 800916c:	921a      	str	r2, [sp, #104]	@ 0x68
 800916e:	9005      	str	r0, [sp, #20]
 8009170:	f04f 0a00 	mov.w	sl, #0
 8009174:	f04f 0b00 	mov.w	fp, #0
 8009178:	460a      	mov	r2, r1
 800917a:	9219      	str	r2, [sp, #100]	@ 0x64
 800917c:	7811      	ldrb	r1, [r2, #0]
 800917e:	292b      	cmp	r1, #43	@ 0x2b
 8009180:	d04a      	beq.n	8009218 <_strtod_l+0xb8>
 8009182:	d838      	bhi.n	80091f6 <_strtod_l+0x96>
 8009184:	290d      	cmp	r1, #13
 8009186:	d832      	bhi.n	80091ee <_strtod_l+0x8e>
 8009188:	2908      	cmp	r1, #8
 800918a:	d832      	bhi.n	80091f2 <_strtod_l+0x92>
 800918c:	2900      	cmp	r1, #0
 800918e:	d03b      	beq.n	8009208 <_strtod_l+0xa8>
 8009190:	2200      	movs	r2, #0
 8009192:	920e      	str	r2, [sp, #56]	@ 0x38
 8009194:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009196:	782a      	ldrb	r2, [r5, #0]
 8009198:	2a30      	cmp	r2, #48	@ 0x30
 800919a:	f040 80b2 	bne.w	8009302 <_strtod_l+0x1a2>
 800919e:	786a      	ldrb	r2, [r5, #1]
 80091a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091a4:	2a58      	cmp	r2, #88	@ 0x58
 80091a6:	d16e      	bne.n	8009286 <_strtod_l+0x126>
 80091a8:	9302      	str	r3, [sp, #8]
 80091aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	4a8f      	ldr	r2, [pc, #572]	@ (80093f0 <_strtod_l+0x290>)
 80091b4:	9805      	ldr	r0, [sp, #20]
 80091b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80091b8:	a919      	add	r1, sp, #100	@ 0x64
 80091ba:	f001 f91b 	bl	800a3f4 <__gethex>
 80091be:	f010 060f 	ands.w	r6, r0, #15
 80091c2:	4604      	mov	r4, r0
 80091c4:	d005      	beq.n	80091d2 <_strtod_l+0x72>
 80091c6:	2e06      	cmp	r6, #6
 80091c8:	d128      	bne.n	800921c <_strtod_l+0xbc>
 80091ca:	3501      	adds	r5, #1
 80091cc:	2300      	movs	r3, #0
 80091ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80091d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80091d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 858e 	bne.w	8009cf6 <_strtod_l+0xb96>
 80091da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091dc:	b1cb      	cbz	r3, 8009212 <_strtod_l+0xb2>
 80091de:	4652      	mov	r2, sl
 80091e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80091e4:	ec43 2b10 	vmov	d0, r2, r3
 80091e8:	b01f      	add	sp, #124	@ 0x7c
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	2920      	cmp	r1, #32
 80091f0:	d1ce      	bne.n	8009190 <_strtod_l+0x30>
 80091f2:	3201      	adds	r2, #1
 80091f4:	e7c1      	b.n	800917a <_strtod_l+0x1a>
 80091f6:	292d      	cmp	r1, #45	@ 0x2d
 80091f8:	d1ca      	bne.n	8009190 <_strtod_l+0x30>
 80091fa:	2101      	movs	r1, #1
 80091fc:	910e      	str	r1, [sp, #56]	@ 0x38
 80091fe:	1c51      	adds	r1, r2, #1
 8009200:	9119      	str	r1, [sp, #100]	@ 0x64
 8009202:	7852      	ldrb	r2, [r2, #1]
 8009204:	2a00      	cmp	r2, #0
 8009206:	d1c5      	bne.n	8009194 <_strtod_l+0x34>
 8009208:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800920a:	9419      	str	r4, [sp, #100]	@ 0x64
 800920c:	2b00      	cmp	r3, #0
 800920e:	f040 8570 	bne.w	8009cf2 <_strtod_l+0xb92>
 8009212:	4652      	mov	r2, sl
 8009214:	465b      	mov	r3, fp
 8009216:	e7e5      	b.n	80091e4 <_strtod_l+0x84>
 8009218:	2100      	movs	r1, #0
 800921a:	e7ef      	b.n	80091fc <_strtod_l+0x9c>
 800921c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800921e:	b13a      	cbz	r2, 8009230 <_strtod_l+0xd0>
 8009220:	2135      	movs	r1, #53	@ 0x35
 8009222:	a81c      	add	r0, sp, #112	@ 0x70
 8009224:	f7ff ff3a 	bl	800909c <__copybits>
 8009228:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800922a:	9805      	ldr	r0, [sp, #20]
 800922c:	f7ff fb10 	bl	8008850 <_Bfree>
 8009230:	3e01      	subs	r6, #1
 8009232:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009234:	2e04      	cmp	r6, #4
 8009236:	d806      	bhi.n	8009246 <_strtod_l+0xe6>
 8009238:	e8df f006 	tbb	[pc, r6]
 800923c:	201d0314 	.word	0x201d0314
 8009240:	14          	.byte	0x14
 8009241:	00          	.byte	0x00
 8009242:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009246:	05e1      	lsls	r1, r4, #23
 8009248:	bf48      	it	mi
 800924a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800924e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009252:	0d1b      	lsrs	r3, r3, #20
 8009254:	051b      	lsls	r3, r3, #20
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1bb      	bne.n	80091d2 <_strtod_l+0x72>
 800925a:	f7fe fb1d 	bl	8007898 <__errno>
 800925e:	2322      	movs	r3, #34	@ 0x22
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	e7b6      	b.n	80091d2 <_strtod_l+0x72>
 8009264:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800926c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009270:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009274:	e7e7      	b.n	8009246 <_strtod_l+0xe6>
 8009276:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80093f8 <_strtod_l+0x298>
 800927a:	e7e4      	b.n	8009246 <_strtod_l+0xe6>
 800927c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009280:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009284:	e7df      	b.n	8009246 <_strtod_l+0xe6>
 8009286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	9219      	str	r2, [sp, #100]	@ 0x64
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	2b30      	cmp	r3, #48	@ 0x30
 8009290:	d0f9      	beq.n	8009286 <_strtod_l+0x126>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d09d      	beq.n	80091d2 <_strtod_l+0x72>
 8009296:	2301      	movs	r3, #1
 8009298:	2700      	movs	r7, #0
 800929a:	9308      	str	r3, [sp, #32]
 800929c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800929e:	930c      	str	r3, [sp, #48]	@ 0x30
 80092a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80092a2:	46b9      	mov	r9, r7
 80092a4:	220a      	movs	r2, #10
 80092a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092a8:	7805      	ldrb	r5, [r0, #0]
 80092aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092ae:	b2d9      	uxtb	r1, r3
 80092b0:	2909      	cmp	r1, #9
 80092b2:	d928      	bls.n	8009306 <_strtod_l+0x1a6>
 80092b4:	494f      	ldr	r1, [pc, #316]	@ (80093f4 <_strtod_l+0x294>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	f000 ffd6 	bl	800a268 <strncmp>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d032      	beq.n	8009326 <_strtod_l+0x1c6>
 80092c0:	2000      	movs	r0, #0
 80092c2:	462a      	mov	r2, r5
 80092c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80092c6:	464d      	mov	r5, r9
 80092c8:	4603      	mov	r3, r0
 80092ca:	2a65      	cmp	r2, #101	@ 0x65
 80092cc:	d001      	beq.n	80092d2 <_strtod_l+0x172>
 80092ce:	2a45      	cmp	r2, #69	@ 0x45
 80092d0:	d114      	bne.n	80092fc <_strtod_l+0x19c>
 80092d2:	b91d      	cbnz	r5, 80092dc <_strtod_l+0x17c>
 80092d4:	9a08      	ldr	r2, [sp, #32]
 80092d6:	4302      	orrs	r2, r0
 80092d8:	d096      	beq.n	8009208 <_strtod_l+0xa8>
 80092da:	2500      	movs	r5, #0
 80092dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092de:	1c62      	adds	r2, r4, #1
 80092e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092e2:	7862      	ldrb	r2, [r4, #1]
 80092e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80092e6:	d07a      	beq.n	80093de <_strtod_l+0x27e>
 80092e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80092ea:	d07e      	beq.n	80093ea <_strtod_l+0x28a>
 80092ec:	f04f 0c00 	mov.w	ip, #0
 80092f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092f4:	2909      	cmp	r1, #9
 80092f6:	f240 8085 	bls.w	8009404 <_strtod_l+0x2a4>
 80092fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80092fc:	f04f 0800 	mov.w	r8, #0
 8009300:	e0a5      	b.n	800944e <_strtod_l+0x2ee>
 8009302:	2300      	movs	r3, #0
 8009304:	e7c8      	b.n	8009298 <_strtod_l+0x138>
 8009306:	f1b9 0f08 	cmp.w	r9, #8
 800930a:	bfd8      	it	le
 800930c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800930e:	f100 0001 	add.w	r0, r0, #1
 8009312:	bfda      	itte	le
 8009314:	fb02 3301 	mlale	r3, r2, r1, r3
 8009318:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800931a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800931e:	f109 0901 	add.w	r9, r9, #1
 8009322:	9019      	str	r0, [sp, #100]	@ 0x64
 8009324:	e7bf      	b.n	80092a6 <_strtod_l+0x146>
 8009326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	9219      	str	r2, [sp, #100]	@ 0x64
 800932c:	785a      	ldrb	r2, [r3, #1]
 800932e:	f1b9 0f00 	cmp.w	r9, #0
 8009332:	d03b      	beq.n	80093ac <_strtod_l+0x24c>
 8009334:	900a      	str	r0, [sp, #40]	@ 0x28
 8009336:	464d      	mov	r5, r9
 8009338:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800933c:	2b09      	cmp	r3, #9
 800933e:	d912      	bls.n	8009366 <_strtod_l+0x206>
 8009340:	2301      	movs	r3, #1
 8009342:	e7c2      	b.n	80092ca <_strtod_l+0x16a>
 8009344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	9219      	str	r2, [sp, #100]	@ 0x64
 800934a:	785a      	ldrb	r2, [r3, #1]
 800934c:	3001      	adds	r0, #1
 800934e:	2a30      	cmp	r2, #48	@ 0x30
 8009350:	d0f8      	beq.n	8009344 <_strtod_l+0x1e4>
 8009352:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009356:	2b08      	cmp	r3, #8
 8009358:	f200 84d2 	bhi.w	8009d00 <_strtod_l+0xba0>
 800935c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009360:	2000      	movs	r0, #0
 8009362:	930c      	str	r3, [sp, #48]	@ 0x30
 8009364:	4605      	mov	r5, r0
 8009366:	3a30      	subs	r2, #48	@ 0x30
 8009368:	f100 0301 	add.w	r3, r0, #1
 800936c:	d018      	beq.n	80093a0 <_strtod_l+0x240>
 800936e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009370:	4419      	add	r1, r3
 8009372:	910a      	str	r1, [sp, #40]	@ 0x28
 8009374:	462e      	mov	r6, r5
 8009376:	f04f 0e0a 	mov.w	lr, #10
 800937a:	1c71      	adds	r1, r6, #1
 800937c:	eba1 0c05 	sub.w	ip, r1, r5
 8009380:	4563      	cmp	r3, ip
 8009382:	dc15      	bgt.n	80093b0 <_strtod_l+0x250>
 8009384:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009388:	182b      	adds	r3, r5, r0
 800938a:	2b08      	cmp	r3, #8
 800938c:	f105 0501 	add.w	r5, r5, #1
 8009390:	4405      	add	r5, r0
 8009392:	dc1a      	bgt.n	80093ca <_strtod_l+0x26a>
 8009394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009396:	230a      	movs	r3, #10
 8009398:	fb03 2301 	mla	r3, r3, r1, r2
 800939c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939e:	2300      	movs	r3, #0
 80093a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093a2:	1c51      	adds	r1, r2, #1
 80093a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80093a6:	7852      	ldrb	r2, [r2, #1]
 80093a8:	4618      	mov	r0, r3
 80093aa:	e7c5      	b.n	8009338 <_strtod_l+0x1d8>
 80093ac:	4648      	mov	r0, r9
 80093ae:	e7ce      	b.n	800934e <_strtod_l+0x1ee>
 80093b0:	2e08      	cmp	r6, #8
 80093b2:	dc05      	bgt.n	80093c0 <_strtod_l+0x260>
 80093b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80093b6:	fb0e f606 	mul.w	r6, lr, r6
 80093ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80093bc:	460e      	mov	r6, r1
 80093be:	e7dc      	b.n	800937a <_strtod_l+0x21a>
 80093c0:	2910      	cmp	r1, #16
 80093c2:	bfd8      	it	le
 80093c4:	fb0e f707 	mulle.w	r7, lr, r7
 80093c8:	e7f8      	b.n	80093bc <_strtod_l+0x25c>
 80093ca:	2b0f      	cmp	r3, #15
 80093cc:	bfdc      	itt	le
 80093ce:	230a      	movle	r3, #10
 80093d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80093d4:	e7e3      	b.n	800939e <_strtod_l+0x23e>
 80093d6:	2300      	movs	r3, #0
 80093d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80093da:	2301      	movs	r3, #1
 80093dc:	e77a      	b.n	80092d4 <_strtod_l+0x174>
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	1ca2      	adds	r2, r4, #2
 80093e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80093e6:	78a2      	ldrb	r2, [r4, #2]
 80093e8:	e782      	b.n	80092f0 <_strtod_l+0x190>
 80093ea:	f04f 0c01 	mov.w	ip, #1
 80093ee:	e7f8      	b.n	80093e2 <_strtod_l+0x282>
 80093f0:	0800b3a4 	.word	0x0800b3a4
 80093f4:	0800b1db 	.word	0x0800b1db
 80093f8:	7ff00000 	.word	0x7ff00000
 80093fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093fe:	1c51      	adds	r1, r2, #1
 8009400:	9119      	str	r1, [sp, #100]	@ 0x64
 8009402:	7852      	ldrb	r2, [r2, #1]
 8009404:	2a30      	cmp	r2, #48	@ 0x30
 8009406:	d0f9      	beq.n	80093fc <_strtod_l+0x29c>
 8009408:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800940c:	2908      	cmp	r1, #8
 800940e:	f63f af75 	bhi.w	80092fc <_strtod_l+0x19c>
 8009412:	3a30      	subs	r2, #48	@ 0x30
 8009414:	9209      	str	r2, [sp, #36]	@ 0x24
 8009416:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009418:	920f      	str	r2, [sp, #60]	@ 0x3c
 800941a:	f04f 080a 	mov.w	r8, #10
 800941e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009420:	1c56      	adds	r6, r2, #1
 8009422:	9619      	str	r6, [sp, #100]	@ 0x64
 8009424:	7852      	ldrb	r2, [r2, #1]
 8009426:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800942a:	f1be 0f09 	cmp.w	lr, #9
 800942e:	d939      	bls.n	80094a4 <_strtod_l+0x344>
 8009430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009432:	1a76      	subs	r6, r6, r1
 8009434:	2e08      	cmp	r6, #8
 8009436:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800943a:	dc03      	bgt.n	8009444 <_strtod_l+0x2e4>
 800943c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800943e:	4588      	cmp	r8, r1
 8009440:	bfa8      	it	ge
 8009442:	4688      	movge	r8, r1
 8009444:	f1bc 0f00 	cmp.w	ip, #0
 8009448:	d001      	beq.n	800944e <_strtod_l+0x2ee>
 800944a:	f1c8 0800 	rsb	r8, r8, #0
 800944e:	2d00      	cmp	r5, #0
 8009450:	d14e      	bne.n	80094f0 <_strtod_l+0x390>
 8009452:	9908      	ldr	r1, [sp, #32]
 8009454:	4308      	orrs	r0, r1
 8009456:	f47f aebc 	bne.w	80091d2 <_strtod_l+0x72>
 800945a:	2b00      	cmp	r3, #0
 800945c:	f47f aed4 	bne.w	8009208 <_strtod_l+0xa8>
 8009460:	2a69      	cmp	r2, #105	@ 0x69
 8009462:	d028      	beq.n	80094b6 <_strtod_l+0x356>
 8009464:	dc25      	bgt.n	80094b2 <_strtod_l+0x352>
 8009466:	2a49      	cmp	r2, #73	@ 0x49
 8009468:	d025      	beq.n	80094b6 <_strtod_l+0x356>
 800946a:	2a4e      	cmp	r2, #78	@ 0x4e
 800946c:	f47f aecc 	bne.w	8009208 <_strtod_l+0xa8>
 8009470:	499a      	ldr	r1, [pc, #616]	@ (80096dc <_strtod_l+0x57c>)
 8009472:	a819      	add	r0, sp, #100	@ 0x64
 8009474:	f001 f9e0 	bl	800a838 <__match>
 8009478:	2800      	cmp	r0, #0
 800947a:	f43f aec5 	beq.w	8009208 <_strtod_l+0xa8>
 800947e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b28      	cmp	r3, #40	@ 0x28
 8009484:	d12e      	bne.n	80094e4 <_strtod_l+0x384>
 8009486:	4996      	ldr	r1, [pc, #600]	@ (80096e0 <_strtod_l+0x580>)
 8009488:	aa1c      	add	r2, sp, #112	@ 0x70
 800948a:	a819      	add	r0, sp, #100	@ 0x64
 800948c:	f001 f9e8 	bl	800a860 <__hexnan>
 8009490:	2805      	cmp	r0, #5
 8009492:	d127      	bne.n	80094e4 <_strtod_l+0x384>
 8009494:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009496:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800949a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800949e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094a2:	e696      	b.n	80091d2 <_strtod_l+0x72>
 80094a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094a6:	fb08 2101 	mla	r1, r8, r1, r2
 80094aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80094b0:	e7b5      	b.n	800941e <_strtod_l+0x2be>
 80094b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80094b4:	e7da      	b.n	800946c <_strtod_l+0x30c>
 80094b6:	498b      	ldr	r1, [pc, #556]	@ (80096e4 <_strtod_l+0x584>)
 80094b8:	a819      	add	r0, sp, #100	@ 0x64
 80094ba:	f001 f9bd 	bl	800a838 <__match>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f aea2 	beq.w	8009208 <_strtod_l+0xa8>
 80094c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094c6:	4988      	ldr	r1, [pc, #544]	@ (80096e8 <_strtod_l+0x588>)
 80094c8:	3b01      	subs	r3, #1
 80094ca:	a819      	add	r0, sp, #100	@ 0x64
 80094cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80094ce:	f001 f9b3 	bl	800a838 <__match>
 80094d2:	b910      	cbnz	r0, 80094da <_strtod_l+0x37a>
 80094d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d6:	3301      	adds	r3, #1
 80094d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80094da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80096f8 <_strtod_l+0x598>
 80094de:	f04f 0a00 	mov.w	sl, #0
 80094e2:	e676      	b.n	80091d2 <_strtod_l+0x72>
 80094e4:	4881      	ldr	r0, [pc, #516]	@ (80096ec <_strtod_l+0x58c>)
 80094e6:	f000 fee3 	bl	800a2b0 <nan>
 80094ea:	ec5b ab10 	vmov	sl, fp, d0
 80094ee:	e670      	b.n	80091d2 <_strtod_l+0x72>
 80094f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80094f4:	eba8 0303 	sub.w	r3, r8, r3
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	bf08      	it	eq
 80094fe:	46a9      	moveq	r9, r5
 8009500:	2d10      	cmp	r5, #16
 8009502:	9309      	str	r3, [sp, #36]	@ 0x24
 8009504:	462c      	mov	r4, r5
 8009506:	bfa8      	it	ge
 8009508:	2410      	movge	r4, #16
 800950a:	f7f6 fffb 	bl	8000504 <__aeabi_ui2d>
 800950e:	2d09      	cmp	r5, #9
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	dc13      	bgt.n	800953e <_strtod_l+0x3de>
 8009516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	f43f ae5a 	beq.w	80091d2 <_strtod_l+0x72>
 800951e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009520:	dd78      	ble.n	8009614 <_strtod_l+0x4b4>
 8009522:	2b16      	cmp	r3, #22
 8009524:	dc5f      	bgt.n	80095e6 <_strtod_l+0x486>
 8009526:	4972      	ldr	r1, [pc, #456]	@ (80096f0 <_strtod_l+0x590>)
 8009528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800952c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009530:	4652      	mov	r2, sl
 8009532:	465b      	mov	r3, fp
 8009534:	f7f7 f860 	bl	80005f8 <__aeabi_dmul>
 8009538:	4682      	mov	sl, r0
 800953a:	468b      	mov	fp, r1
 800953c:	e649      	b.n	80091d2 <_strtod_l+0x72>
 800953e:	4b6c      	ldr	r3, [pc, #432]	@ (80096f0 <_strtod_l+0x590>)
 8009540:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009544:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	4682      	mov	sl, r0
 800954e:	4638      	mov	r0, r7
 8009550:	468b      	mov	fp, r1
 8009552:	f7f6 ffd7 	bl	8000504 <__aeabi_ui2d>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4650      	mov	r0, sl
 800955c:	4659      	mov	r1, fp
 800955e:	f7f6 fe95 	bl	800028c <__adddf3>
 8009562:	2d0f      	cmp	r5, #15
 8009564:	4682      	mov	sl, r0
 8009566:	468b      	mov	fp, r1
 8009568:	ddd5      	ble.n	8009516 <_strtod_l+0x3b6>
 800956a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956c:	1b2c      	subs	r4, r5, r4
 800956e:	441c      	add	r4, r3
 8009570:	2c00      	cmp	r4, #0
 8009572:	f340 8093 	ble.w	800969c <_strtod_l+0x53c>
 8009576:	f014 030f 	ands.w	r3, r4, #15
 800957a:	d00a      	beq.n	8009592 <_strtod_l+0x432>
 800957c:	495c      	ldr	r1, [pc, #368]	@ (80096f0 <_strtod_l+0x590>)
 800957e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009582:	4652      	mov	r2, sl
 8009584:	465b      	mov	r3, fp
 8009586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800958a:	f7f7 f835 	bl	80005f8 <__aeabi_dmul>
 800958e:	4682      	mov	sl, r0
 8009590:	468b      	mov	fp, r1
 8009592:	f034 040f 	bics.w	r4, r4, #15
 8009596:	d073      	beq.n	8009680 <_strtod_l+0x520>
 8009598:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800959c:	dd49      	ble.n	8009632 <_strtod_l+0x4d2>
 800959e:	2400      	movs	r4, #0
 80095a0:	46a0      	mov	r8, r4
 80095a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095a4:	46a1      	mov	r9, r4
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80096f8 <_strtod_l+0x598>
 80095ac:	2322      	movs	r3, #34	@ 0x22
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	f04f 0a00 	mov.w	sl, #0
 80095b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f43f ae0b 	beq.w	80091d2 <_strtod_l+0x72>
 80095bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095be:	9805      	ldr	r0, [sp, #20]
 80095c0:	f7ff f946 	bl	8008850 <_Bfree>
 80095c4:	9805      	ldr	r0, [sp, #20]
 80095c6:	4649      	mov	r1, r9
 80095c8:	f7ff f942 	bl	8008850 <_Bfree>
 80095cc:	9805      	ldr	r0, [sp, #20]
 80095ce:	4641      	mov	r1, r8
 80095d0:	f7ff f93e 	bl	8008850 <_Bfree>
 80095d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095d6:	9805      	ldr	r0, [sp, #20]
 80095d8:	f7ff f93a 	bl	8008850 <_Bfree>
 80095dc:	9805      	ldr	r0, [sp, #20]
 80095de:	4621      	mov	r1, r4
 80095e0:	f7ff f936 	bl	8008850 <_Bfree>
 80095e4:	e5f5      	b.n	80091d2 <_strtod_l+0x72>
 80095e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095ec:	4293      	cmp	r3, r2
 80095ee:	dbbc      	blt.n	800956a <_strtod_l+0x40a>
 80095f0:	4c3f      	ldr	r4, [pc, #252]	@ (80096f0 <_strtod_l+0x590>)
 80095f2:	f1c5 050f 	rsb	r5, r5, #15
 80095f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095fa:	4652      	mov	r2, sl
 80095fc:	465b      	mov	r3, fp
 80095fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009602:	f7f6 fff9 	bl	80005f8 <__aeabi_dmul>
 8009606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009608:	1b5d      	subs	r5, r3, r5
 800960a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800960e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009612:	e78f      	b.n	8009534 <_strtod_l+0x3d4>
 8009614:	3316      	adds	r3, #22
 8009616:	dba8      	blt.n	800956a <_strtod_l+0x40a>
 8009618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800961a:	eba3 0808 	sub.w	r8, r3, r8
 800961e:	4b34      	ldr	r3, [pc, #208]	@ (80096f0 <_strtod_l+0x590>)
 8009620:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009624:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009628:	4650      	mov	r0, sl
 800962a:	4659      	mov	r1, fp
 800962c:	f7f7 f90e 	bl	800084c <__aeabi_ddiv>
 8009630:	e782      	b.n	8009538 <_strtod_l+0x3d8>
 8009632:	2300      	movs	r3, #0
 8009634:	4f2f      	ldr	r7, [pc, #188]	@ (80096f4 <_strtod_l+0x594>)
 8009636:	1124      	asrs	r4, r4, #4
 8009638:	4650      	mov	r0, sl
 800963a:	4659      	mov	r1, fp
 800963c:	461e      	mov	r6, r3
 800963e:	2c01      	cmp	r4, #1
 8009640:	dc21      	bgt.n	8009686 <_strtod_l+0x526>
 8009642:	b10b      	cbz	r3, 8009648 <_strtod_l+0x4e8>
 8009644:	4682      	mov	sl, r0
 8009646:	468b      	mov	fp, r1
 8009648:	492a      	ldr	r1, [pc, #168]	@ (80096f4 <_strtod_l+0x594>)
 800964a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800964e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009652:	4652      	mov	r2, sl
 8009654:	465b      	mov	r3, fp
 8009656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965a:	f7f6 ffcd 	bl	80005f8 <__aeabi_dmul>
 800965e:	4b26      	ldr	r3, [pc, #152]	@ (80096f8 <_strtod_l+0x598>)
 8009660:	460a      	mov	r2, r1
 8009662:	400b      	ands	r3, r1
 8009664:	4925      	ldr	r1, [pc, #148]	@ (80096fc <_strtod_l+0x59c>)
 8009666:	428b      	cmp	r3, r1
 8009668:	4682      	mov	sl, r0
 800966a:	d898      	bhi.n	800959e <_strtod_l+0x43e>
 800966c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009670:	428b      	cmp	r3, r1
 8009672:	bf86      	itte	hi
 8009674:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009700 <_strtod_l+0x5a0>
 8009678:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800967c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009680:	2300      	movs	r3, #0
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	e076      	b.n	8009774 <_strtod_l+0x614>
 8009686:	07e2      	lsls	r2, r4, #31
 8009688:	d504      	bpl.n	8009694 <_strtod_l+0x534>
 800968a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968e:	f7f6 ffb3 	bl	80005f8 <__aeabi_dmul>
 8009692:	2301      	movs	r3, #1
 8009694:	3601      	adds	r6, #1
 8009696:	1064      	asrs	r4, r4, #1
 8009698:	3708      	adds	r7, #8
 800969a:	e7d0      	b.n	800963e <_strtod_l+0x4de>
 800969c:	d0f0      	beq.n	8009680 <_strtod_l+0x520>
 800969e:	4264      	negs	r4, r4
 80096a0:	f014 020f 	ands.w	r2, r4, #15
 80096a4:	d00a      	beq.n	80096bc <_strtod_l+0x55c>
 80096a6:	4b12      	ldr	r3, [pc, #72]	@ (80096f0 <_strtod_l+0x590>)
 80096a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ac:	4650      	mov	r0, sl
 80096ae:	4659      	mov	r1, fp
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f7 f8ca 	bl	800084c <__aeabi_ddiv>
 80096b8:	4682      	mov	sl, r0
 80096ba:	468b      	mov	fp, r1
 80096bc:	1124      	asrs	r4, r4, #4
 80096be:	d0df      	beq.n	8009680 <_strtod_l+0x520>
 80096c0:	2c1f      	cmp	r4, #31
 80096c2:	dd1f      	ble.n	8009704 <_strtod_l+0x5a4>
 80096c4:	2400      	movs	r4, #0
 80096c6:	46a0      	mov	r8, r4
 80096c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096ca:	46a1      	mov	r9, r4
 80096cc:	9a05      	ldr	r2, [sp, #20]
 80096ce:	2322      	movs	r3, #34	@ 0x22
 80096d0:	f04f 0a00 	mov.w	sl, #0
 80096d4:	f04f 0b00 	mov.w	fp, #0
 80096d8:	6013      	str	r3, [r2, #0]
 80096da:	e76b      	b.n	80095b4 <_strtod_l+0x454>
 80096dc:	0800b0c9 	.word	0x0800b0c9
 80096e0:	0800b390 	.word	0x0800b390
 80096e4:	0800b0c1 	.word	0x0800b0c1
 80096e8:	0800b0f8 	.word	0x0800b0f8
 80096ec:	0800b231 	.word	0x0800b231
 80096f0:	0800b2c8 	.word	0x0800b2c8
 80096f4:	0800b2a0 	.word	0x0800b2a0
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	7ca00000 	.word	0x7ca00000
 8009700:	7fefffff 	.word	0x7fefffff
 8009704:	f014 0310 	ands.w	r3, r4, #16
 8009708:	bf18      	it	ne
 800970a:	236a      	movne	r3, #106	@ 0x6a
 800970c:	4ea9      	ldr	r6, [pc, #676]	@ (80099b4 <_strtod_l+0x854>)
 800970e:	9308      	str	r3, [sp, #32]
 8009710:	4650      	mov	r0, sl
 8009712:	4659      	mov	r1, fp
 8009714:	2300      	movs	r3, #0
 8009716:	07e7      	lsls	r7, r4, #31
 8009718:	d504      	bpl.n	8009724 <_strtod_l+0x5c4>
 800971a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800971e:	f7f6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8009722:	2301      	movs	r3, #1
 8009724:	1064      	asrs	r4, r4, #1
 8009726:	f106 0608 	add.w	r6, r6, #8
 800972a:	d1f4      	bne.n	8009716 <_strtod_l+0x5b6>
 800972c:	b10b      	cbz	r3, 8009732 <_strtod_l+0x5d2>
 800972e:	4682      	mov	sl, r0
 8009730:	468b      	mov	fp, r1
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	b1b3      	cbz	r3, 8009764 <_strtod_l+0x604>
 8009736:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800973a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800973e:	2b00      	cmp	r3, #0
 8009740:	4659      	mov	r1, fp
 8009742:	dd0f      	ble.n	8009764 <_strtod_l+0x604>
 8009744:	2b1f      	cmp	r3, #31
 8009746:	dd56      	ble.n	80097f6 <_strtod_l+0x696>
 8009748:	2b34      	cmp	r3, #52	@ 0x34
 800974a:	bfde      	ittt	le
 800974c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009750:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009754:	4093      	lslle	r3, r2
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	bfcc      	ite	gt
 800975c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009760:	ea03 0b01 	andle.w	fp, r3, r1
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	4650      	mov	r0, sl
 800976a:	4659      	mov	r1, fp
 800976c:	f7f7 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009770:	2800      	cmp	r0, #0
 8009772:	d1a7      	bne.n	80096c4 <_strtod_l+0x564>
 8009774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800977a:	9805      	ldr	r0, [sp, #20]
 800977c:	462b      	mov	r3, r5
 800977e:	464a      	mov	r2, r9
 8009780:	f7ff f8ce 	bl	8008920 <__s2b>
 8009784:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009786:	2800      	cmp	r0, #0
 8009788:	f43f af09 	beq.w	800959e <_strtod_l+0x43e>
 800978c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800978e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009790:	2a00      	cmp	r2, #0
 8009792:	eba3 0308 	sub.w	r3, r3, r8
 8009796:	bfa8      	it	ge
 8009798:	2300      	movge	r3, #0
 800979a:	9312      	str	r3, [sp, #72]	@ 0x48
 800979c:	2400      	movs	r4, #0
 800979e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80097a4:	46a0      	mov	r8, r4
 80097a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097a8:	9805      	ldr	r0, [sp, #20]
 80097aa:	6859      	ldr	r1, [r3, #4]
 80097ac:	f7ff f810 	bl	80087d0 <_Balloc>
 80097b0:	4681      	mov	r9, r0
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f aef7 	beq.w	80095a6 <_strtod_l+0x446>
 80097b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ba:	691a      	ldr	r2, [r3, #16]
 80097bc:	3202      	adds	r2, #2
 80097be:	f103 010c 	add.w	r1, r3, #12
 80097c2:	0092      	lsls	r2, r2, #2
 80097c4:	300c      	adds	r0, #12
 80097c6:	f7fe f894 	bl	80078f2 <memcpy>
 80097ca:	ec4b ab10 	vmov	d0, sl, fp
 80097ce:	9805      	ldr	r0, [sp, #20]
 80097d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80097d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80097d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097d8:	f7ff fbd6 	bl	8008f88 <__d2b>
 80097dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f aee1 	beq.w	80095a6 <_strtod_l+0x446>
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	2101      	movs	r1, #1
 80097e8:	f7ff f930 	bl	8008a4c <__i2b>
 80097ec:	4680      	mov	r8, r0
 80097ee:	b948      	cbnz	r0, 8009804 <_strtod_l+0x6a4>
 80097f0:	f04f 0800 	mov.w	r8, #0
 80097f4:	e6d7      	b.n	80095a6 <_strtod_l+0x446>
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097fa:	fa02 f303 	lsl.w	r3, r2, r3
 80097fe:	ea03 0a0a 	and.w	sl, r3, sl
 8009802:	e7af      	b.n	8009764 <_strtod_l+0x604>
 8009804:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009806:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009808:	2d00      	cmp	r5, #0
 800980a:	bfab      	itete	ge
 800980c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800980e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009810:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009812:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009814:	bfac      	ite	ge
 8009816:	18ef      	addge	r7, r5, r3
 8009818:	1b5e      	sublt	r6, r3, r5
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	1aed      	subs	r5, r5, r3
 800981e:	4415      	add	r5, r2
 8009820:	4b65      	ldr	r3, [pc, #404]	@ (80099b8 <_strtod_l+0x858>)
 8009822:	3d01      	subs	r5, #1
 8009824:	429d      	cmp	r5, r3
 8009826:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800982a:	da50      	bge.n	80098ce <_strtod_l+0x76e>
 800982c:	1b5b      	subs	r3, r3, r5
 800982e:	2b1f      	cmp	r3, #31
 8009830:	eba2 0203 	sub.w	r2, r2, r3
 8009834:	f04f 0101 	mov.w	r1, #1
 8009838:	dc3d      	bgt.n	80098b6 <_strtod_l+0x756>
 800983a:	fa01 f303 	lsl.w	r3, r1, r3
 800983e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009840:	2300      	movs	r3, #0
 8009842:	9310      	str	r3, [sp, #64]	@ 0x40
 8009844:	18bd      	adds	r5, r7, r2
 8009846:	9b08      	ldr	r3, [sp, #32]
 8009848:	42af      	cmp	r7, r5
 800984a:	4416      	add	r6, r2
 800984c:	441e      	add	r6, r3
 800984e:	463b      	mov	r3, r7
 8009850:	bfa8      	it	ge
 8009852:	462b      	movge	r3, r5
 8009854:	42b3      	cmp	r3, r6
 8009856:	bfa8      	it	ge
 8009858:	4633      	movge	r3, r6
 800985a:	2b00      	cmp	r3, #0
 800985c:	bfc2      	ittt	gt
 800985e:	1aed      	subgt	r5, r5, r3
 8009860:	1af6      	subgt	r6, r6, r3
 8009862:	1aff      	subgt	r7, r7, r3
 8009864:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009866:	2b00      	cmp	r3, #0
 8009868:	dd16      	ble.n	8009898 <_strtod_l+0x738>
 800986a:	4641      	mov	r1, r8
 800986c:	9805      	ldr	r0, [sp, #20]
 800986e:	461a      	mov	r2, r3
 8009870:	f7ff f9a4 	bl	8008bbc <__pow5mult>
 8009874:	4680      	mov	r8, r0
 8009876:	2800      	cmp	r0, #0
 8009878:	d0ba      	beq.n	80097f0 <_strtod_l+0x690>
 800987a:	4601      	mov	r1, r0
 800987c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800987e:	9805      	ldr	r0, [sp, #20]
 8009880:	f7ff f8fa 	bl	8008a78 <__multiply>
 8009884:	900a      	str	r0, [sp, #40]	@ 0x28
 8009886:	2800      	cmp	r0, #0
 8009888:	f43f ae8d 	beq.w	80095a6 <_strtod_l+0x446>
 800988c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800988e:	9805      	ldr	r0, [sp, #20]
 8009890:	f7fe ffde 	bl	8008850 <_Bfree>
 8009894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009896:	931a      	str	r3, [sp, #104]	@ 0x68
 8009898:	2d00      	cmp	r5, #0
 800989a:	dc1d      	bgt.n	80098d8 <_strtod_l+0x778>
 800989c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dd23      	ble.n	80098ea <_strtod_l+0x78a>
 80098a2:	4649      	mov	r1, r9
 80098a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098a6:	9805      	ldr	r0, [sp, #20]
 80098a8:	f7ff f988 	bl	8008bbc <__pow5mult>
 80098ac:	4681      	mov	r9, r0
 80098ae:	b9e0      	cbnz	r0, 80098ea <_strtod_l+0x78a>
 80098b0:	f04f 0900 	mov.w	r9, #0
 80098b4:	e677      	b.n	80095a6 <_strtod_l+0x446>
 80098b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80098ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80098be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80098c2:	35e2      	adds	r5, #226	@ 0xe2
 80098c4:	fa01 f305 	lsl.w	r3, r1, r5
 80098c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80098ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098cc:	e7ba      	b.n	8009844 <_strtod_l+0x6e4>
 80098ce:	2300      	movs	r3, #0
 80098d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80098d2:	2301      	movs	r3, #1
 80098d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098d6:	e7b5      	b.n	8009844 <_strtod_l+0x6e4>
 80098d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098da:	9805      	ldr	r0, [sp, #20]
 80098dc:	462a      	mov	r2, r5
 80098de:	f7ff f9c7 	bl	8008c70 <__lshift>
 80098e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d1d9      	bne.n	800989c <_strtod_l+0x73c>
 80098e8:	e65d      	b.n	80095a6 <_strtod_l+0x446>
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	dd07      	ble.n	80098fe <_strtod_l+0x79e>
 80098ee:	4649      	mov	r1, r9
 80098f0:	9805      	ldr	r0, [sp, #20]
 80098f2:	4632      	mov	r2, r6
 80098f4:	f7ff f9bc 	bl	8008c70 <__lshift>
 80098f8:	4681      	mov	r9, r0
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d0d8      	beq.n	80098b0 <_strtod_l+0x750>
 80098fe:	2f00      	cmp	r7, #0
 8009900:	dd08      	ble.n	8009914 <_strtod_l+0x7b4>
 8009902:	4641      	mov	r1, r8
 8009904:	9805      	ldr	r0, [sp, #20]
 8009906:	463a      	mov	r2, r7
 8009908:	f7ff f9b2 	bl	8008c70 <__lshift>
 800990c:	4680      	mov	r8, r0
 800990e:	2800      	cmp	r0, #0
 8009910:	f43f ae49 	beq.w	80095a6 <_strtod_l+0x446>
 8009914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009916:	9805      	ldr	r0, [sp, #20]
 8009918:	464a      	mov	r2, r9
 800991a:	f7ff fa31 	bl	8008d80 <__mdiff>
 800991e:	4604      	mov	r4, r0
 8009920:	2800      	cmp	r0, #0
 8009922:	f43f ae40 	beq.w	80095a6 <_strtod_l+0x446>
 8009926:	68c3      	ldr	r3, [r0, #12]
 8009928:	930f      	str	r3, [sp, #60]	@ 0x3c
 800992a:	2300      	movs	r3, #0
 800992c:	60c3      	str	r3, [r0, #12]
 800992e:	4641      	mov	r1, r8
 8009930:	f7ff fa0a 	bl	8008d48 <__mcmp>
 8009934:	2800      	cmp	r0, #0
 8009936:	da45      	bge.n	80099c4 <_strtod_l+0x864>
 8009938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993a:	ea53 030a 	orrs.w	r3, r3, sl
 800993e:	d16b      	bne.n	8009a18 <_strtod_l+0x8b8>
 8009940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009944:	2b00      	cmp	r3, #0
 8009946:	d167      	bne.n	8009a18 <_strtod_l+0x8b8>
 8009948:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800994c:	0d1b      	lsrs	r3, r3, #20
 800994e:	051b      	lsls	r3, r3, #20
 8009950:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009954:	d960      	bls.n	8009a18 <_strtod_l+0x8b8>
 8009956:	6963      	ldr	r3, [r4, #20]
 8009958:	b913      	cbnz	r3, 8009960 <_strtod_l+0x800>
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	2b01      	cmp	r3, #1
 800995e:	dd5b      	ble.n	8009a18 <_strtod_l+0x8b8>
 8009960:	4621      	mov	r1, r4
 8009962:	2201      	movs	r2, #1
 8009964:	9805      	ldr	r0, [sp, #20]
 8009966:	f7ff f983 	bl	8008c70 <__lshift>
 800996a:	4641      	mov	r1, r8
 800996c:	4604      	mov	r4, r0
 800996e:	f7ff f9eb 	bl	8008d48 <__mcmp>
 8009972:	2800      	cmp	r0, #0
 8009974:	dd50      	ble.n	8009a18 <_strtod_l+0x8b8>
 8009976:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800997a:	9a08      	ldr	r2, [sp, #32]
 800997c:	0d1b      	lsrs	r3, r3, #20
 800997e:	051b      	lsls	r3, r3, #20
 8009980:	2a00      	cmp	r2, #0
 8009982:	d06a      	beq.n	8009a5a <_strtod_l+0x8fa>
 8009984:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009988:	d867      	bhi.n	8009a5a <_strtod_l+0x8fa>
 800998a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800998e:	f67f ae9d 	bls.w	80096cc <_strtod_l+0x56c>
 8009992:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <_strtod_l+0x85c>)
 8009994:	4650      	mov	r0, sl
 8009996:	4659      	mov	r1, fp
 8009998:	2200      	movs	r2, #0
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4b08      	ldr	r3, [pc, #32]	@ (80099c0 <_strtod_l+0x860>)
 80099a0:	400b      	ands	r3, r1
 80099a2:	4682      	mov	sl, r0
 80099a4:	468b      	mov	fp, r1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f47f ae08 	bne.w	80095bc <_strtod_l+0x45c>
 80099ac:	9a05      	ldr	r2, [sp, #20]
 80099ae:	2322      	movs	r3, #34	@ 0x22
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	e603      	b.n	80095bc <_strtod_l+0x45c>
 80099b4:	0800b3b8 	.word	0x0800b3b8
 80099b8:	fffffc02 	.word	0xfffffc02
 80099bc:	39500000 	.word	0x39500000
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80099c8:	d165      	bne.n	8009a96 <_strtod_l+0x936>
 80099ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099d0:	b35a      	cbz	r2, 8009a2a <_strtod_l+0x8ca>
 80099d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c50 <_strtod_l+0xaf0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d12b      	bne.n	8009a30 <_strtod_l+0x8d0>
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	4651      	mov	r1, sl
 80099dc:	b303      	cbz	r3, 8009a20 <_strtod_l+0x8c0>
 80099de:	4b9d      	ldr	r3, [pc, #628]	@ (8009c54 <_strtod_l+0xaf4>)
 80099e0:	465a      	mov	r2, fp
 80099e2:	4013      	ands	r3, r2
 80099e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099ec:	d81b      	bhi.n	8009a26 <_strtod_l+0x8c6>
 80099ee:	0d1b      	lsrs	r3, r3, #20
 80099f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099f4:	fa02 f303 	lsl.w	r3, r2, r3
 80099f8:	4299      	cmp	r1, r3
 80099fa:	d119      	bne.n	8009a30 <_strtod_l+0x8d0>
 80099fc:	4b96      	ldr	r3, [pc, #600]	@ (8009c58 <_strtod_l+0xaf8>)
 80099fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d102      	bne.n	8009a0a <_strtod_l+0x8aa>
 8009a04:	3101      	adds	r1, #1
 8009a06:	f43f adce 	beq.w	80095a6 <_strtod_l+0x446>
 8009a0a:	4b92      	ldr	r3, [pc, #584]	@ (8009c54 <_strtod_l+0xaf4>)
 8009a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a0e:	401a      	ands	r2, r3
 8009a10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a14:	f04f 0a00 	mov.w	sl, #0
 8009a18:	9b08      	ldr	r3, [sp, #32]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1b9      	bne.n	8009992 <_strtod_l+0x832>
 8009a1e:	e5cd      	b.n	80095bc <_strtod_l+0x45c>
 8009a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a24:	e7e8      	b.n	80099f8 <_strtod_l+0x898>
 8009a26:	4613      	mov	r3, r2
 8009a28:	e7e6      	b.n	80099f8 <_strtod_l+0x898>
 8009a2a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a2e:	d0a2      	beq.n	8009976 <_strtod_l+0x816>
 8009a30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a32:	b1db      	cbz	r3, 8009a6c <_strtod_l+0x90c>
 8009a34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a36:	4213      	tst	r3, r2
 8009a38:	d0ee      	beq.n	8009a18 <_strtod_l+0x8b8>
 8009a3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a3c:	9a08      	ldr	r2, [sp, #32]
 8009a3e:	4650      	mov	r0, sl
 8009a40:	4659      	mov	r1, fp
 8009a42:	b1bb      	cbz	r3, 8009a74 <_strtod_l+0x914>
 8009a44:	f7ff fb6e 	bl	8009124 <sulp>
 8009a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a4c:	ec53 2b10 	vmov	r2, r3, d0
 8009a50:	f7f6 fc1c 	bl	800028c <__adddf3>
 8009a54:	4682      	mov	sl, r0
 8009a56:	468b      	mov	fp, r1
 8009a58:	e7de      	b.n	8009a18 <_strtod_l+0x8b8>
 8009a5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a66:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009a6a:	e7d5      	b.n	8009a18 <_strtod_l+0x8b8>
 8009a6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a6e:	ea13 0f0a 	tst.w	r3, sl
 8009a72:	e7e1      	b.n	8009a38 <_strtod_l+0x8d8>
 8009a74:	f7ff fb56 	bl	8009124 <sulp>
 8009a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a7c:	ec53 2b10 	vmov	r2, r3, d0
 8009a80:	f7f6 fc02 	bl	8000288 <__aeabi_dsub>
 8009a84:	2200      	movs	r2, #0
 8009a86:	2300      	movs	r3, #0
 8009a88:	4682      	mov	sl, r0
 8009a8a:	468b      	mov	fp, r1
 8009a8c:	f7f7 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d0c1      	beq.n	8009a18 <_strtod_l+0x8b8>
 8009a94:	e61a      	b.n	80096cc <_strtod_l+0x56c>
 8009a96:	4641      	mov	r1, r8
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f7ff facd 	bl	8009038 <__ratio>
 8009a9e:	ec57 6b10 	vmov	r6, r7, d0
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f7 f820 	bl	8000af0 <__aeabi_dcmple>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d06f      	beq.n	8009b94 <_strtod_l+0xa34>
 8009ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d17a      	bne.n	8009bb0 <_strtod_l+0xa50>
 8009aba:	f1ba 0f00 	cmp.w	sl, #0
 8009abe:	d158      	bne.n	8009b72 <_strtod_l+0xa12>
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d15a      	bne.n	8009b80 <_strtod_l+0xa20>
 8009aca:	4b64      	ldr	r3, [pc, #400]	@ (8009c5c <_strtod_l+0xafc>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f7 f803 	bl	8000adc <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d159      	bne.n	8009b8e <_strtod_l+0xa2e>
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	4b60      	ldr	r3, [pc, #384]	@ (8009c60 <_strtod_l+0xb00>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f7f6 fd89 	bl	80005f8 <__aeabi_dmul>
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460f      	mov	r7, r1
 8009aea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009aee:	9606      	str	r6, [sp, #24]
 8009af0:	9307      	str	r3, [sp, #28]
 8009af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009af6:	4d57      	ldr	r5, [pc, #348]	@ (8009c54 <_strtod_l+0xaf4>)
 8009af8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009afe:	401d      	ands	r5, r3
 8009b00:	4b58      	ldr	r3, [pc, #352]	@ (8009c64 <_strtod_l+0xb04>)
 8009b02:	429d      	cmp	r5, r3
 8009b04:	f040 80b2 	bne.w	8009c6c <_strtod_l+0xb0c>
 8009b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b0e:	ec4b ab10 	vmov	d0, sl, fp
 8009b12:	f7ff f9c9 	bl	8008ea8 <__ulp>
 8009b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b1a:	ec51 0b10 	vmov	r0, r1, d0
 8009b1e:	f7f6 fd6b 	bl	80005f8 <__aeabi_dmul>
 8009b22:	4652      	mov	r2, sl
 8009b24:	465b      	mov	r3, fp
 8009b26:	f7f6 fbb1 	bl	800028c <__adddf3>
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4949      	ldr	r1, [pc, #292]	@ (8009c54 <_strtod_l+0xaf4>)
 8009b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8009c68 <_strtod_l+0xb08>)
 8009b30:	4019      	ands	r1, r3
 8009b32:	4291      	cmp	r1, r2
 8009b34:	4682      	mov	sl, r0
 8009b36:	d942      	bls.n	8009bbe <_strtod_l+0xa5e>
 8009b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b3a:	4b47      	ldr	r3, [pc, #284]	@ (8009c58 <_strtod_l+0xaf8>)
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d103      	bne.n	8009b48 <_strtod_l+0x9e8>
 8009b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b42:	3301      	adds	r3, #1
 8009b44:	f43f ad2f 	beq.w	80095a6 <_strtod_l+0x446>
 8009b48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c58 <_strtod_l+0xaf8>
 8009b4c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009b50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b52:	9805      	ldr	r0, [sp, #20]
 8009b54:	f7fe fe7c 	bl	8008850 <_Bfree>
 8009b58:	9805      	ldr	r0, [sp, #20]
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	f7fe fe78 	bl	8008850 <_Bfree>
 8009b60:	9805      	ldr	r0, [sp, #20]
 8009b62:	4641      	mov	r1, r8
 8009b64:	f7fe fe74 	bl	8008850 <_Bfree>
 8009b68:	9805      	ldr	r0, [sp, #20]
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	f7fe fe70 	bl	8008850 <_Bfree>
 8009b70:	e619      	b.n	80097a6 <_strtod_l+0x646>
 8009b72:	f1ba 0f01 	cmp.w	sl, #1
 8009b76:	d103      	bne.n	8009b80 <_strtod_l+0xa20>
 8009b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f43f ada6 	beq.w	80096cc <_strtod_l+0x56c>
 8009b80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c30 <_strtod_l+0xad0>
 8009b84:	4f35      	ldr	r7, [pc, #212]	@ (8009c5c <_strtod_l+0xafc>)
 8009b86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	e7b1      	b.n	8009af2 <_strtod_l+0x992>
 8009b8e:	4f34      	ldr	r7, [pc, #208]	@ (8009c60 <_strtod_l+0xb00>)
 8009b90:	2600      	movs	r6, #0
 8009b92:	e7aa      	b.n	8009aea <_strtod_l+0x98a>
 8009b94:	4b32      	ldr	r3, [pc, #200]	@ (8009c60 <_strtod_l+0xb00>)
 8009b96:	4630      	mov	r0, r6
 8009b98:	4639      	mov	r1, r7
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d09f      	beq.n	8009aea <_strtod_l+0x98a>
 8009baa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bae:	e7a0      	b.n	8009af2 <_strtod_l+0x992>
 8009bb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c38 <_strtod_l+0xad8>
 8009bb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bb8:	ec57 6b17 	vmov	r6, r7, d7
 8009bbc:	e799      	b.n	8009af2 <_strtod_l+0x992>
 8009bbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1c1      	bne.n	8009b50 <_strtod_l+0x9f0>
 8009bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bd0:	0d1b      	lsrs	r3, r3, #20
 8009bd2:	051b      	lsls	r3, r3, #20
 8009bd4:	429d      	cmp	r5, r3
 8009bd6:	d1bb      	bne.n	8009b50 <_strtod_l+0x9f0>
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4639      	mov	r1, r7
 8009bdc:	f7f7 f86c 	bl	8000cb8 <__aeabi_d2lz>
 8009be0:	f7f6 fcdc 	bl	800059c <__aeabi_l2d>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 fb4c 	bl	8000288 <__aeabi_dsub>
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bfe:	ea46 060a 	orr.w	r6, r6, sl
 8009c02:	431e      	orrs	r6, r3
 8009c04:	d06f      	beq.n	8009ce6 <_strtod_l+0xb86>
 8009c06:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c40 <_strtod_l+0xae0>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 ff66 	bl	8000adc <__aeabi_dcmplt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f47f acd3 	bne.w	80095bc <_strtod_l+0x45c>
 8009c16:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c48 <_strtod_l+0xae8>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c20:	f7f6 ff7a 	bl	8000b18 <__aeabi_dcmpgt>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d093      	beq.n	8009b50 <_strtod_l+0x9f0>
 8009c28:	e4c8      	b.n	80095bc <_strtod_l+0x45c>
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w
 8009c30:	00000000 	.word	0x00000000
 8009c34:	bff00000 	.word	0xbff00000
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	3ff00000 	.word	0x3ff00000
 8009c40:	94a03595 	.word	0x94a03595
 8009c44:	3fdfffff 	.word	0x3fdfffff
 8009c48:	35afe535 	.word	0x35afe535
 8009c4c:	3fe00000 	.word	0x3fe00000
 8009c50:	000fffff 	.word	0x000fffff
 8009c54:	7ff00000 	.word	0x7ff00000
 8009c58:	7fefffff 	.word	0x7fefffff
 8009c5c:	3ff00000 	.word	0x3ff00000
 8009c60:	3fe00000 	.word	0x3fe00000
 8009c64:	7fe00000 	.word	0x7fe00000
 8009c68:	7c9fffff 	.word	0x7c9fffff
 8009c6c:	9b08      	ldr	r3, [sp, #32]
 8009c6e:	b323      	cbz	r3, 8009cba <_strtod_l+0xb5a>
 8009c70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c74:	d821      	bhi.n	8009cba <_strtod_l+0xb5a>
 8009c76:	a328      	add	r3, pc, #160	@ (adr r3, 8009d18 <_strtod_l+0xbb8>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 ff36 	bl	8000af0 <__aeabi_dcmple>
 8009c84:	b1a0      	cbz	r0, 8009cb0 <_strtod_l+0xb50>
 8009c86:	4639      	mov	r1, r7
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7f6 ff8d 	bl	8000ba8 <__aeabi_d2uiz>
 8009c8e:	2801      	cmp	r0, #1
 8009c90:	bf38      	it	cc
 8009c92:	2001      	movcc	r0, #1
 8009c94:	f7f6 fc36 	bl	8000504 <__aeabi_ui2d>
 8009c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9a:	4606      	mov	r6, r0
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	b9fb      	cbnz	r3, 8009ce0 <_strtod_l+0xb80>
 8009ca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ca4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009ca6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ca8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009cac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cb6:	1b5b      	subs	r3, r3, r5
 8009cb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009cbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009cc2:	f7ff f8f1 	bl	8008ea8 <__ulp>
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	ec53 2b10 	vmov	r2, r3, d0
 8009ccc:	4659      	mov	r1, fp
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009cd6:	f7f6 fad9 	bl	800028c <__adddf3>
 8009cda:	4682      	mov	sl, r0
 8009cdc:	468b      	mov	fp, r1
 8009cde:	e770      	b.n	8009bc2 <_strtod_l+0xa62>
 8009ce0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009ce4:	e7e0      	b.n	8009ca8 <_strtod_l+0xb48>
 8009ce6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d20 <_strtod_l+0xbc0>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fef6 	bl	8000adc <__aeabi_dcmplt>
 8009cf0:	e798      	b.n	8009c24 <_strtod_l+0xac4>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	f7ff ba6d 	b.w	80091da <_strtod_l+0x7a>
 8009d00:	2a65      	cmp	r2, #101	@ 0x65
 8009d02:	f43f ab68 	beq.w	80093d6 <_strtod_l+0x276>
 8009d06:	2a45      	cmp	r2, #69	@ 0x45
 8009d08:	f43f ab65 	beq.w	80093d6 <_strtod_l+0x276>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f7ff bba0 	b.w	8009452 <_strtod_l+0x2f2>
 8009d12:	bf00      	nop
 8009d14:	f3af 8000 	nop.w
 8009d18:	ffc00000 	.word	0xffc00000
 8009d1c:	41dfffff 	.word	0x41dfffff
 8009d20:	94a03595 	.word	0x94a03595
 8009d24:	3fcfffff 	.word	0x3fcfffff

08009d28 <_strtod_r>:
 8009d28:	4b01      	ldr	r3, [pc, #4]	@ (8009d30 <_strtod_r+0x8>)
 8009d2a:	f7ff ba19 	b.w	8009160 <_strtod_l>
 8009d2e:	bf00      	nop
 8009d30:	2000006c 	.word	0x2000006c

08009d34 <_strtol_l.isra.0>:
 8009d34:	2b24      	cmp	r3, #36	@ 0x24
 8009d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3a:	4686      	mov	lr, r0
 8009d3c:	4690      	mov	r8, r2
 8009d3e:	d801      	bhi.n	8009d44 <_strtol_l.isra.0+0x10>
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d106      	bne.n	8009d52 <_strtol_l.isra.0+0x1e>
 8009d44:	f7fd fda8 	bl	8007898 <__errno>
 8009d48:	2316      	movs	r3, #22
 8009d4a:	6003      	str	r3, [r0, #0]
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	4834      	ldr	r0, [pc, #208]	@ (8009e24 <_strtol_l.isra.0+0xf0>)
 8009d54:	460d      	mov	r5, r1
 8009d56:	462a      	mov	r2, r5
 8009d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d5c:	5d06      	ldrb	r6, [r0, r4]
 8009d5e:	f016 0608 	ands.w	r6, r6, #8
 8009d62:	d1f8      	bne.n	8009d56 <_strtol_l.isra.0+0x22>
 8009d64:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d66:	d110      	bne.n	8009d8a <_strtol_l.isra.0+0x56>
 8009d68:	782c      	ldrb	r4, [r5, #0]
 8009d6a:	2601      	movs	r6, #1
 8009d6c:	1c95      	adds	r5, r2, #2
 8009d6e:	f033 0210 	bics.w	r2, r3, #16
 8009d72:	d115      	bne.n	8009da0 <_strtol_l.isra.0+0x6c>
 8009d74:	2c30      	cmp	r4, #48	@ 0x30
 8009d76:	d10d      	bne.n	8009d94 <_strtol_l.isra.0+0x60>
 8009d78:	782a      	ldrb	r2, [r5, #0]
 8009d7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d7e:	2a58      	cmp	r2, #88	@ 0x58
 8009d80:	d108      	bne.n	8009d94 <_strtol_l.isra.0+0x60>
 8009d82:	786c      	ldrb	r4, [r5, #1]
 8009d84:	3502      	adds	r5, #2
 8009d86:	2310      	movs	r3, #16
 8009d88:	e00a      	b.n	8009da0 <_strtol_l.isra.0+0x6c>
 8009d8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d8c:	bf04      	itt	eq
 8009d8e:	782c      	ldrbeq	r4, [r5, #0]
 8009d90:	1c95      	addeq	r5, r2, #2
 8009d92:	e7ec      	b.n	8009d6e <_strtol_l.isra.0+0x3a>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1f6      	bne.n	8009d86 <_strtol_l.isra.0+0x52>
 8009d98:	2c30      	cmp	r4, #48	@ 0x30
 8009d9a:	bf14      	ite	ne
 8009d9c:	230a      	movne	r3, #10
 8009d9e:	2308      	moveq	r3, #8
 8009da0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009da4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009da8:	2200      	movs	r2, #0
 8009daa:	fbbc f9f3 	udiv	r9, ip, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009db4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009db8:	2f09      	cmp	r7, #9
 8009dba:	d80f      	bhi.n	8009ddc <_strtol_l.isra.0+0xa8>
 8009dbc:	463c      	mov	r4, r7
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	dd1b      	ble.n	8009dfa <_strtol_l.isra.0+0xc6>
 8009dc2:	1c57      	adds	r7, r2, #1
 8009dc4:	d007      	beq.n	8009dd6 <_strtol_l.isra.0+0xa2>
 8009dc6:	4581      	cmp	r9, r0
 8009dc8:	d314      	bcc.n	8009df4 <_strtol_l.isra.0+0xc0>
 8009dca:	d101      	bne.n	8009dd0 <_strtol_l.isra.0+0x9c>
 8009dcc:	45a2      	cmp	sl, r4
 8009dce:	db11      	blt.n	8009df4 <_strtol_l.isra.0+0xc0>
 8009dd0:	fb00 4003 	mla	r0, r0, r3, r4
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dda:	e7eb      	b.n	8009db4 <_strtol_l.isra.0+0x80>
 8009ddc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009de0:	2f19      	cmp	r7, #25
 8009de2:	d801      	bhi.n	8009de8 <_strtol_l.isra.0+0xb4>
 8009de4:	3c37      	subs	r4, #55	@ 0x37
 8009de6:	e7ea      	b.n	8009dbe <_strtol_l.isra.0+0x8a>
 8009de8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009dec:	2f19      	cmp	r7, #25
 8009dee:	d804      	bhi.n	8009dfa <_strtol_l.isra.0+0xc6>
 8009df0:	3c57      	subs	r4, #87	@ 0x57
 8009df2:	e7e4      	b.n	8009dbe <_strtol_l.isra.0+0x8a>
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009df8:	e7ed      	b.n	8009dd6 <_strtol_l.isra.0+0xa2>
 8009dfa:	1c53      	adds	r3, r2, #1
 8009dfc:	d108      	bne.n	8009e10 <_strtol_l.isra.0+0xdc>
 8009dfe:	2322      	movs	r3, #34	@ 0x22
 8009e00:	f8ce 3000 	str.w	r3, [lr]
 8009e04:	4660      	mov	r0, ip
 8009e06:	f1b8 0f00 	cmp.w	r8, #0
 8009e0a:	d0a0      	beq.n	8009d4e <_strtol_l.isra.0+0x1a>
 8009e0c:	1e69      	subs	r1, r5, #1
 8009e0e:	e006      	b.n	8009e1e <_strtol_l.isra.0+0xea>
 8009e10:	b106      	cbz	r6, 8009e14 <_strtol_l.isra.0+0xe0>
 8009e12:	4240      	negs	r0, r0
 8009e14:	f1b8 0f00 	cmp.w	r8, #0
 8009e18:	d099      	beq.n	8009d4e <_strtol_l.isra.0+0x1a>
 8009e1a:	2a00      	cmp	r2, #0
 8009e1c:	d1f6      	bne.n	8009e0c <_strtol_l.isra.0+0xd8>
 8009e1e:	f8c8 1000 	str.w	r1, [r8]
 8009e22:	e794      	b.n	8009d4e <_strtol_l.isra.0+0x1a>
 8009e24:	0800b3e1 	.word	0x0800b3e1

08009e28 <_strtol_r>:
 8009e28:	f7ff bf84 	b.w	8009d34 <_strtol_l.isra.0>

08009e2c <__ssputs_r>:
 8009e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	688e      	ldr	r6, [r1, #8]
 8009e32:	461f      	mov	r7, r3
 8009e34:	42be      	cmp	r6, r7
 8009e36:	680b      	ldr	r3, [r1, #0]
 8009e38:	4682      	mov	sl, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	4690      	mov	r8, r2
 8009e3e:	d82d      	bhi.n	8009e9c <__ssputs_r+0x70>
 8009e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e48:	d026      	beq.n	8009e98 <__ssputs_r+0x6c>
 8009e4a:	6965      	ldr	r5, [r4, #20]
 8009e4c:	6909      	ldr	r1, [r1, #16]
 8009e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e52:	eba3 0901 	sub.w	r9, r3, r1
 8009e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e5a:	1c7b      	adds	r3, r7, #1
 8009e5c:	444b      	add	r3, r9
 8009e5e:	106d      	asrs	r5, r5, #1
 8009e60:	429d      	cmp	r5, r3
 8009e62:	bf38      	it	cc
 8009e64:	461d      	movcc	r5, r3
 8009e66:	0553      	lsls	r3, r2, #21
 8009e68:	d527      	bpl.n	8009eba <__ssputs_r+0x8e>
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	f7fe fc24 	bl	80086b8 <_malloc_r>
 8009e70:	4606      	mov	r6, r0
 8009e72:	b360      	cbz	r0, 8009ece <__ssputs_r+0xa2>
 8009e74:	6921      	ldr	r1, [r4, #16]
 8009e76:	464a      	mov	r2, r9
 8009e78:	f7fd fd3b 	bl	80078f2 <memcpy>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	6126      	str	r6, [r4, #16]
 8009e8a:	6165      	str	r5, [r4, #20]
 8009e8c:	444e      	add	r6, r9
 8009e8e:	eba5 0509 	sub.w	r5, r5, r9
 8009e92:	6026      	str	r6, [r4, #0]
 8009e94:	60a5      	str	r5, [r4, #8]
 8009e96:	463e      	mov	r6, r7
 8009e98:	42be      	cmp	r6, r7
 8009e9a:	d900      	bls.n	8009e9e <__ssputs_r+0x72>
 8009e9c:	463e      	mov	r6, r7
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	f000 f9c6 	bl	800a234 <memmove>
 8009ea8:	68a3      	ldr	r3, [r4, #8]
 8009eaa:	1b9b      	subs	r3, r3, r6
 8009eac:	60a3      	str	r3, [r4, #8]
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	4433      	add	r3, r6
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eba:	462a      	mov	r2, r5
 8009ebc:	f000 fd7d 	bl	800a9ba <_realloc_r>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d1e0      	bne.n	8009e88 <__ssputs_r+0x5c>
 8009ec6:	6921      	ldr	r1, [r4, #16]
 8009ec8:	4650      	mov	r0, sl
 8009eca:	f7fe fb81 	bl	80085d0 <_free_r>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	f8ca 3000 	str.w	r3, [sl]
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ee0:	e7e9      	b.n	8009eb6 <__ssputs_r+0x8a>
	...

08009ee4 <_svfiprintf_r>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	4698      	mov	r8, r3
 8009eea:	898b      	ldrh	r3, [r1, #12]
 8009eec:	061b      	lsls	r3, r3, #24
 8009eee:	b09d      	sub	sp, #116	@ 0x74
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	d510      	bpl.n	8009f1a <_svfiprintf_r+0x36>
 8009ef8:	690b      	ldr	r3, [r1, #16]
 8009efa:	b973      	cbnz	r3, 8009f1a <_svfiprintf_r+0x36>
 8009efc:	2140      	movs	r1, #64	@ 0x40
 8009efe:	f7fe fbdb 	bl	80086b8 <_malloc_r>
 8009f02:	6028      	str	r0, [r5, #0]
 8009f04:	6128      	str	r0, [r5, #16]
 8009f06:	b930      	cbnz	r0, 8009f16 <_svfiprintf_r+0x32>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	603b      	str	r3, [r7, #0]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f10:	b01d      	add	sp, #116	@ 0x74
 8009f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f16:	2340      	movs	r3, #64	@ 0x40
 8009f18:	616b      	str	r3, [r5, #20]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1e:	2320      	movs	r3, #32
 8009f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f28:	2330      	movs	r3, #48	@ 0x30
 8009f2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a0c8 <_svfiprintf_r+0x1e4>
 8009f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f32:	f04f 0901 	mov.w	r9, #1
 8009f36:	4623      	mov	r3, r4
 8009f38:	469a      	mov	sl, r3
 8009f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3e:	b10a      	cbz	r2, 8009f44 <_svfiprintf_r+0x60>
 8009f40:	2a25      	cmp	r2, #37	@ 0x25
 8009f42:	d1f9      	bne.n	8009f38 <_svfiprintf_r+0x54>
 8009f44:	ebba 0b04 	subs.w	fp, sl, r4
 8009f48:	d00b      	beq.n	8009f62 <_svfiprintf_r+0x7e>
 8009f4a:	465b      	mov	r3, fp
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	4638      	mov	r0, r7
 8009f52:	f7ff ff6b 	bl	8009e2c <__ssputs_r>
 8009f56:	3001      	adds	r0, #1
 8009f58:	f000 80a7 	beq.w	800a0aa <_svfiprintf_r+0x1c6>
 8009f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f5e:	445a      	add	r2, fp
 8009f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f62:	f89a 3000 	ldrb.w	r3, [sl]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 809f 	beq.w	800a0aa <_svfiprintf_r+0x1c6>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f76:	f10a 0a01 	add.w	sl, sl, #1
 8009f7a:	9304      	str	r3, [sp, #16]
 8009f7c:	9307      	str	r3, [sp, #28]
 8009f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f84:	4654      	mov	r4, sl
 8009f86:	2205      	movs	r2, #5
 8009f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8c:	484e      	ldr	r0, [pc, #312]	@ (800a0c8 <_svfiprintf_r+0x1e4>)
 8009f8e:	f7f6 f91f 	bl	80001d0 <memchr>
 8009f92:	9a04      	ldr	r2, [sp, #16]
 8009f94:	b9d8      	cbnz	r0, 8009fce <_svfiprintf_r+0xea>
 8009f96:	06d0      	lsls	r0, r2, #27
 8009f98:	bf44      	itt	mi
 8009f9a:	2320      	movmi	r3, #32
 8009f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fa0:	0711      	lsls	r1, r2, #28
 8009fa2:	bf44      	itt	mi
 8009fa4:	232b      	movmi	r3, #43	@ 0x2b
 8009fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009faa:	f89a 3000 	ldrb.w	r3, [sl]
 8009fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fb0:	d015      	beq.n	8009fde <_svfiprintf_r+0xfa>
 8009fb2:	9a07      	ldr	r2, [sp, #28]
 8009fb4:	4654      	mov	r4, sl
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f04f 0c0a 	mov.w	ip, #10
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fc2:	3b30      	subs	r3, #48	@ 0x30
 8009fc4:	2b09      	cmp	r3, #9
 8009fc6:	d94b      	bls.n	800a060 <_svfiprintf_r+0x17c>
 8009fc8:	b1b0      	cbz	r0, 8009ff8 <_svfiprintf_r+0x114>
 8009fca:	9207      	str	r2, [sp, #28]
 8009fcc:	e014      	b.n	8009ff8 <_svfiprintf_r+0x114>
 8009fce:	eba0 0308 	sub.w	r3, r0, r8
 8009fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	46a2      	mov	sl, r4
 8009fdc:	e7d2      	b.n	8009f84 <_svfiprintf_r+0xa0>
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	1d19      	adds	r1, r3, #4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	9103      	str	r1, [sp, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	bfbb      	ittet	lt
 8009fea:	425b      	neglt	r3, r3
 8009fec:	f042 0202 	orrlt.w	r2, r2, #2
 8009ff0:	9307      	strge	r3, [sp, #28]
 8009ff2:	9307      	strlt	r3, [sp, #28]
 8009ff4:	bfb8      	it	lt
 8009ff6:	9204      	strlt	r2, [sp, #16]
 8009ff8:	7823      	ldrb	r3, [r4, #0]
 8009ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ffc:	d10a      	bne.n	800a014 <_svfiprintf_r+0x130>
 8009ffe:	7863      	ldrb	r3, [r4, #1]
 800a000:	2b2a      	cmp	r3, #42	@ 0x2a
 800a002:	d132      	bne.n	800a06a <_svfiprintf_r+0x186>
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	1d1a      	adds	r2, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	9203      	str	r2, [sp, #12]
 800a00c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a010:	3402      	adds	r4, #2
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0d8 <_svfiprintf_r+0x1f4>
 800a018:	7821      	ldrb	r1, [r4, #0]
 800a01a:	2203      	movs	r2, #3
 800a01c:	4650      	mov	r0, sl
 800a01e:	f7f6 f8d7 	bl	80001d0 <memchr>
 800a022:	b138      	cbz	r0, 800a034 <_svfiprintf_r+0x150>
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	eba0 000a 	sub.w	r0, r0, sl
 800a02a:	2240      	movs	r2, #64	@ 0x40
 800a02c:	4082      	lsls	r2, r0
 800a02e:	4313      	orrs	r3, r2
 800a030:	3401      	adds	r4, #1
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a038:	4824      	ldr	r0, [pc, #144]	@ (800a0cc <_svfiprintf_r+0x1e8>)
 800a03a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a03e:	2206      	movs	r2, #6
 800a040:	f7f6 f8c6 	bl	80001d0 <memchr>
 800a044:	2800      	cmp	r0, #0
 800a046:	d036      	beq.n	800a0b6 <_svfiprintf_r+0x1d2>
 800a048:	4b21      	ldr	r3, [pc, #132]	@ (800a0d0 <_svfiprintf_r+0x1ec>)
 800a04a:	bb1b      	cbnz	r3, 800a094 <_svfiprintf_r+0x1b0>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	3307      	adds	r3, #7
 800a050:	f023 0307 	bic.w	r3, r3, #7
 800a054:	3308      	adds	r3, #8
 800a056:	9303      	str	r3, [sp, #12]
 800a058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a05a:	4433      	add	r3, r6
 800a05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a05e:	e76a      	b.n	8009f36 <_svfiprintf_r+0x52>
 800a060:	fb0c 3202 	mla	r2, ip, r2, r3
 800a064:	460c      	mov	r4, r1
 800a066:	2001      	movs	r0, #1
 800a068:	e7a8      	b.n	8009fbc <_svfiprintf_r+0xd8>
 800a06a:	2300      	movs	r3, #0
 800a06c:	3401      	adds	r4, #1
 800a06e:	9305      	str	r3, [sp, #20]
 800a070:	4619      	mov	r1, r3
 800a072:	f04f 0c0a 	mov.w	ip, #10
 800a076:	4620      	mov	r0, r4
 800a078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a07c:	3a30      	subs	r2, #48	@ 0x30
 800a07e:	2a09      	cmp	r2, #9
 800a080:	d903      	bls.n	800a08a <_svfiprintf_r+0x1a6>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0c6      	beq.n	800a014 <_svfiprintf_r+0x130>
 800a086:	9105      	str	r1, [sp, #20]
 800a088:	e7c4      	b.n	800a014 <_svfiprintf_r+0x130>
 800a08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a08e:	4604      	mov	r4, r0
 800a090:	2301      	movs	r3, #1
 800a092:	e7f0      	b.n	800a076 <_svfiprintf_r+0x192>
 800a094:	ab03      	add	r3, sp, #12
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	462a      	mov	r2, r5
 800a09a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d4 <_svfiprintf_r+0x1f0>)
 800a09c:	a904      	add	r1, sp, #16
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f7fc fc28 	bl	80068f4 <_printf_float>
 800a0a4:	1c42      	adds	r2, r0, #1
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	d1d6      	bne.n	800a058 <_svfiprintf_r+0x174>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	065b      	lsls	r3, r3, #25
 800a0ae:	f53f af2d 	bmi.w	8009f0c <_svfiprintf_r+0x28>
 800a0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0b4:	e72c      	b.n	8009f10 <_svfiprintf_r+0x2c>
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <_svfiprintf_r+0x1f0>)
 800a0be:	a904      	add	r1, sp, #16
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7fc feaf 	bl	8006e24 <_printf_i>
 800a0c6:	e7ed      	b.n	800a0a4 <_svfiprintf_r+0x1c0>
 800a0c8:	0800b1dd 	.word	0x0800b1dd
 800a0cc:	0800b1e7 	.word	0x0800b1e7
 800a0d0:	080068f5 	.word	0x080068f5
 800a0d4:	08009e2d 	.word	0x08009e2d
 800a0d8:	0800b1e3 	.word	0x0800b1e3

0800a0dc <__sflush_r>:
 800a0dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	0716      	lsls	r6, r2, #28
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	d454      	bmi.n	800a196 <__sflush_r+0xba>
 800a0ec:	684b      	ldr	r3, [r1, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	dc02      	bgt.n	800a0f8 <__sflush_r+0x1c>
 800a0f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd48      	ble.n	800a18a <__sflush_r+0xae>
 800a0f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0fa:	2e00      	cmp	r6, #0
 800a0fc:	d045      	beq.n	800a18a <__sflush_r+0xae>
 800a0fe:	2300      	movs	r3, #0
 800a100:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a104:	682f      	ldr	r7, [r5, #0]
 800a106:	6a21      	ldr	r1, [r4, #32]
 800a108:	602b      	str	r3, [r5, #0]
 800a10a:	d030      	beq.n	800a16e <__sflush_r+0x92>
 800a10c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	0759      	lsls	r1, r3, #29
 800a112:	d505      	bpl.n	800a120 <__sflush_r+0x44>
 800a114:	6863      	ldr	r3, [r4, #4]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a11a:	b10b      	cbz	r3, 800a120 <__sflush_r+0x44>
 800a11c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a11e:	1ad2      	subs	r2, r2, r3
 800a120:	2300      	movs	r3, #0
 800a122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a124:	6a21      	ldr	r1, [r4, #32]
 800a126:	4628      	mov	r0, r5
 800a128:	47b0      	blx	r6
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	d106      	bne.n	800a13e <__sflush_r+0x62>
 800a130:	6829      	ldr	r1, [r5, #0]
 800a132:	291d      	cmp	r1, #29
 800a134:	d82b      	bhi.n	800a18e <__sflush_r+0xb2>
 800a136:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e0 <__sflush_r+0x104>)
 800a138:	40ca      	lsrs	r2, r1
 800a13a:	07d6      	lsls	r6, r2, #31
 800a13c:	d527      	bpl.n	800a18e <__sflush_r+0xb2>
 800a13e:	2200      	movs	r2, #0
 800a140:	6062      	str	r2, [r4, #4]
 800a142:	04d9      	lsls	r1, r3, #19
 800a144:	6922      	ldr	r2, [r4, #16]
 800a146:	6022      	str	r2, [r4, #0]
 800a148:	d504      	bpl.n	800a154 <__sflush_r+0x78>
 800a14a:	1c42      	adds	r2, r0, #1
 800a14c:	d101      	bne.n	800a152 <__sflush_r+0x76>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	b903      	cbnz	r3, 800a154 <__sflush_r+0x78>
 800a152:	6560      	str	r0, [r4, #84]	@ 0x54
 800a154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a156:	602f      	str	r7, [r5, #0]
 800a158:	b1b9      	cbz	r1, 800a18a <__sflush_r+0xae>
 800a15a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a15e:	4299      	cmp	r1, r3
 800a160:	d002      	beq.n	800a168 <__sflush_r+0x8c>
 800a162:	4628      	mov	r0, r5
 800a164:	f7fe fa34 	bl	80085d0 <_free_r>
 800a168:	2300      	movs	r3, #0
 800a16a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a16c:	e00d      	b.n	800a18a <__sflush_r+0xae>
 800a16e:	2301      	movs	r3, #1
 800a170:	4628      	mov	r0, r5
 800a172:	47b0      	blx	r6
 800a174:	4602      	mov	r2, r0
 800a176:	1c50      	adds	r0, r2, #1
 800a178:	d1c9      	bne.n	800a10e <__sflush_r+0x32>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d0c6      	beq.n	800a10e <__sflush_r+0x32>
 800a180:	2b1d      	cmp	r3, #29
 800a182:	d001      	beq.n	800a188 <__sflush_r+0xac>
 800a184:	2b16      	cmp	r3, #22
 800a186:	d11e      	bne.n	800a1c6 <__sflush_r+0xea>
 800a188:	602f      	str	r7, [r5, #0]
 800a18a:	2000      	movs	r0, #0
 800a18c:	e022      	b.n	800a1d4 <__sflush_r+0xf8>
 800a18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a192:	b21b      	sxth	r3, r3
 800a194:	e01b      	b.n	800a1ce <__sflush_r+0xf2>
 800a196:	690f      	ldr	r7, [r1, #16]
 800a198:	2f00      	cmp	r7, #0
 800a19a:	d0f6      	beq.n	800a18a <__sflush_r+0xae>
 800a19c:	0793      	lsls	r3, r2, #30
 800a19e:	680e      	ldr	r6, [r1, #0]
 800a1a0:	bf08      	it	eq
 800a1a2:	694b      	ldreq	r3, [r1, #20]
 800a1a4:	600f      	str	r7, [r1, #0]
 800a1a6:	bf18      	it	ne
 800a1a8:	2300      	movne	r3, #0
 800a1aa:	eba6 0807 	sub.w	r8, r6, r7
 800a1ae:	608b      	str	r3, [r1, #8]
 800a1b0:	f1b8 0f00 	cmp.w	r8, #0
 800a1b4:	dde9      	ble.n	800a18a <__sflush_r+0xae>
 800a1b6:	6a21      	ldr	r1, [r4, #32]
 800a1b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1ba:	4643      	mov	r3, r8
 800a1bc:	463a      	mov	r2, r7
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b0      	blx	r6
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	dc08      	bgt.n	800a1d8 <__sflush_r+0xfc>
 800a1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	4407      	add	r7, r0
 800a1da:	eba8 0800 	sub.w	r8, r8, r0
 800a1de:	e7e7      	b.n	800a1b0 <__sflush_r+0xd4>
 800a1e0:	20400001 	.word	0x20400001

0800a1e4 <_fflush_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	690b      	ldr	r3, [r1, #16]
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	b913      	cbnz	r3, 800a1f4 <_fflush_r+0x10>
 800a1ee:	2500      	movs	r5, #0
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	b118      	cbz	r0, 800a1fe <_fflush_r+0x1a>
 800a1f6:	6a03      	ldr	r3, [r0, #32]
 800a1f8:	b90b      	cbnz	r3, 800a1fe <_fflush_r+0x1a>
 800a1fa:	f7fd f9cb 	bl	8007594 <__sinit>
 800a1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0f3      	beq.n	800a1ee <_fflush_r+0xa>
 800a206:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a208:	07d0      	lsls	r0, r2, #31
 800a20a:	d404      	bmi.n	800a216 <_fflush_r+0x32>
 800a20c:	0599      	lsls	r1, r3, #22
 800a20e:	d402      	bmi.n	800a216 <_fflush_r+0x32>
 800a210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a212:	f7fd fb6c 	bl	80078ee <__retarget_lock_acquire_recursive>
 800a216:	4628      	mov	r0, r5
 800a218:	4621      	mov	r1, r4
 800a21a:	f7ff ff5f 	bl	800a0dc <__sflush_r>
 800a21e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a220:	07da      	lsls	r2, r3, #31
 800a222:	4605      	mov	r5, r0
 800a224:	d4e4      	bmi.n	800a1f0 <_fflush_r+0xc>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	059b      	lsls	r3, r3, #22
 800a22a:	d4e1      	bmi.n	800a1f0 <_fflush_r+0xc>
 800a22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a22e:	f7fd fb5f 	bl	80078f0 <__retarget_lock_release_recursive>
 800a232:	e7dd      	b.n	800a1f0 <_fflush_r+0xc>

0800a234 <memmove>:
 800a234:	4288      	cmp	r0, r1
 800a236:	b510      	push	{r4, lr}
 800a238:	eb01 0402 	add.w	r4, r1, r2
 800a23c:	d902      	bls.n	800a244 <memmove+0x10>
 800a23e:	4284      	cmp	r4, r0
 800a240:	4623      	mov	r3, r4
 800a242:	d807      	bhi.n	800a254 <memmove+0x20>
 800a244:	1e43      	subs	r3, r0, #1
 800a246:	42a1      	cmp	r1, r4
 800a248:	d008      	beq.n	800a25c <memmove+0x28>
 800a24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a252:	e7f8      	b.n	800a246 <memmove+0x12>
 800a254:	4402      	add	r2, r0
 800a256:	4601      	mov	r1, r0
 800a258:	428a      	cmp	r2, r1
 800a25a:	d100      	bne.n	800a25e <memmove+0x2a>
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a266:	e7f7      	b.n	800a258 <memmove+0x24>

0800a268 <strncmp>:
 800a268:	b510      	push	{r4, lr}
 800a26a:	b16a      	cbz	r2, 800a288 <strncmp+0x20>
 800a26c:	3901      	subs	r1, #1
 800a26e:	1884      	adds	r4, r0, r2
 800a270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a274:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a278:	429a      	cmp	r2, r3
 800a27a:	d103      	bne.n	800a284 <strncmp+0x1c>
 800a27c:	42a0      	cmp	r0, r4
 800a27e:	d001      	beq.n	800a284 <strncmp+0x1c>
 800a280:	2a00      	cmp	r2, #0
 800a282:	d1f5      	bne.n	800a270 <strncmp+0x8>
 800a284:	1ad0      	subs	r0, r2, r3
 800a286:	bd10      	pop	{r4, pc}
 800a288:	4610      	mov	r0, r2
 800a28a:	e7fc      	b.n	800a286 <strncmp+0x1e>

0800a28c <_sbrk_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d06      	ldr	r5, [pc, #24]	@ (800a2a8 <_sbrk_r+0x1c>)
 800a290:	2300      	movs	r3, #0
 800a292:	4604      	mov	r4, r0
 800a294:	4608      	mov	r0, r1
 800a296:	602b      	str	r3, [r5, #0]
 800a298:	f7f7 fe62 	bl	8001f60 <_sbrk>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_sbrk_r+0x1a>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_sbrk_r+0x1a>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20004508 	.word	0x20004508
 800a2ac:	00000000 	.word	0x00000000

0800a2b0 <nan>:
 800a2b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a2b8 <nan+0x8>
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	7ff80000 	.word	0x7ff80000

0800a2c0 <__assert_func>:
 800a2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4b09      	ldr	r3, [pc, #36]	@ (800a2ec <__assert_func+0x2c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	68d8      	ldr	r0, [r3, #12]
 800a2ce:	b14c      	cbz	r4, 800a2e4 <__assert_func+0x24>
 800a2d0:	4b07      	ldr	r3, [pc, #28]	@ (800a2f0 <__assert_func+0x30>)
 800a2d2:	9100      	str	r1, [sp, #0]
 800a2d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2d8:	4906      	ldr	r1, [pc, #24]	@ (800a2f4 <__assert_func+0x34>)
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f000 fba8 	bl	800aa30 <fiprintf>
 800a2e0:	f000 fbb8 	bl	800aa54 <abort>
 800a2e4:	4b04      	ldr	r3, [pc, #16]	@ (800a2f8 <__assert_func+0x38>)
 800a2e6:	461c      	mov	r4, r3
 800a2e8:	e7f3      	b.n	800a2d2 <__assert_func+0x12>
 800a2ea:	bf00      	nop
 800a2ec:	2000001c 	.word	0x2000001c
 800a2f0:	0800b1f6 	.word	0x0800b1f6
 800a2f4:	0800b203 	.word	0x0800b203
 800a2f8:	0800b231 	.word	0x0800b231

0800a2fc <_calloc_r>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	fba1 5402 	umull	r5, r4, r1, r2
 800a302:	b934      	cbnz	r4, 800a312 <_calloc_r+0x16>
 800a304:	4629      	mov	r1, r5
 800a306:	f7fe f9d7 	bl	80086b8 <_malloc_r>
 800a30a:	4606      	mov	r6, r0
 800a30c:	b928      	cbnz	r0, 800a31a <_calloc_r+0x1e>
 800a30e:	4630      	mov	r0, r6
 800a310:	bd70      	pop	{r4, r5, r6, pc}
 800a312:	220c      	movs	r2, #12
 800a314:	6002      	str	r2, [r0, #0]
 800a316:	2600      	movs	r6, #0
 800a318:	e7f9      	b.n	800a30e <_calloc_r+0x12>
 800a31a:	462a      	mov	r2, r5
 800a31c:	4621      	mov	r1, r4
 800a31e:	f7fd fa0a 	bl	8007736 <memset>
 800a322:	e7f4      	b.n	800a30e <_calloc_r+0x12>

0800a324 <rshift>:
 800a324:	6903      	ldr	r3, [r0, #16]
 800a326:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a32a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a32e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a332:	f100 0414 	add.w	r4, r0, #20
 800a336:	dd45      	ble.n	800a3c4 <rshift+0xa0>
 800a338:	f011 011f 	ands.w	r1, r1, #31
 800a33c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a340:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a344:	d10c      	bne.n	800a360 <rshift+0x3c>
 800a346:	f100 0710 	add.w	r7, r0, #16
 800a34a:	4629      	mov	r1, r5
 800a34c:	42b1      	cmp	r1, r6
 800a34e:	d334      	bcc.n	800a3ba <rshift+0x96>
 800a350:	1a9b      	subs	r3, r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	1eea      	subs	r2, r5, #3
 800a356:	4296      	cmp	r6, r2
 800a358:	bf38      	it	cc
 800a35a:	2300      	movcc	r3, #0
 800a35c:	4423      	add	r3, r4
 800a35e:	e015      	b.n	800a38c <rshift+0x68>
 800a360:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a364:	f1c1 0820 	rsb	r8, r1, #32
 800a368:	40cf      	lsrs	r7, r1
 800a36a:	f105 0e04 	add.w	lr, r5, #4
 800a36e:	46a1      	mov	r9, r4
 800a370:	4576      	cmp	r6, lr
 800a372:	46f4      	mov	ip, lr
 800a374:	d815      	bhi.n	800a3a2 <rshift+0x7e>
 800a376:	1a9a      	subs	r2, r3, r2
 800a378:	0092      	lsls	r2, r2, #2
 800a37a:	3a04      	subs	r2, #4
 800a37c:	3501      	adds	r5, #1
 800a37e:	42ae      	cmp	r6, r5
 800a380:	bf38      	it	cc
 800a382:	2200      	movcc	r2, #0
 800a384:	18a3      	adds	r3, r4, r2
 800a386:	50a7      	str	r7, [r4, r2]
 800a388:	b107      	cbz	r7, 800a38c <rshift+0x68>
 800a38a:	3304      	adds	r3, #4
 800a38c:	1b1a      	subs	r2, r3, r4
 800a38e:	42a3      	cmp	r3, r4
 800a390:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a394:	bf08      	it	eq
 800a396:	2300      	moveq	r3, #0
 800a398:	6102      	str	r2, [r0, #16]
 800a39a:	bf08      	it	eq
 800a39c:	6143      	streq	r3, [r0, #20]
 800a39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a2:	f8dc c000 	ldr.w	ip, [ip]
 800a3a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3aa:	ea4c 0707 	orr.w	r7, ip, r7
 800a3ae:	f849 7b04 	str.w	r7, [r9], #4
 800a3b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3b6:	40cf      	lsrs	r7, r1
 800a3b8:	e7da      	b.n	800a370 <rshift+0x4c>
 800a3ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3be:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3c2:	e7c3      	b.n	800a34c <rshift+0x28>
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	e7e1      	b.n	800a38c <rshift+0x68>

0800a3c8 <__hexdig_fun>:
 800a3c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a3cc:	2b09      	cmp	r3, #9
 800a3ce:	d802      	bhi.n	800a3d6 <__hexdig_fun+0xe>
 800a3d0:	3820      	subs	r0, #32
 800a3d2:	b2c0      	uxtb	r0, r0
 800a3d4:	4770      	bx	lr
 800a3d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	d801      	bhi.n	800a3e2 <__hexdig_fun+0x1a>
 800a3de:	3847      	subs	r0, #71	@ 0x47
 800a3e0:	e7f7      	b.n	800a3d2 <__hexdig_fun+0xa>
 800a3e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d801      	bhi.n	800a3ee <__hexdig_fun+0x26>
 800a3ea:	3827      	subs	r0, #39	@ 0x27
 800a3ec:	e7f1      	b.n	800a3d2 <__hexdig_fun+0xa>
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <__gethex>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	468a      	mov	sl, r1
 800a3fc:	9302      	str	r3, [sp, #8]
 800a3fe:	680b      	ldr	r3, [r1, #0]
 800a400:	9001      	str	r0, [sp, #4]
 800a402:	4690      	mov	r8, r2
 800a404:	1c9c      	adds	r4, r3, #2
 800a406:	46a1      	mov	r9, r4
 800a408:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a40c:	2830      	cmp	r0, #48	@ 0x30
 800a40e:	d0fa      	beq.n	800a406 <__gethex+0x12>
 800a410:	eba9 0303 	sub.w	r3, r9, r3
 800a414:	f1a3 0b02 	sub.w	fp, r3, #2
 800a418:	f7ff ffd6 	bl	800a3c8 <__hexdig_fun>
 800a41c:	4605      	mov	r5, r0
 800a41e:	2800      	cmp	r0, #0
 800a420:	d168      	bne.n	800a4f4 <__gethex+0x100>
 800a422:	49a0      	ldr	r1, [pc, #640]	@ (800a6a4 <__gethex+0x2b0>)
 800a424:	2201      	movs	r2, #1
 800a426:	4648      	mov	r0, r9
 800a428:	f7ff ff1e 	bl	800a268 <strncmp>
 800a42c:	4607      	mov	r7, r0
 800a42e:	2800      	cmp	r0, #0
 800a430:	d167      	bne.n	800a502 <__gethex+0x10e>
 800a432:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a436:	4626      	mov	r6, r4
 800a438:	f7ff ffc6 	bl	800a3c8 <__hexdig_fun>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d062      	beq.n	800a506 <__gethex+0x112>
 800a440:	4623      	mov	r3, r4
 800a442:	7818      	ldrb	r0, [r3, #0]
 800a444:	2830      	cmp	r0, #48	@ 0x30
 800a446:	4699      	mov	r9, r3
 800a448:	f103 0301 	add.w	r3, r3, #1
 800a44c:	d0f9      	beq.n	800a442 <__gethex+0x4e>
 800a44e:	f7ff ffbb 	bl	800a3c8 <__hexdig_fun>
 800a452:	fab0 f580 	clz	r5, r0
 800a456:	096d      	lsrs	r5, r5, #5
 800a458:	f04f 0b01 	mov.w	fp, #1
 800a45c:	464a      	mov	r2, r9
 800a45e:	4616      	mov	r6, r2
 800a460:	3201      	adds	r2, #1
 800a462:	7830      	ldrb	r0, [r6, #0]
 800a464:	f7ff ffb0 	bl	800a3c8 <__hexdig_fun>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d1f8      	bne.n	800a45e <__gethex+0x6a>
 800a46c:	498d      	ldr	r1, [pc, #564]	@ (800a6a4 <__gethex+0x2b0>)
 800a46e:	2201      	movs	r2, #1
 800a470:	4630      	mov	r0, r6
 800a472:	f7ff fef9 	bl	800a268 <strncmp>
 800a476:	2800      	cmp	r0, #0
 800a478:	d13f      	bne.n	800a4fa <__gethex+0x106>
 800a47a:	b944      	cbnz	r4, 800a48e <__gethex+0x9a>
 800a47c:	1c74      	adds	r4, r6, #1
 800a47e:	4622      	mov	r2, r4
 800a480:	4616      	mov	r6, r2
 800a482:	3201      	adds	r2, #1
 800a484:	7830      	ldrb	r0, [r6, #0]
 800a486:	f7ff ff9f 	bl	800a3c8 <__hexdig_fun>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d1f8      	bne.n	800a480 <__gethex+0x8c>
 800a48e:	1ba4      	subs	r4, r4, r6
 800a490:	00a7      	lsls	r7, r4, #2
 800a492:	7833      	ldrb	r3, [r6, #0]
 800a494:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a498:	2b50      	cmp	r3, #80	@ 0x50
 800a49a:	d13e      	bne.n	800a51a <__gethex+0x126>
 800a49c:	7873      	ldrb	r3, [r6, #1]
 800a49e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4a0:	d033      	beq.n	800a50a <__gethex+0x116>
 800a4a2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4a4:	d034      	beq.n	800a510 <__gethex+0x11c>
 800a4a6:	1c71      	adds	r1, r6, #1
 800a4a8:	2400      	movs	r4, #0
 800a4aa:	7808      	ldrb	r0, [r1, #0]
 800a4ac:	f7ff ff8c 	bl	800a3c8 <__hexdig_fun>
 800a4b0:	1e43      	subs	r3, r0, #1
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b18      	cmp	r3, #24
 800a4b6:	d830      	bhi.n	800a51a <__gethex+0x126>
 800a4b8:	f1a0 0210 	sub.w	r2, r0, #16
 800a4bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4c0:	f7ff ff82 	bl	800a3c8 <__hexdig_fun>
 800a4c4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a4c8:	fa5f fc8c 	uxtb.w	ip, ip
 800a4cc:	f1bc 0f18 	cmp.w	ip, #24
 800a4d0:	f04f 030a 	mov.w	r3, #10
 800a4d4:	d91e      	bls.n	800a514 <__gethex+0x120>
 800a4d6:	b104      	cbz	r4, 800a4da <__gethex+0xe6>
 800a4d8:	4252      	negs	r2, r2
 800a4da:	4417      	add	r7, r2
 800a4dc:	f8ca 1000 	str.w	r1, [sl]
 800a4e0:	b1ed      	cbz	r5, 800a51e <__gethex+0x12a>
 800a4e2:	f1bb 0f00 	cmp.w	fp, #0
 800a4e6:	bf0c      	ite	eq
 800a4e8:	2506      	moveq	r5, #6
 800a4ea:	2500      	movne	r5, #0
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	b005      	add	sp, #20
 800a4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f4:	2500      	movs	r5, #0
 800a4f6:	462c      	mov	r4, r5
 800a4f8:	e7b0      	b.n	800a45c <__gethex+0x68>
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	d1c7      	bne.n	800a48e <__gethex+0x9a>
 800a4fe:	4627      	mov	r7, r4
 800a500:	e7c7      	b.n	800a492 <__gethex+0x9e>
 800a502:	464e      	mov	r6, r9
 800a504:	462f      	mov	r7, r5
 800a506:	2501      	movs	r5, #1
 800a508:	e7c3      	b.n	800a492 <__gethex+0x9e>
 800a50a:	2400      	movs	r4, #0
 800a50c:	1cb1      	adds	r1, r6, #2
 800a50e:	e7cc      	b.n	800a4aa <__gethex+0xb6>
 800a510:	2401      	movs	r4, #1
 800a512:	e7fb      	b.n	800a50c <__gethex+0x118>
 800a514:	fb03 0002 	mla	r0, r3, r2, r0
 800a518:	e7ce      	b.n	800a4b8 <__gethex+0xc4>
 800a51a:	4631      	mov	r1, r6
 800a51c:	e7de      	b.n	800a4dc <__gethex+0xe8>
 800a51e:	eba6 0309 	sub.w	r3, r6, r9
 800a522:	3b01      	subs	r3, #1
 800a524:	4629      	mov	r1, r5
 800a526:	2b07      	cmp	r3, #7
 800a528:	dc0a      	bgt.n	800a540 <__gethex+0x14c>
 800a52a:	9801      	ldr	r0, [sp, #4]
 800a52c:	f7fe f950 	bl	80087d0 <_Balloc>
 800a530:	4604      	mov	r4, r0
 800a532:	b940      	cbnz	r0, 800a546 <__gethex+0x152>
 800a534:	4b5c      	ldr	r3, [pc, #368]	@ (800a6a8 <__gethex+0x2b4>)
 800a536:	4602      	mov	r2, r0
 800a538:	21e4      	movs	r1, #228	@ 0xe4
 800a53a:	485c      	ldr	r0, [pc, #368]	@ (800a6ac <__gethex+0x2b8>)
 800a53c:	f7ff fec0 	bl	800a2c0 <__assert_func>
 800a540:	3101      	adds	r1, #1
 800a542:	105b      	asrs	r3, r3, #1
 800a544:	e7ef      	b.n	800a526 <__gethex+0x132>
 800a546:	f100 0a14 	add.w	sl, r0, #20
 800a54a:	2300      	movs	r3, #0
 800a54c:	4655      	mov	r5, sl
 800a54e:	469b      	mov	fp, r3
 800a550:	45b1      	cmp	r9, r6
 800a552:	d337      	bcc.n	800a5c4 <__gethex+0x1d0>
 800a554:	f845 bb04 	str.w	fp, [r5], #4
 800a558:	eba5 050a 	sub.w	r5, r5, sl
 800a55c:	10ad      	asrs	r5, r5, #2
 800a55e:	6125      	str	r5, [r4, #16]
 800a560:	4658      	mov	r0, fp
 800a562:	f7fe fa27 	bl	80089b4 <__hi0bits>
 800a566:	016d      	lsls	r5, r5, #5
 800a568:	f8d8 6000 	ldr.w	r6, [r8]
 800a56c:	1a2d      	subs	r5, r5, r0
 800a56e:	42b5      	cmp	r5, r6
 800a570:	dd54      	ble.n	800a61c <__gethex+0x228>
 800a572:	1bad      	subs	r5, r5, r6
 800a574:	4629      	mov	r1, r5
 800a576:	4620      	mov	r0, r4
 800a578:	f7fe fdb3 	bl	80090e2 <__any_on>
 800a57c:	4681      	mov	r9, r0
 800a57e:	b178      	cbz	r0, 800a5a0 <__gethex+0x1ac>
 800a580:	1e6b      	subs	r3, r5, #1
 800a582:	1159      	asrs	r1, r3, #5
 800a584:	f003 021f 	and.w	r2, r3, #31
 800a588:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a58c:	f04f 0901 	mov.w	r9, #1
 800a590:	fa09 f202 	lsl.w	r2, r9, r2
 800a594:	420a      	tst	r2, r1
 800a596:	d003      	beq.n	800a5a0 <__gethex+0x1ac>
 800a598:	454b      	cmp	r3, r9
 800a59a:	dc36      	bgt.n	800a60a <__gethex+0x216>
 800a59c:	f04f 0902 	mov.w	r9, #2
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff febe 	bl	800a324 <rshift>
 800a5a8:	442f      	add	r7, r5
 800a5aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ae:	42bb      	cmp	r3, r7
 800a5b0:	da42      	bge.n	800a638 <__gethex+0x244>
 800a5b2:	9801      	ldr	r0, [sp, #4]
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f7fe f94b 	bl	8008850 <_Bfree>
 800a5ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5bc:	2300      	movs	r3, #0
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	25a3      	movs	r5, #163	@ 0xa3
 800a5c2:	e793      	b.n	800a4ec <__gethex+0xf8>
 800a5c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a5c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a5ca:	d012      	beq.n	800a5f2 <__gethex+0x1fe>
 800a5cc:	2b20      	cmp	r3, #32
 800a5ce:	d104      	bne.n	800a5da <__gethex+0x1e6>
 800a5d0:	f845 bb04 	str.w	fp, [r5], #4
 800a5d4:	f04f 0b00 	mov.w	fp, #0
 800a5d8:	465b      	mov	r3, fp
 800a5da:	7830      	ldrb	r0, [r6, #0]
 800a5dc:	9303      	str	r3, [sp, #12]
 800a5de:	f7ff fef3 	bl	800a3c8 <__hexdig_fun>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	f000 000f 	and.w	r0, r0, #15
 800a5e8:	4098      	lsls	r0, r3
 800a5ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	e7ae      	b.n	800a550 <__gethex+0x15c>
 800a5f2:	45b1      	cmp	r9, r6
 800a5f4:	d8ea      	bhi.n	800a5cc <__gethex+0x1d8>
 800a5f6:	492b      	ldr	r1, [pc, #172]	@ (800a6a4 <__gethex+0x2b0>)
 800a5f8:	9303      	str	r3, [sp, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f7ff fe33 	bl	800a268 <strncmp>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	2800      	cmp	r0, #0
 800a606:	d1e1      	bne.n	800a5cc <__gethex+0x1d8>
 800a608:	e7a2      	b.n	800a550 <__gethex+0x15c>
 800a60a:	1ea9      	subs	r1, r5, #2
 800a60c:	4620      	mov	r0, r4
 800a60e:	f7fe fd68 	bl	80090e2 <__any_on>
 800a612:	2800      	cmp	r0, #0
 800a614:	d0c2      	beq.n	800a59c <__gethex+0x1a8>
 800a616:	f04f 0903 	mov.w	r9, #3
 800a61a:	e7c1      	b.n	800a5a0 <__gethex+0x1ac>
 800a61c:	da09      	bge.n	800a632 <__gethex+0x23e>
 800a61e:	1b75      	subs	r5, r6, r5
 800a620:	4621      	mov	r1, r4
 800a622:	9801      	ldr	r0, [sp, #4]
 800a624:	462a      	mov	r2, r5
 800a626:	f7fe fb23 	bl	8008c70 <__lshift>
 800a62a:	1b7f      	subs	r7, r7, r5
 800a62c:	4604      	mov	r4, r0
 800a62e:	f100 0a14 	add.w	sl, r0, #20
 800a632:	f04f 0900 	mov.w	r9, #0
 800a636:	e7b8      	b.n	800a5aa <__gethex+0x1b6>
 800a638:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a63c:	42bd      	cmp	r5, r7
 800a63e:	dd6f      	ble.n	800a720 <__gethex+0x32c>
 800a640:	1bed      	subs	r5, r5, r7
 800a642:	42ae      	cmp	r6, r5
 800a644:	dc34      	bgt.n	800a6b0 <__gethex+0x2bc>
 800a646:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d022      	beq.n	800a694 <__gethex+0x2a0>
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d024      	beq.n	800a69c <__gethex+0x2a8>
 800a652:	2b01      	cmp	r3, #1
 800a654:	d115      	bne.n	800a682 <__gethex+0x28e>
 800a656:	42ae      	cmp	r6, r5
 800a658:	d113      	bne.n	800a682 <__gethex+0x28e>
 800a65a:	2e01      	cmp	r6, #1
 800a65c:	d10b      	bne.n	800a676 <__gethex+0x282>
 800a65e:	9a02      	ldr	r2, [sp, #8]
 800a660:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a664:	6013      	str	r3, [r2, #0]
 800a666:	2301      	movs	r3, #1
 800a668:	6123      	str	r3, [r4, #16]
 800a66a:	f8ca 3000 	str.w	r3, [sl]
 800a66e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a670:	2562      	movs	r5, #98	@ 0x62
 800a672:	601c      	str	r4, [r3, #0]
 800a674:	e73a      	b.n	800a4ec <__gethex+0xf8>
 800a676:	1e71      	subs	r1, r6, #1
 800a678:	4620      	mov	r0, r4
 800a67a:	f7fe fd32 	bl	80090e2 <__any_on>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d1ed      	bne.n	800a65e <__gethex+0x26a>
 800a682:	9801      	ldr	r0, [sp, #4]
 800a684:	4621      	mov	r1, r4
 800a686:	f7fe f8e3 	bl	8008850 <_Bfree>
 800a68a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a68c:	2300      	movs	r3, #0
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	2550      	movs	r5, #80	@ 0x50
 800a692:	e72b      	b.n	800a4ec <__gethex+0xf8>
 800a694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1f3      	bne.n	800a682 <__gethex+0x28e>
 800a69a:	e7e0      	b.n	800a65e <__gethex+0x26a>
 800a69c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1dd      	bne.n	800a65e <__gethex+0x26a>
 800a6a2:	e7ee      	b.n	800a682 <__gethex+0x28e>
 800a6a4:	0800b1db 	.word	0x0800b1db
 800a6a8:	0800b171 	.word	0x0800b171
 800a6ac:	0800b232 	.word	0x0800b232
 800a6b0:	1e6f      	subs	r7, r5, #1
 800a6b2:	f1b9 0f00 	cmp.w	r9, #0
 800a6b6:	d130      	bne.n	800a71a <__gethex+0x326>
 800a6b8:	b127      	cbz	r7, 800a6c4 <__gethex+0x2d0>
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7fe fd10 	bl	80090e2 <__any_on>
 800a6c2:	4681      	mov	r9, r0
 800a6c4:	117a      	asrs	r2, r7, #5
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a6cc:	f007 071f 	and.w	r7, r7, #31
 800a6d0:	40bb      	lsls	r3, r7
 800a6d2:	4213      	tst	r3, r2
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	bf18      	it	ne
 800a6da:	f049 0902 	orrne.w	r9, r9, #2
 800a6de:	f7ff fe21 	bl	800a324 <rshift>
 800a6e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a6e6:	1b76      	subs	r6, r6, r5
 800a6e8:	2502      	movs	r5, #2
 800a6ea:	f1b9 0f00 	cmp.w	r9, #0
 800a6ee:	d047      	beq.n	800a780 <__gethex+0x38c>
 800a6f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d015      	beq.n	800a724 <__gethex+0x330>
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d017      	beq.n	800a72c <__gethex+0x338>
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d109      	bne.n	800a714 <__gethex+0x320>
 800a700:	f019 0f02 	tst.w	r9, #2
 800a704:	d006      	beq.n	800a714 <__gethex+0x320>
 800a706:	f8da 3000 	ldr.w	r3, [sl]
 800a70a:	ea49 0903 	orr.w	r9, r9, r3
 800a70e:	f019 0f01 	tst.w	r9, #1
 800a712:	d10e      	bne.n	800a732 <__gethex+0x33e>
 800a714:	f045 0510 	orr.w	r5, r5, #16
 800a718:	e032      	b.n	800a780 <__gethex+0x38c>
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	e7d1      	b.n	800a6c4 <__gethex+0x2d0>
 800a720:	2501      	movs	r5, #1
 800a722:	e7e2      	b.n	800a6ea <__gethex+0x2f6>
 800a724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a726:	f1c3 0301 	rsb	r3, r3, #1
 800a72a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a72c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0f0      	beq.n	800a714 <__gethex+0x320>
 800a732:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a736:	f104 0314 	add.w	r3, r4, #20
 800a73a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a73e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a742:	f04f 0c00 	mov.w	ip, #0
 800a746:	4618      	mov	r0, r3
 800a748:	f853 2b04 	ldr.w	r2, [r3], #4
 800a74c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a750:	d01b      	beq.n	800a78a <__gethex+0x396>
 800a752:	3201      	adds	r2, #1
 800a754:	6002      	str	r2, [r0, #0]
 800a756:	2d02      	cmp	r5, #2
 800a758:	f104 0314 	add.w	r3, r4, #20
 800a75c:	d13c      	bne.n	800a7d8 <__gethex+0x3e4>
 800a75e:	f8d8 2000 	ldr.w	r2, [r8]
 800a762:	3a01      	subs	r2, #1
 800a764:	42b2      	cmp	r2, r6
 800a766:	d109      	bne.n	800a77c <__gethex+0x388>
 800a768:	1171      	asrs	r1, r6, #5
 800a76a:	2201      	movs	r2, #1
 800a76c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a770:	f006 061f 	and.w	r6, r6, #31
 800a774:	fa02 f606 	lsl.w	r6, r2, r6
 800a778:	421e      	tst	r6, r3
 800a77a:	d13a      	bne.n	800a7f2 <__gethex+0x3fe>
 800a77c:	f045 0520 	orr.w	r5, r5, #32
 800a780:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a782:	601c      	str	r4, [r3, #0]
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	601f      	str	r7, [r3, #0]
 800a788:	e6b0      	b.n	800a4ec <__gethex+0xf8>
 800a78a:	4299      	cmp	r1, r3
 800a78c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a790:	d8d9      	bhi.n	800a746 <__gethex+0x352>
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	459b      	cmp	fp, r3
 800a796:	db17      	blt.n	800a7c8 <__gethex+0x3d4>
 800a798:	6861      	ldr	r1, [r4, #4]
 800a79a:	9801      	ldr	r0, [sp, #4]
 800a79c:	3101      	adds	r1, #1
 800a79e:	f7fe f817 	bl	80087d0 <_Balloc>
 800a7a2:	4681      	mov	r9, r0
 800a7a4:	b918      	cbnz	r0, 800a7ae <__gethex+0x3ba>
 800a7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a810 <__gethex+0x41c>)
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	2184      	movs	r1, #132	@ 0x84
 800a7ac:	e6c5      	b.n	800a53a <__gethex+0x146>
 800a7ae:	6922      	ldr	r2, [r4, #16]
 800a7b0:	3202      	adds	r2, #2
 800a7b2:	f104 010c 	add.w	r1, r4, #12
 800a7b6:	0092      	lsls	r2, r2, #2
 800a7b8:	300c      	adds	r0, #12
 800a7ba:	f7fd f89a 	bl	80078f2 <memcpy>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	9801      	ldr	r0, [sp, #4]
 800a7c2:	f7fe f845 	bl	8008850 <_Bfree>
 800a7c6:	464c      	mov	r4, r9
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7d0:	6122      	str	r2, [r4, #16]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	615a      	str	r2, [r3, #20]
 800a7d6:	e7be      	b.n	800a756 <__gethex+0x362>
 800a7d8:	6922      	ldr	r2, [r4, #16]
 800a7da:	455a      	cmp	r2, fp
 800a7dc:	dd0b      	ble.n	800a7f6 <__gethex+0x402>
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f7ff fd9f 	bl	800a324 <rshift>
 800a7e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7ea:	3701      	adds	r7, #1
 800a7ec:	42bb      	cmp	r3, r7
 800a7ee:	f6ff aee0 	blt.w	800a5b2 <__gethex+0x1be>
 800a7f2:	2501      	movs	r5, #1
 800a7f4:	e7c2      	b.n	800a77c <__gethex+0x388>
 800a7f6:	f016 061f 	ands.w	r6, r6, #31
 800a7fa:	d0fa      	beq.n	800a7f2 <__gethex+0x3fe>
 800a7fc:	4453      	add	r3, sl
 800a7fe:	f1c6 0620 	rsb	r6, r6, #32
 800a802:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a806:	f7fe f8d5 	bl	80089b4 <__hi0bits>
 800a80a:	42b0      	cmp	r0, r6
 800a80c:	dbe7      	blt.n	800a7de <__gethex+0x3ea>
 800a80e:	e7f0      	b.n	800a7f2 <__gethex+0x3fe>
 800a810:	0800b171 	.word	0x0800b171

0800a814 <L_shift>:
 800a814:	f1c2 0208 	rsb	r2, r2, #8
 800a818:	0092      	lsls	r2, r2, #2
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	f1c2 0620 	rsb	r6, r2, #32
 800a820:	6843      	ldr	r3, [r0, #4]
 800a822:	6804      	ldr	r4, [r0, #0]
 800a824:	fa03 f506 	lsl.w	r5, r3, r6
 800a828:	432c      	orrs	r4, r5
 800a82a:	40d3      	lsrs	r3, r2
 800a82c:	6004      	str	r4, [r0, #0]
 800a82e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a832:	4288      	cmp	r0, r1
 800a834:	d3f4      	bcc.n	800a820 <L_shift+0xc>
 800a836:	bd70      	pop	{r4, r5, r6, pc}

0800a838 <__match>:
 800a838:	b530      	push	{r4, r5, lr}
 800a83a:	6803      	ldr	r3, [r0, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a842:	b914      	cbnz	r4, 800a84a <__match+0x12>
 800a844:	6003      	str	r3, [r0, #0]
 800a846:	2001      	movs	r0, #1
 800a848:	bd30      	pop	{r4, r5, pc}
 800a84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a852:	2d19      	cmp	r5, #25
 800a854:	bf98      	it	ls
 800a856:	3220      	addls	r2, #32
 800a858:	42a2      	cmp	r2, r4
 800a85a:	d0f0      	beq.n	800a83e <__match+0x6>
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7f3      	b.n	800a848 <__match+0x10>

0800a860 <__hexnan>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	680b      	ldr	r3, [r1, #0]
 800a866:	6801      	ldr	r1, [r0, #0]
 800a868:	115e      	asrs	r6, r3, #5
 800a86a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a86e:	f013 031f 	ands.w	r3, r3, #31
 800a872:	b087      	sub	sp, #28
 800a874:	bf18      	it	ne
 800a876:	3604      	addne	r6, #4
 800a878:	2500      	movs	r5, #0
 800a87a:	1f37      	subs	r7, r6, #4
 800a87c:	4682      	mov	sl, r0
 800a87e:	4690      	mov	r8, r2
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	f846 5c04 	str.w	r5, [r6, #-4]
 800a886:	46b9      	mov	r9, r7
 800a888:	463c      	mov	r4, r7
 800a88a:	9502      	str	r5, [sp, #8]
 800a88c:	46ab      	mov	fp, r5
 800a88e:	784a      	ldrb	r2, [r1, #1]
 800a890:	1c4b      	adds	r3, r1, #1
 800a892:	9303      	str	r3, [sp, #12]
 800a894:	b342      	cbz	r2, 800a8e8 <__hexnan+0x88>
 800a896:	4610      	mov	r0, r2
 800a898:	9105      	str	r1, [sp, #20]
 800a89a:	9204      	str	r2, [sp, #16]
 800a89c:	f7ff fd94 	bl	800a3c8 <__hexdig_fun>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d151      	bne.n	800a948 <__hexnan+0xe8>
 800a8a4:	9a04      	ldr	r2, [sp, #16]
 800a8a6:	9905      	ldr	r1, [sp, #20]
 800a8a8:	2a20      	cmp	r2, #32
 800a8aa:	d818      	bhi.n	800a8de <__hexnan+0x7e>
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	459b      	cmp	fp, r3
 800a8b0:	dd13      	ble.n	800a8da <__hexnan+0x7a>
 800a8b2:	454c      	cmp	r4, r9
 800a8b4:	d206      	bcs.n	800a8c4 <__hexnan+0x64>
 800a8b6:	2d07      	cmp	r5, #7
 800a8b8:	dc04      	bgt.n	800a8c4 <__hexnan+0x64>
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4649      	mov	r1, r9
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7ff ffa8 	bl	800a814 <L_shift>
 800a8c4:	4544      	cmp	r4, r8
 800a8c6:	d952      	bls.n	800a96e <__hexnan+0x10e>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a8ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8d2:	f8cd b008 	str.w	fp, [sp, #8]
 800a8d6:	464c      	mov	r4, r9
 800a8d8:	461d      	mov	r5, r3
 800a8da:	9903      	ldr	r1, [sp, #12]
 800a8dc:	e7d7      	b.n	800a88e <__hexnan+0x2e>
 800a8de:	2a29      	cmp	r2, #41	@ 0x29
 800a8e0:	d157      	bne.n	800a992 <__hexnan+0x132>
 800a8e2:	3102      	adds	r1, #2
 800a8e4:	f8ca 1000 	str.w	r1, [sl]
 800a8e8:	f1bb 0f00 	cmp.w	fp, #0
 800a8ec:	d051      	beq.n	800a992 <__hexnan+0x132>
 800a8ee:	454c      	cmp	r4, r9
 800a8f0:	d206      	bcs.n	800a900 <__hexnan+0xa0>
 800a8f2:	2d07      	cmp	r5, #7
 800a8f4:	dc04      	bgt.n	800a900 <__hexnan+0xa0>
 800a8f6:	462a      	mov	r2, r5
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7ff ff8a 	bl	800a814 <L_shift>
 800a900:	4544      	cmp	r4, r8
 800a902:	d936      	bls.n	800a972 <__hexnan+0x112>
 800a904:	f1a8 0204 	sub.w	r2, r8, #4
 800a908:	4623      	mov	r3, r4
 800a90a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a90e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a912:	429f      	cmp	r7, r3
 800a914:	d2f9      	bcs.n	800a90a <__hexnan+0xaa>
 800a916:	1b3b      	subs	r3, r7, r4
 800a918:	f023 0303 	bic.w	r3, r3, #3
 800a91c:	3304      	adds	r3, #4
 800a91e:	3401      	adds	r4, #1
 800a920:	3e03      	subs	r6, #3
 800a922:	42b4      	cmp	r4, r6
 800a924:	bf88      	it	hi
 800a926:	2304      	movhi	r3, #4
 800a928:	4443      	add	r3, r8
 800a92a:	2200      	movs	r2, #0
 800a92c:	f843 2b04 	str.w	r2, [r3], #4
 800a930:	429f      	cmp	r7, r3
 800a932:	d2fb      	bcs.n	800a92c <__hexnan+0xcc>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	b91b      	cbnz	r3, 800a940 <__hexnan+0xe0>
 800a938:	4547      	cmp	r7, r8
 800a93a:	d128      	bne.n	800a98e <__hexnan+0x12e>
 800a93c:	2301      	movs	r3, #1
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	2005      	movs	r0, #5
 800a942:	b007      	add	sp, #28
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	3501      	adds	r5, #1
 800a94a:	2d08      	cmp	r5, #8
 800a94c:	f10b 0b01 	add.w	fp, fp, #1
 800a950:	dd06      	ble.n	800a960 <__hexnan+0x100>
 800a952:	4544      	cmp	r4, r8
 800a954:	d9c1      	bls.n	800a8da <__hexnan+0x7a>
 800a956:	2300      	movs	r3, #0
 800a958:	f844 3c04 	str.w	r3, [r4, #-4]
 800a95c:	2501      	movs	r5, #1
 800a95e:	3c04      	subs	r4, #4
 800a960:	6822      	ldr	r2, [r4, #0]
 800a962:	f000 000f 	and.w	r0, r0, #15
 800a966:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a96a:	6020      	str	r0, [r4, #0]
 800a96c:	e7b5      	b.n	800a8da <__hexnan+0x7a>
 800a96e:	2508      	movs	r5, #8
 800a970:	e7b3      	b.n	800a8da <__hexnan+0x7a>
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0dd      	beq.n	800a934 <__hexnan+0xd4>
 800a978:	f1c3 0320 	rsb	r3, r3, #32
 800a97c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a980:	40da      	lsrs	r2, r3
 800a982:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a986:	4013      	ands	r3, r2
 800a988:	f846 3c04 	str.w	r3, [r6, #-4]
 800a98c:	e7d2      	b.n	800a934 <__hexnan+0xd4>
 800a98e:	3f04      	subs	r7, #4
 800a990:	e7d0      	b.n	800a934 <__hexnan+0xd4>
 800a992:	2004      	movs	r0, #4
 800a994:	e7d5      	b.n	800a942 <__hexnan+0xe2>

0800a996 <__ascii_mbtowc>:
 800a996:	b082      	sub	sp, #8
 800a998:	b901      	cbnz	r1, 800a99c <__ascii_mbtowc+0x6>
 800a99a:	a901      	add	r1, sp, #4
 800a99c:	b142      	cbz	r2, 800a9b0 <__ascii_mbtowc+0x1a>
 800a99e:	b14b      	cbz	r3, 800a9b4 <__ascii_mbtowc+0x1e>
 800a9a0:	7813      	ldrb	r3, [r2, #0]
 800a9a2:	600b      	str	r3, [r1, #0]
 800a9a4:	7812      	ldrb	r2, [r2, #0]
 800a9a6:	1e10      	subs	r0, r2, #0
 800a9a8:	bf18      	it	ne
 800a9aa:	2001      	movne	r0, #1
 800a9ac:	b002      	add	sp, #8
 800a9ae:	4770      	bx	lr
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	e7fb      	b.n	800a9ac <__ascii_mbtowc+0x16>
 800a9b4:	f06f 0001 	mvn.w	r0, #1
 800a9b8:	e7f8      	b.n	800a9ac <__ascii_mbtowc+0x16>

0800a9ba <_realloc_r>:
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	4607      	mov	r7, r0
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	b921      	cbnz	r1, 800a9d0 <_realloc_r+0x16>
 800a9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	f7fd be74 	b.w	80086b8 <_malloc_r>
 800a9d0:	b92a      	cbnz	r2, 800a9de <_realloc_r+0x24>
 800a9d2:	f7fd fdfd 	bl	80085d0 <_free_r>
 800a9d6:	4625      	mov	r5, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9de:	f000 f840 	bl	800aa62 <_malloc_usable_size_r>
 800a9e2:	4284      	cmp	r4, r0
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	d802      	bhi.n	800a9ee <_realloc_r+0x34>
 800a9e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9ec:	d8f4      	bhi.n	800a9d8 <_realloc_r+0x1e>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f7fd fe61 	bl	80086b8 <_malloc_r>
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	b908      	cbnz	r0, 800a9fe <_realloc_r+0x44>
 800a9fa:	4645      	mov	r5, r8
 800a9fc:	e7ec      	b.n	800a9d8 <_realloc_r+0x1e>
 800a9fe:	42b4      	cmp	r4, r6
 800aa00:	4622      	mov	r2, r4
 800aa02:	4629      	mov	r1, r5
 800aa04:	bf28      	it	cs
 800aa06:	4632      	movcs	r2, r6
 800aa08:	f7fc ff73 	bl	80078f2 <memcpy>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f7fd fdde 	bl	80085d0 <_free_r>
 800aa14:	e7f1      	b.n	800a9fa <_realloc_r+0x40>

0800aa16 <__ascii_wctomb>:
 800aa16:	4603      	mov	r3, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	b141      	cbz	r1, 800aa2e <__ascii_wctomb+0x18>
 800aa1c:	2aff      	cmp	r2, #255	@ 0xff
 800aa1e:	d904      	bls.n	800aa2a <__ascii_wctomb+0x14>
 800aa20:	228a      	movs	r2, #138	@ 0x8a
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa28:	4770      	bx	lr
 800aa2a:	700a      	strb	r2, [r1, #0]
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	4770      	bx	lr

0800aa30 <fiprintf>:
 800aa30:	b40e      	push	{r1, r2, r3}
 800aa32:	b503      	push	{r0, r1, lr}
 800aa34:	4601      	mov	r1, r0
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	4805      	ldr	r0, [pc, #20]	@ (800aa50 <fiprintf+0x20>)
 800aa3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3e:	6800      	ldr	r0, [r0, #0]
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	f000 f83f 	bl	800aac4 <_vfiprintf_r>
 800aa46:	b002      	add	sp, #8
 800aa48:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa4c:	b003      	add	sp, #12
 800aa4e:	4770      	bx	lr
 800aa50:	2000001c 	.word	0x2000001c

0800aa54 <abort>:
 800aa54:	b508      	push	{r3, lr}
 800aa56:	2006      	movs	r0, #6
 800aa58:	f000 fa08 	bl	800ae6c <raise>
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	f7f7 fa07 	bl	8001e70 <_exit>

0800aa62 <_malloc_usable_size_r>:
 800aa62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa66:	1f18      	subs	r0, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bfbc      	itt	lt
 800aa6c:	580b      	ldrlt	r3, [r1, r0]
 800aa6e:	18c0      	addlt	r0, r0, r3
 800aa70:	4770      	bx	lr

0800aa72 <__sfputc_r>:
 800aa72:	6893      	ldr	r3, [r2, #8]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	b410      	push	{r4}
 800aa7a:	6093      	str	r3, [r2, #8]
 800aa7c:	da08      	bge.n	800aa90 <__sfputc_r+0x1e>
 800aa7e:	6994      	ldr	r4, [r2, #24]
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	db01      	blt.n	800aa88 <__sfputc_r+0x16>
 800aa84:	290a      	cmp	r1, #10
 800aa86:	d103      	bne.n	800aa90 <__sfputc_r+0x1e>
 800aa88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8c:	f000 b932 	b.w	800acf4 <__swbuf_r>
 800aa90:	6813      	ldr	r3, [r2, #0]
 800aa92:	1c58      	adds	r0, r3, #1
 800aa94:	6010      	str	r0, [r2, #0]
 800aa96:	7019      	strb	r1, [r3, #0]
 800aa98:	4608      	mov	r0, r1
 800aa9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <__sfputs_r>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	4614      	mov	r4, r2
 800aaa8:	18d5      	adds	r5, r2, r3
 800aaaa:	42ac      	cmp	r4, r5
 800aaac:	d101      	bne.n	800aab2 <__sfputs_r+0x12>
 800aaae:	2000      	movs	r0, #0
 800aab0:	e007      	b.n	800aac2 <__sfputs_r+0x22>
 800aab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab6:	463a      	mov	r2, r7
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7ff ffda 	bl	800aa72 <__sfputc_r>
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	d1f3      	bne.n	800aaaa <__sfputs_r+0xa>
 800aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aac4 <_vfiprintf_r>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	460d      	mov	r5, r1
 800aaca:	b09d      	sub	sp, #116	@ 0x74
 800aacc:	4614      	mov	r4, r2
 800aace:	4698      	mov	r8, r3
 800aad0:	4606      	mov	r6, r0
 800aad2:	b118      	cbz	r0, 800aadc <_vfiprintf_r+0x18>
 800aad4:	6a03      	ldr	r3, [r0, #32]
 800aad6:	b90b      	cbnz	r3, 800aadc <_vfiprintf_r+0x18>
 800aad8:	f7fc fd5c 	bl	8007594 <__sinit>
 800aadc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aade:	07d9      	lsls	r1, r3, #31
 800aae0:	d405      	bmi.n	800aaee <_vfiprintf_r+0x2a>
 800aae2:	89ab      	ldrh	r3, [r5, #12]
 800aae4:	059a      	lsls	r2, r3, #22
 800aae6:	d402      	bmi.n	800aaee <_vfiprintf_r+0x2a>
 800aae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaea:	f7fc ff00 	bl	80078ee <__retarget_lock_acquire_recursive>
 800aaee:	89ab      	ldrh	r3, [r5, #12]
 800aaf0:	071b      	lsls	r3, r3, #28
 800aaf2:	d501      	bpl.n	800aaf8 <_vfiprintf_r+0x34>
 800aaf4:	692b      	ldr	r3, [r5, #16]
 800aaf6:	b99b      	cbnz	r3, 800ab20 <_vfiprintf_r+0x5c>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4630      	mov	r0, r6
 800aafc:	f000 f938 	bl	800ad70 <__swsetup_r>
 800ab00:	b170      	cbz	r0, 800ab20 <_vfiprintf_r+0x5c>
 800ab02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab04:	07dc      	lsls	r4, r3, #31
 800ab06:	d504      	bpl.n	800ab12 <_vfiprintf_r+0x4e>
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab0c:	b01d      	add	sp, #116	@ 0x74
 800ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	0598      	lsls	r0, r3, #22
 800ab16:	d4f7      	bmi.n	800ab08 <_vfiprintf_r+0x44>
 800ab18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab1a:	f7fc fee9 	bl	80078f0 <__retarget_lock_release_recursive>
 800ab1e:	e7f3      	b.n	800ab08 <_vfiprintf_r+0x44>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab24:	2320      	movs	r3, #32
 800ab26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab2e:	2330      	movs	r3, #48	@ 0x30
 800ab30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ace0 <_vfiprintf_r+0x21c>
 800ab34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab38:	f04f 0901 	mov.w	r9, #1
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	469a      	mov	sl, r3
 800ab40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab44:	b10a      	cbz	r2, 800ab4a <_vfiprintf_r+0x86>
 800ab46:	2a25      	cmp	r2, #37	@ 0x25
 800ab48:	d1f9      	bne.n	800ab3e <_vfiprintf_r+0x7a>
 800ab4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab4e:	d00b      	beq.n	800ab68 <_vfiprintf_r+0xa4>
 800ab50:	465b      	mov	r3, fp
 800ab52:	4622      	mov	r2, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7ff ffa2 	bl	800aaa0 <__sfputs_r>
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f000 80a7 	beq.w	800acb0 <_vfiprintf_r+0x1ec>
 800ab62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab64:	445a      	add	r2, fp
 800ab66:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab68:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 809f 	beq.w	800acb0 <_vfiprintf_r+0x1ec>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab7c:	f10a 0a01 	add.w	sl, sl, #1
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab88:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab8a:	4654      	mov	r4, sl
 800ab8c:	2205      	movs	r2, #5
 800ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab92:	4853      	ldr	r0, [pc, #332]	@ (800ace0 <_vfiprintf_r+0x21c>)
 800ab94:	f7f5 fb1c 	bl	80001d0 <memchr>
 800ab98:	9a04      	ldr	r2, [sp, #16]
 800ab9a:	b9d8      	cbnz	r0, 800abd4 <_vfiprintf_r+0x110>
 800ab9c:	06d1      	lsls	r1, r2, #27
 800ab9e:	bf44      	itt	mi
 800aba0:	2320      	movmi	r3, #32
 800aba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba6:	0713      	lsls	r3, r2, #28
 800aba8:	bf44      	itt	mi
 800abaa:	232b      	movmi	r3, #43	@ 0x2b
 800abac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abb0:	f89a 3000 	ldrb.w	r3, [sl]
 800abb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800abb6:	d015      	beq.n	800abe4 <_vfiprintf_r+0x120>
 800abb8:	9a07      	ldr	r2, [sp, #28]
 800abba:	4654      	mov	r4, sl
 800abbc:	2000      	movs	r0, #0
 800abbe:	f04f 0c0a 	mov.w	ip, #10
 800abc2:	4621      	mov	r1, r4
 800abc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc8:	3b30      	subs	r3, #48	@ 0x30
 800abca:	2b09      	cmp	r3, #9
 800abcc:	d94b      	bls.n	800ac66 <_vfiprintf_r+0x1a2>
 800abce:	b1b0      	cbz	r0, 800abfe <_vfiprintf_r+0x13a>
 800abd0:	9207      	str	r2, [sp, #28]
 800abd2:	e014      	b.n	800abfe <_vfiprintf_r+0x13a>
 800abd4:	eba0 0308 	sub.w	r3, r0, r8
 800abd8:	fa09 f303 	lsl.w	r3, r9, r3
 800abdc:	4313      	orrs	r3, r2
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	46a2      	mov	sl, r4
 800abe2:	e7d2      	b.n	800ab8a <_vfiprintf_r+0xc6>
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	1d19      	adds	r1, r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	9103      	str	r1, [sp, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bfbb      	ittet	lt
 800abf0:	425b      	neglt	r3, r3
 800abf2:	f042 0202 	orrlt.w	r2, r2, #2
 800abf6:	9307      	strge	r3, [sp, #28]
 800abf8:	9307      	strlt	r3, [sp, #28]
 800abfa:	bfb8      	it	lt
 800abfc:	9204      	strlt	r2, [sp, #16]
 800abfe:	7823      	ldrb	r3, [r4, #0]
 800ac00:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac02:	d10a      	bne.n	800ac1a <_vfiprintf_r+0x156>
 800ac04:	7863      	ldrb	r3, [r4, #1]
 800ac06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac08:	d132      	bne.n	800ac70 <_vfiprintf_r+0x1ac>
 800ac0a:	9b03      	ldr	r3, [sp, #12]
 800ac0c:	1d1a      	adds	r2, r3, #4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	9203      	str	r2, [sp, #12]
 800ac12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac16:	3402      	adds	r4, #2
 800ac18:	9305      	str	r3, [sp, #20]
 800ac1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800acf0 <_vfiprintf_r+0x22c>
 800ac1e:	7821      	ldrb	r1, [r4, #0]
 800ac20:	2203      	movs	r2, #3
 800ac22:	4650      	mov	r0, sl
 800ac24:	f7f5 fad4 	bl	80001d0 <memchr>
 800ac28:	b138      	cbz	r0, 800ac3a <_vfiprintf_r+0x176>
 800ac2a:	9b04      	ldr	r3, [sp, #16]
 800ac2c:	eba0 000a 	sub.w	r0, r0, sl
 800ac30:	2240      	movs	r2, #64	@ 0x40
 800ac32:	4082      	lsls	r2, r0
 800ac34:	4313      	orrs	r3, r2
 800ac36:	3401      	adds	r4, #1
 800ac38:	9304      	str	r3, [sp, #16]
 800ac3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac3e:	4829      	ldr	r0, [pc, #164]	@ (800ace4 <_vfiprintf_r+0x220>)
 800ac40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac44:	2206      	movs	r2, #6
 800ac46:	f7f5 fac3 	bl	80001d0 <memchr>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d03f      	beq.n	800acce <_vfiprintf_r+0x20a>
 800ac4e:	4b26      	ldr	r3, [pc, #152]	@ (800ace8 <_vfiprintf_r+0x224>)
 800ac50:	bb1b      	cbnz	r3, 800ac9a <_vfiprintf_r+0x1d6>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	3307      	adds	r3, #7
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac60:	443b      	add	r3, r7
 800ac62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac64:	e76a      	b.n	800ab3c <_vfiprintf_r+0x78>
 800ac66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	e7a8      	b.n	800abc2 <_vfiprintf_r+0xfe>
 800ac70:	2300      	movs	r3, #0
 800ac72:	3401      	adds	r4, #1
 800ac74:	9305      	str	r3, [sp, #20]
 800ac76:	4619      	mov	r1, r3
 800ac78:	f04f 0c0a 	mov.w	ip, #10
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac82:	3a30      	subs	r2, #48	@ 0x30
 800ac84:	2a09      	cmp	r2, #9
 800ac86:	d903      	bls.n	800ac90 <_vfiprintf_r+0x1cc>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0c6      	beq.n	800ac1a <_vfiprintf_r+0x156>
 800ac8c:	9105      	str	r1, [sp, #20]
 800ac8e:	e7c4      	b.n	800ac1a <_vfiprintf_r+0x156>
 800ac90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac94:	4604      	mov	r4, r0
 800ac96:	2301      	movs	r3, #1
 800ac98:	e7f0      	b.n	800ac7c <_vfiprintf_r+0x1b8>
 800ac9a:	ab03      	add	r3, sp, #12
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4b12      	ldr	r3, [pc, #72]	@ (800acec <_vfiprintf_r+0x228>)
 800aca2:	a904      	add	r1, sp, #16
 800aca4:	4630      	mov	r0, r6
 800aca6:	f7fb fe25 	bl	80068f4 <_printf_float>
 800acaa:	4607      	mov	r7, r0
 800acac:	1c78      	adds	r0, r7, #1
 800acae:	d1d6      	bne.n	800ac5e <_vfiprintf_r+0x19a>
 800acb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acb2:	07d9      	lsls	r1, r3, #31
 800acb4:	d405      	bmi.n	800acc2 <_vfiprintf_r+0x1fe>
 800acb6:	89ab      	ldrh	r3, [r5, #12]
 800acb8:	059a      	lsls	r2, r3, #22
 800acba:	d402      	bmi.n	800acc2 <_vfiprintf_r+0x1fe>
 800acbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acbe:	f7fc fe17 	bl	80078f0 <__retarget_lock_release_recursive>
 800acc2:	89ab      	ldrh	r3, [r5, #12]
 800acc4:	065b      	lsls	r3, r3, #25
 800acc6:	f53f af1f 	bmi.w	800ab08 <_vfiprintf_r+0x44>
 800acca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800accc:	e71e      	b.n	800ab0c <_vfiprintf_r+0x48>
 800acce:	ab03      	add	r3, sp, #12
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	462a      	mov	r2, r5
 800acd4:	4b05      	ldr	r3, [pc, #20]	@ (800acec <_vfiprintf_r+0x228>)
 800acd6:	a904      	add	r1, sp, #16
 800acd8:	4630      	mov	r0, r6
 800acda:	f7fc f8a3 	bl	8006e24 <_printf_i>
 800acde:	e7e4      	b.n	800acaa <_vfiprintf_r+0x1e6>
 800ace0:	0800b1dd 	.word	0x0800b1dd
 800ace4:	0800b1e7 	.word	0x0800b1e7
 800ace8:	080068f5 	.word	0x080068f5
 800acec:	0800aaa1 	.word	0x0800aaa1
 800acf0:	0800b1e3 	.word	0x0800b1e3

0800acf4 <__swbuf_r>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	460e      	mov	r6, r1
 800acf8:	4614      	mov	r4, r2
 800acfa:	4605      	mov	r5, r0
 800acfc:	b118      	cbz	r0, 800ad06 <__swbuf_r+0x12>
 800acfe:	6a03      	ldr	r3, [r0, #32]
 800ad00:	b90b      	cbnz	r3, 800ad06 <__swbuf_r+0x12>
 800ad02:	f7fc fc47 	bl	8007594 <__sinit>
 800ad06:	69a3      	ldr	r3, [r4, #24]
 800ad08:	60a3      	str	r3, [r4, #8]
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	071a      	lsls	r2, r3, #28
 800ad0e:	d501      	bpl.n	800ad14 <__swbuf_r+0x20>
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	b943      	cbnz	r3, 800ad26 <__swbuf_r+0x32>
 800ad14:	4621      	mov	r1, r4
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 f82a 	bl	800ad70 <__swsetup_r>
 800ad1c:	b118      	cbz	r0, 800ad26 <__swbuf_r+0x32>
 800ad1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ad22:	4638      	mov	r0, r7
 800ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	1a98      	subs	r0, r3, r2
 800ad2c:	6963      	ldr	r3, [r4, #20]
 800ad2e:	b2f6      	uxtb	r6, r6
 800ad30:	4283      	cmp	r3, r0
 800ad32:	4637      	mov	r7, r6
 800ad34:	dc05      	bgt.n	800ad42 <__swbuf_r+0x4e>
 800ad36:	4621      	mov	r1, r4
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7ff fa53 	bl	800a1e4 <_fflush_r>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d1ed      	bne.n	800ad1e <__swbuf_r+0x2a>
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	60a3      	str	r3, [r4, #8]
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	701e      	strb	r6, [r3, #0]
 800ad50:	6962      	ldr	r2, [r4, #20]
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d004      	beq.n	800ad62 <__swbuf_r+0x6e>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	07db      	lsls	r3, r3, #31
 800ad5c:	d5e1      	bpl.n	800ad22 <__swbuf_r+0x2e>
 800ad5e:	2e0a      	cmp	r6, #10
 800ad60:	d1df      	bne.n	800ad22 <__swbuf_r+0x2e>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7ff fa3d 	bl	800a1e4 <_fflush_r>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0d9      	beq.n	800ad22 <__swbuf_r+0x2e>
 800ad6e:	e7d6      	b.n	800ad1e <__swbuf_r+0x2a>

0800ad70 <__swsetup_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4b29      	ldr	r3, [pc, #164]	@ (800ae18 <__swsetup_r+0xa8>)
 800ad74:	4605      	mov	r5, r0
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	460c      	mov	r4, r1
 800ad7a:	b118      	cbz	r0, 800ad84 <__swsetup_r+0x14>
 800ad7c:	6a03      	ldr	r3, [r0, #32]
 800ad7e:	b90b      	cbnz	r3, 800ad84 <__swsetup_r+0x14>
 800ad80:	f7fc fc08 	bl	8007594 <__sinit>
 800ad84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad88:	0719      	lsls	r1, r3, #28
 800ad8a:	d422      	bmi.n	800add2 <__swsetup_r+0x62>
 800ad8c:	06da      	lsls	r2, r3, #27
 800ad8e:	d407      	bmi.n	800ada0 <__swsetup_r+0x30>
 800ad90:	2209      	movs	r2, #9
 800ad92:	602a      	str	r2, [r5, #0]
 800ad94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad9e:	e033      	b.n	800ae08 <__swsetup_r+0x98>
 800ada0:	0758      	lsls	r0, r3, #29
 800ada2:	d512      	bpl.n	800adca <__swsetup_r+0x5a>
 800ada4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ada6:	b141      	cbz	r1, 800adba <__swsetup_r+0x4a>
 800ada8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adac:	4299      	cmp	r1, r3
 800adae:	d002      	beq.n	800adb6 <__swsetup_r+0x46>
 800adb0:	4628      	mov	r0, r5
 800adb2:	f7fd fc0d 	bl	80085d0 <_free_r>
 800adb6:	2300      	movs	r3, #0
 800adb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	2300      	movs	r3, #0
 800adc4:	6063      	str	r3, [r4, #4]
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	f043 0308 	orr.w	r3, r3, #8
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	6923      	ldr	r3, [r4, #16]
 800add4:	b94b      	cbnz	r3, 800adea <__swsetup_r+0x7a>
 800add6:	89a3      	ldrh	r3, [r4, #12]
 800add8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800addc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ade0:	d003      	beq.n	800adea <__swsetup_r+0x7a>
 800ade2:	4621      	mov	r1, r4
 800ade4:	4628      	mov	r0, r5
 800ade6:	f000 f883 	bl	800aef0 <__smakebuf_r>
 800adea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adee:	f013 0201 	ands.w	r2, r3, #1
 800adf2:	d00a      	beq.n	800ae0a <__swsetup_r+0x9a>
 800adf4:	2200      	movs	r2, #0
 800adf6:	60a2      	str	r2, [r4, #8]
 800adf8:	6962      	ldr	r2, [r4, #20]
 800adfa:	4252      	negs	r2, r2
 800adfc:	61a2      	str	r2, [r4, #24]
 800adfe:	6922      	ldr	r2, [r4, #16]
 800ae00:	b942      	cbnz	r2, 800ae14 <__swsetup_r+0xa4>
 800ae02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae06:	d1c5      	bne.n	800ad94 <__swsetup_r+0x24>
 800ae08:	bd38      	pop	{r3, r4, r5, pc}
 800ae0a:	0799      	lsls	r1, r3, #30
 800ae0c:	bf58      	it	pl
 800ae0e:	6962      	ldrpl	r2, [r4, #20]
 800ae10:	60a2      	str	r2, [r4, #8]
 800ae12:	e7f4      	b.n	800adfe <__swsetup_r+0x8e>
 800ae14:	2000      	movs	r0, #0
 800ae16:	e7f7      	b.n	800ae08 <__swsetup_r+0x98>
 800ae18:	2000001c 	.word	0x2000001c

0800ae1c <_raise_r>:
 800ae1c:	291f      	cmp	r1, #31
 800ae1e:	b538      	push	{r3, r4, r5, lr}
 800ae20:	4605      	mov	r5, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	d904      	bls.n	800ae30 <_raise_r+0x14>
 800ae26:	2316      	movs	r3, #22
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae32:	b112      	cbz	r2, 800ae3a <_raise_r+0x1e>
 800ae34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae38:	b94b      	cbnz	r3, 800ae4e <_raise_r+0x32>
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f000 f830 	bl	800aea0 <_getpid_r>
 800ae40:	4622      	mov	r2, r4
 800ae42:	4601      	mov	r1, r0
 800ae44:	4628      	mov	r0, r5
 800ae46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae4a:	f000 b817 	b.w	800ae7c <_kill_r>
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d00a      	beq.n	800ae68 <_raise_r+0x4c>
 800ae52:	1c59      	adds	r1, r3, #1
 800ae54:	d103      	bne.n	800ae5e <_raise_r+0x42>
 800ae56:	2316      	movs	r3, #22
 800ae58:	6003      	str	r3, [r0, #0]
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	e7e7      	b.n	800ae2e <_raise_r+0x12>
 800ae5e:	2100      	movs	r1, #0
 800ae60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae64:	4620      	mov	r0, r4
 800ae66:	4798      	blx	r3
 800ae68:	2000      	movs	r0, #0
 800ae6a:	e7e0      	b.n	800ae2e <_raise_r+0x12>

0800ae6c <raise>:
 800ae6c:	4b02      	ldr	r3, [pc, #8]	@ (800ae78 <raise+0xc>)
 800ae6e:	4601      	mov	r1, r0
 800ae70:	6818      	ldr	r0, [r3, #0]
 800ae72:	f7ff bfd3 	b.w	800ae1c <_raise_r>
 800ae76:	bf00      	nop
 800ae78:	2000001c 	.word	0x2000001c

0800ae7c <_kill_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	@ (800ae9c <_kill_r+0x20>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	4611      	mov	r1, r2
 800ae88:	602b      	str	r3, [r5, #0]
 800ae8a:	f7f6 ffe1 	bl	8001e50 <_kill>
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	d102      	bne.n	800ae98 <_kill_r+0x1c>
 800ae92:	682b      	ldr	r3, [r5, #0]
 800ae94:	b103      	cbz	r3, 800ae98 <_kill_r+0x1c>
 800ae96:	6023      	str	r3, [r4, #0]
 800ae98:	bd38      	pop	{r3, r4, r5, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20004508 	.word	0x20004508

0800aea0 <_getpid_r>:
 800aea0:	f7f6 bfce 	b.w	8001e40 <_getpid>

0800aea4 <__swhatbuf_r>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	2900      	cmp	r1, #0
 800aeae:	b096      	sub	sp, #88	@ 0x58
 800aeb0:	4615      	mov	r5, r2
 800aeb2:	461e      	mov	r6, r3
 800aeb4:	da0d      	bge.n	800aed2 <__swhatbuf_r+0x2e>
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aebc:	f04f 0100 	mov.w	r1, #0
 800aec0:	bf14      	ite	ne
 800aec2:	2340      	movne	r3, #64	@ 0x40
 800aec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aec8:	2000      	movs	r0, #0
 800aeca:	6031      	str	r1, [r6, #0]
 800aecc:	602b      	str	r3, [r5, #0]
 800aece:	b016      	add	sp, #88	@ 0x58
 800aed0:	bd70      	pop	{r4, r5, r6, pc}
 800aed2:	466a      	mov	r2, sp
 800aed4:	f000 f848 	bl	800af68 <_fstat_r>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dbec      	blt.n	800aeb6 <__swhatbuf_r+0x12>
 800aedc:	9901      	ldr	r1, [sp, #4]
 800aede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aee6:	4259      	negs	r1, r3
 800aee8:	4159      	adcs	r1, r3
 800aeea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeee:	e7eb      	b.n	800aec8 <__swhatbuf_r+0x24>

0800aef0 <__smakebuf_r>:
 800aef0:	898b      	ldrh	r3, [r1, #12]
 800aef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef4:	079d      	lsls	r5, r3, #30
 800aef6:	4606      	mov	r6, r0
 800aef8:	460c      	mov	r4, r1
 800aefa:	d507      	bpl.n	800af0c <__smakebuf_r+0x1c>
 800aefc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	6123      	str	r3, [r4, #16]
 800af04:	2301      	movs	r3, #1
 800af06:	6163      	str	r3, [r4, #20]
 800af08:	b003      	add	sp, #12
 800af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af0c:	ab01      	add	r3, sp, #4
 800af0e:	466a      	mov	r2, sp
 800af10:	f7ff ffc8 	bl	800aea4 <__swhatbuf_r>
 800af14:	9f00      	ldr	r7, [sp, #0]
 800af16:	4605      	mov	r5, r0
 800af18:	4639      	mov	r1, r7
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7fd fbcc 	bl	80086b8 <_malloc_r>
 800af20:	b948      	cbnz	r0, 800af36 <__smakebuf_r+0x46>
 800af22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af26:	059a      	lsls	r2, r3, #22
 800af28:	d4ee      	bmi.n	800af08 <__smakebuf_r+0x18>
 800af2a:	f023 0303 	bic.w	r3, r3, #3
 800af2e:	f043 0302 	orr.w	r3, r3, #2
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	e7e2      	b.n	800aefc <__smakebuf_r+0xc>
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	6020      	str	r0, [r4, #0]
 800af3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af3e:	81a3      	strh	r3, [r4, #12]
 800af40:	9b01      	ldr	r3, [sp, #4]
 800af42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af46:	b15b      	cbz	r3, 800af60 <__smakebuf_r+0x70>
 800af48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af4c:	4630      	mov	r0, r6
 800af4e:	f000 f81d 	bl	800af8c <_isatty_r>
 800af52:	b128      	cbz	r0, 800af60 <__smakebuf_r+0x70>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f023 0303 	bic.w	r3, r3, #3
 800af5a:	f043 0301 	orr.w	r3, r3, #1
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	431d      	orrs	r5, r3
 800af64:	81a5      	strh	r5, [r4, #12]
 800af66:	e7cf      	b.n	800af08 <__smakebuf_r+0x18>

0800af68 <_fstat_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	@ (800af88 <_fstat_r+0x20>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	4611      	mov	r1, r2
 800af74:	602b      	str	r3, [r5, #0]
 800af76:	f7f6 ffcb 	bl	8001f10 <_fstat>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	d102      	bne.n	800af84 <_fstat_r+0x1c>
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	b103      	cbz	r3, 800af84 <_fstat_r+0x1c>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd38      	pop	{r3, r4, r5, pc}
 800af86:	bf00      	nop
 800af88:	20004508 	.word	0x20004508

0800af8c <_isatty_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d06      	ldr	r5, [pc, #24]	@ (800afa8 <_isatty_r+0x1c>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f6 ffca 	bl	8001f30 <_isatty>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_isatty_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_isatty_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20004508 	.word	0x20004508

0800afac <_init>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr

0800afb8 <_fini>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr
