
STM32_CAN_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800bae8  0800bae8  0000cae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c004  0800c004  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c004  0800c004  0000d004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c00c  0800c00c  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c00c  0800c00c  0000d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c014  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          00004344  200001d8  200001d8  0000e1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000451c  2000451c  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ddb  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003862  00000000  00000000  00026fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0002a848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001049  00000000  00000000  0002bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ab3  00000000  00000000  0002cd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ab6  00000000  00000000  0005284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5558  00000000  00000000  00069302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e85a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006da0  00000000  00000000  0014e8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00155640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bacc 	.word	0x0800bacc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bacc 	.word	0x0800bacc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <delay_us>:
#include "dht11.h"

extern TIM_HandleTypeDef htim2;

void delay_us (uint32_t time)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <delay_us+0x2c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8001030:	bf00      	nop
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <delay_us+0x2c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	d8f9      	bhi.n	8001032 <delay_us+0x12>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	2000054c 	.word	0x2000054c

08001050 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f002 f996 	bl	80033b0 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f002 f978 	bl	80033b0 <HAL_GPIO_Init>
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <DHT11_Start>:

//#define DHT11_PORT GPIOA
//#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 80010cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <DHT11_Start+0x44>)
 80010d2:	f7ff ffbd 	bl	8001050 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <DHT11_Start+0x44>)
 80010de:	f002 fb1b 	bl	8003718 <HAL_GPIO_WritePin>
	delay_us(20000);
 80010e2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80010e6:	f7ff ff9b 	bl	8001020 <delay_us>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f0:	4806      	ldr	r0, [pc, #24]	@ (800110c <DHT11_Start+0x44>)
 80010f2:	f002 fb11 	bl	8003718 <HAL_GPIO_WritePin>
	delay_us (20);
 80010f6:	2014      	movs	r0, #20
 80010f8:	f7ff ff92 	bl	8001020 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 80010fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <DHT11_Start+0x44>)
 8001102:	f7ff ffc3 	bl	800108c <Set_Pin_Input>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020c00 	.word	0x40020c00

08001110 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8001116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111a:	4817      	ldr	r0, [pc, #92]	@ (8001178 <DHT11_Check_Response+0x68>)
 800111c:	f7ff ffb6 	bl	800108c <Set_Pin_Input>
	uint8_t Response = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8001124:	2028      	movs	r0, #40	@ 0x28
 8001126:	f7ff ff7b 	bl	8001020 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800112a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <DHT11_Check_Response+0x68>)
 8001130:	f002 fada 	bl	80036e8 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <DHT11_Check_Response+0x4a>
	{
		delay_us (80);
 800113a:	2050      	movs	r0, #80	@ 0x50
 800113c:	f7ff ff70 	bl	8001020 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001140:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <DHT11_Check_Response+0x68>)
 8001146:	f002 facf 	bl	80036e8 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <DHT11_Check_Response+0x46>
 8001150:	2301      	movs	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	e001      	b.n	800115a <DHT11_Check_Response+0x4a>
		else Response = -1;
 8001156:	23ff      	movs	r3, #255	@ 0xff
 8001158:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800115a:	bf00      	nop
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <DHT11_Check_Response+0x68>)
 8001162:	f002 fac1 	bl	80036e8 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f7      	bne.n	800115c <DHT11_Check_Response+0x4c>
	return Response;
 800116c:	79fb      	ldrb	r3, [r7, #7]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40020c00 	.word	0x40020c00

0800117c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001182:	2300      	movs	r3, #0
 8001184:	71bb      	strb	r3, [r7, #6]
 8001186:	e03a      	b.n	80011fe <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 8001188:	bf00      	nop
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	4820      	ldr	r0, [pc, #128]	@ (8001210 <DHT11_Read+0x94>)
 8001190:	f002 faaa 	bl	80036e8 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f7      	beq.n	800118a <DHT11_Read+0xe>
		delay_us (40);
 800119a:	2028      	movs	r0, #40	@ 0x28
 800119c:	f7ff ff40 	bl	8001020 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80011a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a4:	481a      	ldr	r0, [pc, #104]	@ (8001210 <DHT11_Read+0x94>)
 80011a6:	f002 fa9f 	bl	80036e8 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10e      	bne.n	80011ce <DHT11_Read+0x52>
			i&= ~(1<<(7-j));
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2201      	movs	r2, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4013      	ands	r3, r2
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	e00b      	b.n	80011e6 <DHT11_Read+0x6a>
		else i|= (1<<(7-j));
 80011ce:	79bb      	ldrb	r3, [r7, #6]
 80011d0:	f1c3 0307 	rsb	r3, r3, #7
 80011d4:	2201      	movs	r2, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80011e6:	bf00      	nop
 80011e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <DHT11_Read+0x94>)
 80011ee:	f002 fa7b 	bl	80036e8 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f7      	bne.n	80011e8 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3301      	adds	r3, #1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b07      	cmp	r3, #7
 8001202:	d9c1      	bls.n	8001188 <DHT11_Read+0xc>
	}
	return i;
 8001204:	79fb      	ldrb	r3, [r7, #7]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020c00 	.word	0x40020c00

08001214 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <vApplicationGetIdleTaskMemory+0x2c>)
 8001224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <vApplicationGetIdleTaskMemory+0x30>)
 800122a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200001f4 	.word	0x200001f4
 8001244:	20000294 	.word	0x20000294

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b09c      	sub	sp, #112	@ 0x70
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 ff1d 	bl	800208c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f897 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 fa4f 	bl	80016f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800125a:	f000 f8fd 	bl	8001458 <MX_ADC1_Init>
  MX_ADC2_Init();
 800125e:	f000 f94d 	bl	80014fc <MX_ADC2_Init>
  MX_CAN1_Init();
 8001262:	f000 f99d 	bl	80015a0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001266:	f000 f9d1 	bl	800160c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800126a:	f000 fa1b 	bl	80016a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800126e:	4839      	ldr	r0, [pc, #228]	@ (8001354 <main+0x10c>)
 8001270:	f001 fc49 	bl	8002b06 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8001274:	2101      	movs	r1, #1
 8001276:	4837      	ldr	r0, [pc, #220]	@ (8001354 <main+0x10c>)
 8001278:	f001 fd59 	bl	8002d2e <HAL_CAN_ActivateNotification>

  HAL_TIM_Base_Start(&htim2);
 800127c:	4836      	ldr	r0, [pc, #216]	@ (8001358 <main+0x110>)
 800127e:	f002 ff99 	bl	80041b4 <HAL_TIM_Base_Start>

  // Configure CAN Tx Header
   TxHeader.DLC = 8;
 8001282:	4b36      	ldr	r3, [pc, #216]	@ (800135c <main+0x114>)
 8001284:	2208      	movs	r2, #8
 8001286:	611a      	str	r2, [r3, #16]
   TxHeader.RTR = CAN_RTR_DATA;
 8001288:	4b34      	ldr	r3, [pc, #208]	@ (800135c <main+0x114>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
   TxHeader.IDE = CAN_ID_STD;
 800128e:	4b33      	ldr	r3, [pc, #204]	@ (800135c <main+0x114>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
   TxHeader.StdId = 0x0A9;
 8001294:	4b31      	ldr	r3, [pc, #196]	@ (800135c <main+0x114>)
 8001296:	22a9      	movs	r2, #169	@ 0xa9
 8001298:	601a      	str	r2, [r3, #0]
   TxHeader.ExtId = 0x00;
 800129a:	4b30      	ldr	r3, [pc, #192]	@ (800135c <main+0x114>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
   TxHeader.TransmitGlobalTime = DISABLE;
 80012a0:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <main+0x114>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	751a      	strb	r2, [r3, #20]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

   xQueue = xQueueCreate(5, sizeof(SensorData_t));
 80012a6:	2200      	movs	r2, #0
 80012a8:	210c      	movs	r1, #12
 80012aa:	2005      	movs	r0, #5
 80012ac:	f004 f9b4 	bl	8005618 <xQueueGenericCreate>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001360 <main+0x118>)
 80012b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80012b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <main+0x11c>)
 80012b8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80012bc:	461d      	mov	r5, r3
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 f822 	bl	800531a <osThreadCreate>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a23      	ldr	r2, [pc, #140]	@ (8001368 <main+0x120>)
 80012da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

   osThreadDef(analogTask, StartSensorAnalogTask, osPriorityHigh, 0, 256);
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <main+0x124>)
 80012de:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80012e2:	461d      	mov	r5, r3
 80012e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   analogTaskHandle = osThreadCreate(osThread(analogTask), NULL);
 80012f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f80f 	bl	800531a <osThreadCreate>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <main+0x128>)
 8001300:	6013      	str	r3, [r2, #0]

   osThreadDef(dhtTask, StartSensorDHTTask, osPriorityNormal, 0, 256);
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <main+0x12c>)
 8001304:	f107 041c 	add.w	r4, r7, #28
 8001308:	461d      	mov	r5, r3
 800130a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   dhtTaskHandle = osThreadCreate(osThread(dhtTask), NULL);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fffc 	bl	800531a <osThreadCreate>
 8001322:	4603      	mov	r3, r0
 8001324:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <main+0x130>)
 8001326:	6013      	str	r3, [r2, #0]

   osThreadDef(canTxTask, StartCanTxTask, osPriorityBelowNormal, 0, 256);
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <main+0x134>)
 800132a:	463c      	mov	r4, r7
 800132c:	461d      	mov	r5, r3
 800132e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 800133a:	463b      	mov	r3, r7
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 ffeb 	bl	800531a <osThreadCreate>
 8001344:	4603      	mov	r3, r0
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <main+0x138>)
 8001348:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800134a:	f003 ffdf 	bl	800530c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134e:	bf00      	nop
 8001350:	e7fd      	b.n	800134e <main+0x106>
 8001352:	bf00      	nop
 8001354:	20000524 	.word	0x20000524
 8001358:	2000054c 	.word	0x2000054c
 800135c:	200005f0 	.word	0x200005f0
 8001360:	200005e0 	.word	0x200005e0
 8001364:	0800baf4 	.word	0x0800baf4
 8001368:	200005dc 	.word	0x200005dc
 800136c:	0800bb1c 	.word	0x0800bb1c
 8001370:	200005e4 	.word	0x200005e4
 8001374:	0800bb40 	.word	0x0800bb40
 8001378:	200005e8 	.word	0x200005e8
 800137c:	0800bb68 	.word	0x0800bb68
 8001380:	200005ec 	.word	0x200005ec

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	@ 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2230      	movs	r2, #48	@ 0x30
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 ff5f 	bl	8008256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <SystemClock_Config+0xcc>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <SystemClock_Config+0xcc>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <SystemClock_Config+0xcc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <SystemClock_Config+0xd0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <SystemClock_Config+0xd0>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <SystemClock_Config+0xd0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013f4:	2304      	movs	r3, #4
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013f8:	2348      	movs	r3, #72	@ 0x48
 80013fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001400:	2307      	movs	r3, #7
 8001402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f002 f9b9 	bl	8003780 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001414:	f000 fb2e 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800142a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2102      	movs	r1, #2
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fc1a 	bl	8003c70 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001442:	f000 fb17 	bl	8001a74 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3750      	adds	r7, #80	@ 0x50
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800146a:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800146c:	4a21      	ldr	r2, [pc, #132]	@ (80014f4 <MX_ADC1_Init+0x9c>)
 800146e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001472:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001476:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800149a:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <MX_ADC1_Init+0xa0>)
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b8:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014ba:	f000 fe29 	bl	8002110 <HAL_ADC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014c4:	f000 fad6 	bl	8001a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014da:	f000 fffb 	bl	80024d4 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014e4:	f000 fac6 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000494 	.word	0x20000494
 80014f4:	40012000 	.word	0x40012000
 80014f8:	0f000001 	.word	0x0f000001

080014fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001510:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <MX_ADC2_Init+0x9c>)
 8001512:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001516:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800151a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <MX_ADC2_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <MX_ADC2_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_ADC2_Init+0x98>)
 800153e:	4a17      	ldr	r2, [pc, #92]	@ (800159c <MX_ADC2_Init+0xa0>)
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_ADC2_Init+0x98>)
 800154a:	2201      	movs	r2, #1
 800154c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001558:	2201      	movs	r2, #1
 800155a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800155c:	480d      	ldr	r0, [pc, #52]	@ (8001594 <MX_ADC2_Init+0x98>)
 800155e:	f000 fdd7 	bl	8002110 <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001568:	f000 fa84 	bl	8001a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800156c:	2303      	movs	r3, #3
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_ADC2_Init+0x98>)
 800157e:	f000 ffa9 	bl	80024d4 <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001588:	f000 fa74 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200004dc 	.word	0x200004dc
 8001598:	40012100 	.word	0x40012100
 800159c:	0f000001 	.word	0x0f000001

080015a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015a4:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015a6:	4a18      	ldr	r2, [pc, #96]	@ (8001608 <MX_CAN1_Init+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015ac:	2212      	movs	r2, #18
 80015ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_CAN1_Init+0x64>)
 80015f0:	f001 f98e 	bl	8002910 <HAL_CAN_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80015fa:	f000 fa3b 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000524 	.word	0x20000524
 8001608:	40006400 	.word	0x40006400

0800160c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <MX_TIM2_Init+0x94>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_TIM2_Init+0x94>)
 8001632:	2247      	movs	r2, #71	@ 0x47
 8001634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_TIM2_Init+0x94>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_TIM2_Init+0x94>)
 800163e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001642:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_TIM2_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_TIM2_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <MX_TIM2_Init+0x94>)
 8001652:	f002 fd5f 	bl	8004114 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800165c:	f000 fa0a 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <MX_TIM2_Init+0x94>)
 800166e:	f002 ff69 	bl	8004544 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001678:	f000 f9fc 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_TIM2_Init+0x94>)
 800168a:	f003 f98b 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001694:	f000 f9ee 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000054c 	.word	0x2000054c

080016a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <MX_USART2_UART_Init+0x50>)
 80016ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016ca:	220c      	movs	r2, #12
 80016cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_USART2_UART_Init+0x4c>)
 80016dc:	f003 f9f2 	bl	8004ac4 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016e6:	f000 f9c5 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000594 	.word	0x20000594
 80016f4:	40004400 	.word	0x40004400

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a26      	ldr	r2, [pc, #152]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a18      	ldr	r2, [pc, #96]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_GPIO_Init+0xb8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 41a2 	mov.w	r1, #20736	@ 0x5100
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <MX_GPIO_Init+0xbc>)
 8001786:	f001 ffc7 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_14;
 800178a:	f44f 43a2 	mov.w	r3, #20736	@ 0x5100
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MX_GPIO_Init+0xbc>)
 80017a4:	f001 fe04 	bl	80033b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	@ 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020c00 	.word	0x40020c00

080017b8 <StartSensorAnalogTask>:

/* USER CODE BEGIN 4 */

void StartSensorAnalogTask(void const * argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	 uint16_t adcVal;

	    for(;;)
	    {
	        // Read ADC1 (LDR on channel 1)
	        HAL_ADC_Start(&hadc1);
 80017c0:	4817      	ldr	r0, [pc, #92]	@ (8001820 <StartSensorAnalogTask+0x68>)
 80017c2:	f000 fce9 	bl	8002198 <HAL_ADC_Start>
	        if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80017c6:	210a      	movs	r1, #10
 80017c8:	4815      	ldr	r0, [pc, #84]	@ (8001820 <StartSensorAnalogTask+0x68>)
 80017ca:	f000 fdea 	bl	80023a2 <HAL_ADC_PollForConversion>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <StartSensorAnalogTask+0x2c>
	        {
	            adcVal = HAL_ADC_GetValue(&hadc1);
 80017d4:	4812      	ldr	r0, [pc, #72]	@ (8001820 <StartSensorAnalogTask+0x68>)
 80017d6:	f000 fe6f 	bl	80024b8 <HAL_ADC_GetValue>
 80017da:	4603      	mov	r3, r0
 80017dc:	81fb      	strh	r3, [r7, #14]
	            sensorData.ldr = adcVal;
 80017de:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <StartSensorAnalogTask+0x6c>)
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	8013      	strh	r3, [r2, #0]
	        }
	        HAL_ADC_Stop(&hadc1);
 80017e4:	480e      	ldr	r0, [pc, #56]	@ (8001820 <StartSensorAnalogTask+0x68>)
 80017e6:	f000 fda9 	bl	800233c <HAL_ADC_Stop>

	        // Read ADC2 (MQ5 on channel 3)
	        HAL_ADC_Start(&hadc2);
 80017ea:	480f      	ldr	r0, [pc, #60]	@ (8001828 <StartSensorAnalogTask+0x70>)
 80017ec:	f000 fcd4 	bl	8002198 <HAL_ADC_Start>
	        if(HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 80017f0:	210a      	movs	r1, #10
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <StartSensorAnalogTask+0x70>)
 80017f4:	f000 fdd5 	bl	80023a2 <HAL_ADC_PollForConversion>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <StartSensorAnalogTask+0x56>
	        {
	            adcVal = HAL_ADC_GetValue(&hadc2);
 80017fe:	480a      	ldr	r0, [pc, #40]	@ (8001828 <StartSensorAnalogTask+0x70>)
 8001800:	f000 fe5a 	bl	80024b8 <HAL_ADC_GetValue>
 8001804:	4603      	mov	r3, r0
 8001806:	81fb      	strh	r3, [r7, #14]
	            sensorData.mq5 = adcVal;
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <StartSensorAnalogTask+0x6c>)
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	8053      	strh	r3, [r2, #2]
	        }
	        HAL_ADC_Stop(&hadc2);
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <StartSensorAnalogTask+0x70>)
 8001810:	f000 fd94 	bl	800233c <HAL_ADC_Stop>

	        osDelay(1000);
 8001814:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001818:	f003 fdcb 	bl	80053b2 <osDelay>
	        HAL_ADC_Start(&hadc1);
 800181c:	e7d0      	b.n	80017c0 <StartSensorAnalogTask+0x8>
 800181e:	bf00      	nop
 8001820:	20000494 	.word	0x20000494
 8001824:	20000614 	.word	0x20000614
 8001828:	200004dc 	.word	0x200004dc

0800182c <StartSensorDHTTask>:


}

void StartSensorDHTTask(void const * argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2, sum, check;

	    for (;;)
	    {
	        DHT11_Start();
 8001834:	f7ff fc48 	bl	80010c8 <DHT11_Start>
	        if (DHT11_Check_Response())
 8001838:	f7ff fc6a 	bl	8001110 <DHT11_Check_Response>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d031      	beq.n	80018a6 <StartSensorDHTTask+0x7a>
	        {
	            Rh_byte1    = DHT11_Read();
 8001842:	f7ff fc9b 	bl	800117c <DHT11_Read>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
	            Rh_byte2    = DHT11_Read();
 800184a:	f7ff fc97 	bl	800117c <DHT11_Read>
 800184e:	4603      	mov	r3, r0
 8001850:	73bb      	strb	r3, [r7, #14]
	            Temp_byte1  = DHT11_Read();
 8001852:	f7ff fc93 	bl	800117c <DHT11_Read>
 8001856:	4603      	mov	r3, r0
 8001858:	737b      	strb	r3, [r7, #13]
	            Temp_byte2  = DHT11_Read();
 800185a:	f7ff fc8f 	bl	800117c <DHT11_Read>
 800185e:	4603      	mov	r3, r0
 8001860:	733b      	strb	r3, [r7, #12]
	            sum         = DHT11_Read();
 8001862:	f7ff fc8b 	bl	800117c <DHT11_Read>
 8001866:	4603      	mov	r3, r0
 8001868:	72fb      	strb	r3, [r7, #11]

	            check = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	4413      	add	r3, r2
 8001870:	b2da      	uxtb	r2, r3
 8001872:	7b7b      	ldrb	r3, [r7, #13]
 8001874:	4413      	add	r3, r2
 8001876:	b2da      	uxtb	r2, r3
 8001878:	7b3b      	ldrb	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	72bb      	strb	r3, [r7, #10]

	            if (check == sum)
 800187e:	7aba      	ldrb	r2, [r7, #10]
 8001880:	7afb      	ldrb	r3, [r7, #11]
 8001882:	429a      	cmp	r2, r3
 8001884:	d10f      	bne.n	80018a6 <StartSensorDHTTask+0x7a>
	            {

	                sensorData.humidity    = Rh_byte1;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <StartSensorDHTTask+0x94>)
 8001892:	edc3 7a02 	vstr	s15, [r3, #8]
	                sensorData.temperature = Temp_byte1;
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <StartSensorDHTTask+0x94>)
 80018a2:	edc3 7a01 	vstr	s15, [r3, #4]
	            }
	        }
    		xQueueSendToBack(xQueue, &sensorData, portMAX_DELAY);
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <StartSensorDHTTask+0x98>)
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018b0:	4903      	ldr	r1, [pc, #12]	@ (80018c0 <StartSensorDHTTask+0x94>)
 80018b2:	f003 ff0b 	bl	80056cc <xQueueGenericSend>


	        osDelay(1000);
 80018b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ba:	f003 fd7a 	bl	80053b2 <osDelay>
	        DHT11_Start();
 80018be:	e7b9      	b.n	8001834 <StartSensorDHTTask+0x8>
 80018c0:	20000614 	.word	0x20000614
 80018c4:	200005e0 	.word	0x200005e0

080018c8 <StartCanTxTask>:



}
void StartCanTxTask(void const * argument)
{
 80018c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018cc:	b09c      	sub	sp, #112	@ 0x70
 80018ce:	af06      	add	r7, sp, #24
 80018d0:	6078      	str	r0, [r7, #4]
	char uartBuf[64];
	    SensorData_t sensorData;

	    for(;;)
	    {
	    	if (xQueueReceive(xQueue, &sensorData, portMAX_DELAY) != HAL_OK)
 80018d2:	4b52      	ldr	r3, [pc, #328]	@ (8001a1c <StartCanTxTask+0x154>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f107 0108 	add.w	r1, r7, #8
 80018da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 fff6 	bl	80058d0 <xQueueReceive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <StartCanTxTask+0x32>
	    	{
	    		localCopy = sensorData;
 80018ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <StartCanTxTask+0x158>)
 80018ec:	461c      	mov	r4, r3
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	    	}

	        snprintf(uartBuf, sizeof(uartBuf), "LDR=%u, MQ5=%u, Temperature.=%.1fC, Humidity=%.1f%%\r\n",localCopy.ldr, localCopy.mq5, localCopy.temperature, localCopy.humidity);
 80018fa:	4b49      	ldr	r3, [pc, #292]	@ (8001a20 <StartCanTxTask+0x158>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	4698      	mov	r8, r3
 8001900:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <StartCanTxTask+0x158>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	461e      	mov	r6, r3
 8001906:	4b46      	ldr	r3, [pc, #280]	@ (8001a20 <StartCanTxTask+0x158>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe1c 	bl	8000548 <__aeabi_f2d>
 8001910:	4604      	mov	r4, r0
 8001912:	460d      	mov	r5, r1
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <StartCanTxTask+0x158>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe15 	bl	8000548 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	f107 0014 	add.w	r0, r7, #20
 8001926:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800192a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800192e:	9600      	str	r6, [sp, #0]
 8001930:	4643      	mov	r3, r8
 8001932:	4a3c      	ldr	r2, [pc, #240]	@ (8001a24 <StartCanTxTask+0x15c>)
 8001934:	2140      	movs	r1, #64	@ 0x40
 8001936:	f006 fbf3 	bl	8008120 <sniprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc96 	bl	8000270 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0114 	add.w	r1, r7, #20
 800194c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001950:	4835      	ldr	r0, [pc, #212]	@ (8001a28 <StartCanTxTask+0x160>)
 8001952:	f003 f907 	bl	8004b64 <HAL_UART_Transmit>

	        TxData[0] = (localCopy.ldr >> 8) & 0xFF;
 8001956:	4b32      	ldr	r3, [pc, #200]	@ (8001a20 <StartCanTxTask+0x158>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <StartCanTxTask+0x164>)
 8001962:	701a      	strb	r2, [r3, #0]
	        TxData[1] = localCopy.ldr & 0xFF;
 8001964:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <StartCanTxTask+0x158>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <StartCanTxTask+0x164>)
 800196c:	705a      	strb	r2, [r3, #1]
	        TxData[2] = (localCopy.mq5 >> 8) & 0xFF;
 800196e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <StartCanTxTask+0x158>)
 8001970:	885b      	ldrh	r3, [r3, #2]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <StartCanTxTask+0x164>)
 800197a:	709a      	strb	r2, [r3, #2]
	        TxData[3] = localCopy.mq5 & 0xFF;
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <StartCanTxTask+0x158>)
 800197e:	885b      	ldrh	r3, [r3, #2]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <StartCanTxTask+0x164>)
 8001984:	70da      	strb	r2, [r3, #3]

	        uint16_t tempInt = (uint16_t)(localCopy.temperature );
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <StartCanTxTask+0x158>)
 8001988:	edd3 7a01 	vldr	s15, [r3, #4]
 800198c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001990:	ee17 3a90 	vmov	r3, s15
 8001994:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	        uint16_t humInt = (uint16_t)(localCopy.humidity );
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <StartCanTxTask+0x158>)
 800199a:	edd3 7a02 	vldr	s15, [r3, #8]
 800199e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a2:	ee17 3a90 	vmov	r3, s15
 80019a6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

	        TxData[4] = (tempInt >> 8) & 0xFF;
 80019aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <StartCanTxTask+0x164>)
 80019b6:	711a      	strb	r2, [r3, #4]
	        TxData[5] = tempInt & 0xFF;
 80019b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <StartCanTxTask+0x164>)
 80019c0:	715a      	strb	r2, [r3, #5]
	        TxData[6] = (humInt >> 8) & 0xFF;
 80019c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <StartCanTxTask+0x164>)
 80019ce:	719a      	strb	r2, [r3, #6]
	        TxData[7] = humInt & 0xFF;
 80019d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <StartCanTxTask+0x164>)
 80019d8:	71da      	strb	r2, [r3, #7]

	        if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <StartCanTxTask+0x168>)
 80019dc:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <StartCanTxTask+0x164>)
 80019de:	4915      	ldr	r1, [pc, #84]	@ (8001a34 <StartCanTxTask+0x16c>)
 80019e0:	4815      	ldr	r0, [pc, #84]	@ (8001a38 <StartCanTxTask+0x170>)
 80019e2:	f001 f8d4 	bl	8002b8e <HAL_CAN_AddTxMessage>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <StartCanTxTask+0x132>
	        {
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // RED LED on Failure Transmission
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019f2:	4812      	ldr	r0, [pc, #72]	@ (8001a3c <StartCanTxTask+0x174>)
 80019f4:	f001 fe90 	bl	8003718 <HAL_GPIO_WritePin>
 80019f8:	e00a      	b.n	8001a10 <StartCanTxTask+0x148>
	        }
	        else
	        {
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);              // GREEN LED toggle on Successful Transmission
 80019fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019fe:	480f      	ldr	r0, [pc, #60]	@ (8001a3c <StartCanTxTask+0x174>)
 8001a00:	f001 fea3 	bl	800374a <HAL_GPIO_TogglePin>
	            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // RED LED off
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a0a:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <StartCanTxTask+0x174>)
 8001a0c:	f001 fe84 	bl	8003718 <HAL_GPIO_WritePin>
	        }

	        osDelay(8000);
 8001a10:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8001a14:	f003 fccd 	bl	80053b2 <osDelay>
	    {
 8001a18:	e75b      	b.n	80018d2 <StartCanTxTask+0xa>
 8001a1a:	bf00      	nop
 8001a1c:	200005e0 	.word	0x200005e0
 8001a20:	20000620 	.word	0x20000620
 8001a24:	0800bb84 	.word	0x0800bb84
 8001a28:	20000594 	.word	0x20000594
 8001a2c:	20000608 	.word	0x20000608
 8001a30:	20000610 	.word	0x20000610
 8001a34:	200005f0 	.word	0x200005f0
 8001a38:	20000524 	.word	0x20000524
 8001a3c:	40020c00 	.word	0x40020c00

08001a40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f003 fcb2 	bl	80053b2 <osDelay>
 8001a4e:	e7fb      	b.n	8001a48 <StartDefaultTask+0x8>

08001a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a62:	f000 fb35 	bl	80020d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40001000 	.word	0x40001000

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <Error_Handler+0x8>

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	f06f 0001 	mvn.w	r0, #1
 8001ac6:	f001 fc49 	bl	800335c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb0 <HAL_ADC_MspInit+0xd8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d128      	bne.n	8001b4c <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	481c      	ldr	r0, [pc, #112]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001b46:	f001 fc33 	bl	80033b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b4a:	e02c      	b.n	8001ba6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1a      	ldr	r2, [pc, #104]	@ (8001bbc <HAL_ADC_MspInit+0xe4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d127      	bne.n	8001ba6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_ADC_MspInit+0xdc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MQ5_Pin;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MQ5_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_ADC_MspInit+0xe0>)
 8001ba2:	f001 fc05 	bl	80033b0 <HAL_GPIO_Init>
}
 8001ba6:	bf00      	nop
 8001ba8:	3730      	adds	r7, #48	@ 0x30
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40012100 	.word	0x40012100

08001bc0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c54 <HAL_CAN_MspInit+0x94>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d134      	bne.n	8001c4c <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <HAL_CAN_MspInit+0x98>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_CAN_MspInit+0x98>)
 8001bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_CAN_MspInit+0x98>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_CAN_MspInit+0x98>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <HAL_CAN_MspInit+0x98>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_CAN_MspInit+0x98>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c2c:	2309      	movs	r3, #9
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <HAL_CAN_MspInit+0x9c>)
 8001c38:	f001 fbba 	bl	80033b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2105      	movs	r1, #5
 8001c40:	2013      	movs	r0, #19
 8001c42:	f001 fb8b 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c46:	2013      	movs	r0, #19
 8001c48:	f001 fba4 	bl	8003394 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	@ 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40006400 	.word	0x40006400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c70:	d10d      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_TIM_Base_MspInit+0x3c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <HAL_TIM_Base_MspInit+0x3c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_TIM_Base_MspInit+0x3c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_UART_MspInit+0x84>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d12b      	bne.n	8001d1a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a10      	ldr	r2, [pc, #64]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_UART_MspInit+0x88>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cfa:	2360      	movs	r3, #96	@ 0x60
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <HAL_UART_MspInit+0x8c>)
 8001d16:	f001 fb4b 	bl	80033b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	@ 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020c00 	.word	0x40020c00

08001d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	@ 0x38
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <HAL_InitTick+0xe4>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	4a32      	ldr	r2, [pc, #200]	@ (8001e14 <HAL_InitTick+0xe4>)
 8001d4a:	f043 0310 	orr.w	r3, r3, #16
 8001d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d50:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <HAL_InitTick+0xe4>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d5c:	f107 0210 	add.w	r2, r7, #16
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 f9a2 	bl	80040b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d76:	f002 f973 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8001d7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d7c:	e004      	b.n	8001d88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d7e:	f002 f96f 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8001d82:	4603      	mov	r3, r0
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d8a:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <HAL_InitTick+0xe8>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	3b01      	subs	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <HAL_InitTick+0xec>)
 8001d98:	4a21      	ldr	r2, [pc, #132]	@ (8001e20 <HAL_InitTick+0xf0>)
 8001d9a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <HAL_InitTick+0xec>)
 8001d9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <HAL_InitTick+0xec>)
 8001da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <HAL_InitTick+0xec>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_InitTick+0xec>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_InitTick+0xec>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001dbc:	4817      	ldr	r0, [pc, #92]	@ (8001e1c <HAL_InitTick+0xec>)
 8001dbe:	f002 f9a9 	bl	8004114 <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11b      	bne.n	8001e08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001dd0:	4812      	ldr	r0, [pc, #72]	@ (8001e1c <HAL_InitTick+0xec>)
 8001dd2:	f002 fa57 	bl	8004284 <HAL_TIM_Base_Start_IT>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d111      	bne.n	8001e08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001de4:	2036      	movs	r0, #54	@ 0x36
 8001de6:	f001 fad5 	bl	8003394 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d808      	bhi.n	8001e02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2036      	movs	r0, #54	@ 0x36
 8001df6:	f001 fab1 	bl	800335c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_InitTick+0xf4>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e002      	b.n	8001e08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3738      	adds	r7, #56	@ 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	2000062c 	.word	0x2000062c
 8001e20:	40001000 	.word	0x40001000
 8001e24:	20000004 	.word	0x20000004

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <CAN1_TX_IRQHandler+0x10>)
 8001e66:	f000 ff88 	bl	8002d7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000524 	.word	0x20000524

08001e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <TIM6_DAC_IRQHandler+0x10>)
 8001e7a:	f002 fa73 	bl	8004364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000062c 	.word	0x2000062c

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_kill>:

int _kill(int pid, int sig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea2:	f006 fa89 	bl	80083b8 <__errno>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2216      	movs	r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_exit>:

void _exit (int status)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe7 	bl	8001e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eca:	bf00      	nop
 8001ecc:	e7fd      	b.n	8001eca <_exit+0x12>

08001ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e00a      	b.n	8001ef6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee0:	f3af 8000 	nop.w
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	60ba      	str	r2, [r7, #8]
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf0      	blt.n	8001ee0 <_read+0x12>
  }

  return len;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e009      	b.n	8001f2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	60ba      	str	r2, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf1      	blt.n	8001f1a <_write+0x12>
  }
  return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_close>:

int _close(int file)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f68:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_isatty>:

int _isatty(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f006 f9ee 	bl	80083b8 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20020000 	.word	0x20020000
 8002008:	00000400 	.word	0x00000400
 800200c:	20000674 	.word	0x20000674
 8002010:	20004520 	.word	0x20004520

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <SystemInit+0x20>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <SystemInit+0x20>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800203c:	f7ff ffea 	bl	8002014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002042:	490d      	ldr	r1, [pc, #52]	@ (8002078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002058:	4c0a      	ldr	r4, [pc, #40]	@ (8002084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002066:	f006 f9ad 	bl	80083c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff f8ed 	bl	8001248 <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800207c:	0800c014 	.word	0x0800c014
  ldr r2, =_sbss
 8002080:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002084:	2000451c 	.word	0x2000451c

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>
	...

0800208c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002090:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	@ (80020cc <HAL_Init+0x40>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <HAL_Init+0x40>)
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	@ (80020cc <HAL_Init+0x40>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f001 f946 	bl	8003346 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	200f      	movs	r0, #15
 80020bc:	f7ff fe38 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fcde 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000678 	.word	0x20000678

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000678 	.word	0x20000678

08002110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e033      	b.n	800218e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fcd2 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002156:	f023 0302 	bic.w	r3, r3, #2
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fad8 	bl	8002718 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40
 800217e:	e001      	b.n	8002184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Start+0x1a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e0b2      	b.n	8002318 <HAL_ADC_Start+0x180>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d018      	beq.n	80021fa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021d8:	4b52      	ldr	r3, [pc, #328]	@ (8002324 <HAL_ADC_Start+0x18c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_ADC_Start+0x190>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9a      	lsrs	r2, r3, #18
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d17a      	bne.n	80022fe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002232:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002246:	d106      	bne.n	8002256 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	f023 0206 	bic.w	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	645a      	str	r2, [r3, #68]	@ 0x44
 8002254:	e002      	b.n	800225c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002264:	4b31      	ldr	r3, [pc, #196]	@ (800232c <HAL_ADC_Start+0x194>)
 8002266:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002270:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12a      	bne.n	80022d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2b      	ldr	r2, [pc, #172]	@ (8002330 <HAL_ADC_Start+0x198>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d015      	beq.n	80022b4 <HAL_ADC_Start+0x11c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a29      	ldr	r2, [pc, #164]	@ (8002334 <HAL_ADC_Start+0x19c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d105      	bne.n	800229e <HAL_ADC_Start+0x106>
 8002292:	4b26      	ldr	r3, [pc, #152]	@ (800232c <HAL_ADC_Start+0x194>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a25      	ldr	r2, [pc, #148]	@ (8002338 <HAL_ADC_Start+0x1a0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d136      	bne.n	8002316 <HAL_ADC_Start+0x17e>
 80022a8:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_ADC_Start+0x194>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d130      	bne.n	8002316 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d129      	bne.n	8002316 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	e020      	b.n	8002316 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a15      	ldr	r2, [pc, #84]	@ (8002330 <HAL_ADC_Start+0x198>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11b      	bne.n	8002316 <HAL_ADC_Start+0x17e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d114      	bne.n	8002316 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e00b      	b.n	8002316 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000000 	.word	0x20000000
 8002328:	431bde83 	.word	0x431bde83
 800232c:	40012300 	.word	0x40012300
 8002330:	40012000 	.word	0x40012000
 8002334:	40012100 	.word	0x40012100
 8002338:	40012200 	.word	0x40012200

0800233c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Stop+0x16>
 800234e:	2302      	movs	r3, #2
 8002350:	e021      	b.n	8002396 <HAL_ADC_Stop+0x5a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d113      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ce:	d10b      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e063      	b.n	80024b0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e8:	f7ff fe86 	bl	80020f8 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ee:	e021      	b.n	8002434 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f6:	d01d      	beq.n	8002434 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_ADC_PollForConversion+0x6c>
 80023fe:	f7ff fe7b 	bl	80020f8 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d212      	bcs.n	8002434 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d00b      	beq.n	8002434 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f043 0204 	orr.w	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e03d      	b.n	80024b0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d1d6      	bne.n	80023f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0212 	mvn.w	r2, #18
 800244a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d123      	bne.n	80024ae <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11f      	bne.n	80024ae <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002486:	2b00      	cmp	r3, #0
 8002488:	d111      	bne.n	80024ae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e105      	b.n	80026fc <HAL_ADC_ConfigChannel+0x228>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d925      	bls.n	800254c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3b1e      	subs	r3, #30
 8002516:	2207      	movs	r2, #7
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43da      	mvns	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	400a      	ands	r2, r1
 8002524:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68d9      	ldr	r1, [r3, #12]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	4603      	mov	r3, r0
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4403      	add	r3, r0
 800253e:	3b1e      	subs	r3, #30
 8002540:	409a      	lsls	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	e022      	b.n	8002592 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	2207      	movs	r2, #7
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	400a      	ands	r2, r1
 800256e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	4603      	mov	r3, r0
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4403      	add	r3, r0
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d824      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b05      	subs	r3, #5
 80025ac:	221f      	movs	r2, #31
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b05      	subs	r3, #5
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e2:	e04c      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d824      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b23      	subs	r3, #35	@ 0x23
 80025fe:	221f      	movs	r2, #31
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43da      	mvns	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b23      	subs	r3, #35	@ 0x23
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
 8002634:	e023      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b41      	subs	r3, #65	@ 0x41
 8002648:	221f      	movs	r2, #31
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b41      	subs	r3, #65	@ 0x41
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267e:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <HAL_ADC_ConfigChannel+0x234>)
 8002680:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a21      	ldr	r2, [pc, #132]	@ (800270c <HAL_ADC_ConfigChannel+0x238>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1cc>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b12      	cmp	r3, #18
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_ADC_ConfigChannel+0x238>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d123      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x21e>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d003      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x1e6>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	d11b      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d111      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_ADC_ConfigChannel+0x23c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a10      	ldr	r2, [pc, #64]	@ (8002714 <HAL_ADC_ConfigChannel+0x240>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	0c9a      	lsrs	r2, r3, #18
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026e4:	e002      	b.n	80026ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f9      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012300 	.word	0x40012300
 800270c:	40012000 	.word	0x40012000
 8002710:	20000000 	.word	0x20000000
 8002714:	431bde83 	.word	0x431bde83

08002718 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002720:	4b79      	ldr	r3, [pc, #484]	@ (8002908 <ADC_Init+0x1f0>)
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800274c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	021a      	lsls	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	4a58      	ldr	r2, [pc, #352]	@ (800290c <ADC_Init+0x1f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d022      	beq.n	80027f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6899      	ldr	r1, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	e00f      	b.n	8002816 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002814:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0202 	bic.w	r2, r2, #2
 8002824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6899      	ldr	r1, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7e1b      	ldrb	r3, [r3, #24]
 8002830:	005a      	lsls	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002852:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	3b01      	subs	r3, #1
 8002870:	035a      	lsls	r2, r3, #13
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	e007      	b.n	800288c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800289a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	051a      	lsls	r2, r3, #20
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ce:	025a      	lsls	r2, r3, #9
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	029a      	lsls	r2, r3, #10
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40012300 	.word	0x40012300
 800290c:	0f000001 	.word	0x0f000001

08002910 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0ed      	b.n	8002afe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff f946 	bl	8001bc0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002944:	f7ff fbd8 	bl	80020f8 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800294a:	e012      	b.n	8002972 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800294c:	f7ff fbd4 	bl	80020f8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b0a      	cmp	r3, #10
 8002958:	d90b      	bls.n	8002972 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2205      	movs	r2, #5
 800296a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0c5      	b.n	8002afe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0e5      	beq.n	800294c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0202 	bic.w	r2, r2, #2
 800298e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002990:	f7ff fbb2 	bl	80020f8 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002996:	e012      	b.n	80029be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002998:	f7ff fbae 	bl	80020f8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b0a      	cmp	r3, #10
 80029a4:	d90b      	bls.n	80029be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2205      	movs	r2, #5
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e09f      	b.n	8002afe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e5      	bne.n	8002998 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e1b      	ldrb	r3, [r3, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7e5b      	ldrb	r3, [r3, #25]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e9b      	ldrb	r3, [r3, #26]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e007      	b.n	8002a4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0220 	bic.w	r2, r2, #32
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7edb      	ldrb	r3, [r3, #27]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d108      	bne.n	8002a64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0210 	bic.w	r2, r2, #16
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0210 	orr.w	r2, r2, #16
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7f1b      	ldrb	r3, [r3, #28]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0208 	orr.w	r2, r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0208 	bic.w	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7f5b      	ldrb	r3, [r3, #29]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0204 	orr.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	ea42 0103 	orr.w	r1, r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12e      	bne.n	8002b78 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b32:	f7ff fae1 	bl	80020f8 <HAL_GetTick>
 8002b36:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b38:	e012      	b.n	8002b60 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b3a:	f7ff fadd 	bl	80020f8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b0a      	cmp	r3, #10
 8002b46:	d90b      	bls.n	8002b60 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2205      	movs	r2, #5
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e012      	b.n	8002b86 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e5      	bne.n	8002b3a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e006      	b.n	8002b86 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b089      	sub	sp, #36	@ 0x24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d003      	beq.n	8002bba <HAL_CAN_AddTxMessage+0x2c>
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	f040 80ad 	bne.w	8002d14 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8095 	beq.w	8002d04 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	0e1b      	lsrs	r3, r3, #24
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002be4:	2201      	movs	r2, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	409a      	lsls	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3318      	adds	r3, #24
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	440b      	add	r3, r1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e00f      	b.n	8002c32 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	440b      	add	r3, r1
 8002c30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3318      	adds	r3, #24
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	440b      	add	r3, r1
 8002c42:	3304      	adds	r3, #4
 8002c44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	7d1b      	ldrb	r3, [r3, #20]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d111      	bne.n	8002c72 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3318      	adds	r3, #24
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	6811      	ldr	r1, [r2, #0]
 8002c62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3318      	adds	r3, #24
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3304      	adds	r3, #4
 8002c70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3307      	adds	r3, #7
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	061a      	lsls	r2, r3, #24
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3306      	adds	r3, #6
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3305      	adds	r3, #5
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	3204      	adds	r2, #4
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	4610      	mov	r0, r2
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6811      	ldr	r1, [r2, #0]
 8002c9a:	ea43 0200 	orr.w	r2, r3, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002ca8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3303      	adds	r3, #3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	061a      	lsls	r2, r3, #24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	4610      	mov	r0, r2
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	6811      	ldr	r1, [r2, #0]
 8002cd0:	ea43 0200 	orr.w	r2, r3, r0
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002cde:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3318      	adds	r3, #24
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	4413      	add	r3, r2
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6811      	ldr	r1, [r2, #0]
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	440b      	add	r3, r1
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e00e      	b.n	8002d22 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e006      	b.n	8002d22 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d002      	beq.n	8002d4c <HAL_CAN_ActivateNotification+0x1e>
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d109      	bne.n	8002d60 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6959      	ldr	r1, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e006      	b.n	8002d6e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b08a      	sub	sp, #40	@ 0x28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d07c      	beq.n	8002eba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d023      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f983 	bl	80030e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002de2:	e016      	b.n	8002e12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df6:	e00c      	b.n	8002e12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0a:	e002      	b.n	8002e12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f989 	bl	8003124 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d024      	beq.n	8002e66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f963 	bl	80030fc <HAL_CAN_TxMailbox1CompleteCallback>
 8002e36:	e016      	b.n	8002e66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	e00c      	b.n	8002e66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	e002      	b.n	8002e66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f969 	bl	8003138 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d024      	beq.n	8002eba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f943 	bl	8003110 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e8a:	e016      	b.n	8002eba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9e:	e00c      	b.n	8002eba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb2:	e002      	b.n	8002eba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f949 	bl	800314c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f93a 	bl	8003174 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f921 	bl	8003160 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00c      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f91c 	bl	800319c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f903 	bl	8003188 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f906 	bl	80031b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8ff 	bl	80031c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d07b      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d072      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003034:	2b00      	cmp	r3, #0
 8003036:	d043      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03e      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003048:	2b60      	cmp	r3, #96	@ 0x60
 800304a:	d02b      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x32a>
 800304c:	2b60      	cmp	r3, #96	@ 0x60
 800304e:	d82e      	bhi.n	80030ae <HAL_CAN_IRQHandler+0x334>
 8003050:	2b50      	cmp	r3, #80	@ 0x50
 8003052:	d022      	beq.n	800309a <HAL_CAN_IRQHandler+0x320>
 8003054:	2b50      	cmp	r3, #80	@ 0x50
 8003056:	d82a      	bhi.n	80030ae <HAL_CAN_IRQHandler+0x334>
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d019      	beq.n	8003090 <HAL_CAN_IRQHandler+0x316>
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	d826      	bhi.n	80030ae <HAL_CAN_IRQHandler+0x334>
 8003060:	2b30      	cmp	r3, #48	@ 0x30
 8003062:	d010      	beq.n	8003086 <HAL_CAN_IRQHandler+0x30c>
 8003064:	2b30      	cmp	r3, #48	@ 0x30
 8003066:	d822      	bhi.n	80030ae <HAL_CAN_IRQHandler+0x334>
 8003068:	2b10      	cmp	r3, #16
 800306a:	d002      	beq.n	8003072 <HAL_CAN_IRQHandler+0x2f8>
 800306c:	2b20      	cmp	r3, #32
 800306e:	d005      	beq.n	800307c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003070:	e01d      	b.n	80030ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800307a:	e019      	b.n	80030b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003084:	e014      	b.n	80030b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	f043 0320 	orr.w	r3, r3, #32
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800308e:	e00f      	b.n	80030b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003098:	e00a      	b.n	80030b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030a2:	e005      	b.n	80030b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030ac:	e000      	b.n	80030b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80030ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80030be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2204      	movs	r2, #4
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f87c 	bl	80031d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030e0:	bf00      	nop
 80030e2:	3728      	adds	r7, #40	@ 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4907      	ldr	r1, [pc, #28]	@ (8003288 <__NVIC_EnableIRQ+0x38>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	@ (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	@ (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	@ 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff4c 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800336e:	f7ff ff61 	bl	8003234 <__NVIC_GetPriorityGrouping>
 8003372:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	6978      	ldr	r0, [r7, #20]
 800337a:	f7ff ffb1 	bl	80032e0 <NVIC_EncodePriority>
 800337e:	4602      	mov	r2, r0
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff80 	bl	800328c <__NVIC_SetPriority>
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff54 	bl	8003250 <__NVIC_EnableIRQ>
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e16b      	b.n	80036a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f040 815a 	bne.w	800369e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d005      	beq.n	8003402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d130      	bne.n	8003464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 0201 	and.w	r2, r3, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b03      	cmp	r3, #3
 800346e:	d017      	beq.n	80034a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d123      	bne.n	80034f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	08da      	lsrs	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3208      	adds	r2, #8
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80b4 	beq.w	800369e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b60      	ldr	r3, [pc, #384]	@ (80036bc <HAL_GPIO_Init+0x30c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	4a5f      	ldr	r2, [pc, #380]	@ (80036bc <HAL_GPIO_Init+0x30c>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003544:	6453      	str	r3, [r2, #68]	@ 0x44
 8003546:	4b5d      	ldr	r3, [pc, #372]	@ (80036bc <HAL_GPIO_Init+0x30c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003552:	4a5b      	ldr	r2, [pc, #364]	@ (80036c0 <HAL_GPIO_Init+0x310>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a52      	ldr	r2, [pc, #328]	@ (80036c4 <HAL_GPIO_Init+0x314>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02b      	beq.n	80035d6 <HAL_GPIO_Init+0x226>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a51      	ldr	r2, [pc, #324]	@ (80036c8 <HAL_GPIO_Init+0x318>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d025      	beq.n	80035d2 <HAL_GPIO_Init+0x222>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a50      	ldr	r2, [pc, #320]	@ (80036cc <HAL_GPIO_Init+0x31c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <HAL_GPIO_Init+0x21e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4f      	ldr	r2, [pc, #316]	@ (80036d0 <HAL_GPIO_Init+0x320>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d019      	beq.n	80035ca <HAL_GPIO_Init+0x21a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4e      	ldr	r2, [pc, #312]	@ (80036d4 <HAL_GPIO_Init+0x324>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0x216>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4d      	ldr	r2, [pc, #308]	@ (80036d8 <HAL_GPIO_Init+0x328>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00d      	beq.n	80035c2 <HAL_GPIO_Init+0x212>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	@ (80036dc <HAL_GPIO_Init+0x32c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <HAL_GPIO_Init+0x330>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_GPIO_Init+0x20a>
 80035b6:	2307      	movs	r3, #7
 80035b8:	e00e      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ba:	2308      	movs	r3, #8
 80035bc:	e00c      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035be:	2306      	movs	r3, #6
 80035c0:	e00a      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035c2:	2305      	movs	r3, #5
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x228>
 80035d6:	2300      	movs	r3, #0
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	@ (80036c0 <HAL_GPIO_Init+0x310>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f6:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361a:	4a32      	ldr	r2, [pc, #200]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003620:	4b30      	ldr	r3, [pc, #192]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003644:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800364a:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800366e:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003674:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003698:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_GPIO_Init+0x334>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f67f ae90 	bls.w	80033cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3724      	adds	r7, #36	@ 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e001      	b.n	800370a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003734:	e003      	b.n	800373e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4013      	ands	r3, r2
 8003762:	041a      	lsls	r2, r3, #16
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43d9      	mvns	r1, r3
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	400b      	ands	r3, r1
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e267      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800379e:	4b88      	ldr	r3, [pc, #544]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037aa:	4b85      	ldr	r3, [pc, #532]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d112      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b82      	ldr	r3, [pc, #520]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b7e      	ldr	r3, [pc, #504]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e242      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b76      	ldr	r3, [pc, #472]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a75      	ldr	r2, [pc, #468]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b70      	ldr	r3, [pc, #448]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6f      	ldr	r2, [pc, #444]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6c      	ldr	r2, [pc, #432]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b69      	ldr	r3, [pc, #420]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a68      	ldr	r2, [pc, #416]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b66      	ldr	r3, [pc, #408]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a65      	ldr	r2, [pc, #404]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fc5e 	bl	80020f8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fc5a 	bl	80020f8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e207      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b5b      	ldr	r3, [pc, #364]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fc4a 	bl	80020f8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fc46 	bl	80020f8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	@ 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1f3      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b51      	ldr	r3, [pc, #324]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003896:	4b4a      	ldr	r3, [pc, #296]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b44      	ldr	r3, [pc, #272]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b41      	ldr	r3, [pc, #260]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1c7      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4937      	ldr	r1, [pc, #220]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b34      	ldr	r3, [pc, #208]	@ (80039c4 <HAL_RCC_OscConfig+0x244>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fbff 	bl	80020f8 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe fbfb 	bl	80020f8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1a8      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4925      	ldr	r1, [pc, #148]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b24      	ldr	r3, [pc, #144]	@ (80039c4 <HAL_RCC_OscConfig+0x244>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fbde 	bl	80020f8 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7fe fbda 	bl	80020f8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e187      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d036      	beq.n	80039d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <HAL_RCC_OscConfig+0x248>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe fbbe 	bl	80020f8 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003980:	f7fe fbba 	bl	80020f8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e167      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
 800399e:	e01b      	b.n	80039d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_OscConfig+0x248>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fba7 	bl	80020f8 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e00e      	b.n	80039cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe fba3 	bl	80020f8 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d907      	bls.n	80039cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e150      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b88      	ldr	r3, [pc, #544]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ea      	bne.n	80039ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8097 	beq.w	8003b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b81      	ldr	r3, [pc, #516]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a06:	4b7a      	ldr	r3, [pc, #488]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b77      	ldr	r3, [pc, #476]	@ (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d118      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4b74      	ldr	r3, [pc, #464]	@ (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a73      	ldr	r2, [pc, #460]	@ (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fb63 	bl	80020f8 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fe fb5f 	bl	80020f8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e10c      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2ea>
 8003a5c:	4b64      	ldr	r3, [pc, #400]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a60:	4a63      	ldr	r2, [pc, #396]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x324>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x30c>
 8003a72:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x324>
 8003a8c:	4b58      	ldr	r3, [pc, #352]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a90:	4a57      	ldr	r2, [pc, #348]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a98:	4b55      	ldr	r3, [pc, #340]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a54      	ldr	r2, [pc, #336]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe fb24 	bl	80020f8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fb20 	bl	80020f8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0cb      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b49      	ldr	r3, [pc, #292]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x334>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7fe fb0e 	bl	80020f8 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe fb0a 	bl	80020f8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0b5      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af6:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b39      	ldr	r3, [pc, #228]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	4a38      	ldr	r2, [pc, #224]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a1 	beq.w	8003c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1e:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d05c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d141      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fade 	bl	80020f8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fada 	bl	80020f8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e087      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	491b      	ldr	r1, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fab3 	bl	80020f8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fe faaf 	bl	80020f8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e05c      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x416>
 8003bb4:	e054      	b.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fa9c 	bl	80020f8 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe fa98 	bl	80020f8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e045      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x444>
 8003be2:	e03d      	b.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e038      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <HAL_RCC_OscConfig+0x4ec>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d028      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d121      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cc      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b68      	ldr	r3, [pc, #416]	@ (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90c      	bls.n	8003cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b65      	ldr	r3, [pc, #404]	@ (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	@ (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d044      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e067      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b37      	ldr	r3, [pc, #220]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4934      	ldr	r1, [pc, #208]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe f9ca 	bl	80020f8 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe f9c6 	bl	80020f8 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e04f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b25      	ldr	r3, [pc, #148]	@ (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d20c      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b22      	ldr	r3, [pc, #136]	@ (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	@ (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	@ (8003e30 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd ff8a 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	0800bbc4 	.word	0x0800bbc4
 8003e34:	20000000 	.word	0x20000000
 8003e38:	20000004 	.word	0x20000004

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e40:	b094      	sub	sp, #80	@ 0x50
 8003e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e54:	4b79      	ldr	r3, [pc, #484]	@ (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x40>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	f200 80e1 	bhi.w	8004028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x34>
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e6e:	e0db      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b73      	ldr	r3, [pc, #460]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e74:	e0db      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e76:	4b73      	ldr	r3, [pc, #460]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e7a:	e0d8      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e86:	4b6d      	ldr	r3, [pc, #436]	@ (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	2200      	movs	r2, #0
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	6139      	str	r1, [r7, #16]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4651      	mov	r1, sl
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	4651      	mov	r1, sl
 8003ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb18 0303 	adds.w	r3, r8, r3
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	eb49 0303 	adc.w	r3, r9, r3
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	024b      	lsls	r3, r1, #9
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f38:	4621      	mov	r1, r4
 8003f3a:	024a      	lsls	r2, r1, #9
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f42:	2200      	movs	r2, #0
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f4c:	f7fc fe9c 	bl	8000c88 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f58:	e058      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b38      	ldr	r3, [pc, #224]	@ (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	4611      	mov	r1, r2
 8003f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	0159      	lsls	r1, r3, #5
 8003f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f86:	0150      	lsls	r0, r2, #5
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fac:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	00eb      	lsls	r3, r5, #3
 8003fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc2:	00e2      	lsls	r2, r4, #3
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	4643      	mov	r3, r8
 8003fca:	18e3      	adds	r3, r4, r3
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	464b      	mov	r3, r9
 8003fd0:	eb45 0303 	adc.w	r3, r5, r3
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	028b      	lsls	r3, r1, #10
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fec:	4621      	mov	r1, r4
 8003fee:	028a      	lsls	r2, r1, #10
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	61fa      	str	r2, [r7, #28]
 8003ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004000:	f7fc fe42 	bl	8000c88 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	3301      	adds	r3, #1
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800401c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x204>)
 800402a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004030:	4618      	mov	r0, r3
 8004032:	3750      	adds	r7, #80	@ 0x50
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	00f42400 	.word	0x00f42400
 8004044:	007a1200 	.word	0x007a1200

08004048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800404c:	4b03      	ldr	r3, [pc, #12]	@ (800405c <HAL_RCC_GetHCLKFreq+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000000 	.word	0x20000000

08004060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004064:	f7ff fff0 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0a9b      	lsrs	r3, r3, #10
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	@ (8004084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	0800bbd4 	.word	0x0800bbd4

08004088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800408c:	f7ff ffdc 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	0b5b      	lsrs	r3, r3, #13
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4903      	ldr	r1, [pc, #12]	@ (80040ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40023800 	.word	0x40023800
 80040ac:	0800bbd4 	.word	0x0800bbd4

080040b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	220f      	movs	r2, #15
 80040be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040c0:	4b12      	ldr	r3, [pc, #72]	@ (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0203 	and.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040e4:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	08db      	lsrs	r3, r3, #3
 80040ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <HAL_RCC_GetClockConfig+0x60>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	40023c00 	.word	0x40023c00

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e041      	b.n	80041aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd fd90 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 fae6 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e046      	b.n	800425a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a23      	ldr	r2, [pc, #140]	@ (8004268 <HAL_TIM_Base_Start+0xb4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e6:	d01d      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <HAL_TIM_Base_Start+0xb8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <HAL_TIM_Base_Start+0xbc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	@ (8004274 <HAL_TIM_Base_Start+0xc0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <HAL_TIM_Base_Start+0xc4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a19      	ldr	r2, [pc, #100]	@ (800427c <HAL_TIM_Base_Start+0xc8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_TIM_Base_Start+0x70>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a18      	ldr	r2, [pc, #96]	@ (8004280 <HAL_TIM_Base_Start+0xcc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d111      	bne.n	8004248 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b06      	cmp	r3, #6
 8004234:	d010      	beq.n	8004258 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	e007      	b.n	8004258 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40014000 	.word	0x40014000
 8004280:	40001800 	.word	0x40001800

08004284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d001      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e04e      	b.n	800433a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a23      	ldr	r2, [pc, #140]	@ (8004348 <HAL_TIM_Base_Start_IT+0xc4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d022      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c6:	d01d      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <HAL_TIM_Base_Start_IT+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004350 <HAL_TIM_Base_Start_IT+0xcc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d013      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <HAL_TIM_Base_Start_IT+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a19      	ldr	r2, [pc, #100]	@ (800435c <HAL_TIM_Base_Start_IT+0xd8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x80>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_TIM_Base_Start_IT+0xdc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d111      	bne.n	8004328 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b06      	cmp	r3, #6
 8004314:	d010      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	e007      	b.n	8004338 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40010400 	.word	0x40010400
 800435c:	40014000 	.word	0x40014000
 8004360:	40001800 	.word	0x40001800

08004364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0202 	mvn.w	r2, #2
 8004398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f999 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f98b 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f99c 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0204 	mvn.w	r2, #4
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2202      	movs	r2, #2
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f973 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f965 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f976 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0208 	mvn.w	r2, #8
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f94d 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f93f 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f950 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f927 	bl	80046e6 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f919 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f92a 	bl	80046fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0201 	mvn.w	r2, #1
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd fac0 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fade 	bl	8004ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8fb 	bl	800470e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0220 	mvn.w	r2, #32
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fab0 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIM_ConfigClockSource+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e0b4      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x186>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004598:	d03e      	beq.n	8004618 <HAL_TIM_ConfigClockSource+0xd4>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459e:	f200 8087 	bhi.w	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a6:	f000 8086 	beq.w	80046b6 <HAL_TIM_ConfigClockSource+0x172>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ae:	d87f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b70      	cmp	r3, #112	@ 0x70
 80045b2:	d01a      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xa6>
 80045b4:	2b70      	cmp	r3, #112	@ 0x70
 80045b6:	d87b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b60      	cmp	r3, #96	@ 0x60
 80045ba:	d050      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x11a>
 80045bc:	2b60      	cmp	r3, #96	@ 0x60
 80045be:	d877      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b50      	cmp	r3, #80	@ 0x50
 80045c2:	d03c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xfa>
 80045c4:	2b50      	cmp	r3, #80	@ 0x50
 80045c6:	d873      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d058      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x13a>
 80045cc:	2b40      	cmp	r3, #64	@ 0x40
 80045ce:	d86f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b30      	cmp	r3, #48	@ 0x30
 80045d2:	d064      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b30      	cmp	r3, #48	@ 0x30
 80045d6:	d86b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d060      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d867      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d05a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045e8:	e062      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045fa:	f000 f9b3 	bl	8004964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800460c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	609a      	str	r2, [r3, #8]
      break;
 8004616:	e04f      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004628:	f000 f99c 	bl	8004964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800463a:	609a      	str	r2, [r3, #8]
      break;
 800463c:	e03c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	461a      	mov	r2, r3
 800464c:	f000 f910 	bl	8004870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2150      	movs	r1, #80	@ 0x50
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f969 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 800465c:	e02c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	461a      	mov	r2, r3
 800466c:	f000 f92f 	bl	80048ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2160      	movs	r1, #96	@ 0x60
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f959 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 800467c:	e01c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	461a      	mov	r2, r3
 800468c:	f000 f8f0 	bl	8004870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2140      	movs	r1, #64	@ 0x40
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f949 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 800469c:	e00c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 f940 	bl	800492e <TIM_ITRx_SetConfig>
      break;
 80046ae:	e003      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e000      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a43      	ldr	r2, [pc, #268]	@ (8004844 <TIM_Base_SetConfig+0x120>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004742:	d00f      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a40      	ldr	r2, [pc, #256]	@ (8004848 <TIM_Base_SetConfig+0x124>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3f      	ldr	r2, [pc, #252]	@ (800484c <TIM_Base_SetConfig+0x128>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3e      	ldr	r2, [pc, #248]	@ (8004850 <TIM_Base_SetConfig+0x12c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3d      	ldr	r2, [pc, #244]	@ (8004854 <TIM_Base_SetConfig+0x130>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a32      	ldr	r2, [pc, #200]	@ (8004844 <TIM_Base_SetConfig+0x120>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02b      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004784:	d027      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2f      	ldr	r2, [pc, #188]	@ (8004848 <TIM_Base_SetConfig+0x124>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d023      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2e      	ldr	r2, [pc, #184]	@ (800484c <TIM_Base_SetConfig+0x128>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01f      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2d      	ldr	r2, [pc, #180]	@ (8004850 <TIM_Base_SetConfig+0x12c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01b      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004854 <TIM_Base_SetConfig+0x130>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d017      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004858 <TIM_Base_SetConfig+0x134>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	@ (800485c <TIM_Base_SetConfig+0x138>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a29      	ldr	r2, [pc, #164]	@ (8004860 <TIM_Base_SetConfig+0x13c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a28      	ldr	r2, [pc, #160]	@ (8004864 <TIM_Base_SetConfig+0x140>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a27      	ldr	r2, [pc, #156]	@ (8004868 <TIM_Base_SetConfig+0x144>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a26      	ldr	r2, [pc, #152]	@ (800486c <TIM_Base_SetConfig+0x148>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a0e      	ldr	r2, [pc, #56]	@ (8004844 <TIM_Base_SetConfig+0x120>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0xf2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a10      	ldr	r2, [pc, #64]	@ (8004854 <TIM_Base_SetConfig+0x130>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d103      	bne.n	800481e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f043 0204 	orr.w	r2, r3, #4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40010400 	.word	0x40010400
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800
 8004864:	40001800 	.word	0x40001800
 8004868:	40001c00 	.word	0x40001c00
 800486c:	40002000 	.word	0x40002000

08004870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800489a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 030a 	bic.w	r3, r3, #10
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b087      	sub	sp, #28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f023 0210 	bic.w	r2, r3, #16
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800490a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	f043 0307 	orr.w	r3, r3, #7
 8004950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800497e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e05a      	b.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a21      	ldr	r2, [pc, #132]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a08:	d01d      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1b      	ldr	r2, [pc, #108]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1a      	ldr	r2, [pc, #104]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a17      	ldr	r2, [pc, #92]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a15      	ldr	r2, [pc, #84]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10c      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40010400 	.word	0x40010400
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40001800 	.word	0x40001800

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e042      	b.n	8004b5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd f8d8 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	@ 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f973 	bl	8004df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	@ 0x28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d175      	bne.n	8004c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Transmit+0x2c>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e06e      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2221      	movs	r2, #33	@ 0x21
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba2:	f7fd faa9 	bl	80020f8 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bbc:	d108      	bne.n	8004bd0 <HAL_UART_Transmit+0x6c>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e003      	b.n	8004bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bd8:	e02e      	b.n	8004c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	@ 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f848 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e03a      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3302      	adds	r3, #2
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e007      	b.n	8004c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1cb      	bne.n	8004bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2140      	movs	r1, #64	@ 0x40
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f814 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	e03b      	b.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c92:	d037      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fd fa30 	bl	80020f8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	6a3a      	ldr	r2, [r7, #32]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e03a      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b80      	cmp	r3, #128	@ 0x80
 8004cc0:	d020      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d01d      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d116      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f81d 	bl	8004d2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e00f      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d0b4      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b095      	sub	sp, #84	@ 0x54
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d54:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc4:	61ba      	str	r2, [r7, #24]
 8004dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004de6:	bf00      	nop
 8004de8:	3754      	adds	r7, #84	@ 0x54
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df8:	b0c0      	sub	sp, #256	@ 0x100
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e10:	68d9      	ldr	r1, [r3, #12]
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	ea40 0301 	orr.w	r3, r0, r1
 8004e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e4c:	f021 010c 	bic.w	r1, r1, #12
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	6999      	ldr	r1, [r3, #24]
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	ea40 0301 	orr.w	r3, r0, r1
 8004e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b8f      	ldr	r3, [pc, #572]	@ (80050c0 <UART_SetConfig+0x2cc>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d005      	beq.n	8004e94 <UART_SetConfig+0xa0>
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80050c4 <UART_SetConfig+0x2d0>)
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d104      	bne.n	8004e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7ff f8f8 	bl	8004088 <HAL_RCC_GetPCLK2Freq>
 8004e98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e9c:	e003      	b.n	8004ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e9e:	f7ff f8df 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8004ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb0:	f040 810c 	bne.w	80050cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	462b      	mov	r3, r5
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	eb12 0801 	adds.w	r8, r2, r1
 8004edc:	4629      	mov	r1, r5
 8004ede:	eb43 0901 	adc.w	r9, r3, r1
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef6:	4690      	mov	r8, r2
 8004ef8:	4699      	mov	r9, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	eb18 0303 	adds.w	r3, r8, r3
 8004f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f04:	462b      	mov	r3, r5
 8004f06:	eb49 0303 	adc.w	r3, r9, r3
 8004f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f22:	460b      	mov	r3, r1
 8004f24:	18db      	adds	r3, r3, r3
 8004f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f28:	4613      	mov	r3, r2
 8004f2a:	eb42 0303 	adc.w	r3, r2, r3
 8004f2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f38:	f7fb fea6 	bl	8000c88 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4b61      	ldr	r3, [pc, #388]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8004f42:	fba3 2302 	umull	r2, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	011c      	lsls	r4, r3, #4
 8004f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	1891      	adds	r1, r2, r2
 8004f62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f64:	415b      	adcs	r3, r3
 8004f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb43 0b01 	adc.w	fp, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	469b      	mov	fp, r3
 8004f90:	4643      	mov	r3, r8
 8004f92:	eb1a 0303 	adds.w	r3, sl, r3
 8004f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	18db      	adds	r3, r3, r3
 8004fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fce:	f7fb fe5b 	bl	8000c88 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8004fda:	fba3 2301 	umull	r2, r3, r3, r1
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2264      	movs	r2, #100	@ 0x64
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	1acb      	subs	r3, r1, r3
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fee:	4b36      	ldr	r3, [pc, #216]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8004ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ffc:	441c      	add	r4, r3
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005008:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800500c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	1891      	adds	r1, r2, r2
 8005016:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005018:	415b      	adcs	r3, r3
 800501a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800501c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005020:	4641      	mov	r1, r8
 8005022:	1851      	adds	r1, r2, r1
 8005024:	6339      	str	r1, [r7, #48]	@ 0x30
 8005026:	4649      	mov	r1, r9
 8005028:	414b      	adcs	r3, r1
 800502a:	637b      	str	r3, [r7, #52]	@ 0x34
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005038:	4659      	mov	r1, fp
 800503a:	00cb      	lsls	r3, r1, #3
 800503c:	4651      	mov	r1, sl
 800503e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005042:	4651      	mov	r1, sl
 8005044:	00ca      	lsls	r2, r1, #3
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	4603      	mov	r3, r0
 800504c:	4642      	mov	r2, r8
 800504e:	189b      	adds	r3, r3, r2
 8005050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005054:	464b      	mov	r3, r9
 8005056:	460a      	mov	r2, r1
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800506c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005074:	460b      	mov	r3, r1
 8005076:	18db      	adds	r3, r3, r3
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507a:	4613      	mov	r3, r2
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800508a:	f7fb fdfd 	bl	8000c88 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <UART_SetConfig+0x2d4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2164      	movs	r1, #100	@ 0x64
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	3332      	adds	r3, #50	@ 0x32
 80050a6:	4a08      	ldr	r2, [pc, #32]	@ (80050c8 <UART_SetConfig+0x2d4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 0207 	and.w	r2, r3, #7
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4422      	add	r2, r4
 80050ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050bc:	e106      	b.n	80052cc <UART_SetConfig+0x4d8>
 80050be:	bf00      	nop
 80050c0:	40011000 	.word	0x40011000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050de:	4642      	mov	r2, r8
 80050e0:	464b      	mov	r3, r9
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	6239      	str	r1, [r7, #32]
 80050e6:	415b      	adcs	r3, r3
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ee:	4641      	mov	r1, r8
 80050f0:	1854      	adds	r4, r2, r1
 80050f2:	4649      	mov	r1, r9
 80050f4:	eb43 0501 	adc.w	r5, r3, r1
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	00eb      	lsls	r3, r5, #3
 8005102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005106:	00e2      	lsls	r2, r4, #3
 8005108:	4614      	mov	r4, r2
 800510a:	461d      	mov	r5, r3
 800510c:	4643      	mov	r3, r8
 800510e:	18e3      	adds	r3, r4, r3
 8005110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005114:	464b      	mov	r3, r9
 8005116:	eb45 0303 	adc.w	r3, r5, r3
 800511a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800512a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800513a:	4629      	mov	r1, r5
 800513c:	008b      	lsls	r3, r1, #2
 800513e:	4621      	mov	r1, r4
 8005140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005144:	4621      	mov	r1, r4
 8005146:	008a      	lsls	r2, r1, #2
 8005148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800514c:	f7fb fd9c 	bl	8000c88 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4b60      	ldr	r3, [pc, #384]	@ (80052d8 <UART_SetConfig+0x4e4>)
 8005156:	fba3 2302 	umull	r2, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	011c      	lsls	r4, r3, #4
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005168:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800516c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	61b9      	str	r1, [r7, #24]
 8005178:	415b      	adcs	r3, r3
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005180:	4641      	mov	r1, r8
 8005182:	1851      	adds	r1, r2, r1
 8005184:	6139      	str	r1, [r7, #16]
 8005186:	4649      	mov	r1, r9
 8005188:	414b      	adcs	r3, r1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005198:	4659      	mov	r1, fp
 800519a:	00cb      	lsls	r3, r1, #3
 800519c:	4651      	mov	r1, sl
 800519e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a2:	4651      	mov	r1, sl
 80051a4:	00ca      	lsls	r2, r1, #3
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	4642      	mov	r2, r8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051b4:	464b      	mov	r3, r9
 80051b6:	460a      	mov	r2, r1
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051d8:	4649      	mov	r1, r9
 80051da:	008b      	lsls	r3, r1, #2
 80051dc:	4641      	mov	r1, r8
 80051de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e2:	4641      	mov	r1, r8
 80051e4:	008a      	lsls	r2, r1, #2
 80051e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051ea:	f7fb fd4d 	bl	8000c88 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	4b38      	ldr	r3, [pc, #224]	@ (80052d8 <UART_SetConfig+0x4e4>)
 80051f6:	fba3 2301 	umull	r2, r3, r3, r1
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2264      	movs	r2, #100	@ 0x64
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	1acb      	subs	r3, r1, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	3332      	adds	r3, #50	@ 0x32
 8005208:	4a33      	ldr	r2, [pc, #204]	@ (80052d8 <UART_SetConfig+0x4e4>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005214:	441c      	add	r4, r3
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	673b      	str	r3, [r7, #112]	@ 0x70
 800521e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005220:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	415b      	adcs	r3, r3
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005266:	464b      	mov	r3, r9
 8005268:	460a      	mov	r2, r1
 800526a:	eb42 0303 	adc.w	r3, r2, r3
 800526e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	663b      	str	r3, [r7, #96]	@ 0x60
 800527a:	667a      	str	r2, [r7, #100]	@ 0x64
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005288:	4649      	mov	r1, r9
 800528a:	008b      	lsls	r3, r1, #2
 800528c:	4641      	mov	r1, r8
 800528e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005292:	4641      	mov	r1, r8
 8005294:	008a      	lsls	r2, r1, #2
 8005296:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800529a:	f7fb fcf5 	bl	8000c88 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <UART_SetConfig+0x4e4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	@ 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	3332      	adds	r3, #50	@ 0x32
 80052b6:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <UART_SetConfig+0x4e4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4422      	add	r2, r4
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d8:	51eb851f 	.word	0x51eb851f

080052dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ee:	2b84      	cmp	r3, #132	@ 0x84
 80052f0:	d005      	beq.n	80052fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	3303      	adds	r3, #3
 80052fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052fe:	68fb      	ldr	r3, [r7, #12]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005310:	f000 feb6 	bl	8006080 <vTaskStartScheduler>
  
  return osOK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	bd80      	pop	{r7, pc}

0800531a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800531a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531c:	b089      	sub	sp, #36	@ 0x24
 800531e:	af04      	add	r7, sp, #16
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d020      	beq.n	800536e <osThreadCreate+0x54>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01c      	beq.n	800536e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685c      	ldr	r4, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691e      	ldr	r6, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ffc8 	bl	80052dc <makeFreeRtosPriority>
 800534c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005356:	9202      	str	r2, [sp, #8]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	9100      	str	r1, [sp, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4632      	mov	r2, r6
 8005360:	4629      	mov	r1, r5
 8005362:	4620      	mov	r0, r4
 8005364:	f000 fca6 	bl	8005cb4 <xTaskCreateStatic>
 8005368:	4603      	mov	r3, r0
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e01c      	b.n	80053a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685c      	ldr	r4, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800537a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ffaa 	bl	80052dc <makeFreeRtosPriority>
 8005388:	4602      	mov	r2, r0
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	9200      	str	r2, [sp, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	4632      	mov	r2, r6
 8005396:	4629      	mov	r1, r5
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fceb 	bl	8005d74 <xTaskCreate>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d001      	beq.n	80053a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <osDelay+0x16>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	e000      	b.n	80053ca <osDelay+0x18>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fe22 	bl	8006014 <vTaskDelay>
  
  return osOK;
 80053d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f103 0208 	add.w	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f103 0208 	add.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 0208 	add.w	r2, r3, #8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005492:	d103      	bne.n	800549c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e00c      	b.n	80054b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3308      	adds	r3, #8
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e002      	b.n	80054aa <vListInsert+0x2e>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d2f6      	bcs.n	80054a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6892      	ldr	r2, [r2, #8]
 8005504:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6852      	ldr	r2, [r2, #4]
 800550e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d103      	bne.n	8005522 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005570:	f001 fbe2 	bl	8006d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	441a      	add	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	441a      	add	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	22ff      	movs	r2, #255	@ 0xff
 80055b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	22ff      	movs	r2, #255	@ 0xff
 80055bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d114      	bne.n	80055f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01a      	beq.n	8005604 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3310      	adds	r3, #16
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 ffae 	bl	8006534 <xTaskRemoveFromEventList>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d012      	beq.n	8005604 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <xQueueGenericReset+0xd0>)
 80055e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	e009      	b.n	8005604 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3310      	adds	r3, #16
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fef0 	bl	80053da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3324      	adds	r3, #36	@ 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff feeb 	bl	80053da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005604:	f001 fbca 	bl	8006d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005608:	2301      	movs	r3, #1
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	@ 0x28
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	4613      	mov	r3, r2
 8005624:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <xQueueGenericCreate+0x2c>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	613b      	str	r3, [r7, #16]
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3348      	adds	r3, #72	@ 0x48
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fc50 	bl	8006ef8 <pvPortMalloc>
 8005658:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3348      	adds	r3, #72	@ 0x48
 8005668:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005672:	79fa      	ldrb	r2, [r7, #7]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f805 	bl	800568e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005684:	69bb      	ldr	r3, [r7, #24]
	}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e002      	b.n	80056b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056bc:	2101      	movs	r1, #1
 80056be:	69b8      	ldr	r0, [r7, #24]
 80056c0:	f7ff ff40 	bl	8005544 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08e      	sub	sp, #56	@ 0x38
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056da:	2300      	movs	r3, #0
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <xQueueGenericSend+0x34>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <xQueueGenericSend+0x42>
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueGenericSend+0x46>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueGenericSend+0x48>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <xQueueGenericSend+0x64>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d103      	bne.n	800573e <xQueueGenericSend+0x72>
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <xQueueGenericSend+0x76>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <xQueueGenericSend+0x78>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <xQueueGenericSend+0x94>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	623b      	str	r3, [r7, #32]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005760:	f001 f8ae 	bl	80068c0 <xTaskGetSchedulerState>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <xQueueGenericSend+0xa4>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <xQueueGenericSend+0xa8>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <xQueueGenericSend+0xaa>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <xQueueGenericSend+0xc6>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61fb      	str	r3, [r7, #28]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005792:	f001 fad1 	bl	8006d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <xQueueGenericSend+0xdc>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d129      	bne.n	80057fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057ae:	f000 f971 	bl	8005a94 <prvCopyDataToQueue>
 80057b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	3324      	adds	r3, #36	@ 0x24
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 feb7 	bl	8006534 <xTaskRemoveFromEventList>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d013      	beq.n	80057f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057cc:	4b3f      	ldr	r3, [pc, #252]	@ (80058cc <xQueueGenericSend+0x200>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	e00a      	b.n	80057f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057e4:	4b39      	ldr	r3, [pc, #228]	@ (80058cc <xQueueGenericSend+0x200>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f4:	f001 fad2 	bl	8006d9c <vPortExitCritical>
				return pdPASS;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e063      	b.n	80058c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005802:	f001 facb 	bl	8006d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005806:	2300      	movs	r3, #0
 8005808:	e05c      	b.n	80058c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fef1 	bl	80065fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800581e:	f001 fabd 	bl	8006d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005822:	f000 fc97 	bl	8006154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005826:	f001 fa87 	bl	8006d38 <vPortEnterCritical>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005830:	b25b      	sxtb	r3, r3
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005836:	d103      	bne.n	8005840 <xQueueGenericSend+0x174>
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005846:	b25b      	sxtb	r3, r3
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800584c:	d103      	bne.n	8005856 <xQueueGenericSend+0x18a>
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005856:	f001 faa1 	bl	8006d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800585a:	1d3a      	adds	r2, r7, #4
 800585c:	f107 0314 	add.w	r3, r7, #20
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fee0 	bl	8006628 <xTaskCheckForTimeOut>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d124      	bne.n	80058b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800586e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005870:	f000 fa08 	bl	8005c84 <prvIsQueueFull>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d018      	beq.n	80058ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	3310      	adds	r3, #16
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fe30 	bl	80064e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800588a:	f000 f993 	bl	8005bb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800588e:	f000 fc6f 	bl	8006170 <xTaskResumeAll>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	f47f af7c 	bne.w	8005792 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800589a:	4b0c      	ldr	r3, [pc, #48]	@ (80058cc <xQueueGenericSend+0x200>)
 800589c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	e772      	b.n	8005792 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ae:	f000 f981 	bl	8005bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b2:	f000 fc5d 	bl	8006170 <xTaskResumeAll>
 80058b6:	e76c      	b.n	8005792 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ba:	f000 f97b 	bl	8005bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058be:	f000 fc57 	bl	8006170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3738      	adds	r7, #56	@ 0x38
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <xQueueReceive+0x32>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	623b      	str	r3, [r7, #32]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <xQueueReceive+0x40>
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <xQueueReceive+0x44>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <xQueueReceive+0x46>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <xQueueReceive+0x62>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	61fb      	str	r3, [r7, #28]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005932:	f000 ffc5 	bl	80068c0 <xTaskGetSchedulerState>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <xQueueReceive+0x72>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <xQueueReceive+0x76>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueReceive+0x78>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueReceive+0x94>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	61bb      	str	r3, [r7, #24]
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005964:	f001 f9e8 	bl	8006d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01f      	beq.n	80059b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005978:	f000 f8f6 	bl	8005b68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00f      	beq.n	80059ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	3310      	adds	r3, #16
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fdcf 	bl	8006534 <xTaskRemoveFromEventList>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800599c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a90 <xQueueReceive+0x1c0>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059ac:	f001 f9f6 	bl	8006d9c <vPortExitCritical>
				return pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e069      	b.n	8005a88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ba:	f001 f9ef 	bl	8006d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059be:	2300      	movs	r3, #0
 80059c0:	e062      	b.n	8005a88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fe15 	bl	80065fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059d6:	f001 f9e1 	bl	8006d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059da:	f000 fbbb 	bl	8006154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059de:	f001 f9ab 	bl	8006d38 <vPortEnterCritical>
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ee:	d103      	bne.n	80059f8 <xQueueReceive+0x128>
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059fe:	b25b      	sxtb	r3, r3
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a04:	d103      	bne.n	8005a0e <xQueueReceive+0x13e>
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a0e:	f001 f9c5 	bl	8006d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a12:	1d3a      	adds	r2, r7, #4
 8005a14:	f107 0310 	add.w	r3, r7, #16
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fe04 	bl	8006628 <xTaskCheckForTimeOut>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d123      	bne.n	8005a6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a28:	f000 f916 	bl	8005c58 <prvIsQueueEmpty>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	3324      	adds	r3, #36	@ 0x24
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fd54 	bl	80064e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a42:	f000 f8b7 	bl	8005bb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a46:	f000 fb93 	bl	8006170 <xTaskResumeAll>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d189      	bne.n	8005964 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a50:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <xQueueReceive+0x1c0>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	e780      	b.n	8005964 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a64:	f000 f8a6 	bl	8005bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a68:	f000 fb82 	bl	8006170 <xTaskResumeAll>
 8005a6c:	e77a      	b.n	8005964 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a70:	f000 f8a0 	bl	8005bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a74:	f000 fb7c 	bl	8006170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7a:	f000 f8ed 	bl	8005c58 <prvIsQueueEmpty>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f43f af6f 	beq.w	8005964 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3730      	adds	r7, #48	@ 0x30
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d14d      	bne.n	8005b56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 ff1c 	bl	80068fc <xTaskPriorityDisinherit>
 8005ac4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	e043      	b.n	8005b56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d119      	bne.n	8005b08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6858      	ldr	r0, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	461a      	mov	r2, r3
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	f002 fc97 	bl	8008412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	441a      	add	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d32b      	bcc.n	8005b56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	e026      	b.n	8005b56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68d8      	ldr	r0, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	461a      	mov	r2, r3
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	f002 fc7d 	bl	8008412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	425b      	negs	r3, r3
 8005b22:	441a      	add	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d207      	bcs.n	8005b44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	425b      	negs	r3, r3
 8005b3e:	441a      	add	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d105      	bne.n	8005b56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b5e:	697b      	ldr	r3, [r7, #20]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d018      	beq.n	8005bac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	441a      	add	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d303      	bcc.n	8005b9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68d9      	ldr	r1, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6838      	ldr	r0, [r7, #0]
 8005ba8:	f002 fc33 	bl	8008412 <memcpy>
	}
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bbc:	f001 f8bc 	bl	8006d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bc8:	e011      	b.n	8005bee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d012      	beq.n	8005bf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3324      	adds	r3, #36	@ 0x24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fcac 	bl	8006534 <xTaskRemoveFromEventList>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005be2:	f000 fd85 	bl	80066f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	dce9      	bgt.n	8005bca <prvUnlockQueue+0x16>
 8005bf6:	e000      	b.n	8005bfa <prvUnlockQueue+0x46>
					break;
 8005bf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	22ff      	movs	r2, #255	@ 0xff
 8005bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c02:	f001 f8cb 	bl	8006d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c06:	f001 f897 	bl	8006d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c12:	e011      	b.n	8005c38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d012      	beq.n	8005c42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3310      	adds	r3, #16
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fc87 	bl	8006534 <xTaskRemoveFromEventList>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c2c:	f000 fd60 	bl	80066f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dce9      	bgt.n	8005c14 <prvUnlockQueue+0x60>
 8005c40:	e000      	b.n	8005c44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	22ff      	movs	r2, #255	@ 0xff
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005c4c:	f001 f8a6 	bl	8006d9c <vPortExitCritical>
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c60:	f001 f86a 	bl	8006d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e001      	b.n	8005c76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c76:	f001 f891 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c8c:	f001 f854 	bl	8006d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d102      	bne.n	8005ca2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e001      	b.n	8005ca6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ca6:	f001 f879 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08e      	sub	sp, #56	@ 0x38
 8005cb8:	af04      	add	r7, sp, #16
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	623b      	str	r3, [r7, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	61fb      	str	r3, [r7, #28]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cfe:	23a0      	movs	r3, #160	@ 0xa0
 8005d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d06:	d00b      	beq.n	8005d20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	61bb      	str	r3, [r7, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	e7fd      	b.n	8005d1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01e      	beq.n	8005d66 <xTaskCreateStatic+0xb2>
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01b      	beq.n	8005d66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d40:	2300      	movs	r3, #0
 8005d42:	9303      	str	r3, [sp, #12]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	9302      	str	r3, [sp, #8]
 8005d48:	f107 0314 	add.w	r3, r7, #20
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f851 	bl	8005e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d60:	f000 f8ee 	bl	8005f40 <prvAddNewTaskToReadyList>
 8005d64:	e001      	b.n	8005d6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d6a:	697b      	ldr	r3, [r7, #20]
	}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3728      	adds	r7, #40	@ 0x28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	@ 0x30
 8005d78:	af04      	add	r7, sp, #16
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f8b5 	bl	8006ef8 <pvPortMalloc>
 8005d8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00e      	beq.n	8005db4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d96:	20a0      	movs	r0, #160	@ 0xa0
 8005d98:	f001 f8ae 	bl	8006ef8 <pvPortMalloc>
 8005d9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005daa:	e005      	b.n	8005db8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dac:	6978      	ldr	r0, [r7, #20]
 8005dae:	f001 f971 	bl	8007094 <vPortFree>
 8005db2:	e001      	b.n	8005db8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d017      	beq.n	8005dee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9303      	str	r3, [sp, #12]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f80f 	bl	8005e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005de2:	69f8      	ldr	r0, [r7, #28]
 8005de4:	f000 f8ac 	bl	8005f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005de8:	2301      	movs	r3, #1
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	e002      	b.n	8005df4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005df2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005df4:	69bb      	ldr	r3, [r7, #24]
	}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f023 0307 	bic.w	r3, r3, #7
 8005e26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	617b      	str	r3, [r7, #20]
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01f      	beq.n	8005e90 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e012      	b.n	8005e7c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	7819      	ldrb	r1, [r3, #0]
 8005e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	3334      	adds	r3, #52	@ 0x34
 8005e66:	460a      	mov	r2, r1
 8005e68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d006      	beq.n	8005e84 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b0f      	cmp	r3, #15
 8005e80:	d9e9      	bls.n	8005e56 <prvInitialiseNewTask+0x56>
 8005e82:	e000      	b.n	8005e86 <prvInitialiseNewTask+0x86>
			{
				break;
 8005e84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e8e:	e003      	b.n	8005e98 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d901      	bls.n	8005ea2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e9e:	2306      	movs	r3, #6
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff faae 	bl	800541a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff faa9 	bl	800541a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ecc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	f1c3 0207 	rsb	r2, r3, #7
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	334c      	adds	r3, #76	@ 0x4c
 8005ef2:	224c      	movs	r2, #76	@ 0x4c
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f002 f9ad 	bl	8008256 <memset>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	4a0d      	ldr	r2, [pc, #52]	@ (8005f34 <prvInitialiseNewTask+0x134>)
 8005f00:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	4a0c      	ldr	r2, [pc, #48]	@ (8005f38 <prvInitialiseNewTask+0x138>)
 8005f06:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f3c <prvInitialiseNewTask+0x13c>)
 8005f0c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	69b8      	ldr	r0, [r7, #24]
 8005f14:	f000 fde0 	bl	8006ad8 <pxPortInitialiseStack>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200043d0 	.word	0x200043d0
 8005f38:	20004438 	.word	0x20004438
 8005f3c:	200044a0 	.word	0x200044a0

08005f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f48:	f000 fef6 	bl	8006d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff8 <prvAddNewTaskToReadyList+0xb8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a29      	ldr	r2, [pc, #164]	@ (8005ff8 <prvAddNewTaskToReadyList+0xb8>)
 8005f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f56:	4b29      	ldr	r3, [pc, #164]	@ (8005ffc <prvAddNewTaskToReadyList+0xbc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f5e:	4a27      	ldr	r2, [pc, #156]	@ (8005ffc <prvAddNewTaskToReadyList+0xbc>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f64:	4b24      	ldr	r3, [pc, #144]	@ (8005ff8 <prvAddNewTaskToReadyList+0xb8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d110      	bne.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f6c:	f000 fbe4 	bl	8006738 <prvInitialiseTaskLists>
 8005f70:	e00d      	b.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f72:	4b23      	ldr	r3, [pc, #140]	@ (8006000 <prvAddNewTaskToReadyList+0xc0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f7a:	4b20      	ldr	r3, [pc, #128]	@ (8005ffc <prvAddNewTaskToReadyList+0xbc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d802      	bhi.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f88:	4a1c      	ldr	r2, [pc, #112]	@ (8005ffc <prvAddNewTaskToReadyList+0xbc>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a1b      	ldr	r2, [pc, #108]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	4b19      	ldr	r3, [pc, #100]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a18      	ldr	r2, [pc, #96]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4a15      	ldr	r2, [pc, #84]	@ (800600c <prvAddNewTaskToReadyList+0xcc>)
 8005fb8:	441a      	add	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f7ff fa37 	bl	8005434 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fc6:	f000 fee9 	bl	8006d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <prvAddNewTaskToReadyList+0xc0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00e      	beq.n	8005ff0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <prvAddNewTaskToReadyList+0xbc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d207      	bcs.n	8005ff0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	2000077c 	.word	0x2000077c
 8005ffc:	2000067c 	.word	0x2000067c
 8006000:	20000788 	.word	0x20000788
 8006004:	20000798 	.word	0x20000798
 8006008:	20000784 	.word	0x20000784
 800600c:	20000680 	.word	0x20000680
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d018      	beq.n	8006058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006026:	4b14      	ldr	r3, [pc, #80]	@ (8006078 <vTaskDelay+0x64>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <vTaskDelay+0x32>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006046:	f000 f885 	bl	8006154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800604a:	2100      	movs	r1, #0
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fcdd 	bl	8006a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006052:	f000 f88d 	bl	8006170 <xTaskResumeAll>
 8006056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800605e:	4b07      	ldr	r3, [pc, #28]	@ (800607c <vTaskDelay+0x68>)
 8006060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	200007a4 	.word	0x200007a4
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	@ 0x28
 8006084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800608e:	463a      	mov	r2, r7
 8006090:	1d39      	adds	r1, r7, #4
 8006092:	f107 0308 	add.w	r3, r7, #8
 8006096:	4618      	mov	r0, r3
 8006098:	f7fb f8bc 	bl	8001214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	9202      	str	r2, [sp, #8]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	2300      	movs	r3, #0
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2300      	movs	r3, #0
 80060ac:	460a      	mov	r2, r1
 80060ae:	4921      	ldr	r1, [pc, #132]	@ (8006134 <vTaskStartScheduler+0xb4>)
 80060b0:	4821      	ldr	r0, [pc, #132]	@ (8006138 <vTaskStartScheduler+0xb8>)
 80060b2:	f7ff fdff 	bl	8005cb4 <xTaskCreateStatic>
 80060b6:	4603      	mov	r3, r0
 80060b8:	4a20      	ldr	r2, [pc, #128]	@ (800613c <vTaskStartScheduler+0xbc>)
 80060ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060bc:	4b1f      	ldr	r3, [pc, #124]	@ (800613c <vTaskStartScheduler+0xbc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060c4:	2301      	movs	r3, #1
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	e001      	b.n	80060ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d11b      	bne.n	800610c <vTaskStartScheduler+0x8c>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	613b      	str	r3, [r7, #16]
}
 80060e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e8:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <vTaskStartScheduler+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	334c      	adds	r3, #76	@ 0x4c
 80060ee:	4a15      	ldr	r2, [pc, #84]	@ (8006144 <vTaskStartScheduler+0xc4>)
 80060f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060f2:	4b15      	ldr	r3, [pc, #84]	@ (8006148 <vTaskStartScheduler+0xc8>)
 80060f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060fa:	4b14      	ldr	r3, [pc, #80]	@ (800614c <vTaskStartScheduler+0xcc>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006100:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <vTaskStartScheduler+0xd0>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006106:	f000 fd73 	bl	8006bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800610a:	e00f      	b.n	800612c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006112:	d10b      	bne.n	800612c <vTaskStartScheduler+0xac>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <vTaskStartScheduler+0xa8>
}
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	0800bbbc 	.word	0x0800bbbc
 8006138:	08006709 	.word	0x08006709
 800613c:	200007a0 	.word	0x200007a0
 8006140:	2000067c 	.word	0x2000067c
 8006144:	2000001c 	.word	0x2000001c
 8006148:	2000079c 	.word	0x2000079c
 800614c:	20000788 	.word	0x20000788
 8006150:	20000780 	.word	0x20000780

08006154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006158:	4b04      	ldr	r3, [pc, #16]	@ (800616c <vTaskSuspendAll+0x18>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	4a03      	ldr	r2, [pc, #12]	@ (800616c <vTaskSuspendAll+0x18>)
 8006160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	200007a4 	.word	0x200007a4

08006170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800617e:	4b42      	ldr	r3, [pc, #264]	@ (8006288 <xTaskResumeAll+0x118>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <xTaskResumeAll+0x2e>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	603b      	str	r3, [r7, #0]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800619e:	f000 fdcb 	bl	8006d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061a2:	4b39      	ldr	r3, [pc, #228]	@ (8006288 <xTaskResumeAll+0x118>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4a37      	ldr	r2, [pc, #220]	@ (8006288 <xTaskResumeAll+0x118>)
 80061aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ac:	4b36      	ldr	r3, [pc, #216]	@ (8006288 <xTaskResumeAll+0x118>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d161      	bne.n	8006278 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061b4:	4b35      	ldr	r3, [pc, #212]	@ (800628c <xTaskResumeAll+0x11c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d05d      	beq.n	8006278 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061bc:	e02e      	b.n	800621c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061be:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <xTaskResumeAll+0x120>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3318      	adds	r3, #24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff f98f 	bl	80054ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff f98a 	bl	80054ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	2201      	movs	r2, #1
 80061e0:	409a      	lsls	r2, r3
 80061e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006294 <xTaskResumeAll+0x124>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006294 <xTaskResumeAll+0x124>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a27      	ldr	r2, [pc, #156]	@ (8006298 <xTaskResumeAll+0x128>)
 80061fa:	441a      	add	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7ff f916 	bl	8005434 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620c:	4b23      	ldr	r3, [pc, #140]	@ (800629c <xTaskResumeAll+0x12c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006216:	4b22      	ldr	r3, [pc, #136]	@ (80062a0 <xTaskResumeAll+0x130>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800621c:	4b1c      	ldr	r3, [pc, #112]	@ (8006290 <xTaskResumeAll+0x120>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1cc      	bne.n	80061be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800622a:	f000 fb29 	bl	8006880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800622e:	4b1d      	ldr	r3, [pc, #116]	@ (80062a4 <xTaskResumeAll+0x134>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d010      	beq.n	800625c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800623a:	f000 f837 	bl	80062ac <xTaskIncrementTick>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006244:	4b16      	ldr	r3, [pc, #88]	@ (80062a0 <xTaskResumeAll+0x130>)
 8006246:	2201      	movs	r2, #1
 8006248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3b01      	subs	r3, #1
 800624e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f1      	bne.n	800623a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006256:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <xTaskResumeAll+0x134>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800625c:	4b10      	ldr	r3, [pc, #64]	@ (80062a0 <xTaskResumeAll+0x130>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006268:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <xTaskResumeAll+0x138>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006278:	f000 fd90 	bl	8006d9c <vPortExitCritical>

	return xAlreadyYielded;
 800627c:	68bb      	ldr	r3, [r7, #8]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200007a4 	.word	0x200007a4
 800628c:	2000077c 	.word	0x2000077c
 8006290:	2000073c 	.word	0x2000073c
 8006294:	20000784 	.word	0x20000784
 8006298:	20000680 	.word	0x20000680
 800629c:	2000067c 	.word	0x2000067c
 80062a0:	20000790 	.word	0x20000790
 80062a4:	2000078c 	.word	0x2000078c
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b6:	4b4f      	ldr	r3, [pc, #316]	@ (80063f4 <xTaskIncrementTick+0x148>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 808f 	bne.w	80063de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062c0:	4b4d      	ldr	r3, [pc, #308]	@ (80063f8 <xTaskIncrementTick+0x14c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062c8:	4a4b      	ldr	r2, [pc, #300]	@ (80063f8 <xTaskIncrementTick+0x14c>)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d121      	bne.n	8006318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062d4:	4b49      	ldr	r3, [pc, #292]	@ (80063fc <xTaskIncrementTick+0x150>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <xTaskIncrementTick+0x46>
 80062f6:	4b41      	ldr	r3, [pc, #260]	@ (80063fc <xTaskIncrementTick+0x150>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	4b40      	ldr	r3, [pc, #256]	@ (8006400 <xTaskIncrementTick+0x154>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a3e      	ldr	r2, [pc, #248]	@ (80063fc <xTaskIncrementTick+0x150>)
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4a3e      	ldr	r2, [pc, #248]	@ (8006400 <xTaskIncrementTick+0x154>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b3e      	ldr	r3, [pc, #248]	@ (8006404 <xTaskIncrementTick+0x158>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	4a3c      	ldr	r2, [pc, #240]	@ (8006404 <xTaskIncrementTick+0x158>)
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	f000 fab4 	bl	8006880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006318:	4b3b      	ldr	r3, [pc, #236]	@ (8006408 <xTaskIncrementTick+0x15c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	d348      	bcc.n	80063b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006322:	4b36      	ldr	r3, [pc, #216]	@ (80063fc <xTaskIncrementTick+0x150>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800632c:	4b36      	ldr	r3, [pc, #216]	@ (8006408 <xTaskIncrementTick+0x15c>)
 800632e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006332:	601a      	str	r2, [r3, #0]
					break;
 8006334:	e03e      	b.n	80063b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	4b31      	ldr	r3, [pc, #196]	@ (80063fc <xTaskIncrementTick+0x150>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	429a      	cmp	r2, r3
 800634c:	d203      	bcs.n	8006356 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800634e:	4a2e      	ldr	r2, [pc, #184]	@ (8006408 <xTaskIncrementTick+0x15c>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006354:	e02e      	b.n	80063b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff f8c7 	bl	80054ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3318      	adds	r3, #24
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f8be 	bl	80054ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	2201      	movs	r2, #1
 8006378:	409a      	lsls	r2, r3
 800637a:	4b24      	ldr	r3, [pc, #144]	@ (800640c <xTaskIncrementTick+0x160>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4313      	orrs	r3, r2
 8006380:	4a22      	ldr	r2, [pc, #136]	@ (800640c <xTaskIncrementTick+0x160>)
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4a1f      	ldr	r2, [pc, #124]	@ (8006410 <xTaskIncrementTick+0x164>)
 8006392:	441a      	add	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7ff f84a 	bl	8005434 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006414 <xTaskIncrementTick+0x168>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d3b9      	bcc.n	8006322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b2:	e7b6      	b.n	8006322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063b4:	4b17      	ldr	r3, [pc, #92]	@ (8006414 <xTaskIncrementTick+0x168>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ba:	4915      	ldr	r1, [pc, #84]	@ (8006410 <xTaskIncrementTick+0x164>)
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d901      	bls.n	80063d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063d0:	4b11      	ldr	r3, [pc, #68]	@ (8006418 <xTaskIncrementTick+0x16c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e004      	b.n	80063e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063de:	4b0f      	ldr	r3, [pc, #60]	@ (800641c <xTaskIncrementTick+0x170>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4a0d      	ldr	r2, [pc, #52]	@ (800641c <xTaskIncrementTick+0x170>)
 80063e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063e8:	697b      	ldr	r3, [r7, #20]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200007a4 	.word	0x200007a4
 80063f8:	20000780 	.word	0x20000780
 80063fc:	20000734 	.word	0x20000734
 8006400:	20000738 	.word	0x20000738
 8006404:	20000794 	.word	0x20000794
 8006408:	2000079c 	.word	0x2000079c
 800640c:	20000784 	.word	0x20000784
 8006410:	20000680 	.word	0x20000680
 8006414:	2000067c 	.word	0x2000067c
 8006418:	20000790 	.word	0x20000790
 800641c:	2000078c 	.word	0x2000078c

08006420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006426:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <vTaskSwitchContext+0xb0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800642e:	4b29      	ldr	r3, [pc, #164]	@ (80064d4 <vTaskSwitchContext+0xb4>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006434:	e045      	b.n	80064c2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006436:	4b27      	ldr	r3, [pc, #156]	@ (80064d4 <vTaskSwitchContext+0xb4>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643c:	4b26      	ldr	r3, [pc, #152]	@ (80064d8 <vTaskSwitchContext+0xb8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	fab3 f383 	clz	r3, r3
 8006448:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	f1c3 031f 	rsb	r3, r3, #31
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	4922      	ldr	r1, [pc, #136]	@ (80064dc <vTaskSwitchContext+0xbc>)
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	607b      	str	r3, [r7, #4]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <vTaskSwitchContext+0x5a>
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a14      	ldr	r2, [pc, #80]	@ (80064dc <vTaskSwitchContext+0xbc>)
 800648a:	4413      	add	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3308      	adds	r3, #8
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d104      	bne.n	80064ae <vTaskSwitchContext+0x8e>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	@ (80064e0 <vTaskSwitchContext+0xc0>)
 80064b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <vTaskSwitchContext+0xc0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	334c      	adds	r3, #76	@ 0x4c
 80064be:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <vTaskSwitchContext+0xc4>)
 80064c0:	6013      	str	r3, [r2, #0]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	200007a4 	.word	0x200007a4
 80064d4:	20000790 	.word	0x20000790
 80064d8:	20000784 	.word	0x20000784
 80064dc:	20000680 	.word	0x20000680
 80064e0:	2000067c 	.word	0x2000067c
 80064e4:	2000001c 	.word	0x2000001c

080064e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60fb      	str	r3, [r7, #12]
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	e7fd      	b.n	800650c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006510:	4b07      	ldr	r3, [pc, #28]	@ (8006530 <vTaskPlaceOnEventList+0x48>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3318      	adds	r3, #24
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fe ffaf 	bl	800547c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800651e:	2101      	movs	r1, #1
 8006520:	6838      	ldr	r0, [r7, #0]
 8006522:	f000 fa73 	bl	8006a0c <prvAddCurrentTaskToDelayedList>
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000067c 	.word	0x2000067c

08006534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60fb      	str	r3, [r7, #12]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3318      	adds	r3, #24
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe ffc1 	bl	80054ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656c:	4b1d      	ldr	r3, [pc, #116]	@ (80065e4 <xTaskRemoveFromEventList+0xb0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11c      	bne.n	80065ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3304      	adds	r3, #4
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe ffb8 	bl	80054ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	2201      	movs	r2, #1
 8006584:	409a      	lsls	r2, r3
 8006586:	4b18      	ldr	r3, [pc, #96]	@ (80065e8 <xTaskRemoveFromEventList+0xb4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	4a16      	ldr	r2, [pc, #88]	@ (80065e8 <xTaskRemoveFromEventList+0xb4>)
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4a13      	ldr	r2, [pc, #76]	@ (80065ec <xTaskRemoveFromEventList+0xb8>)
 800659e:	441a      	add	r2, r3
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe ff44 	bl	8005434 <vListInsertEnd>
 80065ac:	e005      	b.n	80065ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3318      	adds	r3, #24
 80065b2:	4619      	mov	r1, r3
 80065b4:	480e      	ldr	r0, [pc, #56]	@ (80065f0 <xTaskRemoveFromEventList+0xbc>)
 80065b6:	f7fe ff3d 	bl	8005434 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065be:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <xTaskRemoveFromEventList+0xc0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d905      	bls.n	80065d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <xTaskRemoveFromEventList+0xc4>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	e001      	b.n	80065d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065d8:	697b      	ldr	r3, [r7, #20]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200007a4 	.word	0x200007a4
 80065e8:	20000784 	.word	0x20000784
 80065ec:	20000680 	.word	0x20000680
 80065f0:	2000073c 	.word	0x2000073c
 80065f4:	2000067c 	.word	0x2000067c
 80065f8:	20000790 	.word	0x20000790

080065fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006604:	4b06      	ldr	r3, [pc, #24]	@ (8006620 <vTaskInternalSetTimeOutState+0x24>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800660c:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <vTaskInternalSetTimeOutState+0x28>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	20000794 	.word	0x20000794
 8006624:	20000780 	.word	0x20000780

08006628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	613b      	str	r3, [r7, #16]
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60fb      	str	r3, [r7, #12]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800666e:	f000 fb63 	bl	8006d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006672:	4b1d      	ldr	r3, [pc, #116]	@ (80066e8 <xTaskCheckForTimeOut+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800668a:	d102      	bne.n	8006692 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	e023      	b.n	80066da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b15      	ldr	r3, [pc, #84]	@ (80066ec <xTaskCheckForTimeOut+0xc4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d007      	beq.n	80066ae <xTaskCheckForTimeOut+0x86>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d302      	bcc.n	80066ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	e015      	b.n	80066da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d20b      	bcs.n	80066d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ff99 	bl	80065fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e004      	b.n	80066da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066da:	f000 fb5f 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 80066de:	69fb      	ldr	r3, [r7, #28]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000780 	.word	0x20000780
 80066ec:	20000794 	.word	0x20000794

080066f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066f4:	4b03      	ldr	r3, [pc, #12]	@ (8006704 <vTaskMissedYield+0x14>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]
}
 80066fa:	bf00      	nop
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20000790 	.word	0x20000790

08006708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006710:	f000 f852 	bl	80067b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006714:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <prvIdleTask+0x28>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d9f9      	bls.n	8006710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800671c:	4b05      	ldr	r3, [pc, #20]	@ (8006734 <prvIdleTask+0x2c>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800672c:	e7f0      	b.n	8006710 <prvIdleTask+0x8>
 800672e:	bf00      	nop
 8006730:	20000680 	.word	0x20000680
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	e00c      	b.n	800675e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4a12      	ldr	r2, [pc, #72]	@ (8006798 <prvInitialiseTaskLists+0x60>)
 8006750:	4413      	add	r3, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fe41 	bl	80053da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3301      	adds	r3, #1
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b06      	cmp	r3, #6
 8006762:	d9ef      	bls.n	8006744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006764:	480d      	ldr	r0, [pc, #52]	@ (800679c <prvInitialiseTaskLists+0x64>)
 8006766:	f7fe fe38 	bl	80053da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800676a:	480d      	ldr	r0, [pc, #52]	@ (80067a0 <prvInitialiseTaskLists+0x68>)
 800676c:	f7fe fe35 	bl	80053da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006770:	480c      	ldr	r0, [pc, #48]	@ (80067a4 <prvInitialiseTaskLists+0x6c>)
 8006772:	f7fe fe32 	bl	80053da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006776:	480c      	ldr	r0, [pc, #48]	@ (80067a8 <prvInitialiseTaskLists+0x70>)
 8006778:	f7fe fe2f 	bl	80053da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800677c:	480b      	ldr	r0, [pc, #44]	@ (80067ac <prvInitialiseTaskLists+0x74>)
 800677e:	f7fe fe2c 	bl	80053da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006782:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <prvInitialiseTaskLists+0x78>)
 8006784:	4a05      	ldr	r2, [pc, #20]	@ (800679c <prvInitialiseTaskLists+0x64>)
 8006786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <prvInitialiseTaskLists+0x7c>)
 800678a:	4a05      	ldr	r2, [pc, #20]	@ (80067a0 <prvInitialiseTaskLists+0x68>)
 800678c:	601a      	str	r2, [r3, #0]
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000680 	.word	0x20000680
 800679c:	2000070c 	.word	0x2000070c
 80067a0:	20000720 	.word	0x20000720
 80067a4:	2000073c 	.word	0x2000073c
 80067a8:	20000750 	.word	0x20000750
 80067ac:	20000768 	.word	0x20000768
 80067b0:	20000734 	.word	0x20000734
 80067b4:	20000738 	.word	0x20000738

080067b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067be:	e019      	b.n	80067f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067c0:	f000 faba 	bl	8006d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c4:	4b10      	ldr	r3, [pc, #64]	@ (8006808 <prvCheckTasksWaitingTermination+0x50>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fe8c 	bl	80054ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <prvCheckTasksWaitingTermination+0x54>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a0b      	ldr	r2, [pc, #44]	@ (800680c <prvCheckTasksWaitingTermination+0x54>)
 80067de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006810 <prvCheckTasksWaitingTermination+0x58>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006810 <prvCheckTasksWaitingTermination+0x58>)
 80067e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ea:	f000 fad7 	bl	8006d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f810 	bl	8006814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f4:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <prvCheckTasksWaitingTermination+0x58>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e1      	bne.n	80067c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000750 	.word	0x20000750
 800680c:	2000077c 	.word	0x2000077c
 8006810:	20000764 	.word	0x20000764

08006814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	334c      	adds	r3, #76	@ 0x4c
 8006820:	4618      	mov	r0, r3
 8006822:	f001 fd35 	bl	8008290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800682c:	2b00      	cmp	r3, #0
 800682e:	d108      	bne.n	8006842 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fc2d 	bl	8007094 <vPortFree>
				vPortFree( pxTCB );
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fc2a 	bl	8007094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006840:	e019      	b.n	8006876 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006848:	2b01      	cmp	r3, #1
 800684a:	d103      	bne.n	8006854 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc21 	bl	8007094 <vPortFree>
	}
 8006852:	e010      	b.n	8006876 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800685a:	2b02      	cmp	r3, #2
 800685c:	d00b      	beq.n	8006876 <prvDeleteTCB+0x62>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	e7fd      	b.n	8006872 <prvDeleteTCB+0x5e>
	}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006886:	4b0c      	ldr	r3, [pc, #48]	@ (80068b8 <prvResetNextTaskUnblockTime+0x38>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006890:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <prvResetNextTaskUnblockTime+0x3c>)
 8006892:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006898:	e008      	b.n	80068ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800689a:	4b07      	ldr	r3, [pc, #28]	@ (80068b8 <prvResetNextTaskUnblockTime+0x38>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a04      	ldr	r2, [pc, #16]	@ (80068bc <prvResetNextTaskUnblockTime+0x3c>)
 80068aa:	6013      	str	r3, [r2, #0]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000734 	.word	0x20000734
 80068bc:	2000079c 	.word	0x2000079c

080068c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <xTaskGetSchedulerState+0x34>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068ce:	2301      	movs	r3, #1
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	e008      	b.n	80068e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d4:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <xTaskGetSchedulerState+0x38>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068dc:	2302      	movs	r3, #2
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e001      	b.n	80068e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068e2:	2300      	movs	r3, #0
 80068e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068e6:	687b      	ldr	r3, [r7, #4]
	}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000788 	.word	0x20000788
 80068f8:	200007a4 	.word	0x200007a4

080068fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d070      	beq.n	80069f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006912:	4b3b      	ldr	r3, [pc, #236]	@ (8006a00 <xTaskPriorityDisinherit+0x104>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	429a      	cmp	r2, r3
 800691a:	d00b      	beq.n	8006934 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60fb      	str	r3, [r7, #12]
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60bb      	str	r3, [r7, #8]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	429a      	cmp	r2, r3
 8006968:	d044      	beq.n	80069f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800696e:	2b00      	cmp	r3, #0
 8006970:	d140      	bne.n	80069f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fdb9 	bl	80054ee <uxListRemove>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d115      	bne.n	80069ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006986:	491f      	ldr	r1, [pc, #124]	@ (8006a04 <xTaskPriorityDisinherit+0x108>)
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xTaskPriorityDisinherit+0xb2>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	2201      	movs	r2, #1
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	43da      	mvns	r2, r3
 80069a4:	4b18      	ldr	r3, [pc, #96]	@ (8006a08 <xTaskPriorityDisinherit+0x10c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4013      	ands	r3, r2
 80069aa:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <xTaskPriorityDisinherit+0x10c>)
 80069ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	f1c3 0207 	rsb	r2, r3, #7
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	2201      	movs	r2, #1
 80069c8:	409a      	lsls	r2, r3
 80069ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006a08 <xTaskPriorityDisinherit+0x10c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006a08 <xTaskPriorityDisinherit+0x10c>)
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4a08      	ldr	r2, [pc, #32]	@ (8006a04 <xTaskPriorityDisinherit+0x108>)
 80069e2:	441a      	add	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f7fe fd22 	bl	8005434 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069f0:	2301      	movs	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069f4:	697b      	ldr	r3, [r7, #20]
	}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	2000067c 	.word	0x2000067c
 8006a04:	20000680 	.word	0x20000680
 8006a08:	20000784 	.word	0x20000784

08006a0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a16:	4b29      	ldr	r3, [pc, #164]	@ (8006abc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fd63 	bl	80054ee <uxListRemove>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	2201      	movs	r2, #1
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	43da      	mvns	r2, r3
 8006a3c:	4b21      	ldr	r3, [pc, #132]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4013      	ands	r3, r2
 8006a42:	4a20      	ldr	r2, [pc, #128]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4c:	d10a      	bne.n	8006a64 <prvAddCurrentTaskToDelayedList+0x58>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	481a      	ldr	r0, [pc, #104]	@ (8006ac8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a5e:	f7fe fce9 	bl	8005434 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a62:	e026      	b.n	8006ab2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a6c:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d209      	bcs.n	8006a90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4619      	mov	r1, r3
 8006a88:	4610      	mov	r0, r2
 8006a8a:	f7fe fcf7 	bl	800547c <vListInsert>
}
 8006a8e:	e010      	b.n	8006ab2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f7fe fced 	bl	800547c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d202      	bcs.n	8006ab2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006aac:	4a09      	ldr	r2, [pc, #36]	@ (8006ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6013      	str	r3, [r2, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000780 	.word	0x20000780
 8006ac0:	2000067c 	.word	0x2000067c
 8006ac4:	20000784 	.word	0x20000784
 8006ac8:	20000768 	.word	0x20000768
 8006acc:	20000738 	.word	0x20000738
 8006ad0:	20000734 	.word	0x20000734
 8006ad4:	2000079c 	.word	0x2000079c

08006ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3b04      	subs	r3, #4
 8006ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3b04      	subs	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f023 0201 	bic.w	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3b04      	subs	r3, #4
 8006b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b08:	4a0c      	ldr	r2, [pc, #48]	@ (8006b3c <pxPortInitialiseStack+0x64>)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3b14      	subs	r3, #20
 8006b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f06f 0202 	mvn.w	r2, #2
 8006b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3b20      	subs	r3, #32
 8006b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	08006b41 	.word	0x08006b41

08006b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b4a:	4b13      	ldr	r3, [pc, #76]	@ (8006b98 <prvTaskExitError+0x58>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b52:	d00b      	beq.n	8006b6c <prvTaskExitError+0x2c>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	60fb      	str	r3, [r7, #12]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <prvTaskExitError+0x28>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60bb      	str	r3, [r7, #8]
}
 8006b7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b80:	bf00      	nop
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0fc      	beq.n	8006b82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	2000000c 	.word	0x2000000c
 8006b9c:	00000000 	.word	0x00000000

08006ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ba0:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <pxCurrentTCBConst2>)
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	6808      	ldr	r0, [r1, #0]
 8006ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	f380 8809 	msr	PSP, r0
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f04f 0000 	mov.w	r0, #0
 8006bb6:	f380 8811 	msr	BASEPRI, r0
 8006bba:	4770      	bx	lr
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst2>:
 8006bc0:	2000067c 	.word	0x2000067c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bc8:	4808      	ldr	r0, [pc, #32]	@ (8006bec <prvPortStartFirstTask+0x24>)
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	6800      	ldr	r0, [r0, #0]
 8006bce:	f380 8808 	msr	MSP, r0
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8814 	msr	CONTROL, r0
 8006bda:	b662      	cpsie	i
 8006bdc:	b661      	cpsie	f
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	df00      	svc	0
 8006be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bea:	bf00      	nop
 8006bec:	e000ed08 	.word	0xe000ed08

08006bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bf6:	4b47      	ldr	r3, [pc, #284]	@ (8006d14 <xPortStartScheduler+0x124>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a47      	ldr	r2, [pc, #284]	@ (8006d18 <xPortStartScheduler+0x128>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10b      	bne.n	8006c18 <xPortStartScheduler+0x28>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c18:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <xPortStartScheduler+0x124>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d1c <xPortStartScheduler+0x12c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10b      	bne.n	8006c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	613b      	str	r3, [r7, #16]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c3a:	4b39      	ldr	r3, [pc, #228]	@ (8006d20 <xPortStartScheduler+0x130>)
 8006c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	22ff      	movs	r2, #255	@ 0xff
 8006c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	4b31      	ldr	r3, [pc, #196]	@ (8006d24 <xPortStartScheduler+0x134>)
 8006c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c62:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c64:	2207      	movs	r2, #7
 8006c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c68:	e009      	b.n	8006c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a2d      	ldr	r2, [pc, #180]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c86:	2b80      	cmp	r3, #128	@ 0x80
 8006c88:	d0ef      	beq.n	8006c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c8a:	4b27      	ldr	r3, [pc, #156]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1c3 0307 	rsb	r3, r3, #7
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d00b      	beq.n	8006cae <xPortStartScheduler+0xbe>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cae:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc0:	4a19      	ldr	r2, [pc, #100]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ccc:	4b17      	ldr	r3, [pc, #92]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cd8:	4b14      	ldr	r3, [pc, #80]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a13      	ldr	r2, [pc, #76]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ce4:	f000 f8da 	bl	8006e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ce8:	4b11      	ldr	r3, [pc, #68]	@ (8006d30 <xPortStartScheduler+0x140>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cee:	f000 f8f9 	bl	8006ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <xPortStartScheduler+0x144>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8006d34 <xPortStartScheduler+0x144>)
 8006cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cfe:	f7ff ff63 	bl	8006bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d02:	f7ff fb8d 	bl	8006420 <vTaskSwitchContext>
	prvTaskExitError();
 8006d06:	f7ff ff1b 	bl	8006b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed00 	.word	0xe000ed00
 8006d18:	410fc271 	.word	0x410fc271
 8006d1c:	410fc270 	.word	0x410fc270
 8006d20:	e000e400 	.word	0xe000e400
 8006d24:	200007a8 	.word	0x200007a8
 8006d28:	200007ac 	.word	0x200007ac
 8006d2c:	e000ed20 	.word	0xe000ed20
 8006d30:	2000000c 	.word	0x2000000c
 8006d34:	e000ef34 	.word	0xe000ef34

08006d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	4a0e      	ldr	r2, [pc, #56]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d110      	bne.n	8006d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d64:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <vPortEnterCritical+0x60>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	603b      	str	r3, [r7, #0]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vPortEnterCritical+0x4a>
	}
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <vPortExitCritical+0x50>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <vPortExitCritical+0x26>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <vPortExitCritical+0x50>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <vPortExitCritical+0x50>)
 8006dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dcc:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <vPortExitCritical+0x50>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <vPortExitCritical+0x44>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	2000000c 	.word	0x2000000c

08006df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006df0:	f3ef 8009 	mrs	r0, PSP
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4b15      	ldr	r3, [pc, #84]	@ (8006e50 <pxCurrentTCBConst>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f01e 0f10 	tst.w	lr, #16
 8006e00:	bf08      	it	eq
 8006e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e14:	f380 8811 	msr	BASEPRI, r0
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f7ff fafe 	bl	8006420 <vTaskSwitchContext>
 8006e24:	f04f 0000 	mov.w	r0, #0
 8006e28:	f380 8811 	msr	BASEPRI, r0
 8006e2c:	bc09      	pop	{r0, r3}
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	6808      	ldr	r0, [r1, #0]
 8006e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e36:	f01e 0f10 	tst.w	lr, #16
 8006e3a:	bf08      	it	eq
 8006e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e40:	f380 8809 	msr	PSP, r0
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	f3af 8000 	nop.w

08006e50 <pxCurrentTCBConst>:
 8006e50:	2000067c 	.word	0x2000067c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e72:	f7ff fa1b 	bl	80062ac <xTaskIncrementTick>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <SysTick_Handler+0x40>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <vPortSetupTimerInterrupt+0x38>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <vPortSetupTimerInterrupt+0x3c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006edc <vPortSetupTimerInterrupt+0x40>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ee0 <vPortSetupTimerInterrupt+0x44>)
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ebe:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000e010 	.word	0xe000e010
 8006ed4:	e000e018 	.word	0xe000e018
 8006ed8:	20000000 	.word	0x20000000
 8006edc:	10624dd3 	.word	0x10624dd3
 8006ee0:	e000e014 	.word	0xe000e014

08006ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ef4 <vPortEnableVFP+0x10>
 8006ee8:	6801      	ldr	r1, [r0, #0]
 8006eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006eee:	6001      	str	r1, [r0, #0]
 8006ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ef2:	bf00      	nop
 8006ef4:	e000ed88 	.word	0xe000ed88

08006ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	@ 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f04:	f7ff f926 	bl	8006154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f08:	4b5c      	ldr	r3, [pc, #368]	@ (800707c <pvPortMalloc+0x184>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f10:	f000 f924 	bl	800715c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f14:	4b5a      	ldr	r3, [pc, #360]	@ (8007080 <pvPortMalloc+0x188>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8095 	bne.w	800704c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01e      	beq.n	8006f66 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006f28:	2208      	movs	r2, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d015      	beq.n	8006f66 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <pvPortMalloc+0x6e>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d06f      	beq.n	800704c <pvPortMalloc+0x154>
 8006f6c:	4b45      	ldr	r3, [pc, #276]	@ (8007084 <pvPortMalloc+0x18c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d86a      	bhi.n	800704c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f76:	4b44      	ldr	r3, [pc, #272]	@ (8007088 <pvPortMalloc+0x190>)
 8006f78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f7a:	4b43      	ldr	r3, [pc, #268]	@ (8007088 <pvPortMalloc+0x190>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f80:	e004      	b.n	8006f8c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d903      	bls.n	8006f9e <pvPortMalloc+0xa6>
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f1      	bne.n	8006f82 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f9e:	4b37      	ldr	r3, [pc, #220]	@ (800707c <pvPortMalloc+0x184>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d051      	beq.n	800704c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2208      	movs	r2, #8
 8006fae:	4413      	add	r3, r2
 8006fb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	1ad2      	subs	r2, r2, r3
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d920      	bls.n	800700c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <pvPortMalloc+0xfc>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	613b      	str	r3, [r7, #16]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007006:	69b8      	ldr	r0, [r7, #24]
 8007008:	f000 f90a 	bl	8007220 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <pvPortMalloc+0x18c>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	4a1b      	ldr	r2, [pc, #108]	@ (8007084 <pvPortMalloc+0x18c>)
 8007018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800701a:	4b1a      	ldr	r3, [pc, #104]	@ (8007084 <pvPortMalloc+0x18c>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <pvPortMalloc+0x194>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d203      	bcs.n	800702e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007026:	4b17      	ldr	r3, [pc, #92]	@ (8007084 <pvPortMalloc+0x18c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a18      	ldr	r2, [pc, #96]	@ (800708c <pvPortMalloc+0x194>)
 800702c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	4b13      	ldr	r3, [pc, #76]	@ (8007080 <pvPortMalloc+0x188>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	431a      	orrs	r2, r3
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007042:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <pvPortMalloc+0x198>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	4a11      	ldr	r2, [pc, #68]	@ (8007090 <pvPortMalloc+0x198>)
 800704a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800704c:	f7ff f890 	bl	8006170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <pvPortMalloc+0x17a>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60fb      	str	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <pvPortMalloc+0x176>
	return pvReturn;
 8007072:	69fb      	ldr	r3, [r7, #28]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	@ 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200043b8 	.word	0x200043b8
 8007080:	200043cc 	.word	0x200043cc
 8007084:	200043bc 	.word	0x200043bc
 8007088:	200043b0 	.word	0x200043b0
 800708c:	200043c0 	.word	0x200043c0
 8007090:	200043c4 	.word	0x200043c4

08007094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d04f      	beq.n	8007146 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070a6:	2308      	movs	r3, #8
 80070a8:	425b      	negs	r3, r3
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <vPortFree+0xbc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <vPortFree+0x46>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60fb      	str	r3, [r7, #12]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <vPortFree+0x66>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	4b14      	ldr	r3, [pc, #80]	@ (8007150 <vPortFree+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01e      	beq.n	8007146 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d11a      	bne.n	8007146 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <vPortFree+0xbc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	43db      	mvns	r3, r3
 800711a:	401a      	ands	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007120:	f7ff f818 	bl	8006154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <vPortFree+0xc0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4413      	add	r3, r2
 800712e:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <vPortFree+0xc0>)
 8007130:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f000 f874 	bl	8007220 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007138:	4b07      	ldr	r3, [pc, #28]	@ (8007158 <vPortFree+0xc4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3301      	adds	r3, #1
 800713e:	4a06      	ldr	r2, [pc, #24]	@ (8007158 <vPortFree+0xc4>)
 8007140:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007142:	f7ff f815 	bl	8006170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200043cc 	.word	0x200043cc
 8007154:	200043bc 	.word	0x200043bc
 8007158:	200043c8 	.word	0x200043c8

0800715c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007162:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007166:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007168:	4b27      	ldr	r3, [pc, #156]	@ (8007208 <prvHeapInit+0xac>)
 800716a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3307      	adds	r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0307 	bic.w	r3, r3, #7
 8007182:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	4a1f      	ldr	r2, [pc, #124]	@ (8007208 <prvHeapInit+0xac>)
 800718c:	4413      	add	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007194:	4a1d      	ldr	r2, [pc, #116]	@ (800720c <prvHeapInit+0xb0>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800719a:	4b1c      	ldr	r3, [pc, #112]	@ (800720c <prvHeapInit+0xb0>)
 800719c:	2200      	movs	r2, #0
 800719e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4413      	add	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a8:	2208      	movs	r2, #8
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <prvHeapInit+0xb4>)
 80071bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071c6:	4b12      	ldr	r3, [pc, #72]	@ (8007210 <prvHeapInit+0xb4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <prvHeapInit+0xb4>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007214 <prvHeapInit+0xb8>)
 80071ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <prvHeapInit+0xbc>)
 80071f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <prvHeapInit+0xc0>)
 80071f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071fa:	601a      	str	r2, [r3, #0]
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	200007b0 	.word	0x200007b0
 800720c:	200043b0 	.word	0x200043b0
 8007210:	200043b8 	.word	0x200043b8
 8007214:	200043c0 	.word	0x200043c0
 8007218:	200043bc 	.word	0x200043bc
 800721c:	200043cc 	.word	0x200043cc

08007220 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007228:	4b28      	ldr	r3, [pc, #160]	@ (80072cc <prvInsertBlockIntoFreeList+0xac>)
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e002      	b.n	8007234 <prvInsertBlockIntoFreeList+0x14>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d8f7      	bhi.n	800722e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d108      	bne.n	8007262 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	441a      	add	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	441a      	add	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d118      	bne.n	80072a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <prvInsertBlockIntoFreeList+0xb0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d00d      	beq.n	800729e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e008      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800729e:	4b0c      	ldr	r3, [pc, #48]	@ (80072d0 <prvInsertBlockIntoFreeList+0xb0>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e003      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d002      	beq.n	80072be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	200043b0 	.word	0x200043b0
 80072d0:	200043b8 	.word	0x200043b8

080072d4 <__cvt>:
 80072d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	ec57 6b10 	vmov	r6, r7, d0
 80072dc:	2f00      	cmp	r7, #0
 80072de:	460c      	mov	r4, r1
 80072e0:	4619      	mov	r1, r3
 80072e2:	463b      	mov	r3, r7
 80072e4:	bfbb      	ittet	lt
 80072e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072ea:	461f      	movlt	r7, r3
 80072ec:	2300      	movge	r3, #0
 80072ee:	232d      	movlt	r3, #45	@ 0x2d
 80072f0:	700b      	strb	r3, [r1, #0]
 80072f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072f8:	4691      	mov	r9, r2
 80072fa:	f023 0820 	bic.w	r8, r3, #32
 80072fe:	bfbc      	itt	lt
 8007300:	4632      	movlt	r2, r6
 8007302:	4616      	movlt	r6, r2
 8007304:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007308:	d005      	beq.n	8007316 <__cvt+0x42>
 800730a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800730e:	d100      	bne.n	8007312 <__cvt+0x3e>
 8007310:	3401      	adds	r4, #1
 8007312:	2102      	movs	r1, #2
 8007314:	e000      	b.n	8007318 <__cvt+0x44>
 8007316:	2103      	movs	r1, #3
 8007318:	ab03      	add	r3, sp, #12
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	ab02      	add	r3, sp, #8
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	ec47 6b10 	vmov	d0, r6, r7
 8007324:	4653      	mov	r3, sl
 8007326:	4622      	mov	r2, r4
 8007328:	f001 f912 	bl	8008550 <_dtoa_r>
 800732c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007330:	4605      	mov	r5, r0
 8007332:	d119      	bne.n	8007368 <__cvt+0x94>
 8007334:	f019 0f01 	tst.w	r9, #1
 8007338:	d00e      	beq.n	8007358 <__cvt+0x84>
 800733a:	eb00 0904 	add.w	r9, r0, r4
 800733e:	2200      	movs	r2, #0
 8007340:	2300      	movs	r3, #0
 8007342:	4630      	mov	r0, r6
 8007344:	4639      	mov	r1, r7
 8007346:	f7f9 fbbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800734a:	b108      	cbz	r0, 8007350 <__cvt+0x7c>
 800734c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007350:	2230      	movs	r2, #48	@ 0x30
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	454b      	cmp	r3, r9
 8007356:	d31e      	bcc.n	8007396 <__cvt+0xc2>
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800735c:	1b5b      	subs	r3, r3, r5
 800735e:	4628      	mov	r0, r5
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	b004      	add	sp, #16
 8007364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007368:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800736c:	eb00 0904 	add.w	r9, r0, r4
 8007370:	d1e5      	bne.n	800733e <__cvt+0x6a>
 8007372:	7803      	ldrb	r3, [r0, #0]
 8007374:	2b30      	cmp	r3, #48	@ 0x30
 8007376:	d10a      	bne.n	800738e <__cvt+0xba>
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	4630      	mov	r0, r6
 800737e:	4639      	mov	r1, r7
 8007380:	f7f9 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007384:	b918      	cbnz	r0, 800738e <__cvt+0xba>
 8007386:	f1c4 0401 	rsb	r4, r4, #1
 800738a:	f8ca 4000 	str.w	r4, [sl]
 800738e:	f8da 3000 	ldr.w	r3, [sl]
 8007392:	4499      	add	r9, r3
 8007394:	e7d3      	b.n	800733e <__cvt+0x6a>
 8007396:	1c59      	adds	r1, r3, #1
 8007398:	9103      	str	r1, [sp, #12]
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e7d9      	b.n	8007352 <__cvt+0x7e>

0800739e <__exponent>:
 800739e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a0:	2900      	cmp	r1, #0
 80073a2:	bfba      	itte	lt
 80073a4:	4249      	neglt	r1, r1
 80073a6:	232d      	movlt	r3, #45	@ 0x2d
 80073a8:	232b      	movge	r3, #43	@ 0x2b
 80073aa:	2909      	cmp	r1, #9
 80073ac:	7002      	strb	r2, [r0, #0]
 80073ae:	7043      	strb	r3, [r0, #1]
 80073b0:	dd29      	ble.n	8007406 <__exponent+0x68>
 80073b2:	f10d 0307 	add.w	r3, sp, #7
 80073b6:	461d      	mov	r5, r3
 80073b8:	270a      	movs	r7, #10
 80073ba:	461a      	mov	r2, r3
 80073bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80073c0:	fb07 1416 	mls	r4, r7, r6, r1
 80073c4:	3430      	adds	r4, #48	@ 0x30
 80073c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073ca:	460c      	mov	r4, r1
 80073cc:	2c63      	cmp	r4, #99	@ 0x63
 80073ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80073d2:	4631      	mov	r1, r6
 80073d4:	dcf1      	bgt.n	80073ba <__exponent+0x1c>
 80073d6:	3130      	adds	r1, #48	@ 0x30
 80073d8:	1e94      	subs	r4, r2, #2
 80073da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073de:	1c41      	adds	r1, r0, #1
 80073e0:	4623      	mov	r3, r4
 80073e2:	42ab      	cmp	r3, r5
 80073e4:	d30a      	bcc.n	80073fc <__exponent+0x5e>
 80073e6:	f10d 0309 	add.w	r3, sp, #9
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	42ac      	cmp	r4, r5
 80073ee:	bf88      	it	hi
 80073f0:	2300      	movhi	r3, #0
 80073f2:	3302      	adds	r3, #2
 80073f4:	4403      	add	r3, r0
 80073f6:	1a18      	subs	r0, r3, r0
 80073f8:	b003      	add	sp, #12
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007400:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007404:	e7ed      	b.n	80073e2 <__exponent+0x44>
 8007406:	2330      	movs	r3, #48	@ 0x30
 8007408:	3130      	adds	r1, #48	@ 0x30
 800740a:	7083      	strb	r3, [r0, #2]
 800740c:	70c1      	strb	r1, [r0, #3]
 800740e:	1d03      	adds	r3, r0, #4
 8007410:	e7f1      	b.n	80073f6 <__exponent+0x58>
	...

08007414 <_printf_float>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	b08d      	sub	sp, #52	@ 0x34
 800741a:	460c      	mov	r4, r1
 800741c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007420:	4616      	mov	r6, r2
 8007422:	461f      	mov	r7, r3
 8007424:	4605      	mov	r5, r0
 8007426:	f000 ff1f 	bl	8008268 <_localeconv_r>
 800742a:	6803      	ldr	r3, [r0, #0]
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f8 ff1e 	bl	8000270 <strlen>
 8007434:	2300      	movs	r3, #0
 8007436:	930a      	str	r3, [sp, #40]	@ 0x28
 8007438:	f8d8 3000 	ldr.w	r3, [r8]
 800743c:	9005      	str	r0, [sp, #20]
 800743e:	3307      	adds	r3, #7
 8007440:	f023 0307 	bic.w	r3, r3, #7
 8007444:	f103 0208 	add.w	r2, r3, #8
 8007448:	f894 a018 	ldrb.w	sl, [r4, #24]
 800744c:	f8d4 b000 	ldr.w	fp, [r4]
 8007450:	f8c8 2000 	str.w	r2, [r8]
 8007454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007458:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800745c:	9307      	str	r3, [sp, #28]
 800745e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007462:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800746a:	4b9c      	ldr	r3, [pc, #624]	@ (80076dc <_printf_float+0x2c8>)
 800746c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007470:	f7f9 fb5c 	bl	8000b2c <__aeabi_dcmpun>
 8007474:	bb70      	cbnz	r0, 80074d4 <_printf_float+0xc0>
 8007476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747a:	4b98      	ldr	r3, [pc, #608]	@ (80076dc <_printf_float+0x2c8>)
 800747c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007480:	f7f9 fb36 	bl	8000af0 <__aeabi_dcmple>
 8007484:	bb30      	cbnz	r0, 80074d4 <_printf_float+0xc0>
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	4640      	mov	r0, r8
 800748c:	4649      	mov	r1, r9
 800748e:	f7f9 fb25 	bl	8000adc <__aeabi_dcmplt>
 8007492:	b110      	cbz	r0, 800749a <_printf_float+0x86>
 8007494:	232d      	movs	r3, #45	@ 0x2d
 8007496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800749a:	4a91      	ldr	r2, [pc, #580]	@ (80076e0 <_printf_float+0x2cc>)
 800749c:	4b91      	ldr	r3, [pc, #580]	@ (80076e4 <_printf_float+0x2d0>)
 800749e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074a2:	bf8c      	ite	hi
 80074a4:	4690      	movhi	r8, r2
 80074a6:	4698      	movls	r8, r3
 80074a8:	2303      	movs	r3, #3
 80074aa:	6123      	str	r3, [r4, #16]
 80074ac:	f02b 0304 	bic.w	r3, fp, #4
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	9700      	str	r7, [sp, #0]
 80074b8:	4633      	mov	r3, r6
 80074ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074bc:	4621      	mov	r1, r4
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f9d2 	bl	8007868 <_printf_common>
 80074c4:	3001      	adds	r0, #1
 80074c6:	f040 808d 	bne.w	80075e4 <_printf_float+0x1d0>
 80074ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074ce:	b00d      	add	sp, #52	@ 0x34
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	4640      	mov	r0, r8
 80074da:	4649      	mov	r1, r9
 80074dc:	f7f9 fb26 	bl	8000b2c <__aeabi_dcmpun>
 80074e0:	b140      	cbz	r0, 80074f4 <_printf_float+0xe0>
 80074e2:	464b      	mov	r3, r9
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bfbc      	itt	lt
 80074e8:	232d      	movlt	r3, #45	@ 0x2d
 80074ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074ee:	4a7e      	ldr	r2, [pc, #504]	@ (80076e8 <_printf_float+0x2d4>)
 80074f0:	4b7e      	ldr	r3, [pc, #504]	@ (80076ec <_printf_float+0x2d8>)
 80074f2:	e7d4      	b.n	800749e <_printf_float+0x8a>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074fa:	9206      	str	r2, [sp, #24]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	d13b      	bne.n	8007578 <_printf_float+0x164>
 8007500:	2306      	movs	r3, #6
 8007502:	6063      	str	r3, [r4, #4]
 8007504:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007508:	2300      	movs	r3, #0
 800750a:	6022      	str	r2, [r4, #0]
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007510:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007514:	ab09      	add	r3, sp, #36	@ 0x24
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	ec49 8b10 	vmov	d0, r8, r9
 800751e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007522:	4628      	mov	r0, r5
 8007524:	f7ff fed6 	bl	80072d4 <__cvt>
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800752c:	2b47      	cmp	r3, #71	@ 0x47
 800752e:	4680      	mov	r8, r0
 8007530:	d129      	bne.n	8007586 <_printf_float+0x172>
 8007532:	1cc8      	adds	r0, r1, #3
 8007534:	db02      	blt.n	800753c <_printf_float+0x128>
 8007536:	6863      	ldr	r3, [r4, #4]
 8007538:	4299      	cmp	r1, r3
 800753a:	dd41      	ble.n	80075c0 <_printf_float+0x1ac>
 800753c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007540:	fa5f fa8a 	uxtb.w	sl, sl
 8007544:	3901      	subs	r1, #1
 8007546:	4652      	mov	r2, sl
 8007548:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800754c:	9109      	str	r1, [sp, #36]	@ 0x24
 800754e:	f7ff ff26 	bl	800739e <__exponent>
 8007552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007554:	1813      	adds	r3, r2, r0
 8007556:	2a01      	cmp	r2, #1
 8007558:	4681      	mov	r9, r0
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	dc02      	bgt.n	8007564 <_printf_float+0x150>
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	07d2      	lsls	r2, r2, #31
 8007562:	d501      	bpl.n	8007568 <_printf_float+0x154>
 8007564:	3301      	adds	r3, #1
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0a2      	beq.n	80074b6 <_printf_float+0xa2>
 8007570:	232d      	movs	r3, #45	@ 0x2d
 8007572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007576:	e79e      	b.n	80074b6 <_printf_float+0xa2>
 8007578:	9a06      	ldr	r2, [sp, #24]
 800757a:	2a47      	cmp	r2, #71	@ 0x47
 800757c:	d1c2      	bne.n	8007504 <_printf_float+0xf0>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1c0      	bne.n	8007504 <_printf_float+0xf0>
 8007582:	2301      	movs	r3, #1
 8007584:	e7bd      	b.n	8007502 <_printf_float+0xee>
 8007586:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800758a:	d9db      	bls.n	8007544 <_printf_float+0x130>
 800758c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007590:	d118      	bne.n	80075c4 <_printf_float+0x1b0>
 8007592:	2900      	cmp	r1, #0
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	dd0b      	ble.n	80075b0 <_printf_float+0x19c>
 8007598:	6121      	str	r1, [r4, #16]
 800759a:	b913      	cbnz	r3, 80075a2 <_printf_float+0x18e>
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	07d0      	lsls	r0, r2, #31
 80075a0:	d502      	bpl.n	80075a8 <_printf_float+0x194>
 80075a2:	3301      	adds	r3, #1
 80075a4:	440b      	add	r3, r1
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075aa:	f04f 0900 	mov.w	r9, #0
 80075ae:	e7db      	b.n	8007568 <_printf_float+0x154>
 80075b0:	b913      	cbnz	r3, 80075b8 <_printf_float+0x1a4>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	07d2      	lsls	r2, r2, #31
 80075b6:	d501      	bpl.n	80075bc <_printf_float+0x1a8>
 80075b8:	3302      	adds	r3, #2
 80075ba:	e7f4      	b.n	80075a6 <_printf_float+0x192>
 80075bc:	2301      	movs	r3, #1
 80075be:	e7f2      	b.n	80075a6 <_printf_float+0x192>
 80075c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075c6:	4299      	cmp	r1, r3
 80075c8:	db05      	blt.n	80075d6 <_printf_float+0x1c2>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	6121      	str	r1, [r4, #16]
 80075ce:	07d8      	lsls	r0, r3, #31
 80075d0:	d5ea      	bpl.n	80075a8 <_printf_float+0x194>
 80075d2:	1c4b      	adds	r3, r1, #1
 80075d4:	e7e7      	b.n	80075a6 <_printf_float+0x192>
 80075d6:	2900      	cmp	r1, #0
 80075d8:	bfd4      	ite	le
 80075da:	f1c1 0202 	rsble	r2, r1, #2
 80075de:	2201      	movgt	r2, #1
 80075e0:	4413      	add	r3, r2
 80075e2:	e7e0      	b.n	80075a6 <_printf_float+0x192>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	055a      	lsls	r2, r3, #21
 80075e8:	d407      	bmi.n	80075fa <_printf_float+0x1e6>
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	4642      	mov	r2, r8
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	d12b      	bne.n	8007650 <_printf_float+0x23c>
 80075f8:	e767      	b.n	80074ca <_printf_float+0xb6>
 80075fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075fe:	f240 80dd 	bls.w	80077bc <_printf_float+0x3a8>
 8007602:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007606:	2200      	movs	r2, #0
 8007608:	2300      	movs	r3, #0
 800760a:	f7f9 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800760e:	2800      	cmp	r0, #0
 8007610:	d033      	beq.n	800767a <_printf_float+0x266>
 8007612:	4a37      	ldr	r2, [pc, #220]	@ (80076f0 <_printf_float+0x2dc>)
 8007614:	2301      	movs	r3, #1
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	f43f af54 	beq.w	80074ca <_printf_float+0xb6>
 8007622:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007626:	4543      	cmp	r3, r8
 8007628:	db02      	blt.n	8007630 <_printf_float+0x21c>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	07d8      	lsls	r0, r3, #31
 800762e:	d50f      	bpl.n	8007650 <_printf_float+0x23c>
 8007630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af45 	beq.w	80074ca <_printf_float+0xb6>
 8007640:	f04f 0900 	mov.w	r9, #0
 8007644:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007648:	f104 0a1a 	add.w	sl, r4, #26
 800764c:	45c8      	cmp	r8, r9
 800764e:	dc09      	bgt.n	8007664 <_printf_float+0x250>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	f100 8103 	bmi.w	800785e <_printf_float+0x44a>
 8007658:	68e0      	ldr	r0, [r4, #12]
 800765a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800765c:	4298      	cmp	r0, r3
 800765e:	bfb8      	it	lt
 8007660:	4618      	movlt	r0, r3
 8007662:	e734      	b.n	80074ce <_printf_float+0xba>
 8007664:	2301      	movs	r3, #1
 8007666:	4652      	mov	r2, sl
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f af2b 	beq.w	80074ca <_printf_float+0xb6>
 8007674:	f109 0901 	add.w	r9, r9, #1
 8007678:	e7e8      	b.n	800764c <_printf_float+0x238>
 800767a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	dc39      	bgt.n	80076f4 <_printf_float+0x2e0>
 8007680:	4a1b      	ldr	r2, [pc, #108]	@ (80076f0 <_printf_float+0x2dc>)
 8007682:	2301      	movs	r3, #1
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af1d 	beq.w	80074ca <_printf_float+0xb6>
 8007690:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007694:	ea59 0303 	orrs.w	r3, r9, r3
 8007698:	d102      	bne.n	80076a0 <_printf_float+0x28c>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	07d9      	lsls	r1, r3, #31
 800769e:	d5d7      	bpl.n	8007650 <_printf_float+0x23c>
 80076a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	f43f af0d 	beq.w	80074ca <_printf_float+0xb6>
 80076b0:	f04f 0a00 	mov.w	sl, #0
 80076b4:	f104 0b1a 	add.w	fp, r4, #26
 80076b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ba:	425b      	negs	r3, r3
 80076bc:	4553      	cmp	r3, sl
 80076be:	dc01      	bgt.n	80076c4 <_printf_float+0x2b0>
 80076c0:	464b      	mov	r3, r9
 80076c2:	e793      	b.n	80075ec <_printf_float+0x1d8>
 80076c4:	2301      	movs	r3, #1
 80076c6:	465a      	mov	r2, fp
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f aefb 	beq.w	80074ca <_printf_float+0xb6>
 80076d4:	f10a 0a01 	add.w	sl, sl, #1
 80076d8:	e7ee      	b.n	80076b8 <_printf_float+0x2a4>
 80076da:	bf00      	nop
 80076dc:	7fefffff 	.word	0x7fefffff
 80076e0:	0800bbe0 	.word	0x0800bbe0
 80076e4:	0800bbdc 	.word	0x0800bbdc
 80076e8:	0800bbe8 	.word	0x0800bbe8
 80076ec:	0800bbe4 	.word	0x0800bbe4
 80076f0:	0800bbec 	.word	0x0800bbec
 80076f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076fa:	4553      	cmp	r3, sl
 80076fc:	bfa8      	it	ge
 80076fe:	4653      	movge	r3, sl
 8007700:	2b00      	cmp	r3, #0
 8007702:	4699      	mov	r9, r3
 8007704:	dc36      	bgt.n	8007774 <_printf_float+0x360>
 8007706:	f04f 0b00 	mov.w	fp, #0
 800770a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800770e:	f104 021a 	add.w	r2, r4, #26
 8007712:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007714:	9306      	str	r3, [sp, #24]
 8007716:	eba3 0309 	sub.w	r3, r3, r9
 800771a:	455b      	cmp	r3, fp
 800771c:	dc31      	bgt.n	8007782 <_printf_float+0x36e>
 800771e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007720:	459a      	cmp	sl, r3
 8007722:	dc3a      	bgt.n	800779a <_printf_float+0x386>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	d437      	bmi.n	800779a <_printf_float+0x386>
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	ebaa 0903 	sub.w	r9, sl, r3
 8007730:	9b06      	ldr	r3, [sp, #24]
 8007732:	ebaa 0303 	sub.w	r3, sl, r3
 8007736:	4599      	cmp	r9, r3
 8007738:	bfa8      	it	ge
 800773a:	4699      	movge	r9, r3
 800773c:	f1b9 0f00 	cmp.w	r9, #0
 8007740:	dc33      	bgt.n	80077aa <_printf_float+0x396>
 8007742:	f04f 0800 	mov.w	r8, #0
 8007746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800774a:	f104 0b1a 	add.w	fp, r4, #26
 800774e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007750:	ebaa 0303 	sub.w	r3, sl, r3
 8007754:	eba3 0309 	sub.w	r3, r3, r9
 8007758:	4543      	cmp	r3, r8
 800775a:	f77f af79 	ble.w	8007650 <_printf_float+0x23c>
 800775e:	2301      	movs	r3, #1
 8007760:	465a      	mov	r2, fp
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f aeae 	beq.w	80074ca <_printf_float+0xb6>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	e7ec      	b.n	800774e <_printf_float+0x33a>
 8007774:	4642      	mov	r2, r8
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	d1c2      	bne.n	8007706 <_printf_float+0x2f2>
 8007780:	e6a3      	b.n	80074ca <_printf_float+0xb6>
 8007782:	2301      	movs	r3, #1
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	9206      	str	r2, [sp, #24]
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae9c 	beq.w	80074ca <_printf_float+0xb6>
 8007792:	9a06      	ldr	r2, [sp, #24]
 8007794:	f10b 0b01 	add.w	fp, fp, #1
 8007798:	e7bb      	b.n	8007712 <_printf_float+0x2fe>
 800779a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1c0      	bne.n	800772a <_printf_float+0x316>
 80077a8:	e68f      	b.n	80074ca <_printf_float+0xb6>
 80077aa:	9a06      	ldr	r2, [sp, #24]
 80077ac:	464b      	mov	r3, r9
 80077ae:	4442      	add	r2, r8
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	d1c3      	bne.n	8007742 <_printf_float+0x32e>
 80077ba:	e686      	b.n	80074ca <_printf_float+0xb6>
 80077bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077c0:	f1ba 0f01 	cmp.w	sl, #1
 80077c4:	dc01      	bgt.n	80077ca <_printf_float+0x3b6>
 80077c6:	07db      	lsls	r3, r3, #31
 80077c8:	d536      	bpl.n	8007838 <_printf_float+0x424>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4642      	mov	r2, r8
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f ae78 	beq.w	80074ca <_printf_float+0xb6>
 80077da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f ae70 	beq.w	80074ca <_printf_float+0xb6>
 80077ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80077f6:	f7f9 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fa:	b9c0      	cbnz	r0, 800782e <_printf_float+0x41a>
 80077fc:	4653      	mov	r3, sl
 80077fe:	f108 0201 	add.w	r2, r8, #1
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	d10c      	bne.n	8007826 <_printf_float+0x412>
 800780c:	e65d      	b.n	80074ca <_printf_float+0xb6>
 800780e:	2301      	movs	r3, #1
 8007810:	465a      	mov	r2, fp
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	47b8      	blx	r7
 8007818:	3001      	adds	r0, #1
 800781a:	f43f ae56 	beq.w	80074ca <_printf_float+0xb6>
 800781e:	f108 0801 	add.w	r8, r8, #1
 8007822:	45d0      	cmp	r8, sl
 8007824:	dbf3      	blt.n	800780e <_printf_float+0x3fa>
 8007826:	464b      	mov	r3, r9
 8007828:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800782c:	e6df      	b.n	80075ee <_printf_float+0x1da>
 800782e:	f04f 0800 	mov.w	r8, #0
 8007832:	f104 0b1a 	add.w	fp, r4, #26
 8007836:	e7f4      	b.n	8007822 <_printf_float+0x40e>
 8007838:	2301      	movs	r3, #1
 800783a:	4642      	mov	r2, r8
 800783c:	e7e1      	b.n	8007802 <_printf_float+0x3ee>
 800783e:	2301      	movs	r3, #1
 8007840:	464a      	mov	r2, r9
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f ae3e 	beq.w	80074ca <_printf_float+0xb6>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	68e3      	ldr	r3, [r4, #12]
 8007854:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007856:	1a5b      	subs	r3, r3, r1
 8007858:	4543      	cmp	r3, r8
 800785a:	dcf0      	bgt.n	800783e <_printf_float+0x42a>
 800785c:	e6fc      	b.n	8007658 <_printf_float+0x244>
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	f104 0919 	add.w	r9, r4, #25
 8007866:	e7f4      	b.n	8007852 <_printf_float+0x43e>

08007868 <_printf_common>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	4616      	mov	r6, r2
 800786e:	4698      	mov	r8, r3
 8007870:	688a      	ldr	r2, [r1, #8]
 8007872:	690b      	ldr	r3, [r1, #16]
 8007874:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007878:	4293      	cmp	r3, r2
 800787a:	bfb8      	it	lt
 800787c:	4613      	movlt	r3, r2
 800787e:	6033      	str	r3, [r6, #0]
 8007880:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007884:	4607      	mov	r7, r0
 8007886:	460c      	mov	r4, r1
 8007888:	b10a      	cbz	r2, 800788e <_printf_common+0x26>
 800788a:	3301      	adds	r3, #1
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	0699      	lsls	r1, r3, #26
 8007892:	bf42      	ittt	mi
 8007894:	6833      	ldrmi	r3, [r6, #0]
 8007896:	3302      	addmi	r3, #2
 8007898:	6033      	strmi	r3, [r6, #0]
 800789a:	6825      	ldr	r5, [r4, #0]
 800789c:	f015 0506 	ands.w	r5, r5, #6
 80078a0:	d106      	bne.n	80078b0 <_printf_common+0x48>
 80078a2:	f104 0a19 	add.w	sl, r4, #25
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	6832      	ldr	r2, [r6, #0]
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	dc26      	bgt.n	80078fe <_printf_common+0x96>
 80078b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078b4:	6822      	ldr	r2, [r4, #0]
 80078b6:	3b00      	subs	r3, #0
 80078b8:	bf18      	it	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	0692      	lsls	r2, r2, #26
 80078be:	d42b      	bmi.n	8007918 <_printf_common+0xb0>
 80078c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078c4:	4641      	mov	r1, r8
 80078c6:	4638      	mov	r0, r7
 80078c8:	47c8      	blx	r9
 80078ca:	3001      	adds	r0, #1
 80078cc:	d01e      	beq.n	800790c <_printf_common+0xa4>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	6922      	ldr	r2, [r4, #16]
 80078d2:	f003 0306 	and.w	r3, r3, #6
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	bf02      	ittt	eq
 80078da:	68e5      	ldreq	r5, [r4, #12]
 80078dc:	6833      	ldreq	r3, [r6, #0]
 80078de:	1aed      	subeq	r5, r5, r3
 80078e0:	68a3      	ldr	r3, [r4, #8]
 80078e2:	bf0c      	ite	eq
 80078e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e8:	2500      	movne	r5, #0
 80078ea:	4293      	cmp	r3, r2
 80078ec:	bfc4      	itt	gt
 80078ee:	1a9b      	subgt	r3, r3, r2
 80078f0:	18ed      	addgt	r5, r5, r3
 80078f2:	2600      	movs	r6, #0
 80078f4:	341a      	adds	r4, #26
 80078f6:	42b5      	cmp	r5, r6
 80078f8:	d11a      	bne.n	8007930 <_printf_common+0xc8>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e008      	b.n	8007910 <_printf_common+0xa8>
 80078fe:	2301      	movs	r3, #1
 8007900:	4652      	mov	r2, sl
 8007902:	4641      	mov	r1, r8
 8007904:	4638      	mov	r0, r7
 8007906:	47c8      	blx	r9
 8007908:	3001      	adds	r0, #1
 800790a:	d103      	bne.n	8007914 <_printf_common+0xac>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007914:	3501      	adds	r5, #1
 8007916:	e7c6      	b.n	80078a6 <_printf_common+0x3e>
 8007918:	18e1      	adds	r1, r4, r3
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	2030      	movs	r0, #48	@ 0x30
 800791e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007922:	4422      	add	r2, r4
 8007924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007928:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800792c:	3302      	adds	r3, #2
 800792e:	e7c7      	b.n	80078c0 <_printf_common+0x58>
 8007930:	2301      	movs	r3, #1
 8007932:	4622      	mov	r2, r4
 8007934:	4641      	mov	r1, r8
 8007936:	4638      	mov	r0, r7
 8007938:	47c8      	blx	r9
 800793a:	3001      	adds	r0, #1
 800793c:	d0e6      	beq.n	800790c <_printf_common+0xa4>
 800793e:	3601      	adds	r6, #1
 8007940:	e7d9      	b.n	80078f6 <_printf_common+0x8e>
	...

08007944 <_printf_i>:
 8007944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	7e0f      	ldrb	r7, [r1, #24]
 800794a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800794c:	2f78      	cmp	r7, #120	@ 0x78
 800794e:	4691      	mov	r9, r2
 8007950:	4680      	mov	r8, r0
 8007952:	460c      	mov	r4, r1
 8007954:	469a      	mov	sl, r3
 8007956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800795a:	d807      	bhi.n	800796c <_printf_i+0x28>
 800795c:	2f62      	cmp	r7, #98	@ 0x62
 800795e:	d80a      	bhi.n	8007976 <_printf_i+0x32>
 8007960:	2f00      	cmp	r7, #0
 8007962:	f000 80d1 	beq.w	8007b08 <_printf_i+0x1c4>
 8007966:	2f58      	cmp	r7, #88	@ 0x58
 8007968:	f000 80b8 	beq.w	8007adc <_printf_i+0x198>
 800796c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007974:	e03a      	b.n	80079ec <_printf_i+0xa8>
 8007976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800797a:	2b15      	cmp	r3, #21
 800797c:	d8f6      	bhi.n	800796c <_printf_i+0x28>
 800797e:	a101      	add	r1, pc, #4	@ (adr r1, 8007984 <_printf_i+0x40>)
 8007980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079f1 	.word	0x080079f1
 800798c:	0800796d 	.word	0x0800796d
 8007990:	0800796d 	.word	0x0800796d
 8007994:	0800796d 	.word	0x0800796d
 8007998:	0800796d 	.word	0x0800796d
 800799c:	080079f1 	.word	0x080079f1
 80079a0:	0800796d 	.word	0x0800796d
 80079a4:	0800796d 	.word	0x0800796d
 80079a8:	0800796d 	.word	0x0800796d
 80079ac:	0800796d 	.word	0x0800796d
 80079b0:	08007aef 	.word	0x08007aef
 80079b4:	08007a1b 	.word	0x08007a1b
 80079b8:	08007aa9 	.word	0x08007aa9
 80079bc:	0800796d 	.word	0x0800796d
 80079c0:	0800796d 	.word	0x0800796d
 80079c4:	08007b11 	.word	0x08007b11
 80079c8:	0800796d 	.word	0x0800796d
 80079cc:	08007a1b 	.word	0x08007a1b
 80079d0:	0800796d 	.word	0x0800796d
 80079d4:	0800796d 	.word	0x0800796d
 80079d8:	08007ab1 	.word	0x08007ab1
 80079dc:	6833      	ldr	r3, [r6, #0]
 80079de:	1d1a      	adds	r2, r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6032      	str	r2, [r6, #0]
 80079e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079ec:	2301      	movs	r3, #1
 80079ee:	e09c      	b.n	8007b2a <_printf_i+0x1e6>
 80079f0:	6833      	ldr	r3, [r6, #0]
 80079f2:	6820      	ldr	r0, [r4, #0]
 80079f4:	1d19      	adds	r1, r3, #4
 80079f6:	6031      	str	r1, [r6, #0]
 80079f8:	0606      	lsls	r6, r0, #24
 80079fa:	d501      	bpl.n	8007a00 <_printf_i+0xbc>
 80079fc:	681d      	ldr	r5, [r3, #0]
 80079fe:	e003      	b.n	8007a08 <_printf_i+0xc4>
 8007a00:	0645      	lsls	r5, r0, #25
 8007a02:	d5fb      	bpl.n	80079fc <_printf_i+0xb8>
 8007a04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	da03      	bge.n	8007a14 <_printf_i+0xd0>
 8007a0c:	232d      	movs	r3, #45	@ 0x2d
 8007a0e:	426d      	negs	r5, r5
 8007a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a14:	4858      	ldr	r0, [pc, #352]	@ (8007b78 <_printf_i+0x234>)
 8007a16:	230a      	movs	r3, #10
 8007a18:	e011      	b.n	8007a3e <_printf_i+0xfa>
 8007a1a:	6821      	ldr	r1, [r4, #0]
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	0608      	lsls	r0, r1, #24
 8007a20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a24:	d402      	bmi.n	8007a2c <_printf_i+0xe8>
 8007a26:	0649      	lsls	r1, r1, #25
 8007a28:	bf48      	it	mi
 8007a2a:	b2ad      	uxthmi	r5, r5
 8007a2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a2e:	4852      	ldr	r0, [pc, #328]	@ (8007b78 <_printf_i+0x234>)
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	bf14      	ite	ne
 8007a34:	230a      	movne	r3, #10
 8007a36:	2308      	moveq	r3, #8
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a3e:	6866      	ldr	r6, [r4, #4]
 8007a40:	60a6      	str	r6, [r4, #8]
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	db05      	blt.n	8007a52 <_printf_i+0x10e>
 8007a46:	6821      	ldr	r1, [r4, #0]
 8007a48:	432e      	orrs	r6, r5
 8007a4a:	f021 0104 	bic.w	r1, r1, #4
 8007a4e:	6021      	str	r1, [r4, #0]
 8007a50:	d04b      	beq.n	8007aea <_printf_i+0x1a6>
 8007a52:	4616      	mov	r6, r2
 8007a54:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a58:	fb03 5711 	mls	r7, r3, r1, r5
 8007a5c:	5dc7      	ldrb	r7, [r0, r7]
 8007a5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a62:	462f      	mov	r7, r5
 8007a64:	42bb      	cmp	r3, r7
 8007a66:	460d      	mov	r5, r1
 8007a68:	d9f4      	bls.n	8007a54 <_printf_i+0x110>
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d10b      	bne.n	8007a86 <_printf_i+0x142>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	07df      	lsls	r7, r3, #31
 8007a72:	d508      	bpl.n	8007a86 <_printf_i+0x142>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	6861      	ldr	r1, [r4, #4]
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	bfde      	ittt	le
 8007a7c:	2330      	movle	r3, #48	@ 0x30
 8007a7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a82:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007a86:	1b92      	subs	r2, r2, r6
 8007a88:	6122      	str	r2, [r4, #16]
 8007a8a:	f8cd a000 	str.w	sl, [sp]
 8007a8e:	464b      	mov	r3, r9
 8007a90:	aa03      	add	r2, sp, #12
 8007a92:	4621      	mov	r1, r4
 8007a94:	4640      	mov	r0, r8
 8007a96:	f7ff fee7 	bl	8007868 <_printf_common>
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d14a      	bne.n	8007b34 <_printf_i+0x1f0>
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aa2:	b004      	add	sp, #16
 8007aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	f043 0320 	orr.w	r3, r3, #32
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	4832      	ldr	r0, [pc, #200]	@ (8007b7c <_printf_i+0x238>)
 8007ab2:	2778      	movs	r7, #120	@ 0x78
 8007ab4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	6831      	ldr	r1, [r6, #0]
 8007abc:	061f      	lsls	r7, r3, #24
 8007abe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ac2:	d402      	bmi.n	8007aca <_printf_i+0x186>
 8007ac4:	065f      	lsls	r7, r3, #25
 8007ac6:	bf48      	it	mi
 8007ac8:	b2ad      	uxthmi	r5, r5
 8007aca:	6031      	str	r1, [r6, #0]
 8007acc:	07d9      	lsls	r1, r3, #31
 8007ace:	bf44      	itt	mi
 8007ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ad4:	6023      	strmi	r3, [r4, #0]
 8007ad6:	b11d      	cbz	r5, 8007ae0 <_printf_i+0x19c>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	e7ad      	b.n	8007a38 <_printf_i+0xf4>
 8007adc:	4826      	ldr	r0, [pc, #152]	@ (8007b78 <_printf_i+0x234>)
 8007ade:	e7e9      	b.n	8007ab4 <_printf_i+0x170>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	f023 0320 	bic.w	r3, r3, #32
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	e7f6      	b.n	8007ad8 <_printf_i+0x194>
 8007aea:	4616      	mov	r6, r2
 8007aec:	e7bd      	b.n	8007a6a <_printf_i+0x126>
 8007aee:	6833      	ldr	r3, [r6, #0]
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	6961      	ldr	r1, [r4, #20]
 8007af4:	1d18      	adds	r0, r3, #4
 8007af6:	6030      	str	r0, [r6, #0]
 8007af8:	062e      	lsls	r6, r5, #24
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	d501      	bpl.n	8007b02 <_printf_i+0x1be>
 8007afe:	6019      	str	r1, [r3, #0]
 8007b00:	e002      	b.n	8007b08 <_printf_i+0x1c4>
 8007b02:	0668      	lsls	r0, r5, #25
 8007b04:	d5fb      	bpl.n	8007afe <_printf_i+0x1ba>
 8007b06:	8019      	strh	r1, [r3, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	e7bc      	b.n	8007a8a <_printf_i+0x146>
 8007b10:	6833      	ldr	r3, [r6, #0]
 8007b12:	1d1a      	adds	r2, r3, #4
 8007b14:	6032      	str	r2, [r6, #0]
 8007b16:	681e      	ldr	r6, [r3, #0]
 8007b18:	6862      	ldr	r2, [r4, #4]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f7f8 fb57 	bl	80001d0 <memchr>
 8007b22:	b108      	cbz	r0, 8007b28 <_printf_i+0x1e4>
 8007b24:	1b80      	subs	r0, r0, r6
 8007b26:	6060      	str	r0, [r4, #4]
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b32:	e7aa      	b.n	8007a8a <_printf_i+0x146>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	4632      	mov	r2, r6
 8007b38:	4649      	mov	r1, r9
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	47d0      	blx	sl
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0ad      	beq.n	8007a9e <_printf_i+0x15a>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	079b      	lsls	r3, r3, #30
 8007b46:	d413      	bmi.n	8007b70 <_printf_i+0x22c>
 8007b48:	68e0      	ldr	r0, [r4, #12]
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	4298      	cmp	r0, r3
 8007b4e:	bfb8      	it	lt
 8007b50:	4618      	movlt	r0, r3
 8007b52:	e7a6      	b.n	8007aa2 <_printf_i+0x15e>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4632      	mov	r2, r6
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	47d0      	blx	sl
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d09d      	beq.n	8007a9e <_printf_i+0x15a>
 8007b62:	3501      	adds	r5, #1
 8007b64:	68e3      	ldr	r3, [r4, #12]
 8007b66:	9903      	ldr	r1, [sp, #12]
 8007b68:	1a5b      	subs	r3, r3, r1
 8007b6a:	42ab      	cmp	r3, r5
 8007b6c:	dcf2      	bgt.n	8007b54 <_printf_i+0x210>
 8007b6e:	e7eb      	b.n	8007b48 <_printf_i+0x204>
 8007b70:	2500      	movs	r5, #0
 8007b72:	f104 0619 	add.w	r6, r4, #25
 8007b76:	e7f5      	b.n	8007b64 <_printf_i+0x220>
 8007b78:	0800bbee 	.word	0x0800bbee
 8007b7c:	0800bbff 	.word	0x0800bbff

08007b80 <_scanf_float>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	b087      	sub	sp, #28
 8007b86:	4691      	mov	r9, r2
 8007b88:	9303      	str	r3, [sp, #12]
 8007b8a:	688b      	ldr	r3, [r1, #8]
 8007b8c:	1e5a      	subs	r2, r3, #1
 8007b8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b92:	bf81      	itttt	hi
 8007b94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b98:	eb03 0b05 	addhi.w	fp, r3, r5
 8007b9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007ba0:	608b      	strhi	r3, [r1, #8]
 8007ba2:	680b      	ldr	r3, [r1, #0]
 8007ba4:	460a      	mov	r2, r1
 8007ba6:	f04f 0500 	mov.w	r5, #0
 8007baa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007bae:	f842 3b1c 	str.w	r3, [r2], #28
 8007bb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	bf98      	it	ls
 8007bbc:	f04f 0b00 	movls.w	fp, #0
 8007bc0:	9201      	str	r2, [sp, #4]
 8007bc2:	4616      	mov	r6, r2
 8007bc4:	46aa      	mov	sl, r5
 8007bc6:	462f      	mov	r7, r5
 8007bc8:	9502      	str	r5, [sp, #8]
 8007bca:	68a2      	ldr	r2, [r4, #8]
 8007bcc:	b15a      	cbz	r2, 8007be6 <_scanf_float+0x66>
 8007bce:	f8d9 3000 	ldr.w	r3, [r9]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b4e      	cmp	r3, #78	@ 0x4e
 8007bd6:	d863      	bhi.n	8007ca0 <_scanf_float+0x120>
 8007bd8:	2b40      	cmp	r3, #64	@ 0x40
 8007bda:	d83b      	bhi.n	8007c54 <_scanf_float+0xd4>
 8007bdc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007be0:	b2c8      	uxtb	r0, r1
 8007be2:	280e      	cmp	r0, #14
 8007be4:	d939      	bls.n	8007c5a <_scanf_float+0xda>
 8007be6:	b11f      	cbz	r7, 8007bf0 <_scanf_float+0x70>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007bf4:	f1ba 0f01 	cmp.w	sl, #1
 8007bf8:	f200 8114 	bhi.w	8007e24 <_scanf_float+0x2a4>
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	429e      	cmp	r6, r3
 8007c00:	f200 8105 	bhi.w	8007e0e <_scanf_float+0x28e>
 8007c04:	2001      	movs	r0, #1
 8007c06:	b007      	add	sp, #28
 8007c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007c10:	2a0d      	cmp	r2, #13
 8007c12:	d8e8      	bhi.n	8007be6 <_scanf_float+0x66>
 8007c14:	a101      	add	r1, pc, #4	@ (adr r1, 8007c1c <_scanf_float+0x9c>)
 8007c16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007d65 	.word	0x08007d65
 8007c20:	08007be7 	.word	0x08007be7
 8007c24:	08007be7 	.word	0x08007be7
 8007c28:	08007be7 	.word	0x08007be7
 8007c2c:	08007dc1 	.word	0x08007dc1
 8007c30:	08007d9b 	.word	0x08007d9b
 8007c34:	08007be7 	.word	0x08007be7
 8007c38:	08007be7 	.word	0x08007be7
 8007c3c:	08007d73 	.word	0x08007d73
 8007c40:	08007be7 	.word	0x08007be7
 8007c44:	08007be7 	.word	0x08007be7
 8007c48:	08007be7 	.word	0x08007be7
 8007c4c:	08007be7 	.word	0x08007be7
 8007c50:	08007d2f 	.word	0x08007d2f
 8007c54:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007c58:	e7da      	b.n	8007c10 <_scanf_float+0x90>
 8007c5a:	290e      	cmp	r1, #14
 8007c5c:	d8c3      	bhi.n	8007be6 <_scanf_float+0x66>
 8007c5e:	a001      	add	r0, pc, #4	@ (adr r0, 8007c64 <_scanf_float+0xe4>)
 8007c60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c64:	08007d1f 	.word	0x08007d1f
 8007c68:	08007be7 	.word	0x08007be7
 8007c6c:	08007d1f 	.word	0x08007d1f
 8007c70:	08007daf 	.word	0x08007daf
 8007c74:	08007be7 	.word	0x08007be7
 8007c78:	08007cc1 	.word	0x08007cc1
 8007c7c:	08007d05 	.word	0x08007d05
 8007c80:	08007d05 	.word	0x08007d05
 8007c84:	08007d05 	.word	0x08007d05
 8007c88:	08007d05 	.word	0x08007d05
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d05 	.word	0x08007d05
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	2b6e      	cmp	r3, #110	@ 0x6e
 8007ca2:	d809      	bhi.n	8007cb8 <_scanf_float+0x138>
 8007ca4:	2b60      	cmp	r3, #96	@ 0x60
 8007ca6:	d8b1      	bhi.n	8007c0c <_scanf_float+0x8c>
 8007ca8:	2b54      	cmp	r3, #84	@ 0x54
 8007caa:	d07b      	beq.n	8007da4 <_scanf_float+0x224>
 8007cac:	2b59      	cmp	r3, #89	@ 0x59
 8007cae:	d19a      	bne.n	8007be6 <_scanf_float+0x66>
 8007cb0:	2d07      	cmp	r5, #7
 8007cb2:	d198      	bne.n	8007be6 <_scanf_float+0x66>
 8007cb4:	2508      	movs	r5, #8
 8007cb6:	e02f      	b.n	8007d18 <_scanf_float+0x198>
 8007cb8:	2b74      	cmp	r3, #116	@ 0x74
 8007cba:	d073      	beq.n	8007da4 <_scanf_float+0x224>
 8007cbc:	2b79      	cmp	r3, #121	@ 0x79
 8007cbe:	e7f6      	b.n	8007cae <_scanf_float+0x12e>
 8007cc0:	6821      	ldr	r1, [r4, #0]
 8007cc2:	05c8      	lsls	r0, r1, #23
 8007cc4:	d51e      	bpl.n	8007d04 <_scanf_float+0x184>
 8007cc6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007cca:	6021      	str	r1, [r4, #0]
 8007ccc:	3701      	adds	r7, #1
 8007cce:	f1bb 0f00 	cmp.w	fp, #0
 8007cd2:	d003      	beq.n	8007cdc <_scanf_float+0x15c>
 8007cd4:	3201      	adds	r2, #1
 8007cd6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007cda:	60a2      	str	r2, [r4, #8]
 8007cdc:	68a3      	ldr	r3, [r4, #8]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	60a3      	str	r3, [r4, #8]
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f8c9 3004 	str.w	r3, [r9, #4]
 8007cf4:	f340 8082 	ble.w	8007dfc <_scanf_float+0x27c>
 8007cf8:	f8d9 3000 	ldr.w	r3, [r9]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	f8c9 3000 	str.w	r3, [r9]
 8007d02:	e762      	b.n	8007bca <_scanf_float+0x4a>
 8007d04:	eb1a 0105 	adds.w	r1, sl, r5
 8007d08:	f47f af6d 	bne.w	8007be6 <_scanf_float+0x66>
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	460d      	mov	r5, r1
 8007d16:	468a      	mov	sl, r1
 8007d18:	f806 3b01 	strb.w	r3, [r6], #1
 8007d1c:	e7de      	b.n	8007cdc <_scanf_float+0x15c>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	0610      	lsls	r0, r2, #24
 8007d22:	f57f af60 	bpl.w	8007be6 <_scanf_float+0x66>
 8007d26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	e7f4      	b.n	8007d18 <_scanf_float+0x198>
 8007d2e:	f1ba 0f00 	cmp.w	sl, #0
 8007d32:	d10c      	bne.n	8007d4e <_scanf_float+0x1ce>
 8007d34:	b977      	cbnz	r7, 8007d54 <_scanf_float+0x1d4>
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d40:	d108      	bne.n	8007d54 <_scanf_float+0x1d4>
 8007d42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	f04f 0a01 	mov.w	sl, #1
 8007d4c:	e7e4      	b.n	8007d18 <_scanf_float+0x198>
 8007d4e:	f1ba 0f02 	cmp.w	sl, #2
 8007d52:	d050      	beq.n	8007df6 <_scanf_float+0x276>
 8007d54:	2d01      	cmp	r5, #1
 8007d56:	d002      	beq.n	8007d5e <_scanf_float+0x1de>
 8007d58:	2d04      	cmp	r5, #4
 8007d5a:	f47f af44 	bne.w	8007be6 <_scanf_float+0x66>
 8007d5e:	3501      	adds	r5, #1
 8007d60:	b2ed      	uxtb	r5, r5
 8007d62:	e7d9      	b.n	8007d18 <_scanf_float+0x198>
 8007d64:	f1ba 0f01 	cmp.w	sl, #1
 8007d68:	f47f af3d 	bne.w	8007be6 <_scanf_float+0x66>
 8007d6c:	f04f 0a02 	mov.w	sl, #2
 8007d70:	e7d2      	b.n	8007d18 <_scanf_float+0x198>
 8007d72:	b975      	cbnz	r5, 8007d92 <_scanf_float+0x212>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f47f af37 	bne.w	8007be8 <_scanf_float+0x68>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d84:	f040 8103 	bne.w	8007f8e <_scanf_float+0x40e>
 8007d88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	2501      	movs	r5, #1
 8007d90:	e7c2      	b.n	8007d18 <_scanf_float+0x198>
 8007d92:	2d03      	cmp	r5, #3
 8007d94:	d0e3      	beq.n	8007d5e <_scanf_float+0x1de>
 8007d96:	2d05      	cmp	r5, #5
 8007d98:	e7df      	b.n	8007d5a <_scanf_float+0x1da>
 8007d9a:	2d02      	cmp	r5, #2
 8007d9c:	f47f af23 	bne.w	8007be6 <_scanf_float+0x66>
 8007da0:	2503      	movs	r5, #3
 8007da2:	e7b9      	b.n	8007d18 <_scanf_float+0x198>
 8007da4:	2d06      	cmp	r5, #6
 8007da6:	f47f af1e 	bne.w	8007be6 <_scanf_float+0x66>
 8007daa:	2507      	movs	r5, #7
 8007dac:	e7b4      	b.n	8007d18 <_scanf_float+0x198>
 8007dae:	6822      	ldr	r2, [r4, #0]
 8007db0:	0591      	lsls	r1, r2, #22
 8007db2:	f57f af18 	bpl.w	8007be6 <_scanf_float+0x66>
 8007db6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007dba:	6022      	str	r2, [r4, #0]
 8007dbc:	9702      	str	r7, [sp, #8]
 8007dbe:	e7ab      	b.n	8007d18 <_scanf_float+0x198>
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007dc6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007dca:	d005      	beq.n	8007dd8 <_scanf_float+0x258>
 8007dcc:	0550      	lsls	r0, r2, #21
 8007dce:	f57f af0a 	bpl.w	8007be6 <_scanf_float+0x66>
 8007dd2:	2f00      	cmp	r7, #0
 8007dd4:	f000 80db 	beq.w	8007f8e <_scanf_float+0x40e>
 8007dd8:	0591      	lsls	r1, r2, #22
 8007dda:	bf58      	it	pl
 8007ddc:	9902      	ldrpl	r1, [sp, #8]
 8007dde:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007de2:	bf58      	it	pl
 8007de4:	1a79      	subpl	r1, r7, r1
 8007de6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007dea:	bf58      	it	pl
 8007dec:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	2700      	movs	r7, #0
 8007df4:	e790      	b.n	8007d18 <_scanf_float+0x198>
 8007df6:	f04f 0a03 	mov.w	sl, #3
 8007dfa:	e78d      	b.n	8007d18 <_scanf_float+0x198>
 8007dfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007e00:	4649      	mov	r1, r9
 8007e02:	4640      	mov	r0, r8
 8007e04:	4798      	blx	r3
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f aedf 	beq.w	8007bca <_scanf_float+0x4a>
 8007e0c:	e6eb      	b.n	8007be6 <_scanf_float+0x66>
 8007e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e16:	464a      	mov	r2, r9
 8007e18:	4640      	mov	r0, r8
 8007e1a:	4798      	blx	r3
 8007e1c:	6923      	ldr	r3, [r4, #16]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	6123      	str	r3, [r4, #16]
 8007e22:	e6eb      	b.n	8007bfc <_scanf_float+0x7c>
 8007e24:	1e6b      	subs	r3, r5, #1
 8007e26:	2b06      	cmp	r3, #6
 8007e28:	d824      	bhi.n	8007e74 <_scanf_float+0x2f4>
 8007e2a:	2d02      	cmp	r5, #2
 8007e2c:	d836      	bhi.n	8007e9c <_scanf_float+0x31c>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	429e      	cmp	r6, r3
 8007e32:	f67f aee7 	bls.w	8007c04 <_scanf_float+0x84>
 8007e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e3e:	464a      	mov	r2, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	4798      	blx	r3
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	6123      	str	r3, [r4, #16]
 8007e4a:	e7f0      	b.n	8007e2e <_scanf_float+0x2ae>
 8007e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007e54:	464a      	mov	r2, r9
 8007e56:	4640      	mov	r0, r8
 8007e58:	4798      	blx	r3
 8007e5a:	6923      	ldr	r3, [r4, #16]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	6123      	str	r3, [r4, #16]
 8007e60:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007e64:	fa5f fa8a 	uxtb.w	sl, sl
 8007e68:	f1ba 0f02 	cmp.w	sl, #2
 8007e6c:	d1ee      	bne.n	8007e4c <_scanf_float+0x2cc>
 8007e6e:	3d03      	subs	r5, #3
 8007e70:	b2ed      	uxtb	r5, r5
 8007e72:	1b76      	subs	r6, r6, r5
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	05da      	lsls	r2, r3, #23
 8007e78:	d530      	bpl.n	8007edc <_scanf_float+0x35c>
 8007e7a:	055b      	lsls	r3, r3, #21
 8007e7c:	d511      	bpl.n	8007ea2 <_scanf_float+0x322>
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	429e      	cmp	r6, r3
 8007e82:	f67f aebf 	bls.w	8007c04 <_scanf_float+0x84>
 8007e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e8e:	464a      	mov	r2, r9
 8007e90:	4640      	mov	r0, r8
 8007e92:	4798      	blx	r3
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	e7f0      	b.n	8007e7e <_scanf_float+0x2fe>
 8007e9c:	46aa      	mov	sl, r5
 8007e9e:	46b3      	mov	fp, r6
 8007ea0:	e7de      	b.n	8007e60 <_scanf_float+0x2e0>
 8007ea2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	2965      	cmp	r1, #101	@ 0x65
 8007eaa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007eae:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007eb2:	6123      	str	r3, [r4, #16]
 8007eb4:	d00c      	beq.n	8007ed0 <_scanf_float+0x350>
 8007eb6:	2945      	cmp	r1, #69	@ 0x45
 8007eb8:	d00a      	beq.n	8007ed0 <_scanf_float+0x350>
 8007eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ebe:	464a      	mov	r2, r9
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	4798      	blx	r3
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	1eb5      	subs	r5, r6, #2
 8007ece:	6123      	str	r3, [r4, #16]
 8007ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ed4:	464a      	mov	r2, r9
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4798      	blx	r3
 8007eda:	462e      	mov	r6, r5
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	f012 0210 	ands.w	r2, r2, #16
 8007ee2:	d001      	beq.n	8007ee8 <_scanf_float+0x368>
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e68e      	b.n	8007c06 <_scanf_float+0x86>
 8007ee8:	7032      	strb	r2, [r6, #0]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ef4:	d125      	bne.n	8007f42 <_scanf_float+0x3c2>
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	429f      	cmp	r7, r3
 8007efa:	d00a      	beq.n	8007f12 <_scanf_float+0x392>
 8007efc:	1bda      	subs	r2, r3, r7
 8007efe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007f02:	429e      	cmp	r6, r3
 8007f04:	bf28      	it	cs
 8007f06:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007f0a:	4922      	ldr	r1, [pc, #136]	@ (8007f94 <_scanf_float+0x414>)
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 f93d 	bl	800818c <siprintf>
 8007f12:	9901      	ldr	r1, [sp, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	4640      	mov	r0, r8
 8007f18:	f002 fc96 	bl	800a848 <_strtod_r>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	6821      	ldr	r1, [r4, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f011 0f02 	tst.w	r1, #2
 8007f26:	ec57 6b10 	vmov	r6, r7, d0
 8007f2a:	f103 0204 	add.w	r2, r3, #4
 8007f2e:	d015      	beq.n	8007f5c <_scanf_float+0x3dc>
 8007f30:	9903      	ldr	r1, [sp, #12]
 8007f32:	600a      	str	r2, [r1, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	e9c3 6700 	strd	r6, r7, [r3]
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60e3      	str	r3, [r4, #12]
 8007f40:	e7d0      	b.n	8007ee4 <_scanf_float+0x364>
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0e4      	beq.n	8007f12 <_scanf_float+0x392>
 8007f48:	9905      	ldr	r1, [sp, #20]
 8007f4a:	230a      	movs	r3, #10
 8007f4c:	3101      	adds	r1, #1
 8007f4e:	4640      	mov	r0, r8
 8007f50:	f002 fcfa 	bl	800a948 <_strtol_r>
 8007f54:	9b04      	ldr	r3, [sp, #16]
 8007f56:	9e05      	ldr	r6, [sp, #20]
 8007f58:	1ac2      	subs	r2, r0, r3
 8007f5a:	e7d0      	b.n	8007efe <_scanf_float+0x37e>
 8007f5c:	f011 0f04 	tst.w	r1, #4
 8007f60:	9903      	ldr	r1, [sp, #12]
 8007f62:	600a      	str	r2, [r1, #0]
 8007f64:	d1e6      	bne.n	8007f34 <_scanf_float+0x3b4>
 8007f66:	681d      	ldr	r5, [r3, #0]
 8007f68:	4632      	mov	r2, r6
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	4639      	mov	r1, r7
 8007f70:	f7f8 fddc 	bl	8000b2c <__aeabi_dcmpun>
 8007f74:	b128      	cbz	r0, 8007f82 <_scanf_float+0x402>
 8007f76:	4808      	ldr	r0, [pc, #32]	@ (8007f98 <_scanf_float+0x418>)
 8007f78:	f000 fa5a 	bl	8008430 <nanf>
 8007f7c:	ed85 0a00 	vstr	s0, [r5]
 8007f80:	e7db      	b.n	8007f3a <_scanf_float+0x3ba>
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 fe2f 	bl	8000be8 <__aeabi_d2f>
 8007f8a:	6028      	str	r0, [r5, #0]
 8007f8c:	e7d5      	b.n	8007f3a <_scanf_float+0x3ba>
 8007f8e:	2700      	movs	r7, #0
 8007f90:	e62e      	b.n	8007bf0 <_scanf_float+0x70>
 8007f92:	bf00      	nop
 8007f94:	0800bc10 	.word	0x0800bc10
 8007f98:	0800bd51 	.word	0x0800bd51

08007f9c <std>:
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007faa:	6083      	str	r3, [r0, #8]
 8007fac:	8181      	strh	r1, [r0, #12]
 8007fae:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fb0:	81c2      	strh	r2, [r0, #14]
 8007fb2:	6183      	str	r3, [r0, #24]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	305c      	adds	r0, #92	@ 0x5c
 8007fba:	f000 f94c 	bl	8008256 <memset>
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x58>)
 8007fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <std+0x5c>)
 8007fc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x60>)
 8007fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <std+0x64>)
 8007fcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <std+0x68>)
 8007fd0:	6224      	str	r4, [r4, #32]
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d006      	beq.n	8007fe4 <std+0x48>
 8007fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fda:	4294      	cmp	r4, r2
 8007fdc:	d002      	beq.n	8007fe4 <std+0x48>
 8007fde:	33d0      	adds	r3, #208	@ 0xd0
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	d105      	bne.n	8007ff0 <std+0x54>
 8007fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fec:	f000 ba0e 	b.w	800840c <__retarget_lock_init_recursive>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	bf00      	nop
 8007ff4:	080081d1 	.word	0x080081d1
 8007ff8:	080081f3 	.word	0x080081f3
 8007ffc:	0800822b 	.word	0x0800822b
 8008000:	0800824f 	.word	0x0800824f
 8008004:	200043d0 	.word	0x200043d0

08008008 <stdio_exit_handler>:
 8008008:	4a02      	ldr	r2, [pc, #8]	@ (8008014 <stdio_exit_handler+0xc>)
 800800a:	4903      	ldr	r1, [pc, #12]	@ (8008018 <stdio_exit_handler+0x10>)
 800800c:	4803      	ldr	r0, [pc, #12]	@ (800801c <stdio_exit_handler+0x14>)
 800800e:	f000 b869 	b.w	80080e4 <_fwalk_sglue>
 8008012:	bf00      	nop
 8008014:	20000010 	.word	0x20000010
 8008018:	0800ad05 	.word	0x0800ad05
 800801c:	20000020 	.word	0x20000020

08008020 <cleanup_stdio>:
 8008020:	6841      	ldr	r1, [r0, #4]
 8008022:	4b0c      	ldr	r3, [pc, #48]	@ (8008054 <cleanup_stdio+0x34>)
 8008024:	4299      	cmp	r1, r3
 8008026:	b510      	push	{r4, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	d001      	beq.n	8008030 <cleanup_stdio+0x10>
 800802c:	f002 fe6a 	bl	800ad04 <_fflush_r>
 8008030:	68a1      	ldr	r1, [r4, #8]
 8008032:	4b09      	ldr	r3, [pc, #36]	@ (8008058 <cleanup_stdio+0x38>)
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <cleanup_stdio+0x1e>
 8008038:	4620      	mov	r0, r4
 800803a:	f002 fe63 	bl	800ad04 <_fflush_r>
 800803e:	68e1      	ldr	r1, [r4, #12]
 8008040:	4b06      	ldr	r3, [pc, #24]	@ (800805c <cleanup_stdio+0x3c>)
 8008042:	4299      	cmp	r1, r3
 8008044:	d004      	beq.n	8008050 <cleanup_stdio+0x30>
 8008046:	4620      	mov	r0, r4
 8008048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804c:	f002 be5a 	b.w	800ad04 <_fflush_r>
 8008050:	bd10      	pop	{r4, pc}
 8008052:	bf00      	nop
 8008054:	200043d0 	.word	0x200043d0
 8008058:	20004438 	.word	0x20004438
 800805c:	200044a0 	.word	0x200044a0

08008060 <global_stdio_init.part.0>:
 8008060:	b510      	push	{r4, lr}
 8008062:	4b0b      	ldr	r3, [pc, #44]	@ (8008090 <global_stdio_init.part.0+0x30>)
 8008064:	4c0b      	ldr	r4, [pc, #44]	@ (8008094 <global_stdio_init.part.0+0x34>)
 8008066:	4a0c      	ldr	r2, [pc, #48]	@ (8008098 <global_stdio_init.part.0+0x38>)
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	4620      	mov	r0, r4
 800806c:	2200      	movs	r2, #0
 800806e:	2104      	movs	r1, #4
 8008070:	f7ff ff94 	bl	8007f9c <std>
 8008074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008078:	2201      	movs	r2, #1
 800807a:	2109      	movs	r1, #9
 800807c:	f7ff ff8e 	bl	8007f9c <std>
 8008080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008084:	2202      	movs	r2, #2
 8008086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800808a:	2112      	movs	r1, #18
 800808c:	f7ff bf86 	b.w	8007f9c <std>
 8008090:	20004508 	.word	0x20004508
 8008094:	200043d0 	.word	0x200043d0
 8008098:	08008009 	.word	0x08008009

0800809c <__sfp_lock_acquire>:
 800809c:	4801      	ldr	r0, [pc, #4]	@ (80080a4 <__sfp_lock_acquire+0x8>)
 800809e:	f000 b9b6 	b.w	800840e <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	20004511 	.word	0x20004511

080080a8 <__sfp_lock_release>:
 80080a8:	4801      	ldr	r0, [pc, #4]	@ (80080b0 <__sfp_lock_release+0x8>)
 80080aa:	f000 b9b1 	b.w	8008410 <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	20004511 	.word	0x20004511

080080b4 <__sinit>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	4604      	mov	r4, r0
 80080b8:	f7ff fff0 	bl	800809c <__sfp_lock_acquire>
 80080bc:	6a23      	ldr	r3, [r4, #32]
 80080be:	b11b      	cbz	r3, 80080c8 <__sinit+0x14>
 80080c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c4:	f7ff bff0 	b.w	80080a8 <__sfp_lock_release>
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <__sinit+0x28>)
 80080ca:	6223      	str	r3, [r4, #32]
 80080cc:	4b04      	ldr	r3, [pc, #16]	@ (80080e0 <__sinit+0x2c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f5      	bne.n	80080c0 <__sinit+0xc>
 80080d4:	f7ff ffc4 	bl	8008060 <global_stdio_init.part.0>
 80080d8:	e7f2      	b.n	80080c0 <__sinit+0xc>
 80080da:	bf00      	nop
 80080dc:	08008021 	.word	0x08008021
 80080e0:	20004508 	.word	0x20004508

080080e4 <_fwalk_sglue>:
 80080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	4607      	mov	r7, r0
 80080ea:	4688      	mov	r8, r1
 80080ec:	4614      	mov	r4, r2
 80080ee:	2600      	movs	r6, #0
 80080f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080f4:	f1b9 0901 	subs.w	r9, r9, #1
 80080f8:	d505      	bpl.n	8008106 <_fwalk_sglue+0x22>
 80080fa:	6824      	ldr	r4, [r4, #0]
 80080fc:	2c00      	cmp	r4, #0
 80080fe:	d1f7      	bne.n	80080f0 <_fwalk_sglue+0xc>
 8008100:	4630      	mov	r0, r6
 8008102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d907      	bls.n	800811c <_fwalk_sglue+0x38>
 800810c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008110:	3301      	adds	r3, #1
 8008112:	d003      	beq.n	800811c <_fwalk_sglue+0x38>
 8008114:	4629      	mov	r1, r5
 8008116:	4638      	mov	r0, r7
 8008118:	47c0      	blx	r8
 800811a:	4306      	orrs	r6, r0
 800811c:	3568      	adds	r5, #104	@ 0x68
 800811e:	e7e9      	b.n	80080f4 <_fwalk_sglue+0x10>

08008120 <sniprintf>:
 8008120:	b40c      	push	{r2, r3}
 8008122:	b530      	push	{r4, r5, lr}
 8008124:	4b18      	ldr	r3, [pc, #96]	@ (8008188 <sniprintf+0x68>)
 8008126:	1e0c      	subs	r4, r1, #0
 8008128:	681d      	ldr	r5, [r3, #0]
 800812a:	b09d      	sub	sp, #116	@ 0x74
 800812c:	da08      	bge.n	8008140 <sniprintf+0x20>
 800812e:	238b      	movs	r3, #139	@ 0x8b
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008136:	b01d      	add	sp, #116	@ 0x74
 8008138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800813c:	b002      	add	sp, #8
 800813e:	4770      	bx	lr
 8008140:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008144:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800814e:	bf14      	ite	ne
 8008150:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008154:	4623      	moveq	r3, r4
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	9307      	str	r3, [sp, #28]
 800815a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800815e:	9002      	str	r0, [sp, #8]
 8008160:	9006      	str	r0, [sp, #24]
 8008162:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008166:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008168:	ab21      	add	r3, sp, #132	@ 0x84
 800816a:	a902      	add	r1, sp, #8
 800816c:	4628      	mov	r0, r5
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	f002 fc48 	bl	800aa04 <_svfiprintf_r>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	bfbc      	itt	lt
 8008178:	238b      	movlt	r3, #139	@ 0x8b
 800817a:	602b      	strlt	r3, [r5, #0]
 800817c:	2c00      	cmp	r4, #0
 800817e:	d0da      	beq.n	8008136 <sniprintf+0x16>
 8008180:	9b02      	ldr	r3, [sp, #8]
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e7d6      	b.n	8008136 <sniprintf+0x16>
 8008188:	2000001c 	.word	0x2000001c

0800818c <siprintf>:
 800818c:	b40e      	push	{r1, r2, r3}
 800818e:	b510      	push	{r4, lr}
 8008190:	b09d      	sub	sp, #116	@ 0x74
 8008192:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008194:	9002      	str	r0, [sp, #8]
 8008196:	9006      	str	r0, [sp, #24]
 8008198:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800819c:	480a      	ldr	r0, [pc, #40]	@ (80081c8 <siprintf+0x3c>)
 800819e:	9107      	str	r1, [sp, #28]
 80081a0:	9104      	str	r1, [sp, #16]
 80081a2:	490a      	ldr	r1, [pc, #40]	@ (80081cc <siprintf+0x40>)
 80081a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081a8:	9105      	str	r1, [sp, #20]
 80081aa:	2400      	movs	r4, #0
 80081ac:	a902      	add	r1, sp, #8
 80081ae:	6800      	ldr	r0, [r0, #0]
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80081b4:	f002 fc26 	bl	800aa04 <_svfiprintf_r>
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	701c      	strb	r4, [r3, #0]
 80081bc:	b01d      	add	sp, #116	@ 0x74
 80081be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c2:	b003      	add	sp, #12
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	2000001c 	.word	0x2000001c
 80081cc:	ffff0208 	.word	0xffff0208

080081d0 <__sread>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	460c      	mov	r4, r1
 80081d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d8:	f000 f8ca 	bl	8008370 <_read_r>
 80081dc:	2800      	cmp	r0, #0
 80081de:	bfab      	itete	ge
 80081e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081e2:	89a3      	ldrhlt	r3, [r4, #12]
 80081e4:	181b      	addge	r3, r3, r0
 80081e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081ea:	bfac      	ite	ge
 80081ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081ee:	81a3      	strhlt	r3, [r4, #12]
 80081f0:	bd10      	pop	{r4, pc}

080081f2 <__swrite>:
 80081f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f6:	461f      	mov	r7, r3
 80081f8:	898b      	ldrh	r3, [r1, #12]
 80081fa:	05db      	lsls	r3, r3, #23
 80081fc:	4605      	mov	r5, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	4616      	mov	r6, r2
 8008202:	d505      	bpl.n	8008210 <__swrite+0x1e>
 8008204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008208:	2302      	movs	r3, #2
 800820a:	2200      	movs	r2, #0
 800820c:	f000 f89e 	bl	800834c <_lseek_r>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	4632      	mov	r2, r6
 800821e:	463b      	mov	r3, r7
 8008220:	4628      	mov	r0, r5
 8008222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008226:	f000 b8b5 	b.w	8008394 <_write_r>

0800822a <__sseek>:
 800822a:	b510      	push	{r4, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008232:	f000 f88b 	bl	800834c <_lseek_r>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	bf15      	itete	ne
 800823c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800823e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008242:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008246:	81a3      	strheq	r3, [r4, #12]
 8008248:	bf18      	it	ne
 800824a:	81a3      	strhne	r3, [r4, #12]
 800824c:	bd10      	pop	{r4, pc}

0800824e <__sclose>:
 800824e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008252:	f000 b80d 	b.w	8008270 <_close_r>

08008256 <memset>:
 8008256:	4402      	add	r2, r0
 8008258:	4603      	mov	r3, r0
 800825a:	4293      	cmp	r3, r2
 800825c:	d100      	bne.n	8008260 <memset+0xa>
 800825e:	4770      	bx	lr
 8008260:	f803 1b01 	strb.w	r1, [r3], #1
 8008264:	e7f9      	b.n	800825a <memset+0x4>
	...

08008268 <_localeconv_r>:
 8008268:	4800      	ldr	r0, [pc, #0]	@ (800826c <_localeconv_r+0x4>)
 800826a:	4770      	bx	lr
 800826c:	2000015c 	.word	0x2000015c

08008270 <_close_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d06      	ldr	r5, [pc, #24]	@ (800828c <_close_r+0x1c>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	f7f9 fe60 	bl	8001f40 <_close>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_close_r+0x1a>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_close_r+0x1a>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	2000450c 	.word	0x2000450c

08008290 <_reclaim_reent>:
 8008290:	4b2d      	ldr	r3, [pc, #180]	@ (8008348 <_reclaim_reent+0xb8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4283      	cmp	r3, r0
 8008296:	b570      	push	{r4, r5, r6, lr}
 8008298:	4604      	mov	r4, r0
 800829a:	d053      	beq.n	8008344 <_reclaim_reent+0xb4>
 800829c:	69c3      	ldr	r3, [r0, #28]
 800829e:	b31b      	cbz	r3, 80082e8 <_reclaim_reent+0x58>
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	b163      	cbz	r3, 80082be <_reclaim_reent+0x2e>
 80082a4:	2500      	movs	r5, #0
 80082a6:	69e3      	ldr	r3, [r4, #28]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	5959      	ldr	r1, [r3, r5]
 80082ac:	b9b1      	cbnz	r1, 80082dc <_reclaim_reent+0x4c>
 80082ae:	3504      	adds	r5, #4
 80082b0:	2d80      	cmp	r5, #128	@ 0x80
 80082b2:	d1f8      	bne.n	80082a6 <_reclaim_reent+0x16>
 80082b4:	69e3      	ldr	r3, [r4, #28]
 80082b6:	4620      	mov	r0, r4
 80082b8:	68d9      	ldr	r1, [r3, #12]
 80082ba:	f000 ff19 	bl	80090f0 <_free_r>
 80082be:	69e3      	ldr	r3, [r4, #28]
 80082c0:	6819      	ldr	r1, [r3, #0]
 80082c2:	b111      	cbz	r1, 80082ca <_reclaim_reent+0x3a>
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 ff13 	bl	80090f0 <_free_r>
 80082ca:	69e3      	ldr	r3, [r4, #28]
 80082cc:	689d      	ldr	r5, [r3, #8]
 80082ce:	b15d      	cbz	r5, 80082e8 <_reclaim_reent+0x58>
 80082d0:	4629      	mov	r1, r5
 80082d2:	4620      	mov	r0, r4
 80082d4:	682d      	ldr	r5, [r5, #0]
 80082d6:	f000 ff0b 	bl	80090f0 <_free_r>
 80082da:	e7f8      	b.n	80082ce <_reclaim_reent+0x3e>
 80082dc:	680e      	ldr	r6, [r1, #0]
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 ff06 	bl	80090f0 <_free_r>
 80082e4:	4631      	mov	r1, r6
 80082e6:	e7e1      	b.n	80082ac <_reclaim_reent+0x1c>
 80082e8:	6961      	ldr	r1, [r4, #20]
 80082ea:	b111      	cbz	r1, 80082f2 <_reclaim_reent+0x62>
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 feff 	bl	80090f0 <_free_r>
 80082f2:	69e1      	ldr	r1, [r4, #28]
 80082f4:	b111      	cbz	r1, 80082fc <_reclaim_reent+0x6c>
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fefa 	bl	80090f0 <_free_r>
 80082fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80082fe:	b111      	cbz	r1, 8008306 <_reclaim_reent+0x76>
 8008300:	4620      	mov	r0, r4
 8008302:	f000 fef5 	bl	80090f0 <_free_r>
 8008306:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008308:	b111      	cbz	r1, 8008310 <_reclaim_reent+0x80>
 800830a:	4620      	mov	r0, r4
 800830c:	f000 fef0 	bl	80090f0 <_free_r>
 8008310:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008312:	b111      	cbz	r1, 800831a <_reclaim_reent+0x8a>
 8008314:	4620      	mov	r0, r4
 8008316:	f000 feeb 	bl	80090f0 <_free_r>
 800831a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800831c:	b111      	cbz	r1, 8008324 <_reclaim_reent+0x94>
 800831e:	4620      	mov	r0, r4
 8008320:	f000 fee6 	bl	80090f0 <_free_r>
 8008324:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008326:	b111      	cbz	r1, 800832e <_reclaim_reent+0x9e>
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fee1 	bl	80090f0 <_free_r>
 800832e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008330:	b111      	cbz	r1, 8008338 <_reclaim_reent+0xa8>
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fedc 	bl	80090f0 <_free_r>
 8008338:	6a23      	ldr	r3, [r4, #32]
 800833a:	b11b      	cbz	r3, 8008344 <_reclaim_reent+0xb4>
 800833c:	4620      	mov	r0, r4
 800833e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008342:	4718      	bx	r3
 8008344:	bd70      	pop	{r4, r5, r6, pc}
 8008346:	bf00      	nop
 8008348:	2000001c 	.word	0x2000001c

0800834c <_lseek_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	@ (800836c <_lseek_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7f9 fe17 	bl	8001f8e <_lseek>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_lseek_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_lseek_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	2000450c 	.word	0x2000450c

08008370 <_read_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	@ (8008390 <_read_r+0x20>)
 8008374:	4604      	mov	r4, r0
 8008376:	4608      	mov	r0, r1
 8008378:	4611      	mov	r1, r2
 800837a:	2200      	movs	r2, #0
 800837c:	602a      	str	r2, [r5, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	f7f9 fda5 	bl	8001ece <_read>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_read_r+0x1e>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_read_r+0x1e>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	2000450c 	.word	0x2000450c

08008394 <_write_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	@ (80083b4 <_write_r+0x20>)
 8008398:	4604      	mov	r4, r0
 800839a:	4608      	mov	r0, r1
 800839c:	4611      	mov	r1, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f7f9 fdb0 	bl	8001f08 <_write>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_write_r+0x1e>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_write_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	2000450c 	.word	0x2000450c

080083b8 <__errno>:
 80083b8:	4b01      	ldr	r3, [pc, #4]	@ (80083c0 <__errno+0x8>)
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	2000001c 	.word	0x2000001c

080083c4 <__libc_init_array>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4d0d      	ldr	r5, [pc, #52]	@ (80083fc <__libc_init_array+0x38>)
 80083c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008400 <__libc_init_array+0x3c>)
 80083ca:	1b64      	subs	r4, r4, r5
 80083cc:	10a4      	asrs	r4, r4, #2
 80083ce:	2600      	movs	r6, #0
 80083d0:	42a6      	cmp	r6, r4
 80083d2:	d109      	bne.n	80083e8 <__libc_init_array+0x24>
 80083d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008404 <__libc_init_array+0x40>)
 80083d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008408 <__libc_init_array+0x44>)
 80083d8:	f003 fb78 	bl	800bacc <_init>
 80083dc:	1b64      	subs	r4, r4, r5
 80083de:	10a4      	asrs	r4, r4, #2
 80083e0:	2600      	movs	r6, #0
 80083e2:	42a6      	cmp	r6, r4
 80083e4:	d105      	bne.n	80083f2 <__libc_init_array+0x2e>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ec:	4798      	blx	r3
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7ee      	b.n	80083d0 <__libc_init_array+0xc>
 80083f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f6:	4798      	blx	r3
 80083f8:	3601      	adds	r6, #1
 80083fa:	e7f2      	b.n	80083e2 <__libc_init_array+0x1e>
 80083fc:	0800c00c 	.word	0x0800c00c
 8008400:	0800c00c 	.word	0x0800c00c
 8008404:	0800c00c 	.word	0x0800c00c
 8008408:	0800c010 	.word	0x0800c010

0800840c <__retarget_lock_init_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_acquire_recursive>:
 800840e:	4770      	bx	lr

08008410 <__retarget_lock_release_recursive>:
 8008410:	4770      	bx	lr

08008412 <memcpy>:
 8008412:	440a      	add	r2, r1
 8008414:	4291      	cmp	r1, r2
 8008416:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800841a:	d100      	bne.n	800841e <memcpy+0xc>
 800841c:	4770      	bx	lr
 800841e:	b510      	push	{r4, lr}
 8008420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008428:	4291      	cmp	r1, r2
 800842a:	d1f9      	bne.n	8008420 <memcpy+0xe>
 800842c:	bd10      	pop	{r4, pc}
	...

08008430 <nanf>:
 8008430:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008438 <nanf+0x8>
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	7fc00000 	.word	0x7fc00000

0800843c <quorem>:
 800843c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	6903      	ldr	r3, [r0, #16]
 8008442:	690c      	ldr	r4, [r1, #16]
 8008444:	42a3      	cmp	r3, r4
 8008446:	4607      	mov	r7, r0
 8008448:	db7e      	blt.n	8008548 <quorem+0x10c>
 800844a:	3c01      	subs	r4, #1
 800844c:	f101 0814 	add.w	r8, r1, #20
 8008450:	00a3      	lsls	r3, r4, #2
 8008452:	f100 0514 	add.w	r5, r0, #20
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008466:	3301      	adds	r3, #1
 8008468:	429a      	cmp	r2, r3
 800846a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800846e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008472:	d32e      	bcc.n	80084d2 <quorem+0x96>
 8008474:	f04f 0a00 	mov.w	sl, #0
 8008478:	46c4      	mov	ip, r8
 800847a:	46ae      	mov	lr, r5
 800847c:	46d3      	mov	fp, sl
 800847e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008482:	b298      	uxth	r0, r3
 8008484:	fb06 a000 	mla	r0, r6, r0, sl
 8008488:	0c02      	lsrs	r2, r0, #16
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	fb06 2303 	mla	r3, r6, r3, r2
 8008490:	f8de 2000 	ldr.w	r2, [lr]
 8008494:	b280      	uxth	r0, r0
 8008496:	b292      	uxth	r2, r2
 8008498:	1a12      	subs	r2, r2, r0
 800849a:	445a      	add	r2, fp
 800849c:	f8de 0000 	ldr.w	r0, [lr]
 80084a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084ae:	b292      	uxth	r2, r2
 80084b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084b4:	45e1      	cmp	r9, ip
 80084b6:	f84e 2b04 	str.w	r2, [lr], #4
 80084ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084be:	d2de      	bcs.n	800847e <quorem+0x42>
 80084c0:	9b00      	ldr	r3, [sp, #0]
 80084c2:	58eb      	ldr	r3, [r5, r3]
 80084c4:	b92b      	cbnz	r3, 80084d2 <quorem+0x96>
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	429d      	cmp	r5, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	d32f      	bcc.n	8008530 <quorem+0xf4>
 80084d0:	613c      	str	r4, [r7, #16]
 80084d2:	4638      	mov	r0, r7
 80084d4:	f001 f9c8 	bl	8009868 <__mcmp>
 80084d8:	2800      	cmp	r0, #0
 80084da:	db25      	blt.n	8008528 <quorem+0xec>
 80084dc:	4629      	mov	r1, r5
 80084de:	2000      	movs	r0, #0
 80084e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80084e4:	f8d1 c000 	ldr.w	ip, [r1]
 80084e8:	fa1f fe82 	uxth.w	lr, r2
 80084ec:	fa1f f38c 	uxth.w	r3, ip
 80084f0:	eba3 030e 	sub.w	r3, r3, lr
 80084f4:	4403      	add	r3, r0
 80084f6:	0c12      	lsrs	r2, r2, #16
 80084f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008500:	b29b      	uxth	r3, r3
 8008502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008506:	45c1      	cmp	r9, r8
 8008508:	f841 3b04 	str.w	r3, [r1], #4
 800850c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008510:	d2e6      	bcs.n	80084e0 <quorem+0xa4>
 8008512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800851a:	b922      	cbnz	r2, 8008526 <quorem+0xea>
 800851c:	3b04      	subs	r3, #4
 800851e:	429d      	cmp	r5, r3
 8008520:	461a      	mov	r2, r3
 8008522:	d30b      	bcc.n	800853c <quorem+0x100>
 8008524:	613c      	str	r4, [r7, #16]
 8008526:	3601      	adds	r6, #1
 8008528:	4630      	mov	r0, r6
 800852a:	b003      	add	sp, #12
 800852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	3b04      	subs	r3, #4
 8008534:	2a00      	cmp	r2, #0
 8008536:	d1cb      	bne.n	80084d0 <quorem+0x94>
 8008538:	3c01      	subs	r4, #1
 800853a:	e7c6      	b.n	80084ca <quorem+0x8e>
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	3b04      	subs	r3, #4
 8008540:	2a00      	cmp	r2, #0
 8008542:	d1ef      	bne.n	8008524 <quorem+0xe8>
 8008544:	3c01      	subs	r4, #1
 8008546:	e7ea      	b.n	800851e <quorem+0xe2>
 8008548:	2000      	movs	r0, #0
 800854a:	e7ee      	b.n	800852a <quorem+0xee>
 800854c:	0000      	movs	r0, r0
	...

08008550 <_dtoa_r>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	69c7      	ldr	r7, [r0, #28]
 8008556:	b097      	sub	sp, #92	@ 0x5c
 8008558:	ed8d 0b04 	vstr	d0, [sp, #16]
 800855c:	ec55 4b10 	vmov	r4, r5, d0
 8008560:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008562:	9107      	str	r1, [sp, #28]
 8008564:	4681      	mov	r9, r0
 8008566:	920c      	str	r2, [sp, #48]	@ 0x30
 8008568:	9311      	str	r3, [sp, #68]	@ 0x44
 800856a:	b97f      	cbnz	r7, 800858c <_dtoa_r+0x3c>
 800856c:	2010      	movs	r0, #16
 800856e:	f000 fe09 	bl	8009184 <malloc>
 8008572:	4602      	mov	r2, r0
 8008574:	f8c9 001c 	str.w	r0, [r9, #28]
 8008578:	b920      	cbnz	r0, 8008584 <_dtoa_r+0x34>
 800857a:	4ba9      	ldr	r3, [pc, #676]	@ (8008820 <_dtoa_r+0x2d0>)
 800857c:	21ef      	movs	r1, #239	@ 0xef
 800857e:	48a9      	ldr	r0, [pc, #676]	@ (8008824 <_dtoa_r+0x2d4>)
 8008580:	f002 fc2e 	bl	800ade0 <__assert_func>
 8008584:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008588:	6007      	str	r7, [r0, #0]
 800858a:	60c7      	str	r7, [r0, #12]
 800858c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	b159      	cbz	r1, 80085ac <_dtoa_r+0x5c>
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	604a      	str	r2, [r1, #4]
 8008598:	2301      	movs	r3, #1
 800859a:	4093      	lsls	r3, r2
 800859c:	608b      	str	r3, [r1, #8]
 800859e:	4648      	mov	r0, r9
 80085a0:	f000 fee6 	bl	8009370 <_Bfree>
 80085a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	1e2b      	subs	r3, r5, #0
 80085ae:	bfb9      	ittee	lt
 80085b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085b4:	9305      	strlt	r3, [sp, #20]
 80085b6:	2300      	movge	r3, #0
 80085b8:	6033      	strge	r3, [r6, #0]
 80085ba:	9f05      	ldr	r7, [sp, #20]
 80085bc:	4b9a      	ldr	r3, [pc, #616]	@ (8008828 <_dtoa_r+0x2d8>)
 80085be:	bfbc      	itt	lt
 80085c0:	2201      	movlt	r2, #1
 80085c2:	6032      	strlt	r2, [r6, #0]
 80085c4:	43bb      	bics	r3, r7
 80085c6:	d112      	bne.n	80085ee <_dtoa_r+0x9e>
 80085c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80085ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085d4:	4323      	orrs	r3, r4
 80085d6:	f000 855a 	beq.w	800908e <_dtoa_r+0xb3e>
 80085da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800883c <_dtoa_r+0x2ec>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 855c 	beq.w	800909e <_dtoa_r+0xb4e>
 80085e6:	f10a 0303 	add.w	r3, sl, #3
 80085ea:	f000 bd56 	b.w	800909a <_dtoa_r+0xb4a>
 80085ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80085f2:	2200      	movs	r2, #0
 80085f4:	ec51 0b17 	vmov	r0, r1, d7
 80085f8:	2300      	movs	r3, #0
 80085fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80085fe:	f7f8 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8008602:	4680      	mov	r8, r0
 8008604:	b158      	cbz	r0, 800861e <_dtoa_r+0xce>
 8008606:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008608:	2301      	movs	r3, #1
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800860e:	b113      	cbz	r3, 8008616 <_dtoa_r+0xc6>
 8008610:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008612:	4b86      	ldr	r3, [pc, #536]	@ (800882c <_dtoa_r+0x2dc>)
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008840 <_dtoa_r+0x2f0>
 800861a:	f000 bd40 	b.w	800909e <_dtoa_r+0xb4e>
 800861e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008622:	aa14      	add	r2, sp, #80	@ 0x50
 8008624:	a915      	add	r1, sp, #84	@ 0x54
 8008626:	4648      	mov	r0, r9
 8008628:	f001 fa3e 	bl	8009aa8 <__d2b>
 800862c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008630:	9002      	str	r0, [sp, #8]
 8008632:	2e00      	cmp	r6, #0
 8008634:	d078      	beq.n	8008728 <_dtoa_r+0x1d8>
 8008636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008638:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800863c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008644:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008648:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800864c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008650:	4619      	mov	r1, r3
 8008652:	2200      	movs	r2, #0
 8008654:	4b76      	ldr	r3, [pc, #472]	@ (8008830 <_dtoa_r+0x2e0>)
 8008656:	f7f7 fe17 	bl	8000288 <__aeabi_dsub>
 800865a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008808 <_dtoa_r+0x2b8>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	a36a      	add	r3, pc, #424	@ (adr r3, 8008810 <_dtoa_r+0x2c0>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f7 fe0f 	bl	800028c <__adddf3>
 800866e:	4604      	mov	r4, r0
 8008670:	4630      	mov	r0, r6
 8008672:	460d      	mov	r5, r1
 8008674:	f7f7 ff56 	bl	8000524 <__aeabi_i2d>
 8008678:	a367      	add	r3, pc, #412	@ (adr r3, 8008818 <_dtoa_r+0x2c8>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f7 fdff 	bl	800028c <__adddf3>
 800868e:	4604      	mov	r4, r0
 8008690:	460d      	mov	r5, r1
 8008692:	f7f8 fa61 	bl	8000b58 <__aeabi_d2iz>
 8008696:	2200      	movs	r2, #0
 8008698:	4607      	mov	r7, r0
 800869a:	2300      	movs	r3, #0
 800869c:	4620      	mov	r0, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	f7f8 fa1c 	bl	8000adc <__aeabi_dcmplt>
 80086a4:	b140      	cbz	r0, 80086b8 <_dtoa_r+0x168>
 80086a6:	4638      	mov	r0, r7
 80086a8:	f7f7 ff3c 	bl	8000524 <__aeabi_i2d>
 80086ac:	4622      	mov	r2, r4
 80086ae:	462b      	mov	r3, r5
 80086b0:	f7f8 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b4:	b900      	cbnz	r0, 80086b8 <_dtoa_r+0x168>
 80086b6:	3f01      	subs	r7, #1
 80086b8:	2f16      	cmp	r7, #22
 80086ba:	d852      	bhi.n	8008762 <_dtoa_r+0x212>
 80086bc:	4b5d      	ldr	r3, [pc, #372]	@ (8008834 <_dtoa_r+0x2e4>)
 80086be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086ca:	f7f8 fa07 	bl	8000adc <__aeabi_dcmplt>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d049      	beq.n	8008766 <_dtoa_r+0x216>
 80086d2:	3f01      	subs	r7, #1
 80086d4:	2300      	movs	r3, #0
 80086d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80086d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086da:	1b9b      	subs	r3, r3, r6
 80086dc:	1e5a      	subs	r2, r3, #1
 80086de:	bf45      	ittet	mi
 80086e0:	f1c3 0301 	rsbmi	r3, r3, #1
 80086e4:	9300      	strmi	r3, [sp, #0]
 80086e6:	2300      	movpl	r3, #0
 80086e8:	2300      	movmi	r3, #0
 80086ea:	9206      	str	r2, [sp, #24]
 80086ec:	bf54      	ite	pl
 80086ee:	9300      	strpl	r3, [sp, #0]
 80086f0:	9306      	strmi	r3, [sp, #24]
 80086f2:	2f00      	cmp	r7, #0
 80086f4:	db39      	blt.n	800876a <_dtoa_r+0x21a>
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	970d      	str	r7, [sp, #52]	@ 0x34
 80086fa:	443b      	add	r3, r7
 80086fc:	9306      	str	r3, [sp, #24]
 80086fe:	2300      	movs	r3, #0
 8008700:	9308      	str	r3, [sp, #32]
 8008702:	9b07      	ldr	r3, [sp, #28]
 8008704:	2b09      	cmp	r3, #9
 8008706:	d863      	bhi.n	80087d0 <_dtoa_r+0x280>
 8008708:	2b05      	cmp	r3, #5
 800870a:	bfc4      	itt	gt
 800870c:	3b04      	subgt	r3, #4
 800870e:	9307      	strgt	r3, [sp, #28]
 8008710:	9b07      	ldr	r3, [sp, #28]
 8008712:	f1a3 0302 	sub.w	r3, r3, #2
 8008716:	bfcc      	ite	gt
 8008718:	2400      	movgt	r4, #0
 800871a:	2401      	movle	r4, #1
 800871c:	2b03      	cmp	r3, #3
 800871e:	d863      	bhi.n	80087e8 <_dtoa_r+0x298>
 8008720:	e8df f003 	tbb	[pc, r3]
 8008724:	2b375452 	.word	0x2b375452
 8008728:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800872c:	441e      	add	r6, r3
 800872e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008732:	2b20      	cmp	r3, #32
 8008734:	bfc1      	itttt	gt
 8008736:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800873a:	409f      	lslgt	r7, r3
 800873c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008740:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008744:	bfd6      	itet	le
 8008746:	f1c3 0320 	rsble	r3, r3, #32
 800874a:	ea47 0003 	orrgt.w	r0, r7, r3
 800874e:	fa04 f003 	lslle.w	r0, r4, r3
 8008752:	f7f7 fed7 	bl	8000504 <__aeabi_ui2d>
 8008756:	2201      	movs	r2, #1
 8008758:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800875c:	3e01      	subs	r6, #1
 800875e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008760:	e776      	b.n	8008650 <_dtoa_r+0x100>
 8008762:	2301      	movs	r3, #1
 8008764:	e7b7      	b.n	80086d6 <_dtoa_r+0x186>
 8008766:	9010      	str	r0, [sp, #64]	@ 0x40
 8008768:	e7b6      	b.n	80086d8 <_dtoa_r+0x188>
 800876a:	9b00      	ldr	r3, [sp, #0]
 800876c:	1bdb      	subs	r3, r3, r7
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	427b      	negs	r3, r7
 8008772:	9308      	str	r3, [sp, #32]
 8008774:	2300      	movs	r3, #0
 8008776:	930d      	str	r3, [sp, #52]	@ 0x34
 8008778:	e7c3      	b.n	8008702 <_dtoa_r+0x1b2>
 800877a:	2301      	movs	r3, #1
 800877c:	9309      	str	r3, [sp, #36]	@ 0x24
 800877e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008780:	eb07 0b03 	add.w	fp, r7, r3
 8008784:	f10b 0301 	add.w	r3, fp, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	bfb8      	it	lt
 800878e:	2301      	movlt	r3, #1
 8008790:	e006      	b.n	80087a0 <_dtoa_r+0x250>
 8008792:	2301      	movs	r3, #1
 8008794:	9309      	str	r3, [sp, #36]	@ 0x24
 8008796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008798:	2b00      	cmp	r3, #0
 800879a:	dd28      	ble.n	80087ee <_dtoa_r+0x29e>
 800879c:	469b      	mov	fp, r3
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80087a4:	2100      	movs	r1, #0
 80087a6:	2204      	movs	r2, #4
 80087a8:	f102 0514 	add.w	r5, r2, #20
 80087ac:	429d      	cmp	r5, r3
 80087ae:	d926      	bls.n	80087fe <_dtoa_r+0x2ae>
 80087b0:	6041      	str	r1, [r0, #4]
 80087b2:	4648      	mov	r0, r9
 80087b4:	f000 fd9c 	bl	80092f0 <_Balloc>
 80087b8:	4682      	mov	sl, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d142      	bne.n	8008844 <_dtoa_r+0x2f4>
 80087be:	4b1e      	ldr	r3, [pc, #120]	@ (8008838 <_dtoa_r+0x2e8>)
 80087c0:	4602      	mov	r2, r0
 80087c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80087c6:	e6da      	b.n	800857e <_dtoa_r+0x2e>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e7e3      	b.n	8008794 <_dtoa_r+0x244>
 80087cc:	2300      	movs	r3, #0
 80087ce:	e7d5      	b.n	800877c <_dtoa_r+0x22c>
 80087d0:	2401      	movs	r4, #1
 80087d2:	2300      	movs	r3, #0
 80087d4:	9307      	str	r3, [sp, #28]
 80087d6:	9409      	str	r4, [sp, #36]	@ 0x24
 80087d8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80087dc:	2200      	movs	r2, #0
 80087de:	f8cd b00c 	str.w	fp, [sp, #12]
 80087e2:	2312      	movs	r3, #18
 80087e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80087e6:	e7db      	b.n	80087a0 <_dtoa_r+0x250>
 80087e8:	2301      	movs	r3, #1
 80087ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ec:	e7f4      	b.n	80087d8 <_dtoa_r+0x288>
 80087ee:	f04f 0b01 	mov.w	fp, #1
 80087f2:	f8cd b00c 	str.w	fp, [sp, #12]
 80087f6:	465b      	mov	r3, fp
 80087f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80087fc:	e7d0      	b.n	80087a0 <_dtoa_r+0x250>
 80087fe:	3101      	adds	r1, #1
 8008800:	0052      	lsls	r2, r2, #1
 8008802:	e7d1      	b.n	80087a8 <_dtoa_r+0x258>
 8008804:	f3af 8000 	nop.w
 8008808:	636f4361 	.word	0x636f4361
 800880c:	3fd287a7 	.word	0x3fd287a7
 8008810:	8b60c8b3 	.word	0x8b60c8b3
 8008814:	3fc68a28 	.word	0x3fc68a28
 8008818:	509f79fb 	.word	0x509f79fb
 800881c:	3fd34413 	.word	0x3fd34413
 8008820:	0800bc22 	.word	0x0800bc22
 8008824:	0800bc39 	.word	0x0800bc39
 8008828:	7ff00000 	.word	0x7ff00000
 800882c:	0800bbed 	.word	0x0800bbed
 8008830:	3ff80000 	.word	0x3ff80000
 8008834:	0800bde8 	.word	0x0800bde8
 8008838:	0800bc91 	.word	0x0800bc91
 800883c:	0800bc1e 	.word	0x0800bc1e
 8008840:	0800bbec 	.word	0x0800bbec
 8008844:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008848:	6018      	str	r0, [r3, #0]
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	2b0e      	cmp	r3, #14
 800884e:	f200 80a1 	bhi.w	8008994 <_dtoa_r+0x444>
 8008852:	2c00      	cmp	r4, #0
 8008854:	f000 809e 	beq.w	8008994 <_dtoa_r+0x444>
 8008858:	2f00      	cmp	r7, #0
 800885a:	dd33      	ble.n	80088c4 <_dtoa_r+0x374>
 800885c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ad0 <_dtoa_r+0x580>)
 800885e:	f007 020f 	and.w	r2, r7, #15
 8008862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008866:	ed93 7b00 	vldr	d7, [r3]
 800886a:	05f8      	lsls	r0, r7, #23
 800886c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008870:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008874:	d516      	bpl.n	80088a4 <_dtoa_r+0x354>
 8008876:	4b97      	ldr	r3, [pc, #604]	@ (8008ad4 <_dtoa_r+0x584>)
 8008878:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800887c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008880:	f7f7 ffe4 	bl	800084c <__aeabi_ddiv>
 8008884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008888:	f004 040f 	and.w	r4, r4, #15
 800888c:	2603      	movs	r6, #3
 800888e:	4d91      	ldr	r5, [pc, #580]	@ (8008ad4 <_dtoa_r+0x584>)
 8008890:	b954      	cbnz	r4, 80088a8 <_dtoa_r+0x358>
 8008892:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800889a:	f7f7 ffd7 	bl	800084c <__aeabi_ddiv>
 800889e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088a2:	e028      	b.n	80088f6 <_dtoa_r+0x3a6>
 80088a4:	2602      	movs	r6, #2
 80088a6:	e7f2      	b.n	800888e <_dtoa_r+0x33e>
 80088a8:	07e1      	lsls	r1, r4, #31
 80088aa:	d508      	bpl.n	80088be <_dtoa_r+0x36e>
 80088ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088b4:	f7f7 fea0 	bl	80005f8 <__aeabi_dmul>
 80088b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088bc:	3601      	adds	r6, #1
 80088be:	1064      	asrs	r4, r4, #1
 80088c0:	3508      	adds	r5, #8
 80088c2:	e7e5      	b.n	8008890 <_dtoa_r+0x340>
 80088c4:	f000 80af 	beq.w	8008a26 <_dtoa_r+0x4d6>
 80088c8:	427c      	negs	r4, r7
 80088ca:	4b81      	ldr	r3, [pc, #516]	@ (8008ad0 <_dtoa_r+0x580>)
 80088cc:	4d81      	ldr	r5, [pc, #516]	@ (8008ad4 <_dtoa_r+0x584>)
 80088ce:	f004 020f 	and.w	r2, r4, #15
 80088d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e6:	1124      	asrs	r4, r4, #4
 80088e8:	2300      	movs	r3, #0
 80088ea:	2602      	movs	r6, #2
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	f040 808f 	bne.w	8008a10 <_dtoa_r+0x4c0>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d3      	bne.n	800889e <_dtoa_r+0x34e>
 80088f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8094 	beq.w	8008a2a <_dtoa_r+0x4da>
 8008902:	4b75      	ldr	r3, [pc, #468]	@ (8008ad8 <_dtoa_r+0x588>)
 8008904:	2200      	movs	r2, #0
 8008906:	4620      	mov	r0, r4
 8008908:	4629      	mov	r1, r5
 800890a:	f7f8 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800890e:	2800      	cmp	r0, #0
 8008910:	f000 808b 	beq.w	8008a2a <_dtoa_r+0x4da>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 8087 	beq.w	8008a2a <_dtoa_r+0x4da>
 800891c:	f1bb 0f00 	cmp.w	fp, #0
 8008920:	dd34      	ble.n	800898c <_dtoa_r+0x43c>
 8008922:	4620      	mov	r0, r4
 8008924:	4b6d      	ldr	r3, [pc, #436]	@ (8008adc <_dtoa_r+0x58c>)
 8008926:	2200      	movs	r2, #0
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 fe65 	bl	80005f8 <__aeabi_dmul>
 800892e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008932:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008936:	3601      	adds	r6, #1
 8008938:	465c      	mov	r4, fp
 800893a:	4630      	mov	r0, r6
 800893c:	f7f7 fdf2 	bl	8000524 <__aeabi_i2d>
 8008940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008944:	f7f7 fe58 	bl	80005f8 <__aeabi_dmul>
 8008948:	4b65      	ldr	r3, [pc, #404]	@ (8008ae0 <_dtoa_r+0x590>)
 800894a:	2200      	movs	r2, #0
 800894c:	f7f7 fc9e 	bl	800028c <__adddf3>
 8008950:	4605      	mov	r5, r0
 8008952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008956:	2c00      	cmp	r4, #0
 8008958:	d16a      	bne.n	8008a30 <_dtoa_r+0x4e0>
 800895a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800895e:	4b61      	ldr	r3, [pc, #388]	@ (8008ae4 <_dtoa_r+0x594>)
 8008960:	2200      	movs	r2, #0
 8008962:	f7f7 fc91 	bl	8000288 <__aeabi_dsub>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800896e:	462a      	mov	r2, r5
 8008970:	4633      	mov	r3, r6
 8008972:	f7f8 f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8008976:	2800      	cmp	r0, #0
 8008978:	f040 8298 	bne.w	8008eac <_dtoa_r+0x95c>
 800897c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008980:	462a      	mov	r2, r5
 8008982:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008986:	f7f8 f8a9 	bl	8000adc <__aeabi_dcmplt>
 800898a:	bb38      	cbnz	r0, 80089dc <_dtoa_r+0x48c>
 800898c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008990:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008994:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008996:	2b00      	cmp	r3, #0
 8008998:	f2c0 8157 	blt.w	8008c4a <_dtoa_r+0x6fa>
 800899c:	2f0e      	cmp	r7, #14
 800899e:	f300 8154 	bgt.w	8008c4a <_dtoa_r+0x6fa>
 80089a2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ad0 <_dtoa_r+0x580>)
 80089a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089a8:	ed93 7b00 	vldr	d7, [r3]
 80089ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	ed8d 7b00 	vstr	d7, [sp]
 80089b4:	f280 80e5 	bge.w	8008b82 <_dtoa_r+0x632>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f300 80e1 	bgt.w	8008b82 <_dtoa_r+0x632>
 80089c0:	d10c      	bne.n	80089dc <_dtoa_r+0x48c>
 80089c2:	4b48      	ldr	r3, [pc, #288]	@ (8008ae4 <_dtoa_r+0x594>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	ec51 0b17 	vmov	r0, r1, d7
 80089ca:	f7f7 fe15 	bl	80005f8 <__aeabi_dmul>
 80089ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d2:	f7f8 f897 	bl	8000b04 <__aeabi_dcmpge>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f000 8266 	beq.w	8008ea8 <_dtoa_r+0x958>
 80089dc:	2400      	movs	r4, #0
 80089de:	4625      	mov	r5, r4
 80089e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089e2:	4656      	mov	r6, sl
 80089e4:	ea6f 0803 	mvn.w	r8, r3
 80089e8:	2700      	movs	r7, #0
 80089ea:	4621      	mov	r1, r4
 80089ec:	4648      	mov	r0, r9
 80089ee:	f000 fcbf 	bl	8009370 <_Bfree>
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	f000 80bd 	beq.w	8008b72 <_dtoa_r+0x622>
 80089f8:	b12f      	cbz	r7, 8008a06 <_dtoa_r+0x4b6>
 80089fa:	42af      	cmp	r7, r5
 80089fc:	d003      	beq.n	8008a06 <_dtoa_r+0x4b6>
 80089fe:	4639      	mov	r1, r7
 8008a00:	4648      	mov	r0, r9
 8008a02:	f000 fcb5 	bl	8009370 <_Bfree>
 8008a06:	4629      	mov	r1, r5
 8008a08:	4648      	mov	r0, r9
 8008a0a:	f000 fcb1 	bl	8009370 <_Bfree>
 8008a0e:	e0b0      	b.n	8008b72 <_dtoa_r+0x622>
 8008a10:	07e2      	lsls	r2, r4, #31
 8008a12:	d505      	bpl.n	8008a20 <_dtoa_r+0x4d0>
 8008a14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a18:	f7f7 fdee 	bl	80005f8 <__aeabi_dmul>
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	2301      	movs	r3, #1
 8008a20:	1064      	asrs	r4, r4, #1
 8008a22:	3508      	adds	r5, #8
 8008a24:	e762      	b.n	80088ec <_dtoa_r+0x39c>
 8008a26:	2602      	movs	r6, #2
 8008a28:	e765      	b.n	80088f6 <_dtoa_r+0x3a6>
 8008a2a:	9c03      	ldr	r4, [sp, #12]
 8008a2c:	46b8      	mov	r8, r7
 8008a2e:	e784      	b.n	800893a <_dtoa_r+0x3ea>
 8008a30:	4b27      	ldr	r3, [pc, #156]	@ (8008ad0 <_dtoa_r+0x580>)
 8008a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a3c:	4454      	add	r4, sl
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d054      	beq.n	8008aec <_dtoa_r+0x59c>
 8008a42:	4929      	ldr	r1, [pc, #164]	@ (8008ae8 <_dtoa_r+0x598>)
 8008a44:	2000      	movs	r0, #0
 8008a46:	f7f7 ff01 	bl	800084c <__aeabi_ddiv>
 8008a4a:	4633      	mov	r3, r6
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	f7f7 fc1b 	bl	8000288 <__aeabi_dsub>
 8008a52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a56:	4656      	mov	r6, sl
 8008a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a5c:	f7f8 f87c 	bl	8000b58 <__aeabi_d2iz>
 8008a60:	4605      	mov	r5, r0
 8008a62:	f7f7 fd5f 	bl	8000524 <__aeabi_i2d>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a6e:	f7f7 fc0b 	bl	8000288 <__aeabi_dsub>
 8008a72:	3530      	adds	r5, #48	@ 0x30
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a7c:	f806 5b01 	strb.w	r5, [r6], #1
 8008a80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a84:	f7f8 f82a 	bl	8000adc <__aeabi_dcmplt>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d172      	bne.n	8008b72 <_dtoa_r+0x622>
 8008a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a90:	4911      	ldr	r1, [pc, #68]	@ (8008ad8 <_dtoa_r+0x588>)
 8008a92:	2000      	movs	r0, #0
 8008a94:	f7f7 fbf8 	bl	8000288 <__aeabi_dsub>
 8008a98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a9c:	f7f8 f81e 	bl	8000adc <__aeabi_dcmplt>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f040 80b4 	bne.w	8008c0e <_dtoa_r+0x6be>
 8008aa6:	42a6      	cmp	r6, r4
 8008aa8:	f43f af70 	beq.w	800898c <_dtoa_r+0x43c>
 8008aac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8008adc <_dtoa_r+0x58c>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f7f7 fda0 	bl	80005f8 <__aeabi_dmul>
 8008ab8:	4b08      	ldr	r3, [pc, #32]	@ (8008adc <_dtoa_r+0x58c>)
 8008aba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008abe:	2200      	movs	r2, #0
 8008ac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ac4:	f7f7 fd98 	bl	80005f8 <__aeabi_dmul>
 8008ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008acc:	e7c4      	b.n	8008a58 <_dtoa_r+0x508>
 8008ace:	bf00      	nop
 8008ad0:	0800bde8 	.word	0x0800bde8
 8008ad4:	0800bdc0 	.word	0x0800bdc0
 8008ad8:	3ff00000 	.word	0x3ff00000
 8008adc:	40240000 	.word	0x40240000
 8008ae0:	401c0000 	.word	0x401c0000
 8008ae4:	40140000 	.word	0x40140000
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	4631      	mov	r1, r6
 8008aee:	4628      	mov	r0, r5
 8008af0:	f7f7 fd82 	bl	80005f8 <__aeabi_dmul>
 8008af4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008af8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008afa:	4656      	mov	r6, sl
 8008afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b00:	f7f8 f82a 	bl	8000b58 <__aeabi_d2iz>
 8008b04:	4605      	mov	r5, r0
 8008b06:	f7f7 fd0d 	bl	8000524 <__aeabi_i2d>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b12:	f7f7 fbb9 	bl	8000288 <__aeabi_dsub>
 8008b16:	3530      	adds	r5, #48	@ 0x30
 8008b18:	f806 5b01 	strb.w	r5, [r6], #1
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	d124      	bne.n	8008b76 <_dtoa_r+0x626>
 8008b2c:	4baf      	ldr	r3, [pc, #700]	@ (8008dec <_dtoa_r+0x89c>)
 8008b2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b32:	f7f7 fbab 	bl	800028c <__adddf3>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b3e:	f7f7 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d163      	bne.n	8008c0e <_dtoa_r+0x6be>
 8008b46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b4a:	49a8      	ldr	r1, [pc, #672]	@ (8008dec <_dtoa_r+0x89c>)
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f7f7 fb9b 	bl	8000288 <__aeabi_dsub>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b5a:	f7f7 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f43f af14 	beq.w	800898c <_dtoa_r+0x43c>
 8008b64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b66:	1e73      	subs	r3, r6, #1
 8008b68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b6e:	2b30      	cmp	r3, #48	@ 0x30
 8008b70:	d0f8      	beq.n	8008b64 <_dtoa_r+0x614>
 8008b72:	4647      	mov	r7, r8
 8008b74:	e03b      	b.n	8008bee <_dtoa_r+0x69e>
 8008b76:	4b9e      	ldr	r3, [pc, #632]	@ (8008df0 <_dtoa_r+0x8a0>)
 8008b78:	f7f7 fd3e 	bl	80005f8 <__aeabi_dmul>
 8008b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b80:	e7bc      	b.n	8008afc <_dtoa_r+0x5ac>
 8008b82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b86:	4656      	mov	r6, sl
 8008b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7f7 fe5c 	bl	800084c <__aeabi_ddiv>
 8008b94:	f7f7 ffe0 	bl	8000b58 <__aeabi_d2iz>
 8008b98:	4680      	mov	r8, r0
 8008b9a:	f7f7 fcc3 	bl	8000524 <__aeabi_i2d>
 8008b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4620      	mov	r0, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008bb2:	f7f7 fb69 	bl	8000288 <__aeabi_dsub>
 8008bb6:	f806 4b01 	strb.w	r4, [r6], #1
 8008bba:	9d03      	ldr	r5, [sp, #12]
 8008bbc:	eba6 040a 	sub.w	r4, r6, sl
 8008bc0:	42a5      	cmp	r5, r4
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	d133      	bne.n	8008c30 <_dtoa_r+0x6e0>
 8008bc8:	f7f7 fb60 	bl	800028c <__adddf3>
 8008bcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	f7f7 ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 8008bd8:	b9c0      	cbnz	r0, 8008c0c <_dtoa_r+0x6bc>
 8008bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8008be6:	b110      	cbz	r0, 8008bee <_dtoa_r+0x69e>
 8008be8:	f018 0f01 	tst.w	r8, #1
 8008bec:	d10e      	bne.n	8008c0c <_dtoa_r+0x6bc>
 8008bee:	9902      	ldr	r1, [sp, #8]
 8008bf0:	4648      	mov	r0, r9
 8008bf2:	f000 fbbd 	bl	8009370 <_Bfree>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	7033      	strb	r3, [r6, #0]
 8008bfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bfc:	3701      	adds	r7, #1
 8008bfe:	601f      	str	r7, [r3, #0]
 8008c00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 824b 	beq.w	800909e <_dtoa_r+0xb4e>
 8008c08:	601e      	str	r6, [r3, #0]
 8008c0a:	e248      	b.n	800909e <_dtoa_r+0xb4e>
 8008c0c:	46b8      	mov	r8, r7
 8008c0e:	4633      	mov	r3, r6
 8008c10:	461e      	mov	r6, r3
 8008c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c16:	2a39      	cmp	r2, #57	@ 0x39
 8008c18:	d106      	bne.n	8008c28 <_dtoa_r+0x6d8>
 8008c1a:	459a      	cmp	sl, r3
 8008c1c:	d1f8      	bne.n	8008c10 <_dtoa_r+0x6c0>
 8008c1e:	2230      	movs	r2, #48	@ 0x30
 8008c20:	f108 0801 	add.w	r8, r8, #1
 8008c24:	f88a 2000 	strb.w	r2, [sl]
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	3201      	adds	r2, #1
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	e7a0      	b.n	8008b72 <_dtoa_r+0x622>
 8008c30:	4b6f      	ldr	r3, [pc, #444]	@ (8008df0 <_dtoa_r+0x8a0>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fce0 	bl	80005f8 <__aeabi_dmul>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	f7f7 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d09f      	beq.n	8008b88 <_dtoa_r+0x638>
 8008c48:	e7d1      	b.n	8008bee <_dtoa_r+0x69e>
 8008c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	f000 80ea 	beq.w	8008e26 <_dtoa_r+0x8d6>
 8008c52:	9a07      	ldr	r2, [sp, #28]
 8008c54:	2a01      	cmp	r2, #1
 8008c56:	f300 80cd 	bgt.w	8008df4 <_dtoa_r+0x8a4>
 8008c5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	f000 80c1 	beq.w	8008de4 <_dtoa_r+0x894>
 8008c62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c66:	9c08      	ldr	r4, [sp, #32]
 8008c68:	9e00      	ldr	r6, [sp, #0]
 8008c6a:	9a00      	ldr	r2, [sp, #0]
 8008c6c:	441a      	add	r2, r3
 8008c6e:	9200      	str	r2, [sp, #0]
 8008c70:	9a06      	ldr	r2, [sp, #24]
 8008c72:	2101      	movs	r1, #1
 8008c74:	441a      	add	r2, r3
 8008c76:	4648      	mov	r0, r9
 8008c78:	9206      	str	r2, [sp, #24]
 8008c7a:	f000 fc77 	bl	800956c <__i2b>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b166      	cbz	r6, 8008c9c <_dtoa_r+0x74c>
 8008c82:	9b06      	ldr	r3, [sp, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dd09      	ble.n	8008c9c <_dtoa_r+0x74c>
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	bfa8      	it	ge
 8008c8e:	4633      	movge	r3, r6
 8008c90:	1ad2      	subs	r2, r2, r3
 8008c92:	9200      	str	r2, [sp, #0]
 8008c94:	9a06      	ldr	r2, [sp, #24]
 8008c96:	1af6      	subs	r6, r6, r3
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	9306      	str	r3, [sp, #24]
 8008c9c:	9b08      	ldr	r3, [sp, #32]
 8008c9e:	b30b      	cbz	r3, 8008ce4 <_dtoa_r+0x794>
 8008ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80c6 	beq.w	8008e34 <_dtoa_r+0x8e4>
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	f000 80c0 	beq.w	8008e2e <_dtoa_r+0x8de>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	4648      	mov	r0, r9
 8008cb4:	f000 fd12 	bl	80096dc <__pow5mult>
 8008cb8:	9a02      	ldr	r2, [sp, #8]
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	4648      	mov	r0, r9
 8008cc0:	f000 fc6a 	bl	8009598 <__multiply>
 8008cc4:	9902      	ldr	r1, [sp, #8]
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4648      	mov	r0, r9
 8008cca:	f000 fb51 	bl	8009370 <_Bfree>
 8008cce:	9b08      	ldr	r3, [sp, #32]
 8008cd0:	1b1b      	subs	r3, r3, r4
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	f000 80b1 	beq.w	8008e3a <_dtoa_r+0x8ea>
 8008cd8:	9a08      	ldr	r2, [sp, #32]
 8008cda:	4641      	mov	r1, r8
 8008cdc:	4648      	mov	r0, r9
 8008cde:	f000 fcfd 	bl	80096dc <__pow5mult>
 8008ce2:	9002      	str	r0, [sp, #8]
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	4648      	mov	r0, r9
 8008ce8:	f000 fc40 	bl	800956c <__i2b>
 8008cec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cee:	4604      	mov	r4, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 81d8 	beq.w	80090a6 <_dtoa_r+0xb56>
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	f000 fcee 	bl	80096dc <__pow5mult>
 8008d00:	9b07      	ldr	r3, [sp, #28]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	4604      	mov	r4, r0
 8008d06:	f300 809f 	bgt.w	8008e48 <_dtoa_r+0x8f8>
 8008d0a:	9b04      	ldr	r3, [sp, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 8097 	bne.w	8008e40 <_dtoa_r+0x8f0>
 8008d12:	9b05      	ldr	r3, [sp, #20]
 8008d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 8093 	bne.w	8008e44 <_dtoa_r+0x8f4>
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d24:	0d1b      	lsrs	r3, r3, #20
 8008d26:	051b      	lsls	r3, r3, #20
 8008d28:	b133      	cbz	r3, 8008d38 <_dtoa_r+0x7e8>
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	9b06      	ldr	r3, [sp, #24]
 8008d32:	3301      	adds	r3, #1
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	2301      	movs	r3, #1
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 81b8 	beq.w	80090b2 <_dtoa_r+0xb62>
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d48:	6918      	ldr	r0, [r3, #16]
 8008d4a:	f000 fbc3 	bl	80094d4 <__hi0bits>
 8008d4e:	f1c0 0020 	rsb	r0, r0, #32
 8008d52:	9b06      	ldr	r3, [sp, #24]
 8008d54:	4418      	add	r0, r3
 8008d56:	f010 001f 	ands.w	r0, r0, #31
 8008d5a:	f000 8082 	beq.w	8008e62 <_dtoa_r+0x912>
 8008d5e:	f1c0 0320 	rsb	r3, r0, #32
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	dd73      	ble.n	8008e4e <_dtoa_r+0x8fe>
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	f1c0 001c 	rsb	r0, r0, #28
 8008d6c:	4403      	add	r3, r0
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	9b06      	ldr	r3, [sp, #24]
 8008d72:	4403      	add	r3, r0
 8008d74:	4406      	add	r6, r0
 8008d76:	9306      	str	r3, [sp, #24]
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dd05      	ble.n	8008d8a <_dtoa_r+0x83a>
 8008d7e:	9902      	ldr	r1, [sp, #8]
 8008d80:	461a      	mov	r2, r3
 8008d82:	4648      	mov	r0, r9
 8008d84:	f000 fd04 	bl	8009790 <__lshift>
 8008d88:	9002      	str	r0, [sp, #8]
 8008d8a:	9b06      	ldr	r3, [sp, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dd05      	ble.n	8008d9c <_dtoa_r+0x84c>
 8008d90:	4621      	mov	r1, r4
 8008d92:	461a      	mov	r2, r3
 8008d94:	4648      	mov	r0, r9
 8008d96:	f000 fcfb 	bl	8009790 <__lshift>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d061      	beq.n	8008e66 <_dtoa_r+0x916>
 8008da2:	9802      	ldr	r0, [sp, #8]
 8008da4:	4621      	mov	r1, r4
 8008da6:	f000 fd5f 	bl	8009868 <__mcmp>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	da5b      	bge.n	8008e66 <_dtoa_r+0x916>
 8008dae:	2300      	movs	r3, #0
 8008db0:	9902      	ldr	r1, [sp, #8]
 8008db2:	220a      	movs	r2, #10
 8008db4:	4648      	mov	r0, r9
 8008db6:	f000 fafd 	bl	80093b4 <__multadd>
 8008dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbc:	9002      	str	r0, [sp, #8]
 8008dbe:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8177 	beq.w	80090b6 <_dtoa_r+0xb66>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	2300      	movs	r3, #0
 8008dcc:	220a      	movs	r2, #10
 8008dce:	4648      	mov	r0, r9
 8008dd0:	f000 faf0 	bl	80093b4 <__multadd>
 8008dd4:	f1bb 0f00 	cmp.w	fp, #0
 8008dd8:	4605      	mov	r5, r0
 8008dda:	dc6f      	bgt.n	8008ebc <_dtoa_r+0x96c>
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	dc49      	bgt.n	8008e76 <_dtoa_r+0x926>
 8008de2:	e06b      	b.n	8008ebc <_dtoa_r+0x96c>
 8008de4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008de6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008dea:	e73c      	b.n	8008c66 <_dtoa_r+0x716>
 8008dec:	3fe00000 	.word	0x3fe00000
 8008df0:	40240000 	.word	0x40240000
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	1e5c      	subs	r4, r3, #1
 8008df8:	9b08      	ldr	r3, [sp, #32]
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	db09      	blt.n	8008e12 <_dtoa_r+0x8c2>
 8008dfe:	1b1c      	subs	r4, r3, r4
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f6bf af30 	bge.w	8008c68 <_dtoa_r+0x718>
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	9a03      	ldr	r2, [sp, #12]
 8008e0c:	1a9e      	subs	r6, r3, r2
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e72b      	b.n	8008c6a <_dtoa_r+0x71a>
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e16:	9408      	str	r4, [sp, #32]
 8008e18:	1ae3      	subs	r3, r4, r3
 8008e1a:	441a      	add	r2, r3
 8008e1c:	9e00      	ldr	r6, [sp, #0]
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e22:	2400      	movs	r4, #0
 8008e24:	e721      	b.n	8008c6a <_dtoa_r+0x71a>
 8008e26:	9c08      	ldr	r4, [sp, #32]
 8008e28:	9e00      	ldr	r6, [sp, #0]
 8008e2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008e2c:	e728      	b.n	8008c80 <_dtoa_r+0x730>
 8008e2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e32:	e751      	b.n	8008cd8 <_dtoa_r+0x788>
 8008e34:	9a08      	ldr	r2, [sp, #32]
 8008e36:	9902      	ldr	r1, [sp, #8]
 8008e38:	e750      	b.n	8008cdc <_dtoa_r+0x78c>
 8008e3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008e3e:	e751      	b.n	8008ce4 <_dtoa_r+0x794>
 8008e40:	2300      	movs	r3, #0
 8008e42:	e779      	b.n	8008d38 <_dtoa_r+0x7e8>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	e777      	b.n	8008d38 <_dtoa_r+0x7e8>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	e779      	b.n	8008d42 <_dtoa_r+0x7f2>
 8008e4e:	d093      	beq.n	8008d78 <_dtoa_r+0x828>
 8008e50:	9a00      	ldr	r2, [sp, #0]
 8008e52:	331c      	adds	r3, #28
 8008e54:	441a      	add	r2, r3
 8008e56:	9200      	str	r2, [sp, #0]
 8008e58:	9a06      	ldr	r2, [sp, #24]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	441e      	add	r6, r3
 8008e5e:	9206      	str	r2, [sp, #24]
 8008e60:	e78a      	b.n	8008d78 <_dtoa_r+0x828>
 8008e62:	4603      	mov	r3, r0
 8008e64:	e7f4      	b.n	8008e50 <_dtoa_r+0x900>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	46b8      	mov	r8, r7
 8008e6c:	dc20      	bgt.n	8008eb0 <_dtoa_r+0x960>
 8008e6e:	469b      	mov	fp, r3
 8008e70:	9b07      	ldr	r3, [sp, #28]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	dd1e      	ble.n	8008eb4 <_dtoa_r+0x964>
 8008e76:	f1bb 0f00 	cmp.w	fp, #0
 8008e7a:	f47f adb1 	bne.w	80089e0 <_dtoa_r+0x490>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	465b      	mov	r3, fp
 8008e82:	2205      	movs	r2, #5
 8008e84:	4648      	mov	r0, r9
 8008e86:	f000 fa95 	bl	80093b4 <__multadd>
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	9802      	ldr	r0, [sp, #8]
 8008e90:	f000 fcea 	bl	8009868 <__mcmp>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f77f ada3 	ble.w	80089e0 <_dtoa_r+0x490>
 8008e9a:	4656      	mov	r6, sl
 8008e9c:	2331      	movs	r3, #49	@ 0x31
 8008e9e:	f806 3b01 	strb.w	r3, [r6], #1
 8008ea2:	f108 0801 	add.w	r8, r8, #1
 8008ea6:	e59f      	b.n	80089e8 <_dtoa_r+0x498>
 8008ea8:	9c03      	ldr	r4, [sp, #12]
 8008eaa:	46b8      	mov	r8, r7
 8008eac:	4625      	mov	r5, r4
 8008eae:	e7f4      	b.n	8008e9a <_dtoa_r+0x94a>
 8008eb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8101 	beq.w	80090be <_dtoa_r+0xb6e>
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	dd05      	ble.n	8008ecc <_dtoa_r+0x97c>
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	4648      	mov	r0, r9
 8008ec6:	f000 fc63 	bl	8009790 <__lshift>
 8008eca:	4605      	mov	r5, r0
 8008ecc:	9b08      	ldr	r3, [sp, #32]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d05c      	beq.n	8008f8c <_dtoa_r+0xa3c>
 8008ed2:	6869      	ldr	r1, [r5, #4]
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 fa0b 	bl	80092f0 <_Balloc>
 8008eda:	4606      	mov	r6, r0
 8008edc:	b928      	cbnz	r0, 8008eea <_dtoa_r+0x99a>
 8008ede:	4b82      	ldr	r3, [pc, #520]	@ (80090e8 <_dtoa_r+0xb98>)
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ee6:	f7ff bb4a 	b.w	800857e <_dtoa_r+0x2e>
 8008eea:	692a      	ldr	r2, [r5, #16]
 8008eec:	3202      	adds	r2, #2
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	f105 010c 	add.w	r1, r5, #12
 8008ef4:	300c      	adds	r0, #12
 8008ef6:	f7ff fa8c 	bl	8008412 <memcpy>
 8008efa:	2201      	movs	r2, #1
 8008efc:	4631      	mov	r1, r6
 8008efe:	4648      	mov	r0, r9
 8008f00:	f000 fc46 	bl	8009790 <__lshift>
 8008f04:	f10a 0301 	add.w	r3, sl, #1
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	eb0a 030b 	add.w	r3, sl, fp
 8008f0e:	9308      	str	r3, [sp, #32]
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	462f      	mov	r7, r5
 8008f18:	9306      	str	r3, [sp, #24]
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	9b00      	ldr	r3, [sp, #0]
 8008f1e:	9802      	ldr	r0, [sp, #8]
 8008f20:	4621      	mov	r1, r4
 8008f22:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008f26:	f7ff fa89 	bl	800843c <quorem>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	3330      	adds	r3, #48	@ 0x30
 8008f2e:	9003      	str	r0, [sp, #12]
 8008f30:	4639      	mov	r1, r7
 8008f32:	9802      	ldr	r0, [sp, #8]
 8008f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f36:	f000 fc97 	bl	8009868 <__mcmp>
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	9004      	str	r0, [sp, #16]
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4648      	mov	r0, r9
 8008f42:	f000 fcad 	bl	80098a0 <__mdiff>
 8008f46:	68c2      	ldr	r2, [r0, #12]
 8008f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	bb02      	cbnz	r2, 8008f90 <_dtoa_r+0xa40>
 8008f4e:	4601      	mov	r1, r0
 8008f50:	9802      	ldr	r0, [sp, #8]
 8008f52:	f000 fc89 	bl	8009868 <__mcmp>
 8008f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f58:	4602      	mov	r2, r0
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4648      	mov	r0, r9
 8008f5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f62:	f000 fa05 	bl	8009370 <_Bfree>
 8008f66:	9b07      	ldr	r3, [sp, #28]
 8008f68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f6a:	9e00      	ldr	r6, [sp, #0]
 8008f6c:	ea42 0103 	orr.w	r1, r2, r3
 8008f70:	9b06      	ldr	r3, [sp, #24]
 8008f72:	4319      	orrs	r1, r3
 8008f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f76:	d10d      	bne.n	8008f94 <_dtoa_r+0xa44>
 8008f78:	2b39      	cmp	r3, #57	@ 0x39
 8008f7a:	d027      	beq.n	8008fcc <_dtoa_r+0xa7c>
 8008f7c:	9a04      	ldr	r2, [sp, #16]
 8008f7e:	2a00      	cmp	r2, #0
 8008f80:	dd01      	ble.n	8008f86 <_dtoa_r+0xa36>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	3331      	adds	r3, #49	@ 0x31
 8008f86:	f88b 3000 	strb.w	r3, [fp]
 8008f8a:	e52e      	b.n	80089ea <_dtoa_r+0x49a>
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	e7b9      	b.n	8008f04 <_dtoa_r+0x9b4>
 8008f90:	2201      	movs	r2, #1
 8008f92:	e7e2      	b.n	8008f5a <_dtoa_r+0xa0a>
 8008f94:	9904      	ldr	r1, [sp, #16]
 8008f96:	2900      	cmp	r1, #0
 8008f98:	db04      	blt.n	8008fa4 <_dtoa_r+0xa54>
 8008f9a:	9807      	ldr	r0, [sp, #28]
 8008f9c:	4301      	orrs	r1, r0
 8008f9e:	9806      	ldr	r0, [sp, #24]
 8008fa0:	4301      	orrs	r1, r0
 8008fa2:	d120      	bne.n	8008fe6 <_dtoa_r+0xa96>
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	ddee      	ble.n	8008f86 <_dtoa_r+0xa36>
 8008fa8:	9902      	ldr	r1, [sp, #8]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	2201      	movs	r2, #1
 8008fae:	4648      	mov	r0, r9
 8008fb0:	f000 fbee 	bl	8009790 <__lshift>
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	9002      	str	r0, [sp, #8]
 8008fb8:	f000 fc56 	bl	8009868 <__mcmp>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	dc02      	bgt.n	8008fc8 <_dtoa_r+0xa78>
 8008fc2:	d1e0      	bne.n	8008f86 <_dtoa_r+0xa36>
 8008fc4:	07da      	lsls	r2, r3, #31
 8008fc6:	d5de      	bpl.n	8008f86 <_dtoa_r+0xa36>
 8008fc8:	2b39      	cmp	r3, #57	@ 0x39
 8008fca:	d1da      	bne.n	8008f82 <_dtoa_r+0xa32>
 8008fcc:	2339      	movs	r3, #57	@ 0x39
 8008fce:	f88b 3000 	strb.w	r3, [fp]
 8008fd2:	4633      	mov	r3, r6
 8008fd4:	461e      	mov	r6, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fdc:	2a39      	cmp	r2, #57	@ 0x39
 8008fde:	d04e      	beq.n	800907e <_dtoa_r+0xb2e>
 8008fe0:	3201      	adds	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
 8008fe4:	e501      	b.n	80089ea <_dtoa_r+0x49a>
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	dd03      	ble.n	8008ff2 <_dtoa_r+0xaa2>
 8008fea:	2b39      	cmp	r3, #57	@ 0x39
 8008fec:	d0ee      	beq.n	8008fcc <_dtoa_r+0xa7c>
 8008fee:	3301      	adds	r3, #1
 8008ff0:	e7c9      	b.n	8008f86 <_dtoa_r+0xa36>
 8008ff2:	9a00      	ldr	r2, [sp, #0]
 8008ff4:	9908      	ldr	r1, [sp, #32]
 8008ff6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ffa:	428a      	cmp	r2, r1
 8008ffc:	d028      	beq.n	8009050 <_dtoa_r+0xb00>
 8008ffe:	9902      	ldr	r1, [sp, #8]
 8009000:	2300      	movs	r3, #0
 8009002:	220a      	movs	r2, #10
 8009004:	4648      	mov	r0, r9
 8009006:	f000 f9d5 	bl	80093b4 <__multadd>
 800900a:	42af      	cmp	r7, r5
 800900c:	9002      	str	r0, [sp, #8]
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	f04f 020a 	mov.w	r2, #10
 8009016:	4639      	mov	r1, r7
 8009018:	4648      	mov	r0, r9
 800901a:	d107      	bne.n	800902c <_dtoa_r+0xadc>
 800901c:	f000 f9ca 	bl	80093b4 <__multadd>
 8009020:	4607      	mov	r7, r0
 8009022:	4605      	mov	r5, r0
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	e777      	b.n	8008f1c <_dtoa_r+0x9cc>
 800902c:	f000 f9c2 	bl	80093b4 <__multadd>
 8009030:	4629      	mov	r1, r5
 8009032:	4607      	mov	r7, r0
 8009034:	2300      	movs	r3, #0
 8009036:	220a      	movs	r2, #10
 8009038:	4648      	mov	r0, r9
 800903a:	f000 f9bb 	bl	80093b4 <__multadd>
 800903e:	4605      	mov	r5, r0
 8009040:	e7f0      	b.n	8009024 <_dtoa_r+0xad4>
 8009042:	f1bb 0f00 	cmp.w	fp, #0
 8009046:	bfcc      	ite	gt
 8009048:	465e      	movgt	r6, fp
 800904a:	2601      	movle	r6, #1
 800904c:	4456      	add	r6, sl
 800904e:	2700      	movs	r7, #0
 8009050:	9902      	ldr	r1, [sp, #8]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2201      	movs	r2, #1
 8009056:	4648      	mov	r0, r9
 8009058:	f000 fb9a 	bl	8009790 <__lshift>
 800905c:	4621      	mov	r1, r4
 800905e:	9002      	str	r0, [sp, #8]
 8009060:	f000 fc02 	bl	8009868 <__mcmp>
 8009064:	2800      	cmp	r0, #0
 8009066:	dcb4      	bgt.n	8008fd2 <_dtoa_r+0xa82>
 8009068:	d102      	bne.n	8009070 <_dtoa_r+0xb20>
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	07db      	lsls	r3, r3, #31
 800906e:	d4b0      	bmi.n	8008fd2 <_dtoa_r+0xa82>
 8009070:	4633      	mov	r3, r6
 8009072:	461e      	mov	r6, r3
 8009074:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009078:	2a30      	cmp	r2, #48	@ 0x30
 800907a:	d0fa      	beq.n	8009072 <_dtoa_r+0xb22>
 800907c:	e4b5      	b.n	80089ea <_dtoa_r+0x49a>
 800907e:	459a      	cmp	sl, r3
 8009080:	d1a8      	bne.n	8008fd4 <_dtoa_r+0xa84>
 8009082:	2331      	movs	r3, #49	@ 0x31
 8009084:	f108 0801 	add.w	r8, r8, #1
 8009088:	f88a 3000 	strb.w	r3, [sl]
 800908c:	e4ad      	b.n	80089ea <_dtoa_r+0x49a>
 800908e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009090:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80090ec <_dtoa_r+0xb9c>
 8009094:	b11b      	cbz	r3, 800909e <_dtoa_r+0xb4e>
 8009096:	f10a 0308 	add.w	r3, sl, #8
 800909a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	4650      	mov	r0, sl
 80090a0:	b017      	add	sp, #92	@ 0x5c
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	9b07      	ldr	r3, [sp, #28]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	f77f ae2e 	ble.w	8008d0a <_dtoa_r+0x7ba>
 80090ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b0:	9308      	str	r3, [sp, #32]
 80090b2:	2001      	movs	r0, #1
 80090b4:	e64d      	b.n	8008d52 <_dtoa_r+0x802>
 80090b6:	f1bb 0f00 	cmp.w	fp, #0
 80090ba:	f77f aed9 	ble.w	8008e70 <_dtoa_r+0x920>
 80090be:	4656      	mov	r6, sl
 80090c0:	9802      	ldr	r0, [sp, #8]
 80090c2:	4621      	mov	r1, r4
 80090c4:	f7ff f9ba 	bl	800843c <quorem>
 80090c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80090cc:	f806 3b01 	strb.w	r3, [r6], #1
 80090d0:	eba6 020a 	sub.w	r2, r6, sl
 80090d4:	4593      	cmp	fp, r2
 80090d6:	ddb4      	ble.n	8009042 <_dtoa_r+0xaf2>
 80090d8:	9902      	ldr	r1, [sp, #8]
 80090da:	2300      	movs	r3, #0
 80090dc:	220a      	movs	r2, #10
 80090de:	4648      	mov	r0, r9
 80090e0:	f000 f968 	bl	80093b4 <__multadd>
 80090e4:	9002      	str	r0, [sp, #8]
 80090e6:	e7eb      	b.n	80090c0 <_dtoa_r+0xb70>
 80090e8:	0800bc91 	.word	0x0800bc91
 80090ec:	0800bc15 	.word	0x0800bc15

080090f0 <_free_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4605      	mov	r5, r0
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d041      	beq.n	800917c <_free_r+0x8c>
 80090f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fc:	1f0c      	subs	r4, r1, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bfb8      	it	lt
 8009102:	18e4      	addlt	r4, r4, r3
 8009104:	f000 f8e8 	bl	80092d8 <__malloc_lock>
 8009108:	4a1d      	ldr	r2, [pc, #116]	@ (8009180 <_free_r+0x90>)
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	b933      	cbnz	r3, 800911c <_free_r+0x2c>
 800910e:	6063      	str	r3, [r4, #4]
 8009110:	6014      	str	r4, [r2, #0]
 8009112:	4628      	mov	r0, r5
 8009114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009118:	f000 b8e4 	b.w	80092e4 <__malloc_unlock>
 800911c:	42a3      	cmp	r3, r4
 800911e:	d908      	bls.n	8009132 <_free_r+0x42>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	1821      	adds	r1, r4, r0
 8009124:	428b      	cmp	r3, r1
 8009126:	bf01      	itttt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	1809      	addeq	r1, r1, r0
 800912e:	6021      	streq	r1, [r4, #0]
 8009130:	e7ed      	b.n	800910e <_free_r+0x1e>
 8009132:	461a      	mov	r2, r3
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	b10b      	cbz	r3, 800913c <_free_r+0x4c>
 8009138:	42a3      	cmp	r3, r4
 800913a:	d9fa      	bls.n	8009132 <_free_r+0x42>
 800913c:	6811      	ldr	r1, [r2, #0]
 800913e:	1850      	adds	r0, r2, r1
 8009140:	42a0      	cmp	r0, r4
 8009142:	d10b      	bne.n	800915c <_free_r+0x6c>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	4401      	add	r1, r0
 8009148:	1850      	adds	r0, r2, r1
 800914a:	4283      	cmp	r3, r0
 800914c:	6011      	str	r1, [r2, #0]
 800914e:	d1e0      	bne.n	8009112 <_free_r+0x22>
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	6053      	str	r3, [r2, #4]
 8009156:	4408      	add	r0, r1
 8009158:	6010      	str	r0, [r2, #0]
 800915a:	e7da      	b.n	8009112 <_free_r+0x22>
 800915c:	d902      	bls.n	8009164 <_free_r+0x74>
 800915e:	230c      	movs	r3, #12
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	e7d6      	b.n	8009112 <_free_r+0x22>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	1821      	adds	r1, r4, r0
 8009168:	428b      	cmp	r3, r1
 800916a:	bf04      	itt	eq
 800916c:	6819      	ldreq	r1, [r3, #0]
 800916e:	685b      	ldreq	r3, [r3, #4]
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	bf04      	itt	eq
 8009174:	1809      	addeq	r1, r1, r0
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	6054      	str	r4, [r2, #4]
 800917a:	e7ca      	b.n	8009112 <_free_r+0x22>
 800917c:	bd38      	pop	{r3, r4, r5, pc}
 800917e:	bf00      	nop
 8009180:	20004518 	.word	0x20004518

08009184 <malloc>:
 8009184:	4b02      	ldr	r3, [pc, #8]	@ (8009190 <malloc+0xc>)
 8009186:	4601      	mov	r1, r0
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f000 b825 	b.w	80091d8 <_malloc_r>
 800918e:	bf00      	nop
 8009190:	2000001c 	.word	0x2000001c

08009194 <sbrk_aligned>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4e0f      	ldr	r6, [pc, #60]	@ (80091d4 <sbrk_aligned+0x40>)
 8009198:	460c      	mov	r4, r1
 800919a:	6831      	ldr	r1, [r6, #0]
 800919c:	4605      	mov	r5, r0
 800919e:	b911      	cbnz	r1, 80091a6 <sbrk_aligned+0x12>
 80091a0:	f001 fe04 	bl	800adac <_sbrk_r>
 80091a4:	6030      	str	r0, [r6, #0]
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f001 fdff 	bl	800adac <_sbrk_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d103      	bne.n	80091ba <sbrk_aligned+0x26>
 80091b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80091b6:	4620      	mov	r0, r4
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	1cc4      	adds	r4, r0, #3
 80091bc:	f024 0403 	bic.w	r4, r4, #3
 80091c0:	42a0      	cmp	r0, r4
 80091c2:	d0f8      	beq.n	80091b6 <sbrk_aligned+0x22>
 80091c4:	1a21      	subs	r1, r4, r0
 80091c6:	4628      	mov	r0, r5
 80091c8:	f001 fdf0 	bl	800adac <_sbrk_r>
 80091cc:	3001      	adds	r0, #1
 80091ce:	d1f2      	bne.n	80091b6 <sbrk_aligned+0x22>
 80091d0:	e7ef      	b.n	80091b2 <sbrk_aligned+0x1e>
 80091d2:	bf00      	nop
 80091d4:	20004514 	.word	0x20004514

080091d8 <_malloc_r>:
 80091d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091dc:	1ccd      	adds	r5, r1, #3
 80091de:	f025 0503 	bic.w	r5, r5, #3
 80091e2:	3508      	adds	r5, #8
 80091e4:	2d0c      	cmp	r5, #12
 80091e6:	bf38      	it	cc
 80091e8:	250c      	movcc	r5, #12
 80091ea:	2d00      	cmp	r5, #0
 80091ec:	4606      	mov	r6, r0
 80091ee:	db01      	blt.n	80091f4 <_malloc_r+0x1c>
 80091f0:	42a9      	cmp	r1, r5
 80091f2:	d904      	bls.n	80091fe <_malloc_r+0x26>
 80091f4:	230c      	movs	r3, #12
 80091f6:	6033      	str	r3, [r6, #0]
 80091f8:	2000      	movs	r0, #0
 80091fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092d4 <_malloc_r+0xfc>
 8009202:	f000 f869 	bl	80092d8 <__malloc_lock>
 8009206:	f8d8 3000 	ldr.w	r3, [r8]
 800920a:	461c      	mov	r4, r3
 800920c:	bb44      	cbnz	r4, 8009260 <_malloc_r+0x88>
 800920e:	4629      	mov	r1, r5
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff ffbf 	bl	8009194 <sbrk_aligned>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	4604      	mov	r4, r0
 800921a:	d158      	bne.n	80092ce <_malloc_r+0xf6>
 800921c:	f8d8 4000 	ldr.w	r4, [r8]
 8009220:	4627      	mov	r7, r4
 8009222:	2f00      	cmp	r7, #0
 8009224:	d143      	bne.n	80092ae <_malloc_r+0xd6>
 8009226:	2c00      	cmp	r4, #0
 8009228:	d04b      	beq.n	80092c2 <_malloc_r+0xea>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	4639      	mov	r1, r7
 800922e:	4630      	mov	r0, r6
 8009230:	eb04 0903 	add.w	r9, r4, r3
 8009234:	f001 fdba 	bl	800adac <_sbrk_r>
 8009238:	4581      	cmp	r9, r0
 800923a:	d142      	bne.n	80092c2 <_malloc_r+0xea>
 800923c:	6821      	ldr	r1, [r4, #0]
 800923e:	1a6d      	subs	r5, r5, r1
 8009240:	4629      	mov	r1, r5
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff ffa6 	bl	8009194 <sbrk_aligned>
 8009248:	3001      	adds	r0, #1
 800924a:	d03a      	beq.n	80092c2 <_malloc_r+0xea>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	442b      	add	r3, r5
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	f8d8 3000 	ldr.w	r3, [r8]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	bb62      	cbnz	r2, 80092b4 <_malloc_r+0xdc>
 800925a:	f8c8 7000 	str.w	r7, [r8]
 800925e:	e00f      	b.n	8009280 <_malloc_r+0xa8>
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	1b52      	subs	r2, r2, r5
 8009264:	d420      	bmi.n	80092a8 <_malloc_r+0xd0>
 8009266:	2a0b      	cmp	r2, #11
 8009268:	d917      	bls.n	800929a <_malloc_r+0xc2>
 800926a:	1961      	adds	r1, r4, r5
 800926c:	42a3      	cmp	r3, r4
 800926e:	6025      	str	r5, [r4, #0]
 8009270:	bf18      	it	ne
 8009272:	6059      	strne	r1, [r3, #4]
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	bf08      	it	eq
 8009278:	f8c8 1000 	streq.w	r1, [r8]
 800927c:	5162      	str	r2, [r4, r5]
 800927e:	604b      	str	r3, [r1, #4]
 8009280:	4630      	mov	r0, r6
 8009282:	f000 f82f 	bl	80092e4 <__malloc_unlock>
 8009286:	f104 000b 	add.w	r0, r4, #11
 800928a:	1d23      	adds	r3, r4, #4
 800928c:	f020 0007 	bic.w	r0, r0, #7
 8009290:	1ac2      	subs	r2, r0, r3
 8009292:	bf1c      	itt	ne
 8009294:	1a1b      	subne	r3, r3, r0
 8009296:	50a3      	strne	r3, [r4, r2]
 8009298:	e7af      	b.n	80091fa <_malloc_r+0x22>
 800929a:	6862      	ldr	r2, [r4, #4]
 800929c:	42a3      	cmp	r3, r4
 800929e:	bf0c      	ite	eq
 80092a0:	f8c8 2000 	streq.w	r2, [r8]
 80092a4:	605a      	strne	r2, [r3, #4]
 80092a6:	e7eb      	b.n	8009280 <_malloc_r+0xa8>
 80092a8:	4623      	mov	r3, r4
 80092aa:	6864      	ldr	r4, [r4, #4]
 80092ac:	e7ae      	b.n	800920c <_malloc_r+0x34>
 80092ae:	463c      	mov	r4, r7
 80092b0:	687f      	ldr	r7, [r7, #4]
 80092b2:	e7b6      	b.n	8009222 <_malloc_r+0x4a>
 80092b4:	461a      	mov	r2, r3
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d1fb      	bne.n	80092b4 <_malloc_r+0xdc>
 80092bc:	2300      	movs	r3, #0
 80092be:	6053      	str	r3, [r2, #4]
 80092c0:	e7de      	b.n	8009280 <_malloc_r+0xa8>
 80092c2:	230c      	movs	r3, #12
 80092c4:	6033      	str	r3, [r6, #0]
 80092c6:	4630      	mov	r0, r6
 80092c8:	f000 f80c 	bl	80092e4 <__malloc_unlock>
 80092cc:	e794      	b.n	80091f8 <_malloc_r+0x20>
 80092ce:	6005      	str	r5, [r0, #0]
 80092d0:	e7d6      	b.n	8009280 <_malloc_r+0xa8>
 80092d2:	bf00      	nop
 80092d4:	20004518 	.word	0x20004518

080092d8 <__malloc_lock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	@ (80092e0 <__malloc_lock+0x8>)
 80092da:	f7ff b898 	b.w	800840e <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	20004510 	.word	0x20004510

080092e4 <__malloc_unlock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	@ (80092ec <__malloc_unlock+0x8>)
 80092e6:	f7ff b893 	b.w	8008410 <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	20004510 	.word	0x20004510

080092f0 <_Balloc>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	69c6      	ldr	r6, [r0, #28]
 80092f4:	4604      	mov	r4, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	b976      	cbnz	r6, 8009318 <_Balloc+0x28>
 80092fa:	2010      	movs	r0, #16
 80092fc:	f7ff ff42 	bl	8009184 <malloc>
 8009300:	4602      	mov	r2, r0
 8009302:	61e0      	str	r0, [r4, #28]
 8009304:	b920      	cbnz	r0, 8009310 <_Balloc+0x20>
 8009306:	4b18      	ldr	r3, [pc, #96]	@ (8009368 <_Balloc+0x78>)
 8009308:	4818      	ldr	r0, [pc, #96]	@ (800936c <_Balloc+0x7c>)
 800930a:	216b      	movs	r1, #107	@ 0x6b
 800930c:	f001 fd68 	bl	800ade0 <__assert_func>
 8009310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009314:	6006      	str	r6, [r0, #0]
 8009316:	60c6      	str	r6, [r0, #12]
 8009318:	69e6      	ldr	r6, [r4, #28]
 800931a:	68f3      	ldr	r3, [r6, #12]
 800931c:	b183      	cbz	r3, 8009340 <_Balloc+0x50>
 800931e:	69e3      	ldr	r3, [r4, #28]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009326:	b9b8      	cbnz	r0, 8009358 <_Balloc+0x68>
 8009328:	2101      	movs	r1, #1
 800932a:	fa01 f605 	lsl.w	r6, r1, r5
 800932e:	1d72      	adds	r2, r6, #5
 8009330:	0092      	lsls	r2, r2, #2
 8009332:	4620      	mov	r0, r4
 8009334:	f001 fd72 	bl	800ae1c <_calloc_r>
 8009338:	b160      	cbz	r0, 8009354 <_Balloc+0x64>
 800933a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800933e:	e00e      	b.n	800935e <_Balloc+0x6e>
 8009340:	2221      	movs	r2, #33	@ 0x21
 8009342:	2104      	movs	r1, #4
 8009344:	4620      	mov	r0, r4
 8009346:	f001 fd69 	bl	800ae1c <_calloc_r>
 800934a:	69e3      	ldr	r3, [r4, #28]
 800934c:	60f0      	str	r0, [r6, #12]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e4      	bne.n	800931e <_Balloc+0x2e>
 8009354:	2000      	movs	r0, #0
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	6802      	ldr	r2, [r0, #0]
 800935a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800935e:	2300      	movs	r3, #0
 8009360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009364:	e7f7      	b.n	8009356 <_Balloc+0x66>
 8009366:	bf00      	nop
 8009368:	0800bc22 	.word	0x0800bc22
 800936c:	0800bca2 	.word	0x0800bca2

08009370 <_Bfree>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	69c6      	ldr	r6, [r0, #28]
 8009374:	4605      	mov	r5, r0
 8009376:	460c      	mov	r4, r1
 8009378:	b976      	cbnz	r6, 8009398 <_Bfree+0x28>
 800937a:	2010      	movs	r0, #16
 800937c:	f7ff ff02 	bl	8009184 <malloc>
 8009380:	4602      	mov	r2, r0
 8009382:	61e8      	str	r0, [r5, #28]
 8009384:	b920      	cbnz	r0, 8009390 <_Bfree+0x20>
 8009386:	4b09      	ldr	r3, [pc, #36]	@ (80093ac <_Bfree+0x3c>)
 8009388:	4809      	ldr	r0, [pc, #36]	@ (80093b0 <_Bfree+0x40>)
 800938a:	218f      	movs	r1, #143	@ 0x8f
 800938c:	f001 fd28 	bl	800ade0 <__assert_func>
 8009390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009394:	6006      	str	r6, [r0, #0]
 8009396:	60c6      	str	r6, [r0, #12]
 8009398:	b13c      	cbz	r4, 80093aa <_Bfree+0x3a>
 800939a:	69eb      	ldr	r3, [r5, #28]
 800939c:	6862      	ldr	r2, [r4, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093a4:	6021      	str	r1, [r4, #0]
 80093a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
 80093ac:	0800bc22 	.word	0x0800bc22
 80093b0:	0800bca2 	.word	0x0800bca2

080093b4 <__multadd>:
 80093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	690d      	ldr	r5, [r1, #16]
 80093ba:	4607      	mov	r7, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	461e      	mov	r6, r3
 80093c0:	f101 0c14 	add.w	ip, r1, #20
 80093c4:	2000      	movs	r0, #0
 80093c6:	f8dc 3000 	ldr.w	r3, [ip]
 80093ca:	b299      	uxth	r1, r3
 80093cc:	fb02 6101 	mla	r1, r2, r1, r6
 80093d0:	0c1e      	lsrs	r6, r3, #16
 80093d2:	0c0b      	lsrs	r3, r1, #16
 80093d4:	fb02 3306 	mla	r3, r2, r6, r3
 80093d8:	b289      	uxth	r1, r1
 80093da:	3001      	adds	r0, #1
 80093dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093e0:	4285      	cmp	r5, r0
 80093e2:	f84c 1b04 	str.w	r1, [ip], #4
 80093e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093ea:	dcec      	bgt.n	80093c6 <__multadd+0x12>
 80093ec:	b30e      	cbz	r6, 8009432 <__multadd+0x7e>
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	dc19      	bgt.n	8009428 <__multadd+0x74>
 80093f4:	6861      	ldr	r1, [r4, #4]
 80093f6:	4638      	mov	r0, r7
 80093f8:	3101      	adds	r1, #1
 80093fa:	f7ff ff79 	bl	80092f0 <_Balloc>
 80093fe:	4680      	mov	r8, r0
 8009400:	b928      	cbnz	r0, 800940e <__multadd+0x5a>
 8009402:	4602      	mov	r2, r0
 8009404:	4b0c      	ldr	r3, [pc, #48]	@ (8009438 <__multadd+0x84>)
 8009406:	480d      	ldr	r0, [pc, #52]	@ (800943c <__multadd+0x88>)
 8009408:	21ba      	movs	r1, #186	@ 0xba
 800940a:	f001 fce9 	bl	800ade0 <__assert_func>
 800940e:	6922      	ldr	r2, [r4, #16]
 8009410:	3202      	adds	r2, #2
 8009412:	f104 010c 	add.w	r1, r4, #12
 8009416:	0092      	lsls	r2, r2, #2
 8009418:	300c      	adds	r0, #12
 800941a:	f7fe fffa 	bl	8008412 <memcpy>
 800941e:	4621      	mov	r1, r4
 8009420:	4638      	mov	r0, r7
 8009422:	f7ff ffa5 	bl	8009370 <_Bfree>
 8009426:	4644      	mov	r4, r8
 8009428:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800942c:	3501      	adds	r5, #1
 800942e:	615e      	str	r6, [r3, #20]
 8009430:	6125      	str	r5, [r4, #16]
 8009432:	4620      	mov	r0, r4
 8009434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009438:	0800bc91 	.word	0x0800bc91
 800943c:	0800bca2 	.word	0x0800bca2

08009440 <__s2b>:
 8009440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009444:	460c      	mov	r4, r1
 8009446:	4615      	mov	r5, r2
 8009448:	461f      	mov	r7, r3
 800944a:	2209      	movs	r2, #9
 800944c:	3308      	adds	r3, #8
 800944e:	4606      	mov	r6, r0
 8009450:	fb93 f3f2 	sdiv	r3, r3, r2
 8009454:	2100      	movs	r1, #0
 8009456:	2201      	movs	r2, #1
 8009458:	429a      	cmp	r2, r3
 800945a:	db09      	blt.n	8009470 <__s2b+0x30>
 800945c:	4630      	mov	r0, r6
 800945e:	f7ff ff47 	bl	80092f0 <_Balloc>
 8009462:	b940      	cbnz	r0, 8009476 <__s2b+0x36>
 8009464:	4602      	mov	r2, r0
 8009466:	4b19      	ldr	r3, [pc, #100]	@ (80094cc <__s2b+0x8c>)
 8009468:	4819      	ldr	r0, [pc, #100]	@ (80094d0 <__s2b+0x90>)
 800946a:	21d3      	movs	r1, #211	@ 0xd3
 800946c:	f001 fcb8 	bl	800ade0 <__assert_func>
 8009470:	0052      	lsls	r2, r2, #1
 8009472:	3101      	adds	r1, #1
 8009474:	e7f0      	b.n	8009458 <__s2b+0x18>
 8009476:	9b08      	ldr	r3, [sp, #32]
 8009478:	6143      	str	r3, [r0, #20]
 800947a:	2d09      	cmp	r5, #9
 800947c:	f04f 0301 	mov.w	r3, #1
 8009480:	6103      	str	r3, [r0, #16]
 8009482:	dd16      	ble.n	80094b2 <__s2b+0x72>
 8009484:	f104 0909 	add.w	r9, r4, #9
 8009488:	46c8      	mov	r8, r9
 800948a:	442c      	add	r4, r5
 800948c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009490:	4601      	mov	r1, r0
 8009492:	3b30      	subs	r3, #48	@ 0x30
 8009494:	220a      	movs	r2, #10
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff ff8c 	bl	80093b4 <__multadd>
 800949c:	45a0      	cmp	r8, r4
 800949e:	d1f5      	bne.n	800948c <__s2b+0x4c>
 80094a0:	f1a5 0408 	sub.w	r4, r5, #8
 80094a4:	444c      	add	r4, r9
 80094a6:	1b2d      	subs	r5, r5, r4
 80094a8:	1963      	adds	r3, r4, r5
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	db04      	blt.n	80094b8 <__s2b+0x78>
 80094ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b2:	340a      	adds	r4, #10
 80094b4:	2509      	movs	r5, #9
 80094b6:	e7f6      	b.n	80094a6 <__s2b+0x66>
 80094b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094bc:	4601      	mov	r1, r0
 80094be:	3b30      	subs	r3, #48	@ 0x30
 80094c0:	220a      	movs	r2, #10
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff ff76 	bl	80093b4 <__multadd>
 80094c8:	e7ee      	b.n	80094a8 <__s2b+0x68>
 80094ca:	bf00      	nop
 80094cc:	0800bc91 	.word	0x0800bc91
 80094d0:	0800bca2 	.word	0x0800bca2

080094d4 <__hi0bits>:
 80094d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094d8:	4603      	mov	r3, r0
 80094da:	bf36      	itet	cc
 80094dc:	0403      	lslcc	r3, r0, #16
 80094de:	2000      	movcs	r0, #0
 80094e0:	2010      	movcc	r0, #16
 80094e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094e6:	bf3c      	itt	cc
 80094e8:	021b      	lslcc	r3, r3, #8
 80094ea:	3008      	addcc	r0, #8
 80094ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094f0:	bf3c      	itt	cc
 80094f2:	011b      	lslcc	r3, r3, #4
 80094f4:	3004      	addcc	r0, #4
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094fa:	bf3c      	itt	cc
 80094fc:	009b      	lslcc	r3, r3, #2
 80094fe:	3002      	addcc	r0, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	db05      	blt.n	8009510 <__hi0bits+0x3c>
 8009504:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009508:	f100 0001 	add.w	r0, r0, #1
 800950c:	bf08      	it	eq
 800950e:	2020      	moveq	r0, #32
 8009510:	4770      	bx	lr

08009512 <__lo0bits>:
 8009512:	6803      	ldr	r3, [r0, #0]
 8009514:	4602      	mov	r2, r0
 8009516:	f013 0007 	ands.w	r0, r3, #7
 800951a:	d00b      	beq.n	8009534 <__lo0bits+0x22>
 800951c:	07d9      	lsls	r1, r3, #31
 800951e:	d421      	bmi.n	8009564 <__lo0bits+0x52>
 8009520:	0798      	lsls	r0, r3, #30
 8009522:	bf49      	itett	mi
 8009524:	085b      	lsrmi	r3, r3, #1
 8009526:	089b      	lsrpl	r3, r3, #2
 8009528:	2001      	movmi	r0, #1
 800952a:	6013      	strmi	r3, [r2, #0]
 800952c:	bf5c      	itt	pl
 800952e:	6013      	strpl	r3, [r2, #0]
 8009530:	2002      	movpl	r0, #2
 8009532:	4770      	bx	lr
 8009534:	b299      	uxth	r1, r3
 8009536:	b909      	cbnz	r1, 800953c <__lo0bits+0x2a>
 8009538:	0c1b      	lsrs	r3, r3, #16
 800953a:	2010      	movs	r0, #16
 800953c:	b2d9      	uxtb	r1, r3
 800953e:	b909      	cbnz	r1, 8009544 <__lo0bits+0x32>
 8009540:	3008      	adds	r0, #8
 8009542:	0a1b      	lsrs	r3, r3, #8
 8009544:	0719      	lsls	r1, r3, #28
 8009546:	bf04      	itt	eq
 8009548:	091b      	lsreq	r3, r3, #4
 800954a:	3004      	addeq	r0, #4
 800954c:	0799      	lsls	r1, r3, #30
 800954e:	bf04      	itt	eq
 8009550:	089b      	lsreq	r3, r3, #2
 8009552:	3002      	addeq	r0, #2
 8009554:	07d9      	lsls	r1, r3, #31
 8009556:	d403      	bmi.n	8009560 <__lo0bits+0x4e>
 8009558:	085b      	lsrs	r3, r3, #1
 800955a:	f100 0001 	add.w	r0, r0, #1
 800955e:	d003      	beq.n	8009568 <__lo0bits+0x56>
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	4770      	bx	lr
 8009564:	2000      	movs	r0, #0
 8009566:	4770      	bx	lr
 8009568:	2020      	movs	r0, #32
 800956a:	4770      	bx	lr

0800956c <__i2b>:
 800956c:	b510      	push	{r4, lr}
 800956e:	460c      	mov	r4, r1
 8009570:	2101      	movs	r1, #1
 8009572:	f7ff febd 	bl	80092f0 <_Balloc>
 8009576:	4602      	mov	r2, r0
 8009578:	b928      	cbnz	r0, 8009586 <__i2b+0x1a>
 800957a:	4b05      	ldr	r3, [pc, #20]	@ (8009590 <__i2b+0x24>)
 800957c:	4805      	ldr	r0, [pc, #20]	@ (8009594 <__i2b+0x28>)
 800957e:	f240 1145 	movw	r1, #325	@ 0x145
 8009582:	f001 fc2d 	bl	800ade0 <__assert_func>
 8009586:	2301      	movs	r3, #1
 8009588:	6144      	str	r4, [r0, #20]
 800958a:	6103      	str	r3, [r0, #16]
 800958c:	bd10      	pop	{r4, pc}
 800958e:	bf00      	nop
 8009590:	0800bc91 	.word	0x0800bc91
 8009594:	0800bca2 	.word	0x0800bca2

08009598 <__multiply>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	4617      	mov	r7, r2
 800959e:	690a      	ldr	r2, [r1, #16]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	bfa8      	it	ge
 80095a6:	463b      	movge	r3, r7
 80095a8:	4689      	mov	r9, r1
 80095aa:	bfa4      	itt	ge
 80095ac:	460f      	movge	r7, r1
 80095ae:	4699      	movge	r9, r3
 80095b0:	693d      	ldr	r5, [r7, #16]
 80095b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	eb05 060a 	add.w	r6, r5, sl
 80095be:	42b3      	cmp	r3, r6
 80095c0:	b085      	sub	sp, #20
 80095c2:	bfb8      	it	lt
 80095c4:	3101      	addlt	r1, #1
 80095c6:	f7ff fe93 	bl	80092f0 <_Balloc>
 80095ca:	b930      	cbnz	r0, 80095da <__multiply+0x42>
 80095cc:	4602      	mov	r2, r0
 80095ce:	4b41      	ldr	r3, [pc, #260]	@ (80096d4 <__multiply+0x13c>)
 80095d0:	4841      	ldr	r0, [pc, #260]	@ (80096d8 <__multiply+0x140>)
 80095d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095d6:	f001 fc03 	bl	800ade0 <__assert_func>
 80095da:	f100 0414 	add.w	r4, r0, #20
 80095de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80095e2:	4623      	mov	r3, r4
 80095e4:	2200      	movs	r2, #0
 80095e6:	4573      	cmp	r3, lr
 80095e8:	d320      	bcc.n	800962c <__multiply+0x94>
 80095ea:	f107 0814 	add.w	r8, r7, #20
 80095ee:	f109 0114 	add.w	r1, r9, #20
 80095f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80095f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	1beb      	subs	r3, r5, r7
 80095fe:	3b15      	subs	r3, #21
 8009600:	f023 0303 	bic.w	r3, r3, #3
 8009604:	3304      	adds	r3, #4
 8009606:	3715      	adds	r7, #21
 8009608:	42bd      	cmp	r5, r7
 800960a:	bf38      	it	cc
 800960c:	2304      	movcc	r3, #4
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	9103      	str	r1, [sp, #12]
 8009614:	428b      	cmp	r3, r1
 8009616:	d80c      	bhi.n	8009632 <__multiply+0x9a>
 8009618:	2e00      	cmp	r6, #0
 800961a:	dd03      	ble.n	8009624 <__multiply+0x8c>
 800961c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009620:	2b00      	cmp	r3, #0
 8009622:	d055      	beq.n	80096d0 <__multiply+0x138>
 8009624:	6106      	str	r6, [r0, #16]
 8009626:	b005      	add	sp, #20
 8009628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962c:	f843 2b04 	str.w	r2, [r3], #4
 8009630:	e7d9      	b.n	80095e6 <__multiply+0x4e>
 8009632:	f8b1 a000 	ldrh.w	sl, [r1]
 8009636:	f1ba 0f00 	cmp.w	sl, #0
 800963a:	d01f      	beq.n	800967c <__multiply+0xe4>
 800963c:	46c4      	mov	ip, r8
 800963e:	46a1      	mov	r9, r4
 8009640:	2700      	movs	r7, #0
 8009642:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009646:	f8d9 3000 	ldr.w	r3, [r9]
 800964a:	fa1f fb82 	uxth.w	fp, r2
 800964e:	b29b      	uxth	r3, r3
 8009650:	fb0a 330b 	mla	r3, sl, fp, r3
 8009654:	443b      	add	r3, r7
 8009656:	f8d9 7000 	ldr.w	r7, [r9]
 800965a:	0c12      	lsrs	r2, r2, #16
 800965c:	0c3f      	lsrs	r7, r7, #16
 800965e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009662:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009666:	b29b      	uxth	r3, r3
 8009668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800966c:	4565      	cmp	r5, ip
 800966e:	f849 3b04 	str.w	r3, [r9], #4
 8009672:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009676:	d8e4      	bhi.n	8009642 <__multiply+0xaa>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	50e7      	str	r7, [r4, r3]
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009682:	3104      	adds	r1, #4
 8009684:	f1b9 0f00 	cmp.w	r9, #0
 8009688:	d020      	beq.n	80096cc <__multiply+0x134>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	4647      	mov	r7, r8
 800968e:	46a4      	mov	ip, r4
 8009690:	f04f 0a00 	mov.w	sl, #0
 8009694:	f8b7 b000 	ldrh.w	fp, [r7]
 8009698:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800969c:	fb09 220b 	mla	r2, r9, fp, r2
 80096a0:	4452      	add	r2, sl
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a8:	f84c 3b04 	str.w	r3, [ip], #4
 80096ac:	f857 3b04 	ldr.w	r3, [r7], #4
 80096b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b4:	f8bc 3000 	ldrh.w	r3, [ip]
 80096b8:	fb09 330a 	mla	r3, r9, sl, r3
 80096bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80096c0:	42bd      	cmp	r5, r7
 80096c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c6:	d8e5      	bhi.n	8009694 <__multiply+0xfc>
 80096c8:	9a01      	ldr	r2, [sp, #4]
 80096ca:	50a3      	str	r3, [r4, r2]
 80096cc:	3404      	adds	r4, #4
 80096ce:	e79f      	b.n	8009610 <__multiply+0x78>
 80096d0:	3e01      	subs	r6, #1
 80096d2:	e7a1      	b.n	8009618 <__multiply+0x80>
 80096d4:	0800bc91 	.word	0x0800bc91
 80096d8:	0800bca2 	.word	0x0800bca2

080096dc <__pow5mult>:
 80096dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e0:	4615      	mov	r5, r2
 80096e2:	f012 0203 	ands.w	r2, r2, #3
 80096e6:	4607      	mov	r7, r0
 80096e8:	460e      	mov	r6, r1
 80096ea:	d007      	beq.n	80096fc <__pow5mult+0x20>
 80096ec:	4c25      	ldr	r4, [pc, #148]	@ (8009784 <__pow5mult+0xa8>)
 80096ee:	3a01      	subs	r2, #1
 80096f0:	2300      	movs	r3, #0
 80096f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096f6:	f7ff fe5d 	bl	80093b4 <__multadd>
 80096fa:	4606      	mov	r6, r0
 80096fc:	10ad      	asrs	r5, r5, #2
 80096fe:	d03d      	beq.n	800977c <__pow5mult+0xa0>
 8009700:	69fc      	ldr	r4, [r7, #28]
 8009702:	b97c      	cbnz	r4, 8009724 <__pow5mult+0x48>
 8009704:	2010      	movs	r0, #16
 8009706:	f7ff fd3d 	bl	8009184 <malloc>
 800970a:	4602      	mov	r2, r0
 800970c:	61f8      	str	r0, [r7, #28]
 800970e:	b928      	cbnz	r0, 800971c <__pow5mult+0x40>
 8009710:	4b1d      	ldr	r3, [pc, #116]	@ (8009788 <__pow5mult+0xac>)
 8009712:	481e      	ldr	r0, [pc, #120]	@ (800978c <__pow5mult+0xb0>)
 8009714:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009718:	f001 fb62 	bl	800ade0 <__assert_func>
 800971c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009720:	6004      	str	r4, [r0, #0]
 8009722:	60c4      	str	r4, [r0, #12]
 8009724:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800972c:	b94c      	cbnz	r4, 8009742 <__pow5mult+0x66>
 800972e:	f240 2171 	movw	r1, #625	@ 0x271
 8009732:	4638      	mov	r0, r7
 8009734:	f7ff ff1a 	bl	800956c <__i2b>
 8009738:	2300      	movs	r3, #0
 800973a:	f8c8 0008 	str.w	r0, [r8, #8]
 800973e:	4604      	mov	r4, r0
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	f04f 0900 	mov.w	r9, #0
 8009746:	07eb      	lsls	r3, r5, #31
 8009748:	d50a      	bpl.n	8009760 <__pow5mult+0x84>
 800974a:	4631      	mov	r1, r6
 800974c:	4622      	mov	r2, r4
 800974e:	4638      	mov	r0, r7
 8009750:	f7ff ff22 	bl	8009598 <__multiply>
 8009754:	4631      	mov	r1, r6
 8009756:	4680      	mov	r8, r0
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff fe09 	bl	8009370 <_Bfree>
 800975e:	4646      	mov	r6, r8
 8009760:	106d      	asrs	r5, r5, #1
 8009762:	d00b      	beq.n	800977c <__pow5mult+0xa0>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	b938      	cbnz	r0, 8009778 <__pow5mult+0x9c>
 8009768:	4622      	mov	r2, r4
 800976a:	4621      	mov	r1, r4
 800976c:	4638      	mov	r0, r7
 800976e:	f7ff ff13 	bl	8009598 <__multiply>
 8009772:	6020      	str	r0, [r4, #0]
 8009774:	f8c0 9000 	str.w	r9, [r0]
 8009778:	4604      	mov	r4, r0
 800977a:	e7e4      	b.n	8009746 <__pow5mult+0x6a>
 800977c:	4630      	mov	r0, r6
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009782:	bf00      	nop
 8009784:	0800bdb4 	.word	0x0800bdb4
 8009788:	0800bc22 	.word	0x0800bc22
 800978c:	0800bca2 	.word	0x0800bca2

08009790 <__lshift>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	6849      	ldr	r1, [r1, #4]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	4607      	mov	r7, r0
 80097a2:	4691      	mov	r9, r2
 80097a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a8:	f108 0601 	add.w	r6, r8, #1
 80097ac:	42b3      	cmp	r3, r6
 80097ae:	db0b      	blt.n	80097c8 <__lshift+0x38>
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff fd9d 	bl	80092f0 <_Balloc>
 80097b6:	4605      	mov	r5, r0
 80097b8:	b948      	cbnz	r0, 80097ce <__lshift+0x3e>
 80097ba:	4602      	mov	r2, r0
 80097bc:	4b28      	ldr	r3, [pc, #160]	@ (8009860 <__lshift+0xd0>)
 80097be:	4829      	ldr	r0, [pc, #164]	@ (8009864 <__lshift+0xd4>)
 80097c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097c4:	f001 fb0c 	bl	800ade0 <__assert_func>
 80097c8:	3101      	adds	r1, #1
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	e7ee      	b.n	80097ac <__lshift+0x1c>
 80097ce:	2300      	movs	r3, #0
 80097d0:	f100 0114 	add.w	r1, r0, #20
 80097d4:	f100 0210 	add.w	r2, r0, #16
 80097d8:	4618      	mov	r0, r3
 80097da:	4553      	cmp	r3, sl
 80097dc:	db33      	blt.n	8009846 <__lshift+0xb6>
 80097de:	6920      	ldr	r0, [r4, #16]
 80097e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e4:	f104 0314 	add.w	r3, r4, #20
 80097e8:	f019 091f 	ands.w	r9, r9, #31
 80097ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f4:	d02b      	beq.n	800984e <__lshift+0xbe>
 80097f6:	f1c9 0e20 	rsb	lr, r9, #32
 80097fa:	468a      	mov	sl, r1
 80097fc:	2200      	movs	r2, #0
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	fa00 f009 	lsl.w	r0, r0, r9
 8009804:	4310      	orrs	r0, r2
 8009806:	f84a 0b04 	str.w	r0, [sl], #4
 800980a:	f853 2b04 	ldr.w	r2, [r3], #4
 800980e:	459c      	cmp	ip, r3
 8009810:	fa22 f20e 	lsr.w	r2, r2, lr
 8009814:	d8f3      	bhi.n	80097fe <__lshift+0x6e>
 8009816:	ebac 0304 	sub.w	r3, ip, r4
 800981a:	3b15      	subs	r3, #21
 800981c:	f023 0303 	bic.w	r3, r3, #3
 8009820:	3304      	adds	r3, #4
 8009822:	f104 0015 	add.w	r0, r4, #21
 8009826:	4560      	cmp	r0, ip
 8009828:	bf88      	it	hi
 800982a:	2304      	movhi	r3, #4
 800982c:	50ca      	str	r2, [r1, r3]
 800982e:	b10a      	cbz	r2, 8009834 <__lshift+0xa4>
 8009830:	f108 0602 	add.w	r6, r8, #2
 8009834:	3e01      	subs	r6, #1
 8009836:	4638      	mov	r0, r7
 8009838:	612e      	str	r6, [r5, #16]
 800983a:	4621      	mov	r1, r4
 800983c:	f7ff fd98 	bl	8009370 <_Bfree>
 8009840:	4628      	mov	r0, r5
 8009842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009846:	f842 0f04 	str.w	r0, [r2, #4]!
 800984a:	3301      	adds	r3, #1
 800984c:	e7c5      	b.n	80097da <__lshift+0x4a>
 800984e:	3904      	subs	r1, #4
 8009850:	f853 2b04 	ldr.w	r2, [r3], #4
 8009854:	f841 2f04 	str.w	r2, [r1, #4]!
 8009858:	459c      	cmp	ip, r3
 800985a:	d8f9      	bhi.n	8009850 <__lshift+0xc0>
 800985c:	e7ea      	b.n	8009834 <__lshift+0xa4>
 800985e:	bf00      	nop
 8009860:	0800bc91 	.word	0x0800bc91
 8009864:	0800bca2 	.word	0x0800bca2

08009868 <__mcmp>:
 8009868:	690a      	ldr	r2, [r1, #16]
 800986a:	4603      	mov	r3, r0
 800986c:	6900      	ldr	r0, [r0, #16]
 800986e:	1a80      	subs	r0, r0, r2
 8009870:	b530      	push	{r4, r5, lr}
 8009872:	d10e      	bne.n	8009892 <__mcmp+0x2a>
 8009874:	3314      	adds	r3, #20
 8009876:	3114      	adds	r1, #20
 8009878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800987c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009888:	4295      	cmp	r5, r2
 800988a:	d003      	beq.n	8009894 <__mcmp+0x2c>
 800988c:	d205      	bcs.n	800989a <__mcmp+0x32>
 800988e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009892:	bd30      	pop	{r4, r5, pc}
 8009894:	42a3      	cmp	r3, r4
 8009896:	d3f3      	bcc.n	8009880 <__mcmp+0x18>
 8009898:	e7fb      	b.n	8009892 <__mcmp+0x2a>
 800989a:	2001      	movs	r0, #1
 800989c:	e7f9      	b.n	8009892 <__mcmp+0x2a>
	...

080098a0 <__mdiff>:
 80098a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4689      	mov	r9, r1
 80098a6:	4606      	mov	r6, r0
 80098a8:	4611      	mov	r1, r2
 80098aa:	4648      	mov	r0, r9
 80098ac:	4614      	mov	r4, r2
 80098ae:	f7ff ffdb 	bl	8009868 <__mcmp>
 80098b2:	1e05      	subs	r5, r0, #0
 80098b4:	d112      	bne.n	80098dc <__mdiff+0x3c>
 80098b6:	4629      	mov	r1, r5
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff fd19 	bl	80092f0 <_Balloc>
 80098be:	4602      	mov	r2, r0
 80098c0:	b928      	cbnz	r0, 80098ce <__mdiff+0x2e>
 80098c2:	4b3f      	ldr	r3, [pc, #252]	@ (80099c0 <__mdiff+0x120>)
 80098c4:	f240 2137 	movw	r1, #567	@ 0x237
 80098c8:	483e      	ldr	r0, [pc, #248]	@ (80099c4 <__mdiff+0x124>)
 80098ca:	f001 fa89 	bl	800ade0 <__assert_func>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d4:	4610      	mov	r0, r2
 80098d6:	b003      	add	sp, #12
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	bfbc      	itt	lt
 80098de:	464b      	movlt	r3, r9
 80098e0:	46a1      	movlt	r9, r4
 80098e2:	4630      	mov	r0, r6
 80098e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098e8:	bfba      	itte	lt
 80098ea:	461c      	movlt	r4, r3
 80098ec:	2501      	movlt	r5, #1
 80098ee:	2500      	movge	r5, #0
 80098f0:	f7ff fcfe 	bl	80092f0 <_Balloc>
 80098f4:	4602      	mov	r2, r0
 80098f6:	b918      	cbnz	r0, 8009900 <__mdiff+0x60>
 80098f8:	4b31      	ldr	r3, [pc, #196]	@ (80099c0 <__mdiff+0x120>)
 80098fa:	f240 2145 	movw	r1, #581	@ 0x245
 80098fe:	e7e3      	b.n	80098c8 <__mdiff+0x28>
 8009900:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009904:	6926      	ldr	r6, [r4, #16]
 8009906:	60c5      	str	r5, [r0, #12]
 8009908:	f109 0310 	add.w	r3, r9, #16
 800990c:	f109 0514 	add.w	r5, r9, #20
 8009910:	f104 0e14 	add.w	lr, r4, #20
 8009914:	f100 0b14 	add.w	fp, r0, #20
 8009918:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800991c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	46d9      	mov	r9, fp
 8009924:	f04f 0c00 	mov.w	ip, #0
 8009928:	9b01      	ldr	r3, [sp, #4]
 800992a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800992e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	fa1f f38a 	uxth.w	r3, sl
 8009938:	4619      	mov	r1, r3
 800993a:	b283      	uxth	r3, r0
 800993c:	1acb      	subs	r3, r1, r3
 800993e:	0c00      	lsrs	r0, r0, #16
 8009940:	4463      	add	r3, ip
 8009942:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009946:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800994a:	b29b      	uxth	r3, r3
 800994c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009950:	4576      	cmp	r6, lr
 8009952:	f849 3b04 	str.w	r3, [r9], #4
 8009956:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800995a:	d8e5      	bhi.n	8009928 <__mdiff+0x88>
 800995c:	1b33      	subs	r3, r6, r4
 800995e:	3b15      	subs	r3, #21
 8009960:	f023 0303 	bic.w	r3, r3, #3
 8009964:	3415      	adds	r4, #21
 8009966:	3304      	adds	r3, #4
 8009968:	42a6      	cmp	r6, r4
 800996a:	bf38      	it	cc
 800996c:	2304      	movcc	r3, #4
 800996e:	441d      	add	r5, r3
 8009970:	445b      	add	r3, fp
 8009972:	461e      	mov	r6, r3
 8009974:	462c      	mov	r4, r5
 8009976:	4544      	cmp	r4, r8
 8009978:	d30e      	bcc.n	8009998 <__mdiff+0xf8>
 800997a:	f108 0103 	add.w	r1, r8, #3
 800997e:	1b49      	subs	r1, r1, r5
 8009980:	f021 0103 	bic.w	r1, r1, #3
 8009984:	3d03      	subs	r5, #3
 8009986:	45a8      	cmp	r8, r5
 8009988:	bf38      	it	cc
 800998a:	2100      	movcc	r1, #0
 800998c:	440b      	add	r3, r1
 800998e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009992:	b191      	cbz	r1, 80099ba <__mdiff+0x11a>
 8009994:	6117      	str	r7, [r2, #16]
 8009996:	e79d      	b.n	80098d4 <__mdiff+0x34>
 8009998:	f854 1b04 	ldr.w	r1, [r4], #4
 800999c:	46e6      	mov	lr, ip
 800999e:	0c08      	lsrs	r0, r1, #16
 80099a0:	fa1c fc81 	uxtah	ip, ip, r1
 80099a4:	4471      	add	r1, lr
 80099a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099aa:	b289      	uxth	r1, r1
 80099ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099b0:	f846 1b04 	str.w	r1, [r6], #4
 80099b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099b8:	e7dd      	b.n	8009976 <__mdiff+0xd6>
 80099ba:	3f01      	subs	r7, #1
 80099bc:	e7e7      	b.n	800998e <__mdiff+0xee>
 80099be:	bf00      	nop
 80099c0:	0800bc91 	.word	0x0800bc91
 80099c4:	0800bca2 	.word	0x0800bca2

080099c8 <__ulp>:
 80099c8:	b082      	sub	sp, #8
 80099ca:	ed8d 0b00 	vstr	d0, [sp]
 80099ce:	9a01      	ldr	r2, [sp, #4]
 80099d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009a10 <__ulp+0x48>)
 80099d2:	4013      	ands	r3, r2
 80099d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	dc08      	bgt.n	80099ee <__ulp+0x26>
 80099dc:	425b      	negs	r3, r3
 80099de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80099e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099e6:	da04      	bge.n	80099f2 <__ulp+0x2a>
 80099e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099ec:	4113      	asrs	r3, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	e008      	b.n	8009a04 <__ulp+0x3c>
 80099f2:	f1a2 0314 	sub.w	r3, r2, #20
 80099f6:	2b1e      	cmp	r3, #30
 80099f8:	bfda      	itte	le
 80099fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80099fe:	40da      	lsrle	r2, r3
 8009a00:	2201      	movgt	r2, #1
 8009a02:	2300      	movs	r3, #0
 8009a04:	4619      	mov	r1, r3
 8009a06:	4610      	mov	r0, r2
 8009a08:	ec41 0b10 	vmov	d0, r0, r1
 8009a0c:	b002      	add	sp, #8
 8009a0e:	4770      	bx	lr
 8009a10:	7ff00000 	.word	0x7ff00000

08009a14 <__b2d>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	6906      	ldr	r6, [r0, #16]
 8009a1a:	f100 0814 	add.w	r8, r0, #20
 8009a1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a22:	1f37      	subs	r7, r6, #4
 8009a24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f7ff fd53 	bl	80094d4 <__hi0bits>
 8009a2e:	f1c0 0320 	rsb	r3, r0, #32
 8009a32:	280a      	cmp	r0, #10
 8009a34:	600b      	str	r3, [r1, #0]
 8009a36:	491b      	ldr	r1, [pc, #108]	@ (8009aa4 <__b2d+0x90>)
 8009a38:	dc15      	bgt.n	8009a66 <__b2d+0x52>
 8009a3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a3e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a42:	45b8      	cmp	r8, r7
 8009a44:	ea43 0501 	orr.w	r5, r3, r1
 8009a48:	bf34      	ite	cc
 8009a4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a4e:	2300      	movcs	r3, #0
 8009a50:	3015      	adds	r0, #21
 8009a52:	fa02 f000 	lsl.w	r0, r2, r0
 8009a56:	fa23 f30c 	lsr.w	r3, r3, ip
 8009a5a:	4303      	orrs	r3, r0
 8009a5c:	461c      	mov	r4, r3
 8009a5e:	ec45 4b10 	vmov	d0, r4, r5
 8009a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a66:	45b8      	cmp	r8, r7
 8009a68:	bf3a      	itte	cc
 8009a6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a6e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009a72:	2300      	movcs	r3, #0
 8009a74:	380b      	subs	r0, #11
 8009a76:	d012      	beq.n	8009a9e <__b2d+0x8a>
 8009a78:	f1c0 0120 	rsb	r1, r0, #32
 8009a7c:	fa23 f401 	lsr.w	r4, r3, r1
 8009a80:	4082      	lsls	r2, r0
 8009a82:	4322      	orrs	r2, r4
 8009a84:	4547      	cmp	r7, r8
 8009a86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009a8a:	bf8c      	ite	hi
 8009a8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a90:	2200      	movls	r2, #0
 8009a92:	4083      	lsls	r3, r0
 8009a94:	40ca      	lsrs	r2, r1
 8009a96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	e7de      	b.n	8009a5c <__b2d+0x48>
 8009a9e:	ea42 0501 	orr.w	r5, r2, r1
 8009aa2:	e7db      	b.n	8009a5c <__b2d+0x48>
 8009aa4:	3ff00000 	.word	0x3ff00000

08009aa8 <__d2b>:
 8009aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	460f      	mov	r7, r1
 8009aae:	2101      	movs	r1, #1
 8009ab0:	ec59 8b10 	vmov	r8, r9, d0
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	f7ff fc1b 	bl	80092f0 <_Balloc>
 8009aba:	4604      	mov	r4, r0
 8009abc:	b930      	cbnz	r0, 8009acc <__d2b+0x24>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	4b23      	ldr	r3, [pc, #140]	@ (8009b50 <__d2b+0xa8>)
 8009ac2:	4824      	ldr	r0, [pc, #144]	@ (8009b54 <__d2b+0xac>)
 8009ac4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ac8:	f001 f98a 	bl	800ade0 <__assert_func>
 8009acc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ad4:	b10d      	cbz	r5, 8009ada <__d2b+0x32>
 8009ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	f1b8 0300 	subs.w	r3, r8, #0
 8009ae0:	d023      	beq.n	8009b2a <__d2b+0x82>
 8009ae2:	4668      	mov	r0, sp
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	f7ff fd14 	bl	8009512 <__lo0bits>
 8009aea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009aee:	b1d0      	cbz	r0, 8009b26 <__d2b+0x7e>
 8009af0:	f1c0 0320 	rsb	r3, r0, #32
 8009af4:	fa02 f303 	lsl.w	r3, r2, r3
 8009af8:	430b      	orrs	r3, r1
 8009afa:	40c2      	lsrs	r2, r0
 8009afc:	6163      	str	r3, [r4, #20]
 8009afe:	9201      	str	r2, [sp, #4]
 8009b00:	9b01      	ldr	r3, [sp, #4]
 8009b02:	61a3      	str	r3, [r4, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bf0c      	ite	eq
 8009b08:	2201      	moveq	r2, #1
 8009b0a:	2202      	movne	r2, #2
 8009b0c:	6122      	str	r2, [r4, #16]
 8009b0e:	b1a5      	cbz	r5, 8009b3a <__d2b+0x92>
 8009b10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b14:	4405      	add	r5, r0
 8009b16:	603d      	str	r5, [r7, #0]
 8009b18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b1c:	6030      	str	r0, [r6, #0]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	b003      	add	sp, #12
 8009b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b26:	6161      	str	r1, [r4, #20]
 8009b28:	e7ea      	b.n	8009b00 <__d2b+0x58>
 8009b2a:	a801      	add	r0, sp, #4
 8009b2c:	f7ff fcf1 	bl	8009512 <__lo0bits>
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	6163      	str	r3, [r4, #20]
 8009b34:	3020      	adds	r0, #32
 8009b36:	2201      	movs	r2, #1
 8009b38:	e7e8      	b.n	8009b0c <__d2b+0x64>
 8009b3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b42:	6038      	str	r0, [r7, #0]
 8009b44:	6918      	ldr	r0, [r3, #16]
 8009b46:	f7ff fcc5 	bl	80094d4 <__hi0bits>
 8009b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b4e:	e7e5      	b.n	8009b1c <__d2b+0x74>
 8009b50:	0800bc91 	.word	0x0800bc91
 8009b54:	0800bca2 	.word	0x0800bca2

08009b58 <__ratio>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	e9cd 1000 	strd	r1, r0, [sp]
 8009b62:	a902      	add	r1, sp, #8
 8009b64:	f7ff ff56 	bl	8009a14 <__b2d>
 8009b68:	9800      	ldr	r0, [sp, #0]
 8009b6a:	a903      	add	r1, sp, #12
 8009b6c:	ec55 4b10 	vmov	r4, r5, d0
 8009b70:	f7ff ff50 	bl	8009a14 <__b2d>
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	6919      	ldr	r1, [r3, #16]
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	1ac9      	subs	r1, r1, r3
 8009b7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	ec5b ab10 	vmov	sl, fp, d0
 8009b88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfce      	itee	gt
 8009b90:	462a      	movgt	r2, r5
 8009b92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b96:	465a      	movle	r2, fp
 8009b98:	462f      	mov	r7, r5
 8009b9a:	46d9      	mov	r9, fp
 8009b9c:	bfcc      	ite	gt
 8009b9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ba2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	4652      	mov	r2, sl
 8009baa:	4620      	mov	r0, r4
 8009bac:	4639      	mov	r1, r7
 8009bae:	f7f6 fe4d 	bl	800084c <__aeabi_ddiv>
 8009bb2:	ec41 0b10 	vmov	d0, r0, r1
 8009bb6:	b005      	add	sp, #20
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bbc <__copybits>:
 8009bbc:	3901      	subs	r1, #1
 8009bbe:	b570      	push	{r4, r5, r6, lr}
 8009bc0:	1149      	asrs	r1, r1, #5
 8009bc2:	6914      	ldr	r4, [r2, #16]
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	f102 0314 	add.w	r3, r2, #20
 8009bca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bd2:	1f05      	subs	r5, r0, #4
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	d30c      	bcc.n	8009bf2 <__copybits+0x36>
 8009bd8:	1aa3      	subs	r3, r4, r2
 8009bda:	3b11      	subs	r3, #17
 8009bdc:	f023 0303 	bic.w	r3, r3, #3
 8009be0:	3211      	adds	r2, #17
 8009be2:	42a2      	cmp	r2, r4
 8009be4:	bf88      	it	hi
 8009be6:	2300      	movhi	r3, #0
 8009be8:	4418      	add	r0, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	4288      	cmp	r0, r1
 8009bee:	d305      	bcc.n	8009bfc <__copybits+0x40>
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}
 8009bf2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bf6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bfa:	e7eb      	b.n	8009bd4 <__copybits+0x18>
 8009bfc:	f840 3b04 	str.w	r3, [r0], #4
 8009c00:	e7f4      	b.n	8009bec <__copybits+0x30>

08009c02 <__any_on>:
 8009c02:	f100 0214 	add.w	r2, r0, #20
 8009c06:	6900      	ldr	r0, [r0, #16]
 8009c08:	114b      	asrs	r3, r1, #5
 8009c0a:	4298      	cmp	r0, r3
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	db11      	blt.n	8009c34 <__any_on+0x32>
 8009c10:	dd0a      	ble.n	8009c28 <__any_on+0x26>
 8009c12:	f011 011f 	ands.w	r1, r1, #31
 8009c16:	d007      	beq.n	8009c28 <__any_on+0x26>
 8009c18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c1c:	fa24 f001 	lsr.w	r0, r4, r1
 8009c20:	fa00 f101 	lsl.w	r1, r0, r1
 8009c24:	428c      	cmp	r4, r1
 8009c26:	d10b      	bne.n	8009c40 <__any_on+0x3e>
 8009c28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d803      	bhi.n	8009c38 <__any_on+0x36>
 8009c30:	2000      	movs	r0, #0
 8009c32:	bd10      	pop	{r4, pc}
 8009c34:	4603      	mov	r3, r0
 8009c36:	e7f7      	b.n	8009c28 <__any_on+0x26>
 8009c38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d0f5      	beq.n	8009c2c <__any_on+0x2a>
 8009c40:	2001      	movs	r0, #1
 8009c42:	e7f6      	b.n	8009c32 <__any_on+0x30>

08009c44 <sulp>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	4604      	mov	r4, r0
 8009c48:	460d      	mov	r5, r1
 8009c4a:	ec45 4b10 	vmov	d0, r4, r5
 8009c4e:	4616      	mov	r6, r2
 8009c50:	f7ff feba 	bl	80099c8 <__ulp>
 8009c54:	ec51 0b10 	vmov	r0, r1, d0
 8009c58:	b17e      	cbz	r6, 8009c7a <sulp+0x36>
 8009c5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	dd09      	ble.n	8009c7a <sulp+0x36>
 8009c66:	051b      	lsls	r3, r3, #20
 8009c68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009c6c:	2400      	movs	r4, #0
 8009c6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009c72:	4622      	mov	r2, r4
 8009c74:	462b      	mov	r3, r5
 8009c76:	f7f6 fcbf 	bl	80005f8 <__aeabi_dmul>
 8009c7a:	ec41 0b10 	vmov	d0, r0, r1
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}

08009c80 <_strtod_l>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	b09f      	sub	sp, #124	@ 0x7c
 8009c86:	460c      	mov	r4, r1
 8009c88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009c8e:	9005      	str	r0, [sp, #20]
 8009c90:	f04f 0a00 	mov.w	sl, #0
 8009c94:	f04f 0b00 	mov.w	fp, #0
 8009c98:	460a      	mov	r2, r1
 8009c9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c9c:	7811      	ldrb	r1, [r2, #0]
 8009c9e:	292b      	cmp	r1, #43	@ 0x2b
 8009ca0:	d04a      	beq.n	8009d38 <_strtod_l+0xb8>
 8009ca2:	d838      	bhi.n	8009d16 <_strtod_l+0x96>
 8009ca4:	290d      	cmp	r1, #13
 8009ca6:	d832      	bhi.n	8009d0e <_strtod_l+0x8e>
 8009ca8:	2908      	cmp	r1, #8
 8009caa:	d832      	bhi.n	8009d12 <_strtod_l+0x92>
 8009cac:	2900      	cmp	r1, #0
 8009cae:	d03b      	beq.n	8009d28 <_strtod_l+0xa8>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009cb6:	782a      	ldrb	r2, [r5, #0]
 8009cb8:	2a30      	cmp	r2, #48	@ 0x30
 8009cba:	f040 80b2 	bne.w	8009e22 <_strtod_l+0x1a2>
 8009cbe:	786a      	ldrb	r2, [r5, #1]
 8009cc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cc4:	2a58      	cmp	r2, #88	@ 0x58
 8009cc6:	d16e      	bne.n	8009da6 <_strtod_l+0x126>
 8009cc8:	9302      	str	r3, [sp, #8]
 8009cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	ab1a      	add	r3, sp, #104	@ 0x68
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4a8f      	ldr	r2, [pc, #572]	@ (8009f10 <_strtod_l+0x290>)
 8009cd4:	9805      	ldr	r0, [sp, #20]
 8009cd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009cd8:	a919      	add	r1, sp, #100	@ 0x64
 8009cda:	f001 f91b 	bl	800af14 <__gethex>
 8009cde:	f010 060f 	ands.w	r6, r0, #15
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	d005      	beq.n	8009cf2 <_strtod_l+0x72>
 8009ce6:	2e06      	cmp	r6, #6
 8009ce8:	d128      	bne.n	8009d3c <_strtod_l+0xbc>
 8009cea:	3501      	adds	r5, #1
 8009cec:	2300      	movs	r3, #0
 8009cee:	9519      	str	r5, [sp, #100]	@ 0x64
 8009cf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 858e 	bne.w	800a816 <_strtod_l+0xb96>
 8009cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cfc:	b1cb      	cbz	r3, 8009d32 <_strtod_l+0xb2>
 8009cfe:	4652      	mov	r2, sl
 8009d00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d04:	ec43 2b10 	vmov	d0, r2, r3
 8009d08:	b01f      	add	sp, #124	@ 0x7c
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	2920      	cmp	r1, #32
 8009d10:	d1ce      	bne.n	8009cb0 <_strtod_l+0x30>
 8009d12:	3201      	adds	r2, #1
 8009d14:	e7c1      	b.n	8009c9a <_strtod_l+0x1a>
 8009d16:	292d      	cmp	r1, #45	@ 0x2d
 8009d18:	d1ca      	bne.n	8009cb0 <_strtod_l+0x30>
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	910e      	str	r1, [sp, #56]	@ 0x38
 8009d1e:	1c51      	adds	r1, r2, #1
 8009d20:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d22:	7852      	ldrb	r2, [r2, #1]
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	d1c5      	bne.n	8009cb4 <_strtod_l+0x34>
 8009d28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8570 	bne.w	800a812 <_strtod_l+0xb92>
 8009d32:	4652      	mov	r2, sl
 8009d34:	465b      	mov	r3, fp
 8009d36:	e7e5      	b.n	8009d04 <_strtod_l+0x84>
 8009d38:	2100      	movs	r1, #0
 8009d3a:	e7ef      	b.n	8009d1c <_strtod_l+0x9c>
 8009d3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d3e:	b13a      	cbz	r2, 8009d50 <_strtod_l+0xd0>
 8009d40:	2135      	movs	r1, #53	@ 0x35
 8009d42:	a81c      	add	r0, sp, #112	@ 0x70
 8009d44:	f7ff ff3a 	bl	8009bbc <__copybits>
 8009d48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d4a:	9805      	ldr	r0, [sp, #20]
 8009d4c:	f7ff fb10 	bl	8009370 <_Bfree>
 8009d50:	3e01      	subs	r6, #1
 8009d52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009d54:	2e04      	cmp	r6, #4
 8009d56:	d806      	bhi.n	8009d66 <_strtod_l+0xe6>
 8009d58:	e8df f006 	tbb	[pc, r6]
 8009d5c:	201d0314 	.word	0x201d0314
 8009d60:	14          	.byte	0x14
 8009d61:	00          	.byte	0x00
 8009d62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009d66:	05e1      	lsls	r1, r4, #23
 8009d68:	bf48      	it	mi
 8009d6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009d6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d72:	0d1b      	lsrs	r3, r3, #20
 8009d74:	051b      	lsls	r3, r3, #20
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1bb      	bne.n	8009cf2 <_strtod_l+0x72>
 8009d7a:	f7fe fb1d 	bl	80083b8 <__errno>
 8009d7e:	2322      	movs	r3, #34	@ 0x22
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	e7b6      	b.n	8009cf2 <_strtod_l+0x72>
 8009d84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009d88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009d94:	e7e7      	b.n	8009d66 <_strtod_l+0xe6>
 8009d96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009f18 <_strtod_l+0x298>
 8009d9a:	e7e4      	b.n	8009d66 <_strtod_l+0xe6>
 8009d9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009da0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009da4:	e7df      	b.n	8009d66 <_strtod_l+0xe6>
 8009da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	2b30      	cmp	r3, #48	@ 0x30
 8009db0:	d0f9      	beq.n	8009da6 <_strtod_l+0x126>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d09d      	beq.n	8009cf2 <_strtod_l+0x72>
 8009db6:	2301      	movs	r3, #1
 8009db8:	2700      	movs	r7, #0
 8009dba:	9308      	str	r3, [sp, #32]
 8009dbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8009dc0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009dc2:	46b9      	mov	r9, r7
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009dc8:	7805      	ldrb	r5, [r0, #0]
 8009dca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009dce:	b2d9      	uxtb	r1, r3
 8009dd0:	2909      	cmp	r1, #9
 8009dd2:	d928      	bls.n	8009e26 <_strtod_l+0x1a6>
 8009dd4:	494f      	ldr	r1, [pc, #316]	@ (8009f14 <_strtod_l+0x294>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f000 ffd6 	bl	800ad88 <strncmp>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d032      	beq.n	8009e46 <_strtod_l+0x1c6>
 8009de0:	2000      	movs	r0, #0
 8009de2:	462a      	mov	r2, r5
 8009de4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009de6:	464d      	mov	r5, r9
 8009de8:	4603      	mov	r3, r0
 8009dea:	2a65      	cmp	r2, #101	@ 0x65
 8009dec:	d001      	beq.n	8009df2 <_strtod_l+0x172>
 8009dee:	2a45      	cmp	r2, #69	@ 0x45
 8009df0:	d114      	bne.n	8009e1c <_strtod_l+0x19c>
 8009df2:	b91d      	cbnz	r5, 8009dfc <_strtod_l+0x17c>
 8009df4:	9a08      	ldr	r2, [sp, #32]
 8009df6:	4302      	orrs	r2, r0
 8009df8:	d096      	beq.n	8009d28 <_strtod_l+0xa8>
 8009dfa:	2500      	movs	r5, #0
 8009dfc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009dfe:	1c62      	adds	r2, r4, #1
 8009e00:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e02:	7862      	ldrb	r2, [r4, #1]
 8009e04:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e06:	d07a      	beq.n	8009efe <_strtod_l+0x27e>
 8009e08:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e0a:	d07e      	beq.n	8009f0a <_strtod_l+0x28a>
 8009e0c:	f04f 0c00 	mov.w	ip, #0
 8009e10:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e14:	2909      	cmp	r1, #9
 8009e16:	f240 8085 	bls.w	8009f24 <_strtod_l+0x2a4>
 8009e1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e1c:	f04f 0800 	mov.w	r8, #0
 8009e20:	e0a5      	b.n	8009f6e <_strtod_l+0x2ee>
 8009e22:	2300      	movs	r3, #0
 8009e24:	e7c8      	b.n	8009db8 <_strtod_l+0x138>
 8009e26:	f1b9 0f08 	cmp.w	r9, #8
 8009e2a:	bfd8      	it	le
 8009e2c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009e2e:	f100 0001 	add.w	r0, r0, #1
 8009e32:	bfda      	itte	le
 8009e34:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e38:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009e3a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009e3e:	f109 0901 	add.w	r9, r9, #1
 8009e42:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e44:	e7bf      	b.n	8009dc6 <_strtod_l+0x146>
 8009e46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e4c:	785a      	ldrb	r2, [r3, #1]
 8009e4e:	f1b9 0f00 	cmp.w	r9, #0
 8009e52:	d03b      	beq.n	8009ecc <_strtod_l+0x24c>
 8009e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e56:	464d      	mov	r5, r9
 8009e58:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009e5c:	2b09      	cmp	r3, #9
 8009e5e:	d912      	bls.n	8009e86 <_strtod_l+0x206>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e7c2      	b.n	8009dea <_strtod_l+0x16a>
 8009e64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e6a:	785a      	ldrb	r2, [r3, #1]
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	2a30      	cmp	r2, #48	@ 0x30
 8009e70:	d0f8      	beq.n	8009e64 <_strtod_l+0x1e4>
 8009e72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	f200 84d2 	bhi.w	800a820 <_strtod_l+0xba0>
 8009e7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e7e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e80:	2000      	movs	r0, #0
 8009e82:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e84:	4605      	mov	r5, r0
 8009e86:	3a30      	subs	r2, #48	@ 0x30
 8009e88:	f100 0301 	add.w	r3, r0, #1
 8009e8c:	d018      	beq.n	8009ec0 <_strtod_l+0x240>
 8009e8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e90:	4419      	add	r1, r3
 8009e92:	910a      	str	r1, [sp, #40]	@ 0x28
 8009e94:	462e      	mov	r6, r5
 8009e96:	f04f 0e0a 	mov.w	lr, #10
 8009e9a:	1c71      	adds	r1, r6, #1
 8009e9c:	eba1 0c05 	sub.w	ip, r1, r5
 8009ea0:	4563      	cmp	r3, ip
 8009ea2:	dc15      	bgt.n	8009ed0 <_strtod_l+0x250>
 8009ea4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009ea8:	182b      	adds	r3, r5, r0
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	f105 0501 	add.w	r5, r5, #1
 8009eb0:	4405      	add	r5, r0
 8009eb2:	dc1a      	bgt.n	8009eea <_strtod_l+0x26a>
 8009eb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009eb6:	230a      	movs	r3, #10
 8009eb8:	fb03 2301 	mla	r3, r3, r1, r2
 8009ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ec2:	1c51      	adds	r1, r2, #1
 8009ec4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ec6:	7852      	ldrb	r2, [r2, #1]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	e7c5      	b.n	8009e58 <_strtod_l+0x1d8>
 8009ecc:	4648      	mov	r0, r9
 8009ece:	e7ce      	b.n	8009e6e <_strtod_l+0x1ee>
 8009ed0:	2e08      	cmp	r6, #8
 8009ed2:	dc05      	bgt.n	8009ee0 <_strtod_l+0x260>
 8009ed4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009ed6:	fb0e f606 	mul.w	r6, lr, r6
 8009eda:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009edc:	460e      	mov	r6, r1
 8009ede:	e7dc      	b.n	8009e9a <_strtod_l+0x21a>
 8009ee0:	2910      	cmp	r1, #16
 8009ee2:	bfd8      	it	le
 8009ee4:	fb0e f707 	mulle.w	r7, lr, r7
 8009ee8:	e7f8      	b.n	8009edc <_strtod_l+0x25c>
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	bfdc      	itt	le
 8009eee:	230a      	movle	r3, #10
 8009ef0:	fb03 2707 	mlale	r7, r3, r7, r2
 8009ef4:	e7e3      	b.n	8009ebe <_strtod_l+0x23e>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efa:	2301      	movs	r3, #1
 8009efc:	e77a      	b.n	8009df4 <_strtod_l+0x174>
 8009efe:	f04f 0c00 	mov.w	ip, #0
 8009f02:	1ca2      	adds	r2, r4, #2
 8009f04:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f06:	78a2      	ldrb	r2, [r4, #2]
 8009f08:	e782      	b.n	8009e10 <_strtod_l+0x190>
 8009f0a:	f04f 0c01 	mov.w	ip, #1
 8009f0e:	e7f8      	b.n	8009f02 <_strtod_l+0x282>
 8009f10:	0800bec4 	.word	0x0800bec4
 8009f14:	0800bcfb 	.word	0x0800bcfb
 8009f18:	7ff00000 	.word	0x7ff00000
 8009f1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f1e:	1c51      	adds	r1, r2, #1
 8009f20:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f22:	7852      	ldrb	r2, [r2, #1]
 8009f24:	2a30      	cmp	r2, #48	@ 0x30
 8009f26:	d0f9      	beq.n	8009f1c <_strtod_l+0x29c>
 8009f28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f2c:	2908      	cmp	r1, #8
 8009f2e:	f63f af75 	bhi.w	8009e1c <_strtod_l+0x19c>
 8009f32:	3a30      	subs	r2, #48	@ 0x30
 8009f34:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f38:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f3a:	f04f 080a 	mov.w	r8, #10
 8009f3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f40:	1c56      	adds	r6, r2, #1
 8009f42:	9619      	str	r6, [sp, #100]	@ 0x64
 8009f44:	7852      	ldrb	r2, [r2, #1]
 8009f46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009f4a:	f1be 0f09 	cmp.w	lr, #9
 8009f4e:	d939      	bls.n	8009fc4 <_strtod_l+0x344>
 8009f50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f52:	1a76      	subs	r6, r6, r1
 8009f54:	2e08      	cmp	r6, #8
 8009f56:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009f5a:	dc03      	bgt.n	8009f64 <_strtod_l+0x2e4>
 8009f5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f5e:	4588      	cmp	r8, r1
 8009f60:	bfa8      	it	ge
 8009f62:	4688      	movge	r8, r1
 8009f64:	f1bc 0f00 	cmp.w	ip, #0
 8009f68:	d001      	beq.n	8009f6e <_strtod_l+0x2ee>
 8009f6a:	f1c8 0800 	rsb	r8, r8, #0
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	d14e      	bne.n	800a010 <_strtod_l+0x390>
 8009f72:	9908      	ldr	r1, [sp, #32]
 8009f74:	4308      	orrs	r0, r1
 8009f76:	f47f aebc 	bne.w	8009cf2 <_strtod_l+0x72>
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f47f aed4 	bne.w	8009d28 <_strtod_l+0xa8>
 8009f80:	2a69      	cmp	r2, #105	@ 0x69
 8009f82:	d028      	beq.n	8009fd6 <_strtod_l+0x356>
 8009f84:	dc25      	bgt.n	8009fd2 <_strtod_l+0x352>
 8009f86:	2a49      	cmp	r2, #73	@ 0x49
 8009f88:	d025      	beq.n	8009fd6 <_strtod_l+0x356>
 8009f8a:	2a4e      	cmp	r2, #78	@ 0x4e
 8009f8c:	f47f aecc 	bne.w	8009d28 <_strtod_l+0xa8>
 8009f90:	499a      	ldr	r1, [pc, #616]	@ (800a1fc <_strtod_l+0x57c>)
 8009f92:	a819      	add	r0, sp, #100	@ 0x64
 8009f94:	f001 f9e0 	bl	800b358 <__match>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f43f aec5 	beq.w	8009d28 <_strtod_l+0xa8>
 8009f9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b28      	cmp	r3, #40	@ 0x28
 8009fa4:	d12e      	bne.n	800a004 <_strtod_l+0x384>
 8009fa6:	4996      	ldr	r1, [pc, #600]	@ (800a200 <_strtod_l+0x580>)
 8009fa8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009faa:	a819      	add	r0, sp, #100	@ 0x64
 8009fac:	f001 f9e8 	bl	800b380 <__hexnan>
 8009fb0:	2805      	cmp	r0, #5
 8009fb2:	d127      	bne.n	800a004 <_strtod_l+0x384>
 8009fb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fb6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009fba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009fbe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009fc2:	e696      	b.n	8009cf2 <_strtod_l+0x72>
 8009fc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fc6:	fb08 2101 	mla	r1, r8, r1, r2
 8009fca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fd0:	e7b5      	b.n	8009f3e <_strtod_l+0x2be>
 8009fd2:	2a6e      	cmp	r2, #110	@ 0x6e
 8009fd4:	e7da      	b.n	8009f8c <_strtod_l+0x30c>
 8009fd6:	498b      	ldr	r1, [pc, #556]	@ (800a204 <_strtod_l+0x584>)
 8009fd8:	a819      	add	r0, sp, #100	@ 0x64
 8009fda:	f001 f9bd 	bl	800b358 <__match>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f43f aea2 	beq.w	8009d28 <_strtod_l+0xa8>
 8009fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fe6:	4988      	ldr	r1, [pc, #544]	@ (800a208 <_strtod_l+0x588>)
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	a819      	add	r0, sp, #100	@ 0x64
 8009fec:	9319      	str	r3, [sp, #100]	@ 0x64
 8009fee:	f001 f9b3 	bl	800b358 <__match>
 8009ff2:	b910      	cbnz	r0, 8009ffa <_strtod_l+0x37a>
 8009ff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ffa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a218 <_strtod_l+0x598>
 8009ffe:	f04f 0a00 	mov.w	sl, #0
 800a002:	e676      	b.n	8009cf2 <_strtod_l+0x72>
 800a004:	4881      	ldr	r0, [pc, #516]	@ (800a20c <_strtod_l+0x58c>)
 800a006:	f000 fee3 	bl	800add0 <nan>
 800a00a:	ec5b ab10 	vmov	sl, fp, d0
 800a00e:	e670      	b.n	8009cf2 <_strtod_l+0x72>
 800a010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a012:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a014:	eba8 0303 	sub.w	r3, r8, r3
 800a018:	f1b9 0f00 	cmp.w	r9, #0
 800a01c:	bf08      	it	eq
 800a01e:	46a9      	moveq	r9, r5
 800a020:	2d10      	cmp	r5, #16
 800a022:	9309      	str	r3, [sp, #36]	@ 0x24
 800a024:	462c      	mov	r4, r5
 800a026:	bfa8      	it	ge
 800a028:	2410      	movge	r4, #16
 800a02a:	f7f6 fa6b 	bl	8000504 <__aeabi_ui2d>
 800a02e:	2d09      	cmp	r5, #9
 800a030:	4682      	mov	sl, r0
 800a032:	468b      	mov	fp, r1
 800a034:	dc13      	bgt.n	800a05e <_strtod_l+0x3de>
 800a036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f43f ae5a 	beq.w	8009cf2 <_strtod_l+0x72>
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	dd78      	ble.n	800a134 <_strtod_l+0x4b4>
 800a042:	2b16      	cmp	r3, #22
 800a044:	dc5f      	bgt.n	800a106 <_strtod_l+0x486>
 800a046:	4972      	ldr	r1, [pc, #456]	@ (800a210 <_strtod_l+0x590>)
 800a048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a050:	4652      	mov	r2, sl
 800a052:	465b      	mov	r3, fp
 800a054:	f7f6 fad0 	bl	80005f8 <__aeabi_dmul>
 800a058:	4682      	mov	sl, r0
 800a05a:	468b      	mov	fp, r1
 800a05c:	e649      	b.n	8009cf2 <_strtod_l+0x72>
 800a05e:	4b6c      	ldr	r3, [pc, #432]	@ (800a210 <_strtod_l+0x590>)
 800a060:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a064:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a068:	f7f6 fac6 	bl	80005f8 <__aeabi_dmul>
 800a06c:	4682      	mov	sl, r0
 800a06e:	4638      	mov	r0, r7
 800a070:	468b      	mov	fp, r1
 800a072:	f7f6 fa47 	bl	8000504 <__aeabi_ui2d>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4650      	mov	r0, sl
 800a07c:	4659      	mov	r1, fp
 800a07e:	f7f6 f905 	bl	800028c <__adddf3>
 800a082:	2d0f      	cmp	r5, #15
 800a084:	4682      	mov	sl, r0
 800a086:	468b      	mov	fp, r1
 800a088:	ddd5      	ble.n	800a036 <_strtod_l+0x3b6>
 800a08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a08c:	1b2c      	subs	r4, r5, r4
 800a08e:	441c      	add	r4, r3
 800a090:	2c00      	cmp	r4, #0
 800a092:	f340 8093 	ble.w	800a1bc <_strtod_l+0x53c>
 800a096:	f014 030f 	ands.w	r3, r4, #15
 800a09a:	d00a      	beq.n	800a0b2 <_strtod_l+0x432>
 800a09c:	495c      	ldr	r1, [pc, #368]	@ (800a210 <_strtod_l+0x590>)
 800a09e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0a2:	4652      	mov	r2, sl
 800a0a4:	465b      	mov	r3, fp
 800a0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0aa:	f7f6 faa5 	bl	80005f8 <__aeabi_dmul>
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	468b      	mov	fp, r1
 800a0b2:	f034 040f 	bics.w	r4, r4, #15
 800a0b6:	d073      	beq.n	800a1a0 <_strtod_l+0x520>
 800a0b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a0bc:	dd49      	ble.n	800a152 <_strtod_l+0x4d2>
 800a0be:	2400      	movs	r4, #0
 800a0c0:	46a0      	mov	r8, r4
 800a0c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0c4:	46a1      	mov	r9, r4
 800a0c6:	9a05      	ldr	r2, [sp, #20]
 800a0c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a218 <_strtod_l+0x598>
 800a0cc:	2322      	movs	r3, #34	@ 0x22
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	f04f 0a00 	mov.w	sl, #0
 800a0d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f43f ae0b 	beq.w	8009cf2 <_strtod_l+0x72>
 800a0dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0de:	9805      	ldr	r0, [sp, #20]
 800a0e0:	f7ff f946 	bl	8009370 <_Bfree>
 800a0e4:	9805      	ldr	r0, [sp, #20]
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7ff f942 	bl	8009370 <_Bfree>
 800a0ec:	9805      	ldr	r0, [sp, #20]
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	f7ff f93e 	bl	8009370 <_Bfree>
 800a0f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0f6:	9805      	ldr	r0, [sp, #20]
 800a0f8:	f7ff f93a 	bl	8009370 <_Bfree>
 800a0fc:	9805      	ldr	r0, [sp, #20]
 800a0fe:	4621      	mov	r1, r4
 800a100:	f7ff f936 	bl	8009370 <_Bfree>
 800a104:	e5f5      	b.n	8009cf2 <_strtod_l+0x72>
 800a106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a108:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a10c:	4293      	cmp	r3, r2
 800a10e:	dbbc      	blt.n	800a08a <_strtod_l+0x40a>
 800a110:	4c3f      	ldr	r4, [pc, #252]	@ (800a210 <_strtod_l+0x590>)
 800a112:	f1c5 050f 	rsb	r5, r5, #15
 800a116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a122:	f7f6 fa69 	bl	80005f8 <__aeabi_dmul>
 800a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a128:	1b5d      	subs	r5, r3, r5
 800a12a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a12e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a132:	e78f      	b.n	800a054 <_strtod_l+0x3d4>
 800a134:	3316      	adds	r3, #22
 800a136:	dba8      	blt.n	800a08a <_strtod_l+0x40a>
 800a138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a13a:	eba3 0808 	sub.w	r8, r3, r8
 800a13e:	4b34      	ldr	r3, [pc, #208]	@ (800a210 <_strtod_l+0x590>)
 800a140:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a144:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a148:	4650      	mov	r0, sl
 800a14a:	4659      	mov	r1, fp
 800a14c:	f7f6 fb7e 	bl	800084c <__aeabi_ddiv>
 800a150:	e782      	b.n	800a058 <_strtod_l+0x3d8>
 800a152:	2300      	movs	r3, #0
 800a154:	4f2f      	ldr	r7, [pc, #188]	@ (800a214 <_strtod_l+0x594>)
 800a156:	1124      	asrs	r4, r4, #4
 800a158:	4650      	mov	r0, sl
 800a15a:	4659      	mov	r1, fp
 800a15c:	461e      	mov	r6, r3
 800a15e:	2c01      	cmp	r4, #1
 800a160:	dc21      	bgt.n	800a1a6 <_strtod_l+0x526>
 800a162:	b10b      	cbz	r3, 800a168 <_strtod_l+0x4e8>
 800a164:	4682      	mov	sl, r0
 800a166:	468b      	mov	fp, r1
 800a168:	492a      	ldr	r1, [pc, #168]	@ (800a214 <_strtod_l+0x594>)
 800a16a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a16e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a172:	4652      	mov	r2, sl
 800a174:	465b      	mov	r3, fp
 800a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17a:	f7f6 fa3d 	bl	80005f8 <__aeabi_dmul>
 800a17e:	4b26      	ldr	r3, [pc, #152]	@ (800a218 <_strtod_l+0x598>)
 800a180:	460a      	mov	r2, r1
 800a182:	400b      	ands	r3, r1
 800a184:	4925      	ldr	r1, [pc, #148]	@ (800a21c <_strtod_l+0x59c>)
 800a186:	428b      	cmp	r3, r1
 800a188:	4682      	mov	sl, r0
 800a18a:	d898      	bhi.n	800a0be <_strtod_l+0x43e>
 800a18c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a190:	428b      	cmp	r3, r1
 800a192:	bf86      	itte	hi
 800a194:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a220 <_strtod_l+0x5a0>
 800a198:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a19c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9308      	str	r3, [sp, #32]
 800a1a4:	e076      	b.n	800a294 <_strtod_l+0x614>
 800a1a6:	07e2      	lsls	r2, r4, #31
 800a1a8:	d504      	bpl.n	800a1b4 <_strtod_l+0x534>
 800a1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ae:	f7f6 fa23 	bl	80005f8 <__aeabi_dmul>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	3601      	adds	r6, #1
 800a1b6:	1064      	asrs	r4, r4, #1
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	e7d0      	b.n	800a15e <_strtod_l+0x4de>
 800a1bc:	d0f0      	beq.n	800a1a0 <_strtod_l+0x520>
 800a1be:	4264      	negs	r4, r4
 800a1c0:	f014 020f 	ands.w	r2, r4, #15
 800a1c4:	d00a      	beq.n	800a1dc <_strtod_l+0x55c>
 800a1c6:	4b12      	ldr	r3, [pc, #72]	@ (800a210 <_strtod_l+0x590>)
 800a1c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 fb3a 	bl	800084c <__aeabi_ddiv>
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	1124      	asrs	r4, r4, #4
 800a1de:	d0df      	beq.n	800a1a0 <_strtod_l+0x520>
 800a1e0:	2c1f      	cmp	r4, #31
 800a1e2:	dd1f      	ble.n	800a224 <_strtod_l+0x5a4>
 800a1e4:	2400      	movs	r4, #0
 800a1e6:	46a0      	mov	r8, r4
 800a1e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a1ea:	46a1      	mov	r9, r4
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	2322      	movs	r3, #34	@ 0x22
 800a1f0:	f04f 0a00 	mov.w	sl, #0
 800a1f4:	f04f 0b00 	mov.w	fp, #0
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	e76b      	b.n	800a0d4 <_strtod_l+0x454>
 800a1fc:	0800bbe9 	.word	0x0800bbe9
 800a200:	0800beb0 	.word	0x0800beb0
 800a204:	0800bbe1 	.word	0x0800bbe1
 800a208:	0800bc18 	.word	0x0800bc18
 800a20c:	0800bd51 	.word	0x0800bd51
 800a210:	0800bde8 	.word	0x0800bde8
 800a214:	0800bdc0 	.word	0x0800bdc0
 800a218:	7ff00000 	.word	0x7ff00000
 800a21c:	7ca00000 	.word	0x7ca00000
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	f014 0310 	ands.w	r3, r4, #16
 800a228:	bf18      	it	ne
 800a22a:	236a      	movne	r3, #106	@ 0x6a
 800a22c:	4ea9      	ldr	r6, [pc, #676]	@ (800a4d4 <_strtod_l+0x854>)
 800a22e:	9308      	str	r3, [sp, #32]
 800a230:	4650      	mov	r0, sl
 800a232:	4659      	mov	r1, fp
 800a234:	2300      	movs	r3, #0
 800a236:	07e7      	lsls	r7, r4, #31
 800a238:	d504      	bpl.n	800a244 <_strtod_l+0x5c4>
 800a23a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	2301      	movs	r3, #1
 800a244:	1064      	asrs	r4, r4, #1
 800a246:	f106 0608 	add.w	r6, r6, #8
 800a24a:	d1f4      	bne.n	800a236 <_strtod_l+0x5b6>
 800a24c:	b10b      	cbz	r3, 800a252 <_strtod_l+0x5d2>
 800a24e:	4682      	mov	sl, r0
 800a250:	468b      	mov	fp, r1
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	b1b3      	cbz	r3, 800a284 <_strtod_l+0x604>
 800a256:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a25a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a25e:	2b00      	cmp	r3, #0
 800a260:	4659      	mov	r1, fp
 800a262:	dd0f      	ble.n	800a284 <_strtod_l+0x604>
 800a264:	2b1f      	cmp	r3, #31
 800a266:	dd56      	ble.n	800a316 <_strtod_l+0x696>
 800a268:	2b34      	cmp	r3, #52	@ 0x34
 800a26a:	bfde      	ittt	le
 800a26c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a270:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a274:	4093      	lslle	r3, r2
 800a276:	f04f 0a00 	mov.w	sl, #0
 800a27a:	bfcc      	ite	gt
 800a27c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a280:	ea03 0b01 	andle.w	fp, r3, r1
 800a284:	2200      	movs	r2, #0
 800a286:	2300      	movs	r3, #0
 800a288:	4650      	mov	r0, sl
 800a28a:	4659      	mov	r1, fp
 800a28c:	f7f6 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a290:	2800      	cmp	r0, #0
 800a292:	d1a7      	bne.n	800a1e4 <_strtod_l+0x564>
 800a294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a29a:	9805      	ldr	r0, [sp, #20]
 800a29c:	462b      	mov	r3, r5
 800a29e:	464a      	mov	r2, r9
 800a2a0:	f7ff f8ce 	bl	8009440 <__s2b>
 800a2a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f af09 	beq.w	800a0be <_strtod_l+0x43e>
 800a2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	eba3 0308 	sub.w	r3, r3, r8
 800a2b6:	bfa8      	it	ge
 800a2b8:	2300      	movge	r3, #0
 800a2ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2bc:	2400      	movs	r4, #0
 800a2be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a2c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a2c4:	46a0      	mov	r8, r4
 800a2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2c8:	9805      	ldr	r0, [sp, #20]
 800a2ca:	6859      	ldr	r1, [r3, #4]
 800a2cc:	f7ff f810 	bl	80092f0 <_Balloc>
 800a2d0:	4681      	mov	r9, r0
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f43f aef7 	beq.w	800a0c6 <_strtod_l+0x446>
 800a2d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	3202      	adds	r2, #2
 800a2de:	f103 010c 	add.w	r1, r3, #12
 800a2e2:	0092      	lsls	r2, r2, #2
 800a2e4:	300c      	adds	r0, #12
 800a2e6:	f7fe f894 	bl	8008412 <memcpy>
 800a2ea:	ec4b ab10 	vmov	d0, sl, fp
 800a2ee:	9805      	ldr	r0, [sp, #20]
 800a2f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a2f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800a2f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a2f8:	f7ff fbd6 	bl	8009aa8 <__d2b>
 800a2fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f aee1 	beq.w	800a0c6 <_strtod_l+0x446>
 800a304:	9805      	ldr	r0, [sp, #20]
 800a306:	2101      	movs	r1, #1
 800a308:	f7ff f930 	bl	800956c <__i2b>
 800a30c:	4680      	mov	r8, r0
 800a30e:	b948      	cbnz	r0, 800a324 <_strtod_l+0x6a4>
 800a310:	f04f 0800 	mov.w	r8, #0
 800a314:	e6d7      	b.n	800a0c6 <_strtod_l+0x446>
 800a316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a31a:	fa02 f303 	lsl.w	r3, r2, r3
 800a31e:	ea03 0a0a 	and.w	sl, r3, sl
 800a322:	e7af      	b.n	800a284 <_strtod_l+0x604>
 800a324:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a326:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a328:	2d00      	cmp	r5, #0
 800a32a:	bfab      	itete	ge
 800a32c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a32e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a330:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a332:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a334:	bfac      	ite	ge
 800a336:	18ef      	addge	r7, r5, r3
 800a338:	1b5e      	sublt	r6, r3, r5
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	1aed      	subs	r5, r5, r3
 800a33e:	4415      	add	r5, r2
 800a340:	4b65      	ldr	r3, [pc, #404]	@ (800a4d8 <_strtod_l+0x858>)
 800a342:	3d01      	subs	r5, #1
 800a344:	429d      	cmp	r5, r3
 800a346:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a34a:	da50      	bge.n	800a3ee <_strtod_l+0x76e>
 800a34c:	1b5b      	subs	r3, r3, r5
 800a34e:	2b1f      	cmp	r3, #31
 800a350:	eba2 0203 	sub.w	r2, r2, r3
 800a354:	f04f 0101 	mov.w	r1, #1
 800a358:	dc3d      	bgt.n	800a3d6 <_strtod_l+0x756>
 800a35a:	fa01 f303 	lsl.w	r3, r1, r3
 800a35e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a360:	2300      	movs	r3, #0
 800a362:	9310      	str	r3, [sp, #64]	@ 0x40
 800a364:	18bd      	adds	r5, r7, r2
 800a366:	9b08      	ldr	r3, [sp, #32]
 800a368:	42af      	cmp	r7, r5
 800a36a:	4416      	add	r6, r2
 800a36c:	441e      	add	r6, r3
 800a36e:	463b      	mov	r3, r7
 800a370:	bfa8      	it	ge
 800a372:	462b      	movge	r3, r5
 800a374:	42b3      	cmp	r3, r6
 800a376:	bfa8      	it	ge
 800a378:	4633      	movge	r3, r6
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bfc2      	ittt	gt
 800a37e:	1aed      	subgt	r5, r5, r3
 800a380:	1af6      	subgt	r6, r6, r3
 800a382:	1aff      	subgt	r7, r7, r3
 800a384:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a386:	2b00      	cmp	r3, #0
 800a388:	dd16      	ble.n	800a3b8 <_strtod_l+0x738>
 800a38a:	4641      	mov	r1, r8
 800a38c:	9805      	ldr	r0, [sp, #20]
 800a38e:	461a      	mov	r2, r3
 800a390:	f7ff f9a4 	bl	80096dc <__pow5mult>
 800a394:	4680      	mov	r8, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	d0ba      	beq.n	800a310 <_strtod_l+0x690>
 800a39a:	4601      	mov	r1, r0
 800a39c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a39e:	9805      	ldr	r0, [sp, #20]
 800a3a0:	f7ff f8fa 	bl	8009598 <__multiply>
 800a3a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f43f ae8d 	beq.w	800a0c6 <_strtod_l+0x446>
 800a3ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3ae:	9805      	ldr	r0, [sp, #20]
 800a3b0:	f7fe ffde 	bl	8009370 <_Bfree>
 800a3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	dc1d      	bgt.n	800a3f8 <_strtod_l+0x778>
 800a3bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dd23      	ble.n	800a40a <_strtod_l+0x78a>
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a3c6:	9805      	ldr	r0, [sp, #20]
 800a3c8:	f7ff f988 	bl	80096dc <__pow5mult>
 800a3cc:	4681      	mov	r9, r0
 800a3ce:	b9e0      	cbnz	r0, 800a40a <_strtod_l+0x78a>
 800a3d0:	f04f 0900 	mov.w	r9, #0
 800a3d4:	e677      	b.n	800a0c6 <_strtod_l+0x446>
 800a3d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a3da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a3de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a3e2:	35e2      	adds	r5, #226	@ 0xe2
 800a3e4:	fa01 f305 	lsl.w	r3, r1, r5
 800a3e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a3ec:	e7ba      	b.n	800a364 <_strtod_l+0x6e4>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3f6:	e7b5      	b.n	800a364 <_strtod_l+0x6e4>
 800a3f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3fa:	9805      	ldr	r0, [sp, #20]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	f7ff f9c7 	bl	8009790 <__lshift>
 800a402:	901a      	str	r0, [sp, #104]	@ 0x68
 800a404:	2800      	cmp	r0, #0
 800a406:	d1d9      	bne.n	800a3bc <_strtod_l+0x73c>
 800a408:	e65d      	b.n	800a0c6 <_strtod_l+0x446>
 800a40a:	2e00      	cmp	r6, #0
 800a40c:	dd07      	ble.n	800a41e <_strtod_l+0x79e>
 800a40e:	4649      	mov	r1, r9
 800a410:	9805      	ldr	r0, [sp, #20]
 800a412:	4632      	mov	r2, r6
 800a414:	f7ff f9bc 	bl	8009790 <__lshift>
 800a418:	4681      	mov	r9, r0
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d0d8      	beq.n	800a3d0 <_strtod_l+0x750>
 800a41e:	2f00      	cmp	r7, #0
 800a420:	dd08      	ble.n	800a434 <_strtod_l+0x7b4>
 800a422:	4641      	mov	r1, r8
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	463a      	mov	r2, r7
 800a428:	f7ff f9b2 	bl	8009790 <__lshift>
 800a42c:	4680      	mov	r8, r0
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f ae49 	beq.w	800a0c6 <_strtod_l+0x446>
 800a434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a436:	9805      	ldr	r0, [sp, #20]
 800a438:	464a      	mov	r2, r9
 800a43a:	f7ff fa31 	bl	80098a0 <__mdiff>
 800a43e:	4604      	mov	r4, r0
 800a440:	2800      	cmp	r0, #0
 800a442:	f43f ae40 	beq.w	800a0c6 <_strtod_l+0x446>
 800a446:	68c3      	ldr	r3, [r0, #12]
 800a448:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a44a:	2300      	movs	r3, #0
 800a44c:	60c3      	str	r3, [r0, #12]
 800a44e:	4641      	mov	r1, r8
 800a450:	f7ff fa0a 	bl	8009868 <__mcmp>
 800a454:	2800      	cmp	r0, #0
 800a456:	da45      	bge.n	800a4e4 <_strtod_l+0x864>
 800a458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a45a:	ea53 030a 	orrs.w	r3, r3, sl
 800a45e:	d16b      	bne.n	800a538 <_strtod_l+0x8b8>
 800a460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a464:	2b00      	cmp	r3, #0
 800a466:	d167      	bne.n	800a538 <_strtod_l+0x8b8>
 800a468:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a46c:	0d1b      	lsrs	r3, r3, #20
 800a46e:	051b      	lsls	r3, r3, #20
 800a470:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a474:	d960      	bls.n	800a538 <_strtod_l+0x8b8>
 800a476:	6963      	ldr	r3, [r4, #20]
 800a478:	b913      	cbnz	r3, 800a480 <_strtod_l+0x800>
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	dd5b      	ble.n	800a538 <_strtod_l+0x8b8>
 800a480:	4621      	mov	r1, r4
 800a482:	2201      	movs	r2, #1
 800a484:	9805      	ldr	r0, [sp, #20]
 800a486:	f7ff f983 	bl	8009790 <__lshift>
 800a48a:	4641      	mov	r1, r8
 800a48c:	4604      	mov	r4, r0
 800a48e:	f7ff f9eb 	bl	8009868 <__mcmp>
 800a492:	2800      	cmp	r0, #0
 800a494:	dd50      	ble.n	800a538 <_strtod_l+0x8b8>
 800a496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a49a:	9a08      	ldr	r2, [sp, #32]
 800a49c:	0d1b      	lsrs	r3, r3, #20
 800a49e:	051b      	lsls	r3, r3, #20
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d06a      	beq.n	800a57a <_strtod_l+0x8fa>
 800a4a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4a8:	d867      	bhi.n	800a57a <_strtod_l+0x8fa>
 800a4aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a4ae:	f67f ae9d 	bls.w	800a1ec <_strtod_l+0x56c>
 800a4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4dc <_strtod_l+0x85c>)
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	4659      	mov	r1, fp
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f7f6 f89d 	bl	80005f8 <__aeabi_dmul>
 800a4be:	4b08      	ldr	r3, [pc, #32]	@ (800a4e0 <_strtod_l+0x860>)
 800a4c0:	400b      	ands	r3, r1
 800a4c2:	4682      	mov	sl, r0
 800a4c4:	468b      	mov	fp, r1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f47f ae08 	bne.w	800a0dc <_strtod_l+0x45c>
 800a4cc:	9a05      	ldr	r2, [sp, #20]
 800a4ce:	2322      	movs	r3, #34	@ 0x22
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e603      	b.n	800a0dc <_strtod_l+0x45c>
 800a4d4:	0800bed8 	.word	0x0800bed8
 800a4d8:	fffffc02 	.word	0xfffffc02
 800a4dc:	39500000 	.word	0x39500000
 800a4e0:	7ff00000 	.word	0x7ff00000
 800a4e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a4e8:	d165      	bne.n	800a5b6 <_strtod_l+0x936>
 800a4ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a4ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4f0:	b35a      	cbz	r2, 800a54a <_strtod_l+0x8ca>
 800a4f2:	4a9f      	ldr	r2, [pc, #636]	@ (800a770 <_strtod_l+0xaf0>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d12b      	bne.n	800a550 <_strtod_l+0x8d0>
 800a4f8:	9b08      	ldr	r3, [sp, #32]
 800a4fa:	4651      	mov	r1, sl
 800a4fc:	b303      	cbz	r3, 800a540 <_strtod_l+0x8c0>
 800a4fe:	4b9d      	ldr	r3, [pc, #628]	@ (800a774 <_strtod_l+0xaf4>)
 800a500:	465a      	mov	r2, fp
 800a502:	4013      	ands	r3, r2
 800a504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a50c:	d81b      	bhi.n	800a546 <_strtod_l+0x8c6>
 800a50e:	0d1b      	lsrs	r3, r3, #20
 800a510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	4299      	cmp	r1, r3
 800a51a:	d119      	bne.n	800a550 <_strtod_l+0x8d0>
 800a51c:	4b96      	ldr	r3, [pc, #600]	@ (800a778 <_strtod_l+0xaf8>)
 800a51e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a520:	429a      	cmp	r2, r3
 800a522:	d102      	bne.n	800a52a <_strtod_l+0x8aa>
 800a524:	3101      	adds	r1, #1
 800a526:	f43f adce 	beq.w	800a0c6 <_strtod_l+0x446>
 800a52a:	4b92      	ldr	r3, [pc, #584]	@ (800a774 <_strtod_l+0xaf4>)
 800a52c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a52e:	401a      	ands	r2, r3
 800a530:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a534:	f04f 0a00 	mov.w	sl, #0
 800a538:	9b08      	ldr	r3, [sp, #32]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1b9      	bne.n	800a4b2 <_strtod_l+0x832>
 800a53e:	e5cd      	b.n	800a0dc <_strtod_l+0x45c>
 800a540:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a544:	e7e8      	b.n	800a518 <_strtod_l+0x898>
 800a546:	4613      	mov	r3, r2
 800a548:	e7e6      	b.n	800a518 <_strtod_l+0x898>
 800a54a:	ea53 030a 	orrs.w	r3, r3, sl
 800a54e:	d0a2      	beq.n	800a496 <_strtod_l+0x816>
 800a550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a552:	b1db      	cbz	r3, 800a58c <_strtod_l+0x90c>
 800a554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a556:	4213      	tst	r3, r2
 800a558:	d0ee      	beq.n	800a538 <_strtod_l+0x8b8>
 800a55a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a55c:	9a08      	ldr	r2, [sp, #32]
 800a55e:	4650      	mov	r0, sl
 800a560:	4659      	mov	r1, fp
 800a562:	b1bb      	cbz	r3, 800a594 <_strtod_l+0x914>
 800a564:	f7ff fb6e 	bl	8009c44 <sulp>
 800a568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a56c:	ec53 2b10 	vmov	r2, r3, d0
 800a570:	f7f5 fe8c 	bl	800028c <__adddf3>
 800a574:	4682      	mov	sl, r0
 800a576:	468b      	mov	fp, r1
 800a578:	e7de      	b.n	800a538 <_strtod_l+0x8b8>
 800a57a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a57e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a582:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a586:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a58a:	e7d5      	b.n	800a538 <_strtod_l+0x8b8>
 800a58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a58e:	ea13 0f0a 	tst.w	r3, sl
 800a592:	e7e1      	b.n	800a558 <_strtod_l+0x8d8>
 800a594:	f7ff fb56 	bl	8009c44 <sulp>
 800a598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a59c:	ec53 2b10 	vmov	r2, r3, d0
 800a5a0:	f7f5 fe72 	bl	8000288 <__aeabi_dsub>
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	468b      	mov	fp, r1
 800a5ac:	f7f6 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d0c1      	beq.n	800a538 <_strtod_l+0x8b8>
 800a5b4:	e61a      	b.n	800a1ec <_strtod_l+0x56c>
 800a5b6:	4641      	mov	r1, r8
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff facd 	bl	8009b58 <__ratio>
 800a5be:	ec57 6b10 	vmov	r6, r7, d0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f6 fa90 	bl	8000af0 <__aeabi_dcmple>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d06f      	beq.n	800a6b4 <_strtod_l+0xa34>
 800a5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d17a      	bne.n	800a6d0 <_strtod_l+0xa50>
 800a5da:	f1ba 0f00 	cmp.w	sl, #0
 800a5de:	d158      	bne.n	800a692 <_strtod_l+0xa12>
 800a5e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d15a      	bne.n	800a6a0 <_strtod_l+0xa20>
 800a5ea:	4b64      	ldr	r3, [pc, #400]	@ (800a77c <_strtod_l+0xafc>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	f7f6 fa73 	bl	8000adc <__aeabi_dcmplt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d159      	bne.n	800a6ae <_strtod_l+0xa2e>
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4b60      	ldr	r3, [pc, #384]	@ (800a780 <_strtod_l+0xb00>)
 800a600:	2200      	movs	r2, #0
 800a602:	f7f5 fff9 	bl	80005f8 <__aeabi_dmul>
 800a606:	4606      	mov	r6, r0
 800a608:	460f      	mov	r7, r1
 800a60a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a60e:	9606      	str	r6, [sp, #24]
 800a610:	9307      	str	r3, [sp, #28]
 800a612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a616:	4d57      	ldr	r5, [pc, #348]	@ (800a774 <_strtod_l+0xaf4>)
 800a618:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a61e:	401d      	ands	r5, r3
 800a620:	4b58      	ldr	r3, [pc, #352]	@ (800a784 <_strtod_l+0xb04>)
 800a622:	429d      	cmp	r5, r3
 800a624:	f040 80b2 	bne.w	800a78c <_strtod_l+0xb0c>
 800a628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a62a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a62e:	ec4b ab10 	vmov	d0, sl, fp
 800a632:	f7ff f9c9 	bl	80099c8 <__ulp>
 800a636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a63a:	ec51 0b10 	vmov	r0, r1, d0
 800a63e:	f7f5 ffdb 	bl	80005f8 <__aeabi_dmul>
 800a642:	4652      	mov	r2, sl
 800a644:	465b      	mov	r3, fp
 800a646:	f7f5 fe21 	bl	800028c <__adddf3>
 800a64a:	460b      	mov	r3, r1
 800a64c:	4949      	ldr	r1, [pc, #292]	@ (800a774 <_strtod_l+0xaf4>)
 800a64e:	4a4e      	ldr	r2, [pc, #312]	@ (800a788 <_strtod_l+0xb08>)
 800a650:	4019      	ands	r1, r3
 800a652:	4291      	cmp	r1, r2
 800a654:	4682      	mov	sl, r0
 800a656:	d942      	bls.n	800a6de <_strtod_l+0xa5e>
 800a658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a65a:	4b47      	ldr	r3, [pc, #284]	@ (800a778 <_strtod_l+0xaf8>)
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d103      	bne.n	800a668 <_strtod_l+0x9e8>
 800a660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a662:	3301      	adds	r3, #1
 800a664:	f43f ad2f 	beq.w	800a0c6 <_strtod_l+0x446>
 800a668:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a778 <_strtod_l+0xaf8>
 800a66c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a672:	9805      	ldr	r0, [sp, #20]
 800a674:	f7fe fe7c 	bl	8009370 <_Bfree>
 800a678:	9805      	ldr	r0, [sp, #20]
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7fe fe78 	bl	8009370 <_Bfree>
 800a680:	9805      	ldr	r0, [sp, #20]
 800a682:	4641      	mov	r1, r8
 800a684:	f7fe fe74 	bl	8009370 <_Bfree>
 800a688:	9805      	ldr	r0, [sp, #20]
 800a68a:	4621      	mov	r1, r4
 800a68c:	f7fe fe70 	bl	8009370 <_Bfree>
 800a690:	e619      	b.n	800a2c6 <_strtod_l+0x646>
 800a692:	f1ba 0f01 	cmp.w	sl, #1
 800a696:	d103      	bne.n	800a6a0 <_strtod_l+0xa20>
 800a698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f43f ada6 	beq.w	800a1ec <_strtod_l+0x56c>
 800a6a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a750 <_strtod_l+0xad0>
 800a6a4:	4f35      	ldr	r7, [pc, #212]	@ (800a77c <_strtod_l+0xafc>)
 800a6a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	e7b1      	b.n	800a612 <_strtod_l+0x992>
 800a6ae:	4f34      	ldr	r7, [pc, #208]	@ (800a780 <_strtod_l+0xb00>)
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	e7aa      	b.n	800a60a <_strtod_l+0x98a>
 800a6b4:	4b32      	ldr	r3, [pc, #200]	@ (800a780 <_strtod_l+0xb00>)
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d09f      	beq.n	800a60a <_strtod_l+0x98a>
 800a6ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6ce:	e7a0      	b.n	800a612 <_strtod_l+0x992>
 800a6d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a758 <_strtod_l+0xad8>
 800a6d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6d8:	ec57 6b17 	vmov	r6, r7, d7
 800a6dc:	e799      	b.n	800a612 <_strtod_l+0x992>
 800a6de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a6e2:	9b08      	ldr	r3, [sp, #32]
 800a6e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1c1      	bne.n	800a670 <_strtod_l+0x9f0>
 800a6ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6f0:	0d1b      	lsrs	r3, r3, #20
 800a6f2:	051b      	lsls	r3, r3, #20
 800a6f4:	429d      	cmp	r5, r3
 800a6f6:	d1bb      	bne.n	800a670 <_strtod_l+0x9f0>
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f6 fadc 	bl	8000cb8 <__aeabi_d2lz>
 800a700:	f7f5 ff4c 	bl	800059c <__aeabi_l2d>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f5 fdbc 	bl	8000288 <__aeabi_dsub>
 800a710:	460b      	mov	r3, r1
 800a712:	4602      	mov	r2, r0
 800a714:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a718:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71e:	ea46 060a 	orr.w	r6, r6, sl
 800a722:	431e      	orrs	r6, r3
 800a724:	d06f      	beq.n	800a806 <_strtod_l+0xb86>
 800a726:	a30e      	add	r3, pc, #56	@ (adr r3, 800a760 <_strtod_l+0xae0>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	f7f6 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800a730:	2800      	cmp	r0, #0
 800a732:	f47f acd3 	bne.w	800a0dc <_strtod_l+0x45c>
 800a736:	a30c      	add	r3, pc, #48	@ (adr r3, 800a768 <_strtod_l+0xae8>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a740:	f7f6 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 800a744:	2800      	cmp	r0, #0
 800a746:	d093      	beq.n	800a670 <_strtod_l+0x9f0>
 800a748:	e4c8      	b.n	800a0dc <_strtod_l+0x45c>
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w
 800a750:	00000000 	.word	0x00000000
 800a754:	bff00000 	.word	0xbff00000
 800a758:	00000000 	.word	0x00000000
 800a75c:	3ff00000 	.word	0x3ff00000
 800a760:	94a03595 	.word	0x94a03595
 800a764:	3fdfffff 	.word	0x3fdfffff
 800a768:	35afe535 	.word	0x35afe535
 800a76c:	3fe00000 	.word	0x3fe00000
 800a770:	000fffff 	.word	0x000fffff
 800a774:	7ff00000 	.word	0x7ff00000
 800a778:	7fefffff 	.word	0x7fefffff
 800a77c:	3ff00000 	.word	0x3ff00000
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	7fe00000 	.word	0x7fe00000
 800a788:	7c9fffff 	.word	0x7c9fffff
 800a78c:	9b08      	ldr	r3, [sp, #32]
 800a78e:	b323      	cbz	r3, 800a7da <_strtod_l+0xb5a>
 800a790:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a794:	d821      	bhi.n	800a7da <_strtod_l+0xb5a>
 800a796:	a328      	add	r3, pc, #160	@ (adr r3, 800a838 <_strtod_l+0xbb8>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f6 f9a6 	bl	8000af0 <__aeabi_dcmple>
 800a7a4:	b1a0      	cbz	r0, 800a7d0 <_strtod_l+0xb50>
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7f6 f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 800a7ae:	2801      	cmp	r0, #1
 800a7b0:	bf38      	it	cc
 800a7b2:	2001      	movcc	r0, #1
 800a7b4:	f7f5 fea6 	bl	8000504 <__aeabi_ui2d>
 800a7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	b9fb      	cbnz	r3, 800a800 <_strtod_l+0xb80>
 800a7c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a7c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a7cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a7d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a7d6:	1b5b      	subs	r3, r3, r5
 800a7d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a7de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a7e2:	f7ff f8f1 	bl	80099c8 <__ulp>
 800a7e6:	4650      	mov	r0, sl
 800a7e8:	ec53 2b10 	vmov	r2, r3, d0
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	f7f5 ff03 	bl	80005f8 <__aeabi_dmul>
 800a7f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a7f6:	f7f5 fd49 	bl	800028c <__adddf3>
 800a7fa:	4682      	mov	sl, r0
 800a7fc:	468b      	mov	fp, r1
 800a7fe:	e770      	b.n	800a6e2 <_strtod_l+0xa62>
 800a800:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a804:	e7e0      	b.n	800a7c8 <_strtod_l+0xb48>
 800a806:	a30e      	add	r3, pc, #56	@ (adr r3, 800a840 <_strtod_l+0xbc0>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f6 f966 	bl	8000adc <__aeabi_dcmplt>
 800a810:	e798      	b.n	800a744 <_strtod_l+0xac4>
 800a812:	2300      	movs	r3, #0
 800a814:	930e      	str	r3, [sp, #56]	@ 0x38
 800a816:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	f7ff ba6d 	b.w	8009cfa <_strtod_l+0x7a>
 800a820:	2a65      	cmp	r2, #101	@ 0x65
 800a822:	f43f ab68 	beq.w	8009ef6 <_strtod_l+0x276>
 800a826:	2a45      	cmp	r2, #69	@ 0x45
 800a828:	f43f ab65 	beq.w	8009ef6 <_strtod_l+0x276>
 800a82c:	2301      	movs	r3, #1
 800a82e:	f7ff bba0 	b.w	8009f72 <_strtod_l+0x2f2>
 800a832:	bf00      	nop
 800a834:	f3af 8000 	nop.w
 800a838:	ffc00000 	.word	0xffc00000
 800a83c:	41dfffff 	.word	0x41dfffff
 800a840:	94a03595 	.word	0x94a03595
 800a844:	3fcfffff 	.word	0x3fcfffff

0800a848 <_strtod_r>:
 800a848:	4b01      	ldr	r3, [pc, #4]	@ (800a850 <_strtod_r+0x8>)
 800a84a:	f7ff ba19 	b.w	8009c80 <_strtod_l>
 800a84e:	bf00      	nop
 800a850:	2000006c 	.word	0x2000006c

0800a854 <_strtol_l.isra.0>:
 800a854:	2b24      	cmp	r3, #36	@ 0x24
 800a856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85a:	4686      	mov	lr, r0
 800a85c:	4690      	mov	r8, r2
 800a85e:	d801      	bhi.n	800a864 <_strtol_l.isra.0+0x10>
 800a860:	2b01      	cmp	r3, #1
 800a862:	d106      	bne.n	800a872 <_strtol_l.isra.0+0x1e>
 800a864:	f7fd fda8 	bl	80083b8 <__errno>
 800a868:	2316      	movs	r3, #22
 800a86a:	6003      	str	r3, [r0, #0]
 800a86c:	2000      	movs	r0, #0
 800a86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a872:	4834      	ldr	r0, [pc, #208]	@ (800a944 <_strtol_l.isra.0+0xf0>)
 800a874:	460d      	mov	r5, r1
 800a876:	462a      	mov	r2, r5
 800a878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a87c:	5d06      	ldrb	r6, [r0, r4]
 800a87e:	f016 0608 	ands.w	r6, r6, #8
 800a882:	d1f8      	bne.n	800a876 <_strtol_l.isra.0+0x22>
 800a884:	2c2d      	cmp	r4, #45	@ 0x2d
 800a886:	d110      	bne.n	800a8aa <_strtol_l.isra.0+0x56>
 800a888:	782c      	ldrb	r4, [r5, #0]
 800a88a:	2601      	movs	r6, #1
 800a88c:	1c95      	adds	r5, r2, #2
 800a88e:	f033 0210 	bics.w	r2, r3, #16
 800a892:	d115      	bne.n	800a8c0 <_strtol_l.isra.0+0x6c>
 800a894:	2c30      	cmp	r4, #48	@ 0x30
 800a896:	d10d      	bne.n	800a8b4 <_strtol_l.isra.0+0x60>
 800a898:	782a      	ldrb	r2, [r5, #0]
 800a89a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a89e:	2a58      	cmp	r2, #88	@ 0x58
 800a8a0:	d108      	bne.n	800a8b4 <_strtol_l.isra.0+0x60>
 800a8a2:	786c      	ldrb	r4, [r5, #1]
 800a8a4:	3502      	adds	r5, #2
 800a8a6:	2310      	movs	r3, #16
 800a8a8:	e00a      	b.n	800a8c0 <_strtol_l.isra.0+0x6c>
 800a8aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8ac:	bf04      	itt	eq
 800a8ae:	782c      	ldrbeq	r4, [r5, #0]
 800a8b0:	1c95      	addeq	r5, r2, #2
 800a8b2:	e7ec      	b.n	800a88e <_strtol_l.isra.0+0x3a>
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f6      	bne.n	800a8a6 <_strtol_l.isra.0+0x52>
 800a8b8:	2c30      	cmp	r4, #48	@ 0x30
 800a8ba:	bf14      	ite	ne
 800a8bc:	230a      	movne	r3, #10
 800a8be:	2308      	moveq	r3, #8
 800a8c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a8c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	fbbc f9f3 	udiv	r9, ip, r3
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a8d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a8d8:	2f09      	cmp	r7, #9
 800a8da:	d80f      	bhi.n	800a8fc <_strtol_l.isra.0+0xa8>
 800a8dc:	463c      	mov	r4, r7
 800a8de:	42a3      	cmp	r3, r4
 800a8e0:	dd1b      	ble.n	800a91a <_strtol_l.isra.0+0xc6>
 800a8e2:	1c57      	adds	r7, r2, #1
 800a8e4:	d007      	beq.n	800a8f6 <_strtol_l.isra.0+0xa2>
 800a8e6:	4581      	cmp	r9, r0
 800a8e8:	d314      	bcc.n	800a914 <_strtol_l.isra.0+0xc0>
 800a8ea:	d101      	bne.n	800a8f0 <_strtol_l.isra.0+0x9c>
 800a8ec:	45a2      	cmp	sl, r4
 800a8ee:	db11      	blt.n	800a914 <_strtol_l.isra.0+0xc0>
 800a8f0:	fb00 4003 	mla	r0, r0, r3, r4
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8fa:	e7eb      	b.n	800a8d4 <_strtol_l.isra.0+0x80>
 800a8fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a900:	2f19      	cmp	r7, #25
 800a902:	d801      	bhi.n	800a908 <_strtol_l.isra.0+0xb4>
 800a904:	3c37      	subs	r4, #55	@ 0x37
 800a906:	e7ea      	b.n	800a8de <_strtol_l.isra.0+0x8a>
 800a908:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a90c:	2f19      	cmp	r7, #25
 800a90e:	d804      	bhi.n	800a91a <_strtol_l.isra.0+0xc6>
 800a910:	3c57      	subs	r4, #87	@ 0x57
 800a912:	e7e4      	b.n	800a8de <_strtol_l.isra.0+0x8a>
 800a914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a918:	e7ed      	b.n	800a8f6 <_strtol_l.isra.0+0xa2>
 800a91a:	1c53      	adds	r3, r2, #1
 800a91c:	d108      	bne.n	800a930 <_strtol_l.isra.0+0xdc>
 800a91e:	2322      	movs	r3, #34	@ 0x22
 800a920:	f8ce 3000 	str.w	r3, [lr]
 800a924:	4660      	mov	r0, ip
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	d0a0      	beq.n	800a86e <_strtol_l.isra.0+0x1a>
 800a92c:	1e69      	subs	r1, r5, #1
 800a92e:	e006      	b.n	800a93e <_strtol_l.isra.0+0xea>
 800a930:	b106      	cbz	r6, 800a934 <_strtol_l.isra.0+0xe0>
 800a932:	4240      	negs	r0, r0
 800a934:	f1b8 0f00 	cmp.w	r8, #0
 800a938:	d099      	beq.n	800a86e <_strtol_l.isra.0+0x1a>
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	d1f6      	bne.n	800a92c <_strtol_l.isra.0+0xd8>
 800a93e:	f8c8 1000 	str.w	r1, [r8]
 800a942:	e794      	b.n	800a86e <_strtol_l.isra.0+0x1a>
 800a944:	0800bf01 	.word	0x0800bf01

0800a948 <_strtol_r>:
 800a948:	f7ff bf84 	b.w	800a854 <_strtol_l.isra.0>

0800a94c <__ssputs_r>:
 800a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	688e      	ldr	r6, [r1, #8]
 800a952:	461f      	mov	r7, r3
 800a954:	42be      	cmp	r6, r7
 800a956:	680b      	ldr	r3, [r1, #0]
 800a958:	4682      	mov	sl, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	4690      	mov	r8, r2
 800a95e:	d82d      	bhi.n	800a9bc <__ssputs_r+0x70>
 800a960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a968:	d026      	beq.n	800a9b8 <__ssputs_r+0x6c>
 800a96a:	6965      	ldr	r5, [r4, #20]
 800a96c:	6909      	ldr	r1, [r1, #16]
 800a96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a972:	eba3 0901 	sub.w	r9, r3, r1
 800a976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a97a:	1c7b      	adds	r3, r7, #1
 800a97c:	444b      	add	r3, r9
 800a97e:	106d      	asrs	r5, r5, #1
 800a980:	429d      	cmp	r5, r3
 800a982:	bf38      	it	cc
 800a984:	461d      	movcc	r5, r3
 800a986:	0553      	lsls	r3, r2, #21
 800a988:	d527      	bpl.n	800a9da <__ssputs_r+0x8e>
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7fe fc24 	bl	80091d8 <_malloc_r>
 800a990:	4606      	mov	r6, r0
 800a992:	b360      	cbz	r0, 800a9ee <__ssputs_r+0xa2>
 800a994:	6921      	ldr	r1, [r4, #16]
 800a996:	464a      	mov	r2, r9
 800a998:	f7fd fd3b 	bl	8008412 <memcpy>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	6126      	str	r6, [r4, #16]
 800a9aa:	6165      	str	r5, [r4, #20]
 800a9ac:	444e      	add	r6, r9
 800a9ae:	eba5 0509 	sub.w	r5, r5, r9
 800a9b2:	6026      	str	r6, [r4, #0]
 800a9b4:	60a5      	str	r5, [r4, #8]
 800a9b6:	463e      	mov	r6, r7
 800a9b8:	42be      	cmp	r6, r7
 800a9ba:	d900      	bls.n	800a9be <__ssputs_r+0x72>
 800a9bc:	463e      	mov	r6, r7
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	f000 f9c6 	bl	800ad54 <memmove>
 800a9c8:	68a3      	ldr	r3, [r4, #8]
 800a9ca:	1b9b      	subs	r3, r3, r6
 800a9cc:	60a3      	str	r3, [r4, #8]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	4433      	add	r3, r6
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9da:	462a      	mov	r2, r5
 800a9dc:	f000 fd7d 	bl	800b4da <_realloc_r>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d1e0      	bne.n	800a9a8 <__ssputs_r+0x5c>
 800a9e6:	6921      	ldr	r1, [r4, #16]
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	f7fe fb81 	bl	80090f0 <_free_r>
 800a9ee:	230c      	movs	r3, #12
 800a9f0:	f8ca 3000 	str.w	r3, [sl]
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa00:	e7e9      	b.n	800a9d6 <__ssputs_r+0x8a>
	...

0800aa04 <_svfiprintf_r>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	4698      	mov	r8, r3
 800aa0a:	898b      	ldrh	r3, [r1, #12]
 800aa0c:	061b      	lsls	r3, r3, #24
 800aa0e:	b09d      	sub	sp, #116	@ 0x74
 800aa10:	4607      	mov	r7, r0
 800aa12:	460d      	mov	r5, r1
 800aa14:	4614      	mov	r4, r2
 800aa16:	d510      	bpl.n	800aa3a <_svfiprintf_r+0x36>
 800aa18:	690b      	ldr	r3, [r1, #16]
 800aa1a:	b973      	cbnz	r3, 800aa3a <_svfiprintf_r+0x36>
 800aa1c:	2140      	movs	r1, #64	@ 0x40
 800aa1e:	f7fe fbdb 	bl	80091d8 <_malloc_r>
 800aa22:	6028      	str	r0, [r5, #0]
 800aa24:	6128      	str	r0, [r5, #16]
 800aa26:	b930      	cbnz	r0, 800aa36 <_svfiprintf_r+0x32>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa30:	b01d      	add	sp, #116	@ 0x74
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	2340      	movs	r3, #64	@ 0x40
 800aa38:	616b      	str	r3, [r5, #20]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa3e:	2320      	movs	r3, #32
 800aa40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa44:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa48:	2330      	movs	r3, #48	@ 0x30
 800aa4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abe8 <_svfiprintf_r+0x1e4>
 800aa4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa52:	f04f 0901 	mov.w	r9, #1
 800aa56:	4623      	mov	r3, r4
 800aa58:	469a      	mov	sl, r3
 800aa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5e:	b10a      	cbz	r2, 800aa64 <_svfiprintf_r+0x60>
 800aa60:	2a25      	cmp	r2, #37	@ 0x25
 800aa62:	d1f9      	bne.n	800aa58 <_svfiprintf_r+0x54>
 800aa64:	ebba 0b04 	subs.w	fp, sl, r4
 800aa68:	d00b      	beq.n	800aa82 <_svfiprintf_r+0x7e>
 800aa6a:	465b      	mov	r3, fp
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7ff ff6b 	bl	800a94c <__ssputs_r>
 800aa76:	3001      	adds	r0, #1
 800aa78:	f000 80a7 	beq.w	800abca <_svfiprintf_r+0x1c6>
 800aa7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa7e:	445a      	add	r2, fp
 800aa80:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa82:	f89a 3000 	ldrb.w	r3, [sl]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 809f 	beq.w	800abca <_svfiprintf_r+0x1c6>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa96:	f10a 0a01 	add.w	sl, sl, #1
 800aa9a:	9304      	str	r3, [sp, #16]
 800aa9c:	9307      	str	r3, [sp, #28]
 800aa9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aaa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aaa4:	4654      	mov	r4, sl
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaac:	484e      	ldr	r0, [pc, #312]	@ (800abe8 <_svfiprintf_r+0x1e4>)
 800aaae:	f7f5 fb8f 	bl	80001d0 <memchr>
 800aab2:	9a04      	ldr	r2, [sp, #16]
 800aab4:	b9d8      	cbnz	r0, 800aaee <_svfiprintf_r+0xea>
 800aab6:	06d0      	lsls	r0, r2, #27
 800aab8:	bf44      	itt	mi
 800aaba:	2320      	movmi	r3, #32
 800aabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aac0:	0711      	lsls	r1, r2, #28
 800aac2:	bf44      	itt	mi
 800aac4:	232b      	movmi	r3, #43	@ 0x2b
 800aac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaca:	f89a 3000 	ldrb.w	r3, [sl]
 800aace:	2b2a      	cmp	r3, #42	@ 0x2a
 800aad0:	d015      	beq.n	800aafe <_svfiprintf_r+0xfa>
 800aad2:	9a07      	ldr	r2, [sp, #28]
 800aad4:	4654      	mov	r4, sl
 800aad6:	2000      	movs	r0, #0
 800aad8:	f04f 0c0a 	mov.w	ip, #10
 800aadc:	4621      	mov	r1, r4
 800aade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aae2:	3b30      	subs	r3, #48	@ 0x30
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	d94b      	bls.n	800ab80 <_svfiprintf_r+0x17c>
 800aae8:	b1b0      	cbz	r0, 800ab18 <_svfiprintf_r+0x114>
 800aaea:	9207      	str	r2, [sp, #28]
 800aaec:	e014      	b.n	800ab18 <_svfiprintf_r+0x114>
 800aaee:	eba0 0308 	sub.w	r3, r0, r8
 800aaf2:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	46a2      	mov	sl, r4
 800aafc:	e7d2      	b.n	800aaa4 <_svfiprintf_r+0xa0>
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	1d19      	adds	r1, r3, #4
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	9103      	str	r1, [sp, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bfbb      	ittet	lt
 800ab0a:	425b      	neglt	r3, r3
 800ab0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab10:	9307      	strge	r3, [sp, #28]
 800ab12:	9307      	strlt	r3, [sp, #28]
 800ab14:	bfb8      	it	lt
 800ab16:	9204      	strlt	r2, [sp, #16]
 800ab18:	7823      	ldrb	r3, [r4, #0]
 800ab1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab1c:	d10a      	bne.n	800ab34 <_svfiprintf_r+0x130>
 800ab1e:	7863      	ldrb	r3, [r4, #1]
 800ab20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab22:	d132      	bne.n	800ab8a <_svfiprintf_r+0x186>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	9203      	str	r2, [sp, #12]
 800ab2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab30:	3402      	adds	r4, #2
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800abf8 <_svfiprintf_r+0x1f4>
 800ab38:	7821      	ldrb	r1, [r4, #0]
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	f7f5 fb47 	bl	80001d0 <memchr>
 800ab42:	b138      	cbz	r0, 800ab54 <_svfiprintf_r+0x150>
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	eba0 000a 	sub.w	r0, r0, sl
 800ab4a:	2240      	movs	r2, #64	@ 0x40
 800ab4c:	4082      	lsls	r2, r0
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	3401      	adds	r4, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab58:	4824      	ldr	r0, [pc, #144]	@ (800abec <_svfiprintf_r+0x1e8>)
 800ab5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab5e:	2206      	movs	r2, #6
 800ab60:	f7f5 fb36 	bl	80001d0 <memchr>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d036      	beq.n	800abd6 <_svfiprintf_r+0x1d2>
 800ab68:	4b21      	ldr	r3, [pc, #132]	@ (800abf0 <_svfiprintf_r+0x1ec>)
 800ab6a:	bb1b      	cbnz	r3, 800abb4 <_svfiprintf_r+0x1b0>
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	3307      	adds	r3, #7
 800ab70:	f023 0307 	bic.w	r3, r3, #7
 800ab74:	3308      	adds	r3, #8
 800ab76:	9303      	str	r3, [sp, #12]
 800ab78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7a:	4433      	add	r3, r6
 800ab7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab7e:	e76a      	b.n	800aa56 <_svfiprintf_r+0x52>
 800ab80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab84:	460c      	mov	r4, r1
 800ab86:	2001      	movs	r0, #1
 800ab88:	e7a8      	b.n	800aadc <_svfiprintf_r+0xd8>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	3401      	adds	r4, #1
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	4619      	mov	r1, r3
 800ab92:	f04f 0c0a 	mov.w	ip, #10
 800ab96:	4620      	mov	r0, r4
 800ab98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab9c:	3a30      	subs	r2, #48	@ 0x30
 800ab9e:	2a09      	cmp	r2, #9
 800aba0:	d903      	bls.n	800abaa <_svfiprintf_r+0x1a6>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0c6      	beq.n	800ab34 <_svfiprintf_r+0x130>
 800aba6:	9105      	str	r1, [sp, #20]
 800aba8:	e7c4      	b.n	800ab34 <_svfiprintf_r+0x130>
 800abaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800abae:	4604      	mov	r4, r0
 800abb0:	2301      	movs	r3, #1
 800abb2:	e7f0      	b.n	800ab96 <_svfiprintf_r+0x192>
 800abb4:	ab03      	add	r3, sp, #12
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	462a      	mov	r2, r5
 800abba:	4b0e      	ldr	r3, [pc, #56]	@ (800abf4 <_svfiprintf_r+0x1f0>)
 800abbc:	a904      	add	r1, sp, #16
 800abbe:	4638      	mov	r0, r7
 800abc0:	f7fc fc28 	bl	8007414 <_printf_float>
 800abc4:	1c42      	adds	r2, r0, #1
 800abc6:	4606      	mov	r6, r0
 800abc8:	d1d6      	bne.n	800ab78 <_svfiprintf_r+0x174>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	065b      	lsls	r3, r3, #25
 800abce:	f53f af2d 	bmi.w	800aa2c <_svfiprintf_r+0x28>
 800abd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abd4:	e72c      	b.n	800aa30 <_svfiprintf_r+0x2c>
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	462a      	mov	r2, r5
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <_svfiprintf_r+0x1f0>)
 800abde:	a904      	add	r1, sp, #16
 800abe0:	4638      	mov	r0, r7
 800abe2:	f7fc feaf 	bl	8007944 <_printf_i>
 800abe6:	e7ed      	b.n	800abc4 <_svfiprintf_r+0x1c0>
 800abe8:	0800bcfd 	.word	0x0800bcfd
 800abec:	0800bd07 	.word	0x0800bd07
 800abf0:	08007415 	.word	0x08007415
 800abf4:	0800a94d 	.word	0x0800a94d
 800abf8:	0800bd03 	.word	0x0800bd03

0800abfc <__sflush_r>:
 800abfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	0716      	lsls	r6, r2, #28
 800ac06:	4605      	mov	r5, r0
 800ac08:	460c      	mov	r4, r1
 800ac0a:	d454      	bmi.n	800acb6 <__sflush_r+0xba>
 800ac0c:	684b      	ldr	r3, [r1, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc02      	bgt.n	800ac18 <__sflush_r+0x1c>
 800ac12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dd48      	ble.n	800acaa <__sflush_r+0xae>
 800ac18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d045      	beq.n	800acaa <__sflush_r+0xae>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac24:	682f      	ldr	r7, [r5, #0]
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	d030      	beq.n	800ac8e <__sflush_r+0x92>
 800ac2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	0759      	lsls	r1, r3, #29
 800ac32:	d505      	bpl.n	800ac40 <__sflush_r+0x44>
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac3a:	b10b      	cbz	r3, 800ac40 <__sflush_r+0x44>
 800ac3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac44:	6a21      	ldr	r1, [r4, #32]
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	d106      	bne.n	800ac5e <__sflush_r+0x62>
 800ac50:	6829      	ldr	r1, [r5, #0]
 800ac52:	291d      	cmp	r1, #29
 800ac54:	d82b      	bhi.n	800acae <__sflush_r+0xb2>
 800ac56:	4a2a      	ldr	r2, [pc, #168]	@ (800ad00 <__sflush_r+0x104>)
 800ac58:	40ca      	lsrs	r2, r1
 800ac5a:	07d6      	lsls	r6, r2, #31
 800ac5c:	d527      	bpl.n	800acae <__sflush_r+0xb2>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	6062      	str	r2, [r4, #4]
 800ac62:	04d9      	lsls	r1, r3, #19
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	6022      	str	r2, [r4, #0]
 800ac68:	d504      	bpl.n	800ac74 <__sflush_r+0x78>
 800ac6a:	1c42      	adds	r2, r0, #1
 800ac6c:	d101      	bne.n	800ac72 <__sflush_r+0x76>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b903      	cbnz	r3, 800ac74 <__sflush_r+0x78>
 800ac72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac76:	602f      	str	r7, [r5, #0]
 800ac78:	b1b9      	cbz	r1, 800acaa <__sflush_r+0xae>
 800ac7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	d002      	beq.n	800ac88 <__sflush_r+0x8c>
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7fe fa34 	bl	80090f0 <_free_r>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac8c:	e00d      	b.n	800acaa <__sflush_r+0xae>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4628      	mov	r0, r5
 800ac92:	47b0      	blx	r6
 800ac94:	4602      	mov	r2, r0
 800ac96:	1c50      	adds	r0, r2, #1
 800ac98:	d1c9      	bne.n	800ac2e <__sflush_r+0x32>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0c6      	beq.n	800ac2e <__sflush_r+0x32>
 800aca0:	2b1d      	cmp	r3, #29
 800aca2:	d001      	beq.n	800aca8 <__sflush_r+0xac>
 800aca4:	2b16      	cmp	r3, #22
 800aca6:	d11e      	bne.n	800ace6 <__sflush_r+0xea>
 800aca8:	602f      	str	r7, [r5, #0]
 800acaa:	2000      	movs	r0, #0
 800acac:	e022      	b.n	800acf4 <__sflush_r+0xf8>
 800acae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	e01b      	b.n	800acee <__sflush_r+0xf2>
 800acb6:	690f      	ldr	r7, [r1, #16]
 800acb8:	2f00      	cmp	r7, #0
 800acba:	d0f6      	beq.n	800acaa <__sflush_r+0xae>
 800acbc:	0793      	lsls	r3, r2, #30
 800acbe:	680e      	ldr	r6, [r1, #0]
 800acc0:	bf08      	it	eq
 800acc2:	694b      	ldreq	r3, [r1, #20]
 800acc4:	600f      	str	r7, [r1, #0]
 800acc6:	bf18      	it	ne
 800acc8:	2300      	movne	r3, #0
 800acca:	eba6 0807 	sub.w	r8, r6, r7
 800acce:	608b      	str	r3, [r1, #8]
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	dde9      	ble.n	800acaa <__sflush_r+0xae>
 800acd6:	6a21      	ldr	r1, [r4, #32]
 800acd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acda:	4643      	mov	r3, r8
 800acdc:	463a      	mov	r2, r7
 800acde:	4628      	mov	r0, r5
 800ace0:	47b0      	blx	r6
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dc08      	bgt.n	800acf8 <__sflush_r+0xfc>
 800ace6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf8:	4407      	add	r7, r0
 800acfa:	eba8 0800 	sub.w	r8, r8, r0
 800acfe:	e7e7      	b.n	800acd0 <__sflush_r+0xd4>
 800ad00:	20400001 	.word	0x20400001

0800ad04 <_fflush_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	690b      	ldr	r3, [r1, #16]
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b913      	cbnz	r3, 800ad14 <_fflush_r+0x10>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	4628      	mov	r0, r5
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	b118      	cbz	r0, 800ad1e <_fflush_r+0x1a>
 800ad16:	6a03      	ldr	r3, [r0, #32]
 800ad18:	b90b      	cbnz	r3, 800ad1e <_fflush_r+0x1a>
 800ad1a:	f7fd f9cb 	bl	80080b4 <__sinit>
 800ad1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f3      	beq.n	800ad0e <_fflush_r+0xa>
 800ad26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad28:	07d0      	lsls	r0, r2, #31
 800ad2a:	d404      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad2c:	0599      	lsls	r1, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad32:	f7fd fb6c 	bl	800840e <__retarget_lock_acquire_recursive>
 800ad36:	4628      	mov	r0, r5
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f7ff ff5f 	bl	800abfc <__sflush_r>
 800ad3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad40:	07da      	lsls	r2, r3, #31
 800ad42:	4605      	mov	r5, r0
 800ad44:	d4e4      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	059b      	lsls	r3, r3, #22
 800ad4a:	d4e1      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad4e:	f7fd fb5f 	bl	8008410 <__retarget_lock_release_recursive>
 800ad52:	e7dd      	b.n	800ad10 <_fflush_r+0xc>

0800ad54 <memmove>:
 800ad54:	4288      	cmp	r0, r1
 800ad56:	b510      	push	{r4, lr}
 800ad58:	eb01 0402 	add.w	r4, r1, r2
 800ad5c:	d902      	bls.n	800ad64 <memmove+0x10>
 800ad5e:	4284      	cmp	r4, r0
 800ad60:	4623      	mov	r3, r4
 800ad62:	d807      	bhi.n	800ad74 <memmove+0x20>
 800ad64:	1e43      	subs	r3, r0, #1
 800ad66:	42a1      	cmp	r1, r4
 800ad68:	d008      	beq.n	800ad7c <memmove+0x28>
 800ad6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad72:	e7f8      	b.n	800ad66 <memmove+0x12>
 800ad74:	4402      	add	r2, r0
 800ad76:	4601      	mov	r1, r0
 800ad78:	428a      	cmp	r2, r1
 800ad7a:	d100      	bne.n	800ad7e <memmove+0x2a>
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad86:	e7f7      	b.n	800ad78 <memmove+0x24>

0800ad88 <strncmp>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	b16a      	cbz	r2, 800ada8 <strncmp+0x20>
 800ad8c:	3901      	subs	r1, #1
 800ad8e:	1884      	adds	r4, r0, r2
 800ad90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d103      	bne.n	800ada4 <strncmp+0x1c>
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d001      	beq.n	800ada4 <strncmp+0x1c>
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	d1f5      	bne.n	800ad90 <strncmp+0x8>
 800ada4:	1ad0      	subs	r0, r2, r3
 800ada6:	bd10      	pop	{r4, pc}
 800ada8:	4610      	mov	r0, r2
 800adaa:	e7fc      	b.n	800ada6 <strncmp+0x1e>

0800adac <_sbrk_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d06      	ldr	r5, [pc, #24]	@ (800adc8 <_sbrk_r+0x1c>)
 800adb0:	2300      	movs	r3, #0
 800adb2:	4604      	mov	r4, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	f7f7 f8f6 	bl	8001fa8 <_sbrk>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_sbrk_r+0x1a>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_sbrk_r+0x1a>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	2000450c 	.word	0x2000450c
 800adcc:	00000000 	.word	0x00000000

0800add0 <nan>:
 800add0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800add8 <nan+0x8>
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	00000000 	.word	0x00000000
 800addc:	7ff80000 	.word	0x7ff80000

0800ade0 <__assert_func>:
 800ade0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ade2:	4614      	mov	r4, r2
 800ade4:	461a      	mov	r2, r3
 800ade6:	4b09      	ldr	r3, [pc, #36]	@ (800ae0c <__assert_func+0x2c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4605      	mov	r5, r0
 800adec:	68d8      	ldr	r0, [r3, #12]
 800adee:	b14c      	cbz	r4, 800ae04 <__assert_func+0x24>
 800adf0:	4b07      	ldr	r3, [pc, #28]	@ (800ae10 <__assert_func+0x30>)
 800adf2:	9100      	str	r1, [sp, #0]
 800adf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adf8:	4906      	ldr	r1, [pc, #24]	@ (800ae14 <__assert_func+0x34>)
 800adfa:	462b      	mov	r3, r5
 800adfc:	f000 fba8 	bl	800b550 <fiprintf>
 800ae00:	f000 fbb8 	bl	800b574 <abort>
 800ae04:	4b04      	ldr	r3, [pc, #16]	@ (800ae18 <__assert_func+0x38>)
 800ae06:	461c      	mov	r4, r3
 800ae08:	e7f3      	b.n	800adf2 <__assert_func+0x12>
 800ae0a:	bf00      	nop
 800ae0c:	2000001c 	.word	0x2000001c
 800ae10:	0800bd16 	.word	0x0800bd16
 800ae14:	0800bd23 	.word	0x0800bd23
 800ae18:	0800bd51 	.word	0x0800bd51

0800ae1c <_calloc_r>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae22:	b934      	cbnz	r4, 800ae32 <_calloc_r+0x16>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7fe f9d7 	bl	80091d8 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b928      	cbnz	r0, 800ae3a <_calloc_r+0x1e>
 800ae2e:	4630      	mov	r0, r6
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	220c      	movs	r2, #12
 800ae34:	6002      	str	r2, [r0, #0]
 800ae36:	2600      	movs	r6, #0
 800ae38:	e7f9      	b.n	800ae2e <_calloc_r+0x12>
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	f7fd fa0a 	bl	8008256 <memset>
 800ae42:	e7f4      	b.n	800ae2e <_calloc_r+0x12>

0800ae44 <rshift>:
 800ae44:	6903      	ldr	r3, [r0, #16]
 800ae46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae52:	f100 0414 	add.w	r4, r0, #20
 800ae56:	dd45      	ble.n	800aee4 <rshift+0xa0>
 800ae58:	f011 011f 	ands.w	r1, r1, #31
 800ae5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae64:	d10c      	bne.n	800ae80 <rshift+0x3c>
 800ae66:	f100 0710 	add.w	r7, r0, #16
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	42b1      	cmp	r1, r6
 800ae6e:	d334      	bcc.n	800aeda <rshift+0x96>
 800ae70:	1a9b      	subs	r3, r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	1eea      	subs	r2, r5, #3
 800ae76:	4296      	cmp	r6, r2
 800ae78:	bf38      	it	cc
 800ae7a:	2300      	movcc	r3, #0
 800ae7c:	4423      	add	r3, r4
 800ae7e:	e015      	b.n	800aeac <rshift+0x68>
 800ae80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae84:	f1c1 0820 	rsb	r8, r1, #32
 800ae88:	40cf      	lsrs	r7, r1
 800ae8a:	f105 0e04 	add.w	lr, r5, #4
 800ae8e:	46a1      	mov	r9, r4
 800ae90:	4576      	cmp	r6, lr
 800ae92:	46f4      	mov	ip, lr
 800ae94:	d815      	bhi.n	800aec2 <rshift+0x7e>
 800ae96:	1a9a      	subs	r2, r3, r2
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	3a04      	subs	r2, #4
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	42ae      	cmp	r6, r5
 800aea0:	bf38      	it	cc
 800aea2:	2200      	movcc	r2, #0
 800aea4:	18a3      	adds	r3, r4, r2
 800aea6:	50a7      	str	r7, [r4, r2]
 800aea8:	b107      	cbz	r7, 800aeac <rshift+0x68>
 800aeaa:	3304      	adds	r3, #4
 800aeac:	1b1a      	subs	r2, r3, r4
 800aeae:	42a3      	cmp	r3, r4
 800aeb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeb4:	bf08      	it	eq
 800aeb6:	2300      	moveq	r3, #0
 800aeb8:	6102      	str	r2, [r0, #16]
 800aeba:	bf08      	it	eq
 800aebc:	6143      	streq	r3, [r0, #20]
 800aebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aec2:	f8dc c000 	ldr.w	ip, [ip]
 800aec6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aeca:	ea4c 0707 	orr.w	r7, ip, r7
 800aece:	f849 7b04 	str.w	r7, [r9], #4
 800aed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aed6:	40cf      	lsrs	r7, r1
 800aed8:	e7da      	b.n	800ae90 <rshift+0x4c>
 800aeda:	f851 cb04 	ldr.w	ip, [r1], #4
 800aede:	f847 cf04 	str.w	ip, [r7, #4]!
 800aee2:	e7c3      	b.n	800ae6c <rshift+0x28>
 800aee4:	4623      	mov	r3, r4
 800aee6:	e7e1      	b.n	800aeac <rshift+0x68>

0800aee8 <__hexdig_fun>:
 800aee8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d802      	bhi.n	800aef6 <__hexdig_fun+0xe>
 800aef0:	3820      	subs	r0, #32
 800aef2:	b2c0      	uxtb	r0, r0
 800aef4:	4770      	bx	lr
 800aef6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aefa:	2b05      	cmp	r3, #5
 800aefc:	d801      	bhi.n	800af02 <__hexdig_fun+0x1a>
 800aefe:	3847      	subs	r0, #71	@ 0x47
 800af00:	e7f7      	b.n	800aef2 <__hexdig_fun+0xa>
 800af02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af06:	2b05      	cmp	r3, #5
 800af08:	d801      	bhi.n	800af0e <__hexdig_fun+0x26>
 800af0a:	3827      	subs	r0, #39	@ 0x27
 800af0c:	e7f1      	b.n	800aef2 <__hexdig_fun+0xa>
 800af0e:	2000      	movs	r0, #0
 800af10:	4770      	bx	lr
	...

0800af14 <__gethex>:
 800af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af18:	b085      	sub	sp, #20
 800af1a:	468a      	mov	sl, r1
 800af1c:	9302      	str	r3, [sp, #8]
 800af1e:	680b      	ldr	r3, [r1, #0]
 800af20:	9001      	str	r0, [sp, #4]
 800af22:	4690      	mov	r8, r2
 800af24:	1c9c      	adds	r4, r3, #2
 800af26:	46a1      	mov	r9, r4
 800af28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af2c:	2830      	cmp	r0, #48	@ 0x30
 800af2e:	d0fa      	beq.n	800af26 <__gethex+0x12>
 800af30:	eba9 0303 	sub.w	r3, r9, r3
 800af34:	f1a3 0b02 	sub.w	fp, r3, #2
 800af38:	f7ff ffd6 	bl	800aee8 <__hexdig_fun>
 800af3c:	4605      	mov	r5, r0
 800af3e:	2800      	cmp	r0, #0
 800af40:	d168      	bne.n	800b014 <__gethex+0x100>
 800af42:	49a0      	ldr	r1, [pc, #640]	@ (800b1c4 <__gethex+0x2b0>)
 800af44:	2201      	movs	r2, #1
 800af46:	4648      	mov	r0, r9
 800af48:	f7ff ff1e 	bl	800ad88 <strncmp>
 800af4c:	4607      	mov	r7, r0
 800af4e:	2800      	cmp	r0, #0
 800af50:	d167      	bne.n	800b022 <__gethex+0x10e>
 800af52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af56:	4626      	mov	r6, r4
 800af58:	f7ff ffc6 	bl	800aee8 <__hexdig_fun>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d062      	beq.n	800b026 <__gethex+0x112>
 800af60:	4623      	mov	r3, r4
 800af62:	7818      	ldrb	r0, [r3, #0]
 800af64:	2830      	cmp	r0, #48	@ 0x30
 800af66:	4699      	mov	r9, r3
 800af68:	f103 0301 	add.w	r3, r3, #1
 800af6c:	d0f9      	beq.n	800af62 <__gethex+0x4e>
 800af6e:	f7ff ffbb 	bl	800aee8 <__hexdig_fun>
 800af72:	fab0 f580 	clz	r5, r0
 800af76:	096d      	lsrs	r5, r5, #5
 800af78:	f04f 0b01 	mov.w	fp, #1
 800af7c:	464a      	mov	r2, r9
 800af7e:	4616      	mov	r6, r2
 800af80:	3201      	adds	r2, #1
 800af82:	7830      	ldrb	r0, [r6, #0]
 800af84:	f7ff ffb0 	bl	800aee8 <__hexdig_fun>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d1f8      	bne.n	800af7e <__gethex+0x6a>
 800af8c:	498d      	ldr	r1, [pc, #564]	@ (800b1c4 <__gethex+0x2b0>)
 800af8e:	2201      	movs	r2, #1
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff fef9 	bl	800ad88 <strncmp>
 800af96:	2800      	cmp	r0, #0
 800af98:	d13f      	bne.n	800b01a <__gethex+0x106>
 800af9a:	b944      	cbnz	r4, 800afae <__gethex+0x9a>
 800af9c:	1c74      	adds	r4, r6, #1
 800af9e:	4622      	mov	r2, r4
 800afa0:	4616      	mov	r6, r2
 800afa2:	3201      	adds	r2, #1
 800afa4:	7830      	ldrb	r0, [r6, #0]
 800afa6:	f7ff ff9f 	bl	800aee8 <__hexdig_fun>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d1f8      	bne.n	800afa0 <__gethex+0x8c>
 800afae:	1ba4      	subs	r4, r4, r6
 800afb0:	00a7      	lsls	r7, r4, #2
 800afb2:	7833      	ldrb	r3, [r6, #0]
 800afb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800afb8:	2b50      	cmp	r3, #80	@ 0x50
 800afba:	d13e      	bne.n	800b03a <__gethex+0x126>
 800afbc:	7873      	ldrb	r3, [r6, #1]
 800afbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800afc0:	d033      	beq.n	800b02a <__gethex+0x116>
 800afc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800afc4:	d034      	beq.n	800b030 <__gethex+0x11c>
 800afc6:	1c71      	adds	r1, r6, #1
 800afc8:	2400      	movs	r4, #0
 800afca:	7808      	ldrb	r0, [r1, #0]
 800afcc:	f7ff ff8c 	bl	800aee8 <__hexdig_fun>
 800afd0:	1e43      	subs	r3, r0, #1
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b18      	cmp	r3, #24
 800afd6:	d830      	bhi.n	800b03a <__gethex+0x126>
 800afd8:	f1a0 0210 	sub.w	r2, r0, #16
 800afdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afe0:	f7ff ff82 	bl	800aee8 <__hexdig_fun>
 800afe4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800afe8:	fa5f fc8c 	uxtb.w	ip, ip
 800afec:	f1bc 0f18 	cmp.w	ip, #24
 800aff0:	f04f 030a 	mov.w	r3, #10
 800aff4:	d91e      	bls.n	800b034 <__gethex+0x120>
 800aff6:	b104      	cbz	r4, 800affa <__gethex+0xe6>
 800aff8:	4252      	negs	r2, r2
 800affa:	4417      	add	r7, r2
 800affc:	f8ca 1000 	str.w	r1, [sl]
 800b000:	b1ed      	cbz	r5, 800b03e <__gethex+0x12a>
 800b002:	f1bb 0f00 	cmp.w	fp, #0
 800b006:	bf0c      	ite	eq
 800b008:	2506      	moveq	r5, #6
 800b00a:	2500      	movne	r5, #0
 800b00c:	4628      	mov	r0, r5
 800b00e:	b005      	add	sp, #20
 800b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b014:	2500      	movs	r5, #0
 800b016:	462c      	mov	r4, r5
 800b018:	e7b0      	b.n	800af7c <__gethex+0x68>
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	d1c7      	bne.n	800afae <__gethex+0x9a>
 800b01e:	4627      	mov	r7, r4
 800b020:	e7c7      	b.n	800afb2 <__gethex+0x9e>
 800b022:	464e      	mov	r6, r9
 800b024:	462f      	mov	r7, r5
 800b026:	2501      	movs	r5, #1
 800b028:	e7c3      	b.n	800afb2 <__gethex+0x9e>
 800b02a:	2400      	movs	r4, #0
 800b02c:	1cb1      	adds	r1, r6, #2
 800b02e:	e7cc      	b.n	800afca <__gethex+0xb6>
 800b030:	2401      	movs	r4, #1
 800b032:	e7fb      	b.n	800b02c <__gethex+0x118>
 800b034:	fb03 0002 	mla	r0, r3, r2, r0
 800b038:	e7ce      	b.n	800afd8 <__gethex+0xc4>
 800b03a:	4631      	mov	r1, r6
 800b03c:	e7de      	b.n	800affc <__gethex+0xe8>
 800b03e:	eba6 0309 	sub.w	r3, r6, r9
 800b042:	3b01      	subs	r3, #1
 800b044:	4629      	mov	r1, r5
 800b046:	2b07      	cmp	r3, #7
 800b048:	dc0a      	bgt.n	800b060 <__gethex+0x14c>
 800b04a:	9801      	ldr	r0, [sp, #4]
 800b04c:	f7fe f950 	bl	80092f0 <_Balloc>
 800b050:	4604      	mov	r4, r0
 800b052:	b940      	cbnz	r0, 800b066 <__gethex+0x152>
 800b054:	4b5c      	ldr	r3, [pc, #368]	@ (800b1c8 <__gethex+0x2b4>)
 800b056:	4602      	mov	r2, r0
 800b058:	21e4      	movs	r1, #228	@ 0xe4
 800b05a:	485c      	ldr	r0, [pc, #368]	@ (800b1cc <__gethex+0x2b8>)
 800b05c:	f7ff fec0 	bl	800ade0 <__assert_func>
 800b060:	3101      	adds	r1, #1
 800b062:	105b      	asrs	r3, r3, #1
 800b064:	e7ef      	b.n	800b046 <__gethex+0x132>
 800b066:	f100 0a14 	add.w	sl, r0, #20
 800b06a:	2300      	movs	r3, #0
 800b06c:	4655      	mov	r5, sl
 800b06e:	469b      	mov	fp, r3
 800b070:	45b1      	cmp	r9, r6
 800b072:	d337      	bcc.n	800b0e4 <__gethex+0x1d0>
 800b074:	f845 bb04 	str.w	fp, [r5], #4
 800b078:	eba5 050a 	sub.w	r5, r5, sl
 800b07c:	10ad      	asrs	r5, r5, #2
 800b07e:	6125      	str	r5, [r4, #16]
 800b080:	4658      	mov	r0, fp
 800b082:	f7fe fa27 	bl	80094d4 <__hi0bits>
 800b086:	016d      	lsls	r5, r5, #5
 800b088:	f8d8 6000 	ldr.w	r6, [r8]
 800b08c:	1a2d      	subs	r5, r5, r0
 800b08e:	42b5      	cmp	r5, r6
 800b090:	dd54      	ble.n	800b13c <__gethex+0x228>
 800b092:	1bad      	subs	r5, r5, r6
 800b094:	4629      	mov	r1, r5
 800b096:	4620      	mov	r0, r4
 800b098:	f7fe fdb3 	bl	8009c02 <__any_on>
 800b09c:	4681      	mov	r9, r0
 800b09e:	b178      	cbz	r0, 800b0c0 <__gethex+0x1ac>
 800b0a0:	1e6b      	subs	r3, r5, #1
 800b0a2:	1159      	asrs	r1, r3, #5
 800b0a4:	f003 021f 	and.w	r2, r3, #31
 800b0a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b0ac:	f04f 0901 	mov.w	r9, #1
 800b0b0:	fa09 f202 	lsl.w	r2, r9, r2
 800b0b4:	420a      	tst	r2, r1
 800b0b6:	d003      	beq.n	800b0c0 <__gethex+0x1ac>
 800b0b8:	454b      	cmp	r3, r9
 800b0ba:	dc36      	bgt.n	800b12a <__gethex+0x216>
 800b0bc:	f04f 0902 	mov.w	r9, #2
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f7ff febe 	bl	800ae44 <rshift>
 800b0c8:	442f      	add	r7, r5
 800b0ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0ce:	42bb      	cmp	r3, r7
 800b0d0:	da42      	bge.n	800b158 <__gethex+0x244>
 800b0d2:	9801      	ldr	r0, [sp, #4]
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	f7fe f94b 	bl	8009370 <_Bfree>
 800b0da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0dc:	2300      	movs	r3, #0
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	25a3      	movs	r5, #163	@ 0xa3
 800b0e2:	e793      	b.n	800b00c <__gethex+0xf8>
 800b0e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b0e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b0ea:	d012      	beq.n	800b112 <__gethex+0x1fe>
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d104      	bne.n	800b0fa <__gethex+0x1e6>
 800b0f0:	f845 bb04 	str.w	fp, [r5], #4
 800b0f4:	f04f 0b00 	mov.w	fp, #0
 800b0f8:	465b      	mov	r3, fp
 800b0fa:	7830      	ldrb	r0, [r6, #0]
 800b0fc:	9303      	str	r3, [sp, #12]
 800b0fe:	f7ff fef3 	bl	800aee8 <__hexdig_fun>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	f000 000f 	and.w	r0, r0, #15
 800b108:	4098      	lsls	r0, r3
 800b10a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b10e:	3304      	adds	r3, #4
 800b110:	e7ae      	b.n	800b070 <__gethex+0x15c>
 800b112:	45b1      	cmp	r9, r6
 800b114:	d8ea      	bhi.n	800b0ec <__gethex+0x1d8>
 800b116:	492b      	ldr	r1, [pc, #172]	@ (800b1c4 <__gethex+0x2b0>)
 800b118:	9303      	str	r3, [sp, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff fe33 	bl	800ad88 <strncmp>
 800b122:	9b03      	ldr	r3, [sp, #12]
 800b124:	2800      	cmp	r0, #0
 800b126:	d1e1      	bne.n	800b0ec <__gethex+0x1d8>
 800b128:	e7a2      	b.n	800b070 <__gethex+0x15c>
 800b12a:	1ea9      	subs	r1, r5, #2
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7fe fd68 	bl	8009c02 <__any_on>
 800b132:	2800      	cmp	r0, #0
 800b134:	d0c2      	beq.n	800b0bc <__gethex+0x1a8>
 800b136:	f04f 0903 	mov.w	r9, #3
 800b13a:	e7c1      	b.n	800b0c0 <__gethex+0x1ac>
 800b13c:	da09      	bge.n	800b152 <__gethex+0x23e>
 800b13e:	1b75      	subs	r5, r6, r5
 800b140:	4621      	mov	r1, r4
 800b142:	9801      	ldr	r0, [sp, #4]
 800b144:	462a      	mov	r2, r5
 800b146:	f7fe fb23 	bl	8009790 <__lshift>
 800b14a:	1b7f      	subs	r7, r7, r5
 800b14c:	4604      	mov	r4, r0
 800b14e:	f100 0a14 	add.w	sl, r0, #20
 800b152:	f04f 0900 	mov.w	r9, #0
 800b156:	e7b8      	b.n	800b0ca <__gethex+0x1b6>
 800b158:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b15c:	42bd      	cmp	r5, r7
 800b15e:	dd6f      	ble.n	800b240 <__gethex+0x32c>
 800b160:	1bed      	subs	r5, r5, r7
 800b162:	42ae      	cmp	r6, r5
 800b164:	dc34      	bgt.n	800b1d0 <__gethex+0x2bc>
 800b166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d022      	beq.n	800b1b4 <__gethex+0x2a0>
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d024      	beq.n	800b1bc <__gethex+0x2a8>
 800b172:	2b01      	cmp	r3, #1
 800b174:	d115      	bne.n	800b1a2 <__gethex+0x28e>
 800b176:	42ae      	cmp	r6, r5
 800b178:	d113      	bne.n	800b1a2 <__gethex+0x28e>
 800b17a:	2e01      	cmp	r6, #1
 800b17c:	d10b      	bne.n	800b196 <__gethex+0x282>
 800b17e:	9a02      	ldr	r2, [sp, #8]
 800b180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	2301      	movs	r3, #1
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	f8ca 3000 	str.w	r3, [sl]
 800b18e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b190:	2562      	movs	r5, #98	@ 0x62
 800b192:	601c      	str	r4, [r3, #0]
 800b194:	e73a      	b.n	800b00c <__gethex+0xf8>
 800b196:	1e71      	subs	r1, r6, #1
 800b198:	4620      	mov	r0, r4
 800b19a:	f7fe fd32 	bl	8009c02 <__any_on>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1ed      	bne.n	800b17e <__gethex+0x26a>
 800b1a2:	9801      	ldr	r0, [sp, #4]
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	f7fe f8e3 	bl	8009370 <_Bfree>
 800b1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	2550      	movs	r5, #80	@ 0x50
 800b1b2:	e72b      	b.n	800b00c <__gethex+0xf8>
 800b1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1f3      	bne.n	800b1a2 <__gethex+0x28e>
 800b1ba:	e7e0      	b.n	800b17e <__gethex+0x26a>
 800b1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1dd      	bne.n	800b17e <__gethex+0x26a>
 800b1c2:	e7ee      	b.n	800b1a2 <__gethex+0x28e>
 800b1c4:	0800bcfb 	.word	0x0800bcfb
 800b1c8:	0800bc91 	.word	0x0800bc91
 800b1cc:	0800bd52 	.word	0x0800bd52
 800b1d0:	1e6f      	subs	r7, r5, #1
 800b1d2:	f1b9 0f00 	cmp.w	r9, #0
 800b1d6:	d130      	bne.n	800b23a <__gethex+0x326>
 800b1d8:	b127      	cbz	r7, 800b1e4 <__gethex+0x2d0>
 800b1da:	4639      	mov	r1, r7
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f7fe fd10 	bl	8009c02 <__any_on>
 800b1e2:	4681      	mov	r9, r0
 800b1e4:	117a      	asrs	r2, r7, #5
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b1ec:	f007 071f 	and.w	r7, r7, #31
 800b1f0:	40bb      	lsls	r3, r7
 800b1f2:	4213      	tst	r3, r2
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	bf18      	it	ne
 800b1fa:	f049 0902 	orrne.w	r9, r9, #2
 800b1fe:	f7ff fe21 	bl	800ae44 <rshift>
 800b202:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b206:	1b76      	subs	r6, r6, r5
 800b208:	2502      	movs	r5, #2
 800b20a:	f1b9 0f00 	cmp.w	r9, #0
 800b20e:	d047      	beq.n	800b2a0 <__gethex+0x38c>
 800b210:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d015      	beq.n	800b244 <__gethex+0x330>
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d017      	beq.n	800b24c <__gethex+0x338>
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d109      	bne.n	800b234 <__gethex+0x320>
 800b220:	f019 0f02 	tst.w	r9, #2
 800b224:	d006      	beq.n	800b234 <__gethex+0x320>
 800b226:	f8da 3000 	ldr.w	r3, [sl]
 800b22a:	ea49 0903 	orr.w	r9, r9, r3
 800b22e:	f019 0f01 	tst.w	r9, #1
 800b232:	d10e      	bne.n	800b252 <__gethex+0x33e>
 800b234:	f045 0510 	orr.w	r5, r5, #16
 800b238:	e032      	b.n	800b2a0 <__gethex+0x38c>
 800b23a:	f04f 0901 	mov.w	r9, #1
 800b23e:	e7d1      	b.n	800b1e4 <__gethex+0x2d0>
 800b240:	2501      	movs	r5, #1
 800b242:	e7e2      	b.n	800b20a <__gethex+0x2f6>
 800b244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b246:	f1c3 0301 	rsb	r3, r3, #1
 800b24a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0f0      	beq.n	800b234 <__gethex+0x320>
 800b252:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b256:	f104 0314 	add.w	r3, r4, #20
 800b25a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b25e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b262:	f04f 0c00 	mov.w	ip, #0
 800b266:	4618      	mov	r0, r3
 800b268:	f853 2b04 	ldr.w	r2, [r3], #4
 800b26c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b270:	d01b      	beq.n	800b2aa <__gethex+0x396>
 800b272:	3201      	adds	r2, #1
 800b274:	6002      	str	r2, [r0, #0]
 800b276:	2d02      	cmp	r5, #2
 800b278:	f104 0314 	add.w	r3, r4, #20
 800b27c:	d13c      	bne.n	800b2f8 <__gethex+0x3e4>
 800b27e:	f8d8 2000 	ldr.w	r2, [r8]
 800b282:	3a01      	subs	r2, #1
 800b284:	42b2      	cmp	r2, r6
 800b286:	d109      	bne.n	800b29c <__gethex+0x388>
 800b288:	1171      	asrs	r1, r6, #5
 800b28a:	2201      	movs	r2, #1
 800b28c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b290:	f006 061f 	and.w	r6, r6, #31
 800b294:	fa02 f606 	lsl.w	r6, r2, r6
 800b298:	421e      	tst	r6, r3
 800b29a:	d13a      	bne.n	800b312 <__gethex+0x3fe>
 800b29c:	f045 0520 	orr.w	r5, r5, #32
 800b2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2a2:	601c      	str	r4, [r3, #0]
 800b2a4:	9b02      	ldr	r3, [sp, #8]
 800b2a6:	601f      	str	r7, [r3, #0]
 800b2a8:	e6b0      	b.n	800b00c <__gethex+0xf8>
 800b2aa:	4299      	cmp	r1, r3
 800b2ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2b0:	d8d9      	bhi.n	800b266 <__gethex+0x352>
 800b2b2:	68a3      	ldr	r3, [r4, #8]
 800b2b4:	459b      	cmp	fp, r3
 800b2b6:	db17      	blt.n	800b2e8 <__gethex+0x3d4>
 800b2b8:	6861      	ldr	r1, [r4, #4]
 800b2ba:	9801      	ldr	r0, [sp, #4]
 800b2bc:	3101      	adds	r1, #1
 800b2be:	f7fe f817 	bl	80092f0 <_Balloc>
 800b2c2:	4681      	mov	r9, r0
 800b2c4:	b918      	cbnz	r0, 800b2ce <__gethex+0x3ba>
 800b2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b330 <__gethex+0x41c>)
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	2184      	movs	r1, #132	@ 0x84
 800b2cc:	e6c5      	b.n	800b05a <__gethex+0x146>
 800b2ce:	6922      	ldr	r2, [r4, #16]
 800b2d0:	3202      	adds	r2, #2
 800b2d2:	f104 010c 	add.w	r1, r4, #12
 800b2d6:	0092      	lsls	r2, r2, #2
 800b2d8:	300c      	adds	r0, #12
 800b2da:	f7fd f89a 	bl	8008412 <memcpy>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	9801      	ldr	r0, [sp, #4]
 800b2e2:	f7fe f845 	bl	8009370 <_Bfree>
 800b2e6:	464c      	mov	r4, r9
 800b2e8:	6923      	ldr	r3, [r4, #16]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f0:	6122      	str	r2, [r4, #16]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	615a      	str	r2, [r3, #20]
 800b2f6:	e7be      	b.n	800b276 <__gethex+0x362>
 800b2f8:	6922      	ldr	r2, [r4, #16]
 800b2fa:	455a      	cmp	r2, fp
 800b2fc:	dd0b      	ble.n	800b316 <__gethex+0x402>
 800b2fe:	2101      	movs	r1, #1
 800b300:	4620      	mov	r0, r4
 800b302:	f7ff fd9f 	bl	800ae44 <rshift>
 800b306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b30a:	3701      	adds	r7, #1
 800b30c:	42bb      	cmp	r3, r7
 800b30e:	f6ff aee0 	blt.w	800b0d2 <__gethex+0x1be>
 800b312:	2501      	movs	r5, #1
 800b314:	e7c2      	b.n	800b29c <__gethex+0x388>
 800b316:	f016 061f 	ands.w	r6, r6, #31
 800b31a:	d0fa      	beq.n	800b312 <__gethex+0x3fe>
 800b31c:	4453      	add	r3, sl
 800b31e:	f1c6 0620 	rsb	r6, r6, #32
 800b322:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b326:	f7fe f8d5 	bl	80094d4 <__hi0bits>
 800b32a:	42b0      	cmp	r0, r6
 800b32c:	dbe7      	blt.n	800b2fe <__gethex+0x3ea>
 800b32e:	e7f0      	b.n	800b312 <__gethex+0x3fe>
 800b330:	0800bc91 	.word	0x0800bc91

0800b334 <L_shift>:
 800b334:	f1c2 0208 	rsb	r2, r2, #8
 800b338:	0092      	lsls	r2, r2, #2
 800b33a:	b570      	push	{r4, r5, r6, lr}
 800b33c:	f1c2 0620 	rsb	r6, r2, #32
 800b340:	6843      	ldr	r3, [r0, #4]
 800b342:	6804      	ldr	r4, [r0, #0]
 800b344:	fa03 f506 	lsl.w	r5, r3, r6
 800b348:	432c      	orrs	r4, r5
 800b34a:	40d3      	lsrs	r3, r2
 800b34c:	6004      	str	r4, [r0, #0]
 800b34e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b352:	4288      	cmp	r0, r1
 800b354:	d3f4      	bcc.n	800b340 <L_shift+0xc>
 800b356:	bd70      	pop	{r4, r5, r6, pc}

0800b358 <__match>:
 800b358:	b530      	push	{r4, r5, lr}
 800b35a:	6803      	ldr	r3, [r0, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b362:	b914      	cbnz	r4, 800b36a <__match+0x12>
 800b364:	6003      	str	r3, [r0, #0]
 800b366:	2001      	movs	r0, #1
 800b368:	bd30      	pop	{r4, r5, pc}
 800b36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b36e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b372:	2d19      	cmp	r5, #25
 800b374:	bf98      	it	ls
 800b376:	3220      	addls	r2, #32
 800b378:	42a2      	cmp	r2, r4
 800b37a:	d0f0      	beq.n	800b35e <__match+0x6>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7f3      	b.n	800b368 <__match+0x10>

0800b380 <__hexnan>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	680b      	ldr	r3, [r1, #0]
 800b386:	6801      	ldr	r1, [r0, #0]
 800b388:	115e      	asrs	r6, r3, #5
 800b38a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b38e:	f013 031f 	ands.w	r3, r3, #31
 800b392:	b087      	sub	sp, #28
 800b394:	bf18      	it	ne
 800b396:	3604      	addne	r6, #4
 800b398:	2500      	movs	r5, #0
 800b39a:	1f37      	subs	r7, r6, #4
 800b39c:	4682      	mov	sl, r0
 800b39e:	4690      	mov	r8, r2
 800b3a0:	9301      	str	r3, [sp, #4]
 800b3a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3a6:	46b9      	mov	r9, r7
 800b3a8:	463c      	mov	r4, r7
 800b3aa:	9502      	str	r5, [sp, #8]
 800b3ac:	46ab      	mov	fp, r5
 800b3ae:	784a      	ldrb	r2, [r1, #1]
 800b3b0:	1c4b      	adds	r3, r1, #1
 800b3b2:	9303      	str	r3, [sp, #12]
 800b3b4:	b342      	cbz	r2, 800b408 <__hexnan+0x88>
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	9105      	str	r1, [sp, #20]
 800b3ba:	9204      	str	r2, [sp, #16]
 800b3bc:	f7ff fd94 	bl	800aee8 <__hexdig_fun>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d151      	bne.n	800b468 <__hexnan+0xe8>
 800b3c4:	9a04      	ldr	r2, [sp, #16]
 800b3c6:	9905      	ldr	r1, [sp, #20]
 800b3c8:	2a20      	cmp	r2, #32
 800b3ca:	d818      	bhi.n	800b3fe <__hexnan+0x7e>
 800b3cc:	9b02      	ldr	r3, [sp, #8]
 800b3ce:	459b      	cmp	fp, r3
 800b3d0:	dd13      	ble.n	800b3fa <__hexnan+0x7a>
 800b3d2:	454c      	cmp	r4, r9
 800b3d4:	d206      	bcs.n	800b3e4 <__hexnan+0x64>
 800b3d6:	2d07      	cmp	r5, #7
 800b3d8:	dc04      	bgt.n	800b3e4 <__hexnan+0x64>
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4649      	mov	r1, r9
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f7ff ffa8 	bl	800b334 <L_shift>
 800b3e4:	4544      	cmp	r4, r8
 800b3e6:	d952      	bls.n	800b48e <__hexnan+0x10e>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f1a4 0904 	sub.w	r9, r4, #4
 800b3ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3f2:	f8cd b008 	str.w	fp, [sp, #8]
 800b3f6:	464c      	mov	r4, r9
 800b3f8:	461d      	mov	r5, r3
 800b3fa:	9903      	ldr	r1, [sp, #12]
 800b3fc:	e7d7      	b.n	800b3ae <__hexnan+0x2e>
 800b3fe:	2a29      	cmp	r2, #41	@ 0x29
 800b400:	d157      	bne.n	800b4b2 <__hexnan+0x132>
 800b402:	3102      	adds	r1, #2
 800b404:	f8ca 1000 	str.w	r1, [sl]
 800b408:	f1bb 0f00 	cmp.w	fp, #0
 800b40c:	d051      	beq.n	800b4b2 <__hexnan+0x132>
 800b40e:	454c      	cmp	r4, r9
 800b410:	d206      	bcs.n	800b420 <__hexnan+0xa0>
 800b412:	2d07      	cmp	r5, #7
 800b414:	dc04      	bgt.n	800b420 <__hexnan+0xa0>
 800b416:	462a      	mov	r2, r5
 800b418:	4649      	mov	r1, r9
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff ff8a 	bl	800b334 <L_shift>
 800b420:	4544      	cmp	r4, r8
 800b422:	d936      	bls.n	800b492 <__hexnan+0x112>
 800b424:	f1a8 0204 	sub.w	r2, r8, #4
 800b428:	4623      	mov	r3, r4
 800b42a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b42e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b432:	429f      	cmp	r7, r3
 800b434:	d2f9      	bcs.n	800b42a <__hexnan+0xaa>
 800b436:	1b3b      	subs	r3, r7, r4
 800b438:	f023 0303 	bic.w	r3, r3, #3
 800b43c:	3304      	adds	r3, #4
 800b43e:	3401      	adds	r4, #1
 800b440:	3e03      	subs	r6, #3
 800b442:	42b4      	cmp	r4, r6
 800b444:	bf88      	it	hi
 800b446:	2304      	movhi	r3, #4
 800b448:	4443      	add	r3, r8
 800b44a:	2200      	movs	r2, #0
 800b44c:	f843 2b04 	str.w	r2, [r3], #4
 800b450:	429f      	cmp	r7, r3
 800b452:	d2fb      	bcs.n	800b44c <__hexnan+0xcc>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	b91b      	cbnz	r3, 800b460 <__hexnan+0xe0>
 800b458:	4547      	cmp	r7, r8
 800b45a:	d128      	bne.n	800b4ae <__hexnan+0x12e>
 800b45c:	2301      	movs	r3, #1
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	2005      	movs	r0, #5
 800b462:	b007      	add	sp, #28
 800b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b468:	3501      	adds	r5, #1
 800b46a:	2d08      	cmp	r5, #8
 800b46c:	f10b 0b01 	add.w	fp, fp, #1
 800b470:	dd06      	ble.n	800b480 <__hexnan+0x100>
 800b472:	4544      	cmp	r4, r8
 800b474:	d9c1      	bls.n	800b3fa <__hexnan+0x7a>
 800b476:	2300      	movs	r3, #0
 800b478:	f844 3c04 	str.w	r3, [r4, #-4]
 800b47c:	2501      	movs	r5, #1
 800b47e:	3c04      	subs	r4, #4
 800b480:	6822      	ldr	r2, [r4, #0]
 800b482:	f000 000f 	and.w	r0, r0, #15
 800b486:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b48a:	6020      	str	r0, [r4, #0]
 800b48c:	e7b5      	b.n	800b3fa <__hexnan+0x7a>
 800b48e:	2508      	movs	r5, #8
 800b490:	e7b3      	b.n	800b3fa <__hexnan+0x7a>
 800b492:	9b01      	ldr	r3, [sp, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0dd      	beq.n	800b454 <__hexnan+0xd4>
 800b498:	f1c3 0320 	rsb	r3, r3, #32
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4a0:	40da      	lsrs	r2, r3
 800b4a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b4ac:	e7d2      	b.n	800b454 <__hexnan+0xd4>
 800b4ae:	3f04      	subs	r7, #4
 800b4b0:	e7d0      	b.n	800b454 <__hexnan+0xd4>
 800b4b2:	2004      	movs	r0, #4
 800b4b4:	e7d5      	b.n	800b462 <__hexnan+0xe2>

0800b4b6 <__ascii_mbtowc>:
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	b901      	cbnz	r1, 800b4bc <__ascii_mbtowc+0x6>
 800b4ba:	a901      	add	r1, sp, #4
 800b4bc:	b142      	cbz	r2, 800b4d0 <__ascii_mbtowc+0x1a>
 800b4be:	b14b      	cbz	r3, 800b4d4 <__ascii_mbtowc+0x1e>
 800b4c0:	7813      	ldrb	r3, [r2, #0]
 800b4c2:	600b      	str	r3, [r1, #0]
 800b4c4:	7812      	ldrb	r2, [r2, #0]
 800b4c6:	1e10      	subs	r0, r2, #0
 800b4c8:	bf18      	it	ne
 800b4ca:	2001      	movne	r0, #1
 800b4cc:	b002      	add	sp, #8
 800b4ce:	4770      	bx	lr
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	e7fb      	b.n	800b4cc <__ascii_mbtowc+0x16>
 800b4d4:	f06f 0001 	mvn.w	r0, #1
 800b4d8:	e7f8      	b.n	800b4cc <__ascii_mbtowc+0x16>

0800b4da <_realloc_r>:
 800b4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4de:	4607      	mov	r7, r0
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	b921      	cbnz	r1, 800b4f0 <_realloc_r+0x16>
 800b4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	f7fd be74 	b.w	80091d8 <_malloc_r>
 800b4f0:	b92a      	cbnz	r2, 800b4fe <_realloc_r+0x24>
 800b4f2:	f7fd fdfd 	bl	80090f0 <_free_r>
 800b4f6:	4625      	mov	r5, r4
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fe:	f000 f840 	bl	800b582 <_malloc_usable_size_r>
 800b502:	4284      	cmp	r4, r0
 800b504:	4606      	mov	r6, r0
 800b506:	d802      	bhi.n	800b50e <_realloc_r+0x34>
 800b508:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b50c:	d8f4      	bhi.n	800b4f8 <_realloc_r+0x1e>
 800b50e:	4621      	mov	r1, r4
 800b510:	4638      	mov	r0, r7
 800b512:	f7fd fe61 	bl	80091d8 <_malloc_r>
 800b516:	4680      	mov	r8, r0
 800b518:	b908      	cbnz	r0, 800b51e <_realloc_r+0x44>
 800b51a:	4645      	mov	r5, r8
 800b51c:	e7ec      	b.n	800b4f8 <_realloc_r+0x1e>
 800b51e:	42b4      	cmp	r4, r6
 800b520:	4622      	mov	r2, r4
 800b522:	4629      	mov	r1, r5
 800b524:	bf28      	it	cs
 800b526:	4632      	movcs	r2, r6
 800b528:	f7fc ff73 	bl	8008412 <memcpy>
 800b52c:	4629      	mov	r1, r5
 800b52e:	4638      	mov	r0, r7
 800b530:	f7fd fdde 	bl	80090f0 <_free_r>
 800b534:	e7f1      	b.n	800b51a <_realloc_r+0x40>

0800b536 <__ascii_wctomb>:
 800b536:	4603      	mov	r3, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	b141      	cbz	r1, 800b54e <__ascii_wctomb+0x18>
 800b53c:	2aff      	cmp	r2, #255	@ 0xff
 800b53e:	d904      	bls.n	800b54a <__ascii_wctomb+0x14>
 800b540:	228a      	movs	r2, #138	@ 0x8a
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b548:	4770      	bx	lr
 800b54a:	700a      	strb	r2, [r1, #0]
 800b54c:	2001      	movs	r0, #1
 800b54e:	4770      	bx	lr

0800b550 <fiprintf>:
 800b550:	b40e      	push	{r1, r2, r3}
 800b552:	b503      	push	{r0, r1, lr}
 800b554:	4601      	mov	r1, r0
 800b556:	ab03      	add	r3, sp, #12
 800b558:	4805      	ldr	r0, [pc, #20]	@ (800b570 <fiprintf+0x20>)
 800b55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55e:	6800      	ldr	r0, [r0, #0]
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	f000 f83f 	bl	800b5e4 <_vfiprintf_r>
 800b566:	b002      	add	sp, #8
 800b568:	f85d eb04 	ldr.w	lr, [sp], #4
 800b56c:	b003      	add	sp, #12
 800b56e:	4770      	bx	lr
 800b570:	2000001c 	.word	0x2000001c

0800b574 <abort>:
 800b574:	b508      	push	{r3, lr}
 800b576:	2006      	movs	r0, #6
 800b578:	f000 fa08 	bl	800b98c <raise>
 800b57c:	2001      	movs	r0, #1
 800b57e:	f7f6 fc9b 	bl	8001eb8 <_exit>

0800b582 <_malloc_usable_size_r>:
 800b582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b586:	1f18      	subs	r0, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bfbc      	itt	lt
 800b58c:	580b      	ldrlt	r3, [r1, r0]
 800b58e:	18c0      	addlt	r0, r0, r3
 800b590:	4770      	bx	lr

0800b592 <__sfputc_r>:
 800b592:	6893      	ldr	r3, [r2, #8]
 800b594:	3b01      	subs	r3, #1
 800b596:	2b00      	cmp	r3, #0
 800b598:	b410      	push	{r4}
 800b59a:	6093      	str	r3, [r2, #8]
 800b59c:	da08      	bge.n	800b5b0 <__sfputc_r+0x1e>
 800b59e:	6994      	ldr	r4, [r2, #24]
 800b5a0:	42a3      	cmp	r3, r4
 800b5a2:	db01      	blt.n	800b5a8 <__sfputc_r+0x16>
 800b5a4:	290a      	cmp	r1, #10
 800b5a6:	d103      	bne.n	800b5b0 <__sfputc_r+0x1e>
 800b5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ac:	f000 b932 	b.w	800b814 <__swbuf_r>
 800b5b0:	6813      	ldr	r3, [r2, #0]
 800b5b2:	1c58      	adds	r0, r3, #1
 800b5b4:	6010      	str	r0, [r2, #0]
 800b5b6:	7019      	strb	r1, [r3, #0]
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <__sfputs_r>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	4614      	mov	r4, r2
 800b5c8:	18d5      	adds	r5, r2, r3
 800b5ca:	42ac      	cmp	r4, r5
 800b5cc:	d101      	bne.n	800b5d2 <__sfputs_r+0x12>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e007      	b.n	800b5e2 <__sfputs_r+0x22>
 800b5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d6:	463a      	mov	r2, r7
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ffda 	bl	800b592 <__sfputc_r>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	d1f3      	bne.n	800b5ca <__sfputs_r+0xa>
 800b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5e4 <_vfiprintf_r>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	460d      	mov	r5, r1
 800b5ea:	b09d      	sub	sp, #116	@ 0x74
 800b5ec:	4614      	mov	r4, r2
 800b5ee:	4698      	mov	r8, r3
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	b118      	cbz	r0, 800b5fc <_vfiprintf_r+0x18>
 800b5f4:	6a03      	ldr	r3, [r0, #32]
 800b5f6:	b90b      	cbnz	r3, 800b5fc <_vfiprintf_r+0x18>
 800b5f8:	f7fc fd5c 	bl	80080b4 <__sinit>
 800b5fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5fe:	07d9      	lsls	r1, r3, #31
 800b600:	d405      	bmi.n	800b60e <_vfiprintf_r+0x2a>
 800b602:	89ab      	ldrh	r3, [r5, #12]
 800b604:	059a      	lsls	r2, r3, #22
 800b606:	d402      	bmi.n	800b60e <_vfiprintf_r+0x2a>
 800b608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b60a:	f7fc ff00 	bl	800840e <__retarget_lock_acquire_recursive>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	071b      	lsls	r3, r3, #28
 800b612:	d501      	bpl.n	800b618 <_vfiprintf_r+0x34>
 800b614:	692b      	ldr	r3, [r5, #16]
 800b616:	b99b      	cbnz	r3, 800b640 <_vfiprintf_r+0x5c>
 800b618:	4629      	mov	r1, r5
 800b61a:	4630      	mov	r0, r6
 800b61c:	f000 f938 	bl	800b890 <__swsetup_r>
 800b620:	b170      	cbz	r0, 800b640 <_vfiprintf_r+0x5c>
 800b622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b624:	07dc      	lsls	r4, r3, #31
 800b626:	d504      	bpl.n	800b632 <_vfiprintf_r+0x4e>
 800b628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b62c:	b01d      	add	sp, #116	@ 0x74
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	0598      	lsls	r0, r3, #22
 800b636:	d4f7      	bmi.n	800b628 <_vfiprintf_r+0x44>
 800b638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b63a:	f7fc fee9 	bl	8008410 <__retarget_lock_release_recursive>
 800b63e:	e7f3      	b.n	800b628 <_vfiprintf_r+0x44>
 800b640:	2300      	movs	r3, #0
 800b642:	9309      	str	r3, [sp, #36]	@ 0x24
 800b644:	2320      	movs	r3, #32
 800b646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b64e:	2330      	movs	r3, #48	@ 0x30
 800b650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b800 <_vfiprintf_r+0x21c>
 800b654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b658:	f04f 0901 	mov.w	r9, #1
 800b65c:	4623      	mov	r3, r4
 800b65e:	469a      	mov	sl, r3
 800b660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b664:	b10a      	cbz	r2, 800b66a <_vfiprintf_r+0x86>
 800b666:	2a25      	cmp	r2, #37	@ 0x25
 800b668:	d1f9      	bne.n	800b65e <_vfiprintf_r+0x7a>
 800b66a:	ebba 0b04 	subs.w	fp, sl, r4
 800b66e:	d00b      	beq.n	800b688 <_vfiprintf_r+0xa4>
 800b670:	465b      	mov	r3, fp
 800b672:	4622      	mov	r2, r4
 800b674:	4629      	mov	r1, r5
 800b676:	4630      	mov	r0, r6
 800b678:	f7ff ffa2 	bl	800b5c0 <__sfputs_r>
 800b67c:	3001      	adds	r0, #1
 800b67e:	f000 80a7 	beq.w	800b7d0 <_vfiprintf_r+0x1ec>
 800b682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b684:	445a      	add	r2, fp
 800b686:	9209      	str	r2, [sp, #36]	@ 0x24
 800b688:	f89a 3000 	ldrb.w	r3, [sl]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 809f 	beq.w	800b7d0 <_vfiprintf_r+0x1ec>
 800b692:	2300      	movs	r3, #0
 800b694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b69c:	f10a 0a01 	add.w	sl, sl, #1
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6aa:	4654      	mov	r4, sl
 800b6ac:	2205      	movs	r2, #5
 800b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b2:	4853      	ldr	r0, [pc, #332]	@ (800b800 <_vfiprintf_r+0x21c>)
 800b6b4:	f7f4 fd8c 	bl	80001d0 <memchr>
 800b6b8:	9a04      	ldr	r2, [sp, #16]
 800b6ba:	b9d8      	cbnz	r0, 800b6f4 <_vfiprintf_r+0x110>
 800b6bc:	06d1      	lsls	r1, r2, #27
 800b6be:	bf44      	itt	mi
 800b6c0:	2320      	movmi	r3, #32
 800b6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6c6:	0713      	lsls	r3, r2, #28
 800b6c8:	bf44      	itt	mi
 800b6ca:	232b      	movmi	r3, #43	@ 0x2b
 800b6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6d6:	d015      	beq.n	800b704 <_vfiprintf_r+0x120>
 800b6d8:	9a07      	ldr	r2, [sp, #28]
 800b6da:	4654      	mov	r4, sl
 800b6dc:	2000      	movs	r0, #0
 800b6de:	f04f 0c0a 	mov.w	ip, #10
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6e8:	3b30      	subs	r3, #48	@ 0x30
 800b6ea:	2b09      	cmp	r3, #9
 800b6ec:	d94b      	bls.n	800b786 <_vfiprintf_r+0x1a2>
 800b6ee:	b1b0      	cbz	r0, 800b71e <_vfiprintf_r+0x13a>
 800b6f0:	9207      	str	r2, [sp, #28]
 800b6f2:	e014      	b.n	800b71e <_vfiprintf_r+0x13a>
 800b6f4:	eba0 0308 	sub.w	r3, r0, r8
 800b6f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	46a2      	mov	sl, r4
 800b702:	e7d2      	b.n	800b6aa <_vfiprintf_r+0xc6>
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	1d19      	adds	r1, r3, #4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	9103      	str	r1, [sp, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	bfbb      	ittet	lt
 800b710:	425b      	neglt	r3, r3
 800b712:	f042 0202 	orrlt.w	r2, r2, #2
 800b716:	9307      	strge	r3, [sp, #28]
 800b718:	9307      	strlt	r3, [sp, #28]
 800b71a:	bfb8      	it	lt
 800b71c:	9204      	strlt	r2, [sp, #16]
 800b71e:	7823      	ldrb	r3, [r4, #0]
 800b720:	2b2e      	cmp	r3, #46	@ 0x2e
 800b722:	d10a      	bne.n	800b73a <_vfiprintf_r+0x156>
 800b724:	7863      	ldrb	r3, [r4, #1]
 800b726:	2b2a      	cmp	r3, #42	@ 0x2a
 800b728:	d132      	bne.n	800b790 <_vfiprintf_r+0x1ac>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	1d1a      	adds	r2, r3, #4
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	9203      	str	r2, [sp, #12]
 800b732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b736:	3402      	adds	r4, #2
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b810 <_vfiprintf_r+0x22c>
 800b73e:	7821      	ldrb	r1, [r4, #0]
 800b740:	2203      	movs	r2, #3
 800b742:	4650      	mov	r0, sl
 800b744:	f7f4 fd44 	bl	80001d0 <memchr>
 800b748:	b138      	cbz	r0, 800b75a <_vfiprintf_r+0x176>
 800b74a:	9b04      	ldr	r3, [sp, #16]
 800b74c:	eba0 000a 	sub.w	r0, r0, sl
 800b750:	2240      	movs	r2, #64	@ 0x40
 800b752:	4082      	lsls	r2, r0
 800b754:	4313      	orrs	r3, r2
 800b756:	3401      	adds	r4, #1
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b75e:	4829      	ldr	r0, [pc, #164]	@ (800b804 <_vfiprintf_r+0x220>)
 800b760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b764:	2206      	movs	r2, #6
 800b766:	f7f4 fd33 	bl	80001d0 <memchr>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d03f      	beq.n	800b7ee <_vfiprintf_r+0x20a>
 800b76e:	4b26      	ldr	r3, [pc, #152]	@ (800b808 <_vfiprintf_r+0x224>)
 800b770:	bb1b      	cbnz	r3, 800b7ba <_vfiprintf_r+0x1d6>
 800b772:	9b03      	ldr	r3, [sp, #12]
 800b774:	3307      	adds	r3, #7
 800b776:	f023 0307 	bic.w	r3, r3, #7
 800b77a:	3308      	adds	r3, #8
 800b77c:	9303      	str	r3, [sp, #12]
 800b77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b780:	443b      	add	r3, r7
 800b782:	9309      	str	r3, [sp, #36]	@ 0x24
 800b784:	e76a      	b.n	800b65c <_vfiprintf_r+0x78>
 800b786:	fb0c 3202 	mla	r2, ip, r2, r3
 800b78a:	460c      	mov	r4, r1
 800b78c:	2001      	movs	r0, #1
 800b78e:	e7a8      	b.n	800b6e2 <_vfiprintf_r+0xfe>
 800b790:	2300      	movs	r3, #0
 800b792:	3401      	adds	r4, #1
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	4619      	mov	r1, r3
 800b798:	f04f 0c0a 	mov.w	ip, #10
 800b79c:	4620      	mov	r0, r4
 800b79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7a2:	3a30      	subs	r2, #48	@ 0x30
 800b7a4:	2a09      	cmp	r2, #9
 800b7a6:	d903      	bls.n	800b7b0 <_vfiprintf_r+0x1cc>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0c6      	beq.n	800b73a <_vfiprintf_r+0x156>
 800b7ac:	9105      	str	r1, [sp, #20]
 800b7ae:	e7c4      	b.n	800b73a <_vfiprintf_r+0x156>
 800b7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e7f0      	b.n	800b79c <_vfiprintf_r+0x1b8>
 800b7ba:	ab03      	add	r3, sp, #12
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	462a      	mov	r2, r5
 800b7c0:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <_vfiprintf_r+0x228>)
 800b7c2:	a904      	add	r1, sp, #16
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7fb fe25 	bl	8007414 <_printf_float>
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	1c78      	adds	r0, r7, #1
 800b7ce:	d1d6      	bne.n	800b77e <_vfiprintf_r+0x19a>
 800b7d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7d2:	07d9      	lsls	r1, r3, #31
 800b7d4:	d405      	bmi.n	800b7e2 <_vfiprintf_r+0x1fe>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	059a      	lsls	r2, r3, #22
 800b7da:	d402      	bmi.n	800b7e2 <_vfiprintf_r+0x1fe>
 800b7dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7de:	f7fc fe17 	bl	8008410 <__retarget_lock_release_recursive>
 800b7e2:	89ab      	ldrh	r3, [r5, #12]
 800b7e4:	065b      	lsls	r3, r3, #25
 800b7e6:	f53f af1f 	bmi.w	800b628 <_vfiprintf_r+0x44>
 800b7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7ec:	e71e      	b.n	800b62c <_vfiprintf_r+0x48>
 800b7ee:	ab03      	add	r3, sp, #12
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	4b05      	ldr	r3, [pc, #20]	@ (800b80c <_vfiprintf_r+0x228>)
 800b7f6:	a904      	add	r1, sp, #16
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7fc f8a3 	bl	8007944 <_printf_i>
 800b7fe:	e7e4      	b.n	800b7ca <_vfiprintf_r+0x1e6>
 800b800:	0800bcfd 	.word	0x0800bcfd
 800b804:	0800bd07 	.word	0x0800bd07
 800b808:	08007415 	.word	0x08007415
 800b80c:	0800b5c1 	.word	0x0800b5c1
 800b810:	0800bd03 	.word	0x0800bd03

0800b814 <__swbuf_r>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	460e      	mov	r6, r1
 800b818:	4614      	mov	r4, r2
 800b81a:	4605      	mov	r5, r0
 800b81c:	b118      	cbz	r0, 800b826 <__swbuf_r+0x12>
 800b81e:	6a03      	ldr	r3, [r0, #32]
 800b820:	b90b      	cbnz	r3, 800b826 <__swbuf_r+0x12>
 800b822:	f7fc fc47 	bl	80080b4 <__sinit>
 800b826:	69a3      	ldr	r3, [r4, #24]
 800b828:	60a3      	str	r3, [r4, #8]
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	071a      	lsls	r2, r3, #28
 800b82e:	d501      	bpl.n	800b834 <__swbuf_r+0x20>
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	b943      	cbnz	r3, 800b846 <__swbuf_r+0x32>
 800b834:	4621      	mov	r1, r4
 800b836:	4628      	mov	r0, r5
 800b838:	f000 f82a 	bl	800b890 <__swsetup_r>
 800b83c:	b118      	cbz	r0, 800b846 <__swbuf_r+0x32>
 800b83e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b842:	4638      	mov	r0, r7
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	6922      	ldr	r2, [r4, #16]
 800b84a:	1a98      	subs	r0, r3, r2
 800b84c:	6963      	ldr	r3, [r4, #20]
 800b84e:	b2f6      	uxtb	r6, r6
 800b850:	4283      	cmp	r3, r0
 800b852:	4637      	mov	r7, r6
 800b854:	dc05      	bgt.n	800b862 <__swbuf_r+0x4e>
 800b856:	4621      	mov	r1, r4
 800b858:	4628      	mov	r0, r5
 800b85a:	f7ff fa53 	bl	800ad04 <_fflush_r>
 800b85e:	2800      	cmp	r0, #0
 800b860:	d1ed      	bne.n	800b83e <__swbuf_r+0x2a>
 800b862:	68a3      	ldr	r3, [r4, #8]
 800b864:	3b01      	subs	r3, #1
 800b866:	60a3      	str	r3, [r4, #8]
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	6022      	str	r2, [r4, #0]
 800b86e:	701e      	strb	r6, [r3, #0]
 800b870:	6962      	ldr	r2, [r4, #20]
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	d004      	beq.n	800b882 <__swbuf_r+0x6e>
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	07db      	lsls	r3, r3, #31
 800b87c:	d5e1      	bpl.n	800b842 <__swbuf_r+0x2e>
 800b87e:	2e0a      	cmp	r6, #10
 800b880:	d1df      	bne.n	800b842 <__swbuf_r+0x2e>
 800b882:	4621      	mov	r1, r4
 800b884:	4628      	mov	r0, r5
 800b886:	f7ff fa3d 	bl	800ad04 <_fflush_r>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d0d9      	beq.n	800b842 <__swbuf_r+0x2e>
 800b88e:	e7d6      	b.n	800b83e <__swbuf_r+0x2a>

0800b890 <__swsetup_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4b29      	ldr	r3, [pc, #164]	@ (800b938 <__swsetup_r+0xa8>)
 800b894:	4605      	mov	r5, r0
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	460c      	mov	r4, r1
 800b89a:	b118      	cbz	r0, 800b8a4 <__swsetup_r+0x14>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <__swsetup_r+0x14>
 800b8a0:	f7fc fc08 	bl	80080b4 <__sinit>
 800b8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a8:	0719      	lsls	r1, r3, #28
 800b8aa:	d422      	bmi.n	800b8f2 <__swsetup_r+0x62>
 800b8ac:	06da      	lsls	r2, r3, #27
 800b8ae:	d407      	bmi.n	800b8c0 <__swsetup_r+0x30>
 800b8b0:	2209      	movs	r2, #9
 800b8b2:	602a      	str	r2, [r5, #0]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8be:	e033      	b.n	800b928 <__swsetup_r+0x98>
 800b8c0:	0758      	lsls	r0, r3, #29
 800b8c2:	d512      	bpl.n	800b8ea <__swsetup_r+0x5a>
 800b8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8c6:	b141      	cbz	r1, 800b8da <__swsetup_r+0x4a>
 800b8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8cc:	4299      	cmp	r1, r3
 800b8ce:	d002      	beq.n	800b8d6 <__swsetup_r+0x46>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f7fd fc0d 	bl	80090f0 <_free_r>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f043 0308 	orr.w	r3, r3, #8
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	b94b      	cbnz	r3, 800b90a <__swsetup_r+0x7a>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b900:	d003      	beq.n	800b90a <__swsetup_r+0x7a>
 800b902:	4621      	mov	r1, r4
 800b904:	4628      	mov	r0, r5
 800b906:	f000 f883 	bl	800ba10 <__smakebuf_r>
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	f013 0201 	ands.w	r2, r3, #1
 800b912:	d00a      	beq.n	800b92a <__swsetup_r+0x9a>
 800b914:	2200      	movs	r2, #0
 800b916:	60a2      	str	r2, [r4, #8]
 800b918:	6962      	ldr	r2, [r4, #20]
 800b91a:	4252      	negs	r2, r2
 800b91c:	61a2      	str	r2, [r4, #24]
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	b942      	cbnz	r2, 800b934 <__swsetup_r+0xa4>
 800b922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b926:	d1c5      	bne.n	800b8b4 <__swsetup_r+0x24>
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	0799      	lsls	r1, r3, #30
 800b92c:	bf58      	it	pl
 800b92e:	6962      	ldrpl	r2, [r4, #20]
 800b930:	60a2      	str	r2, [r4, #8]
 800b932:	e7f4      	b.n	800b91e <__swsetup_r+0x8e>
 800b934:	2000      	movs	r0, #0
 800b936:	e7f7      	b.n	800b928 <__swsetup_r+0x98>
 800b938:	2000001c 	.word	0x2000001c

0800b93c <_raise_r>:
 800b93c:	291f      	cmp	r1, #31
 800b93e:	b538      	push	{r3, r4, r5, lr}
 800b940:	4605      	mov	r5, r0
 800b942:	460c      	mov	r4, r1
 800b944:	d904      	bls.n	800b950 <_raise_r+0x14>
 800b946:	2316      	movs	r3, #22
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b952:	b112      	cbz	r2, 800b95a <_raise_r+0x1e>
 800b954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b958:	b94b      	cbnz	r3, 800b96e <_raise_r+0x32>
 800b95a:	4628      	mov	r0, r5
 800b95c:	f000 f830 	bl	800b9c0 <_getpid_r>
 800b960:	4622      	mov	r2, r4
 800b962:	4601      	mov	r1, r0
 800b964:	4628      	mov	r0, r5
 800b966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b96a:	f000 b817 	b.w	800b99c <_kill_r>
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d00a      	beq.n	800b988 <_raise_r+0x4c>
 800b972:	1c59      	adds	r1, r3, #1
 800b974:	d103      	bne.n	800b97e <_raise_r+0x42>
 800b976:	2316      	movs	r3, #22
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	2001      	movs	r0, #1
 800b97c:	e7e7      	b.n	800b94e <_raise_r+0x12>
 800b97e:	2100      	movs	r1, #0
 800b980:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b984:	4620      	mov	r0, r4
 800b986:	4798      	blx	r3
 800b988:	2000      	movs	r0, #0
 800b98a:	e7e0      	b.n	800b94e <_raise_r+0x12>

0800b98c <raise>:
 800b98c:	4b02      	ldr	r3, [pc, #8]	@ (800b998 <raise+0xc>)
 800b98e:	4601      	mov	r1, r0
 800b990:	6818      	ldr	r0, [r3, #0]
 800b992:	f7ff bfd3 	b.w	800b93c <_raise_r>
 800b996:	bf00      	nop
 800b998:	2000001c 	.word	0x2000001c

0800b99c <_kill_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	@ (800b9bc <_kill_r+0x20>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	f7f6 fa75 	bl	8001e98 <_kill>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d102      	bne.n	800b9b8 <_kill_r+0x1c>
 800b9b2:	682b      	ldr	r3, [r5, #0]
 800b9b4:	b103      	cbz	r3, 800b9b8 <_kill_r+0x1c>
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	bf00      	nop
 800b9bc:	2000450c 	.word	0x2000450c

0800b9c0 <_getpid_r>:
 800b9c0:	f7f6 ba62 	b.w	8001e88 <_getpid>

0800b9c4 <__swhatbuf_r>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	b096      	sub	sp, #88	@ 0x58
 800b9d0:	4615      	mov	r5, r2
 800b9d2:	461e      	mov	r6, r3
 800b9d4:	da0d      	bge.n	800b9f2 <__swhatbuf_r+0x2e>
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9dc:	f04f 0100 	mov.w	r1, #0
 800b9e0:	bf14      	ite	ne
 800b9e2:	2340      	movne	r3, #64	@ 0x40
 800b9e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	6031      	str	r1, [r6, #0]
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	b016      	add	sp, #88	@ 0x58
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	466a      	mov	r2, sp
 800b9f4:	f000 f848 	bl	800ba88 <_fstat_r>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	dbec      	blt.n	800b9d6 <__swhatbuf_r+0x12>
 800b9fc:	9901      	ldr	r1, [sp, #4]
 800b9fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba06:	4259      	negs	r1, r3
 800ba08:	4159      	adcs	r1, r3
 800ba0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba0e:	e7eb      	b.n	800b9e8 <__swhatbuf_r+0x24>

0800ba10 <__smakebuf_r>:
 800ba10:	898b      	ldrh	r3, [r1, #12]
 800ba12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba14:	079d      	lsls	r5, r3, #30
 800ba16:	4606      	mov	r6, r0
 800ba18:	460c      	mov	r4, r1
 800ba1a:	d507      	bpl.n	800ba2c <__smakebuf_r+0x1c>
 800ba1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	6123      	str	r3, [r4, #16]
 800ba24:	2301      	movs	r3, #1
 800ba26:	6163      	str	r3, [r4, #20]
 800ba28:	b003      	add	sp, #12
 800ba2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba2c:	ab01      	add	r3, sp, #4
 800ba2e:	466a      	mov	r2, sp
 800ba30:	f7ff ffc8 	bl	800b9c4 <__swhatbuf_r>
 800ba34:	9f00      	ldr	r7, [sp, #0]
 800ba36:	4605      	mov	r5, r0
 800ba38:	4639      	mov	r1, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7fd fbcc 	bl	80091d8 <_malloc_r>
 800ba40:	b948      	cbnz	r0, 800ba56 <__smakebuf_r+0x46>
 800ba42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba46:	059a      	lsls	r2, r3, #22
 800ba48:	d4ee      	bmi.n	800ba28 <__smakebuf_r+0x18>
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	f043 0302 	orr.w	r3, r3, #2
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	e7e2      	b.n	800ba1c <__smakebuf_r+0xc>
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	6020      	str	r0, [r4, #0]
 800ba5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba66:	b15b      	cbz	r3, 800ba80 <__smakebuf_r+0x70>
 800ba68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f81d 	bl	800baac <_isatty_r>
 800ba72:	b128      	cbz	r0, 800ba80 <__smakebuf_r+0x70>
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	f023 0303 	bic.w	r3, r3, #3
 800ba7a:	f043 0301 	orr.w	r3, r3, #1
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	431d      	orrs	r5, r3
 800ba84:	81a5      	strh	r5, [r4, #12]
 800ba86:	e7cf      	b.n	800ba28 <__smakebuf_r+0x18>

0800ba88 <_fstat_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d07      	ldr	r5, [pc, #28]	@ (800baa8 <_fstat_r+0x20>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	4611      	mov	r1, r2
 800ba94:	602b      	str	r3, [r5, #0]
 800ba96:	f7f6 fa5f 	bl	8001f58 <_fstat>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	d102      	bne.n	800baa4 <_fstat_r+0x1c>
 800ba9e:	682b      	ldr	r3, [r5, #0]
 800baa0:	b103      	cbz	r3, 800baa4 <_fstat_r+0x1c>
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	bf00      	nop
 800baa8:	2000450c 	.word	0x2000450c

0800baac <_isatty_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d06      	ldr	r5, [pc, #24]	@ (800bac8 <_isatty_r+0x1c>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	f7f6 fa5e 	bl	8001f78 <_isatty>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_isatty_r+0x1a>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_isatty_r+0x1a>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	2000450c 	.word	0x2000450c

0800bacc <_init>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr

0800bad8 <_fini>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr
