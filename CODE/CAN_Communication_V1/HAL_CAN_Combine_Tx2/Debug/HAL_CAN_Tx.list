
HAL_CAN_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c04  08003c04  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c0c  08003c0c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c0c  08003c0c  00004c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c10  08003c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000294  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f0  200002f0  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f0c  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e6  00000000  00000000  0000ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  00010880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000698  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bf7  00000000  00000000  000117b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cc1  00000000  00000000  000333af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1d77  00000000  00000000  0003d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ede7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002844  00000000  00000000  0010ee2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00111670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b80 	.word	0x08003b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003b80 	.word	0x08003b80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08e      	sub	sp, #56	@ 0x38
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fc45 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8a1 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fa0d 	bl	80009d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005be:	f000 f9ab 	bl	8000918 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f9df 	bl	8000984 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c6:	f000 f903 	bl	80007d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005ca:	f000 f953 	bl	8000874 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005ce:	4840      	ldr	r0, [pc, #256]	@ (80006d0 <main+0x124>)
 80005d0:	f001 f9c7 	bl	8001962 <HAL_CAN_Start>

  	  	TxHeader.DLC = 4;
 80005d4:	4b3f      	ldr	r3, [pc, #252]	@ (80006d4 <main+0x128>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	611a      	str	r2, [r3, #16]
  		TxHeader.RTR = CAN_RTR_DATA;
 80005da:	4b3e      	ldr	r3, [pc, #248]	@ (80006d4 <main+0x128>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  		TxHeader.IDE = CAN_ID_STD;
 80005e0:	4b3c      	ldr	r3, [pc, #240]	@ (80006d4 <main+0x128>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  		TxHeader.StdId = 0x0A9;
 80005e6:	4b3b      	ldr	r3, [pc, #236]	@ (80006d4 <main+0x128>)
 80005e8:	22a9      	movs	r2, #169	@ 0xa9
 80005ea:	601a      	str	r2, [r3, #0]
  		TxHeader.ExtId = 0x0000;
 80005ec:	4b39      	ldr	r3, [pc, #228]	@ (80006d4 <main+0x128>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  		TxHeader.TransmitGlobalTime = DISABLE;
 80005f2:	4b38      	ldr	r3, [pc, #224]	@ (80006d4 <main+0x128>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	751a      	strb	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char str[50];
		HAL_ADC_Start(&hadc1);
 80005f8:	4837      	ldr	r0, [pc, #220]	@ (80006d8 <main+0x12c>)
 80005fa:	f000 fcfb 	bl	8000ff4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000602:	4835      	ldr	r0, [pc, #212]	@ (80006d8 <main+0x12c>)
 8000604:	f000 fdfb 	bl	80011fe <HAL_ADC_PollForConversion>
		LDR_DATA = HAL_ADC_GetValue(&hadc1);
 8000608:	4833      	ldr	r0, [pc, #204]	@ (80006d8 <main+0x12c>)
 800060a:	f000 fe83 	bl	8001314 <HAL_ADC_GetValue>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b32      	ldr	r3, [pc, #200]	@ (80006dc <main+0x130>)
 8000614:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8000616:	4830      	ldr	r0, [pc, #192]	@ (80006d8 <main+0x12c>)
 8000618:	f000 fdbe 	bl	8001198 <HAL_ADC_Stop>

		HAL_ADC_Start(&hadc2);
 800061c:	4830      	ldr	r0, [pc, #192]	@ (80006e0 <main+0x134>)
 800061e:	f000 fce9 	bl	8000ff4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000622:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000626:	482e      	ldr	r0, [pc, #184]	@ (80006e0 <main+0x134>)
 8000628:	f000 fde9 	bl	80011fe <HAL_ADC_PollForConversion>
		MQ5_DATA = HAL_ADC_GetValue(&hadc2);
 800062c:	482c      	ldr	r0, [pc, #176]	@ (80006e0 <main+0x134>)
 800062e:	f000 fe71 	bl	8001314 <HAL_ADC_GetValue>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <main+0x138>)
 8000638:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 800063a:	4829      	ldr	r0, [pc, #164]	@ (80006e0 <main+0x134>)
 800063c:	f000 fdac 	bl	8001198 <HAL_ADC_Stop>

		sprintf(str, "LDR DATA = %d\t MQ5 DATA = %d\r\n", LDR_DATA, MQ5_DATA);
 8000640:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <main+0x130>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <main+0x138>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	1d38      	adds	r0, r7, #4
 800064c:	4926      	ldr	r1, [pc, #152]	@ (80006e8 <main+0x13c>)
 800064e:	f002 fdf7 	bl	8003240 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdbb 	bl	80001d0 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	1d39      	adds	r1, r7, #4
 8000660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000664:	4821      	ldr	r0, [pc, #132]	@ (80006ec <main+0x140>)
 8000666:	f002 fa2f 	bl	8002ac8 <HAL_UART_Transmit>

		TxData[0] = (LDR_DATA >> 8) & 0xFF;  // High byte of LDR
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <main+0x130>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b29b      	uxth	r3, r3
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <main+0x144>)
 8000676:	701a      	strb	r2, [r3, #0]
		TxData[1] = LDR_DATA & 0xFF;         // Low byte of LDR
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <main+0x130>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <main+0x144>)
 8000680:	705a      	strb	r2, [r3, #1]

		TxData[2] = (MQ5_DATA >> 8) & 0xFF;  // High byte of MQ5
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <main+0x138>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b29b      	uxth	r3, r3
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <main+0x144>)
 800068e:	709a      	strb	r2, [r3, #2]
		TxData[3] = MQ5_DATA & 0xFF;         // Low byte of MQ5
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <main+0x138>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <main+0x144>)
 8000698:	70da      	strb	r2, [r3, #3]

		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <main+0x148>)
 800069c:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <main+0x144>)
 800069e:	490d      	ldr	r1, [pc, #52]	@ (80006d4 <main+0x128>)
 80006a0:	480b      	ldr	r0, [pc, #44]	@ (80006d0 <main+0x124>)
 80006a2:	f001 f9a2 	bl	80019ea <HAL_CAN_AddTxMessage>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <main+0x10e>
		{
			// Error: Turn ON RED LED
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b2:	4811      	ldr	r0, [pc, #68]	@ (80006f8 <main+0x14c>)
 80006b4:	f001 fcec 	bl	8002090 <HAL_GPIO_WritePin>
 80006b8:	e004      	b.n	80006c4 <main+0x118>

		}
		else
		{
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);  //  Green LED toggle on successful CAN transmit
 80006ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <main+0x14c>)
 80006c0:	f001 fcff 	bl	80020c2 <HAL_GPIO_TogglePin>
		}


		 	HAL_Delay(2000);
 80006c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c8:	f000 fc2c 	bl	8000f24 <HAL_Delay>
  {
 80006cc:	e794      	b.n	80005f8 <main+0x4c>
 80006ce:	bf00      	nop
 80006d0:	20000108 	.word	0x20000108
 80006d4:	2000017c 	.word	0x2000017c
 80006d8:	20000078 	.word	0x20000078
 80006dc:	20000178 	.word	0x20000178
 80006e0:	200000c0 	.word	0x200000c0
 80006e4:	2000017a 	.word	0x2000017a
 80006e8:	08003b98 	.word	0x08003b98
 80006ec:	20000130 	.word	0x20000130
 80006f0:	20000194 	.word	0x20000194
 80006f4:	2000019c 	.word	0x2000019c
 80006f8:	40020c00 	.word	0x40020c00

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	@ 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fdba 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	@ (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000770:	2348      	movs	r3, #72	@ 0x48
 8000772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fcb9 	bl	80020f8 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f984 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 ff1a 	bl	80025e8 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f96d 	bl	8000a98 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	@ 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC1_Init+0x98>)
 80007e4:	4a21      	ldr	r2, [pc, #132]	@ (800086c <MX_ADC1_Init+0x9c>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC1_Init+0x98>)
 8000810:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <MX_ADC1_Init+0xa0>)
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_ADC1_Init+0x98>)
 800081c:	2201      	movs	r2, #1
 800081e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_ADC1_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	@ (8000868 <MX_ADC1_Init+0x98>)
 8000830:	f000 fb9c 	bl	8000f6c <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 f92d 	bl	8000a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800083e:	2301      	movs	r3, #1
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC1_Init+0x98>)
 8000850:	f000 fd6e 	bl	8001330 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800085a:	f000 f91d 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000078 	.word	0x20000078
 800086c:	40012000 	.word	0x40012000
 8000870:	0f000001 	.word	0x0f000001

08000874 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_ADC2_Init+0x98>)
 8000888:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <MX_ADC2_Init+0x9c>)
 800088a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_ADC2_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_ADC2_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_ADC2_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_ADC2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_ADC2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_ADC2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_ADC2_Init+0x98>)
 80008b4:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <MX_ADC2_Init+0xa0>)
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_ADC2_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_ADC2_Init+0x98>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_ADC2_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_ADC2_Init+0x98>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008d2:	480e      	ldr	r0, [pc, #56]	@ (800090c <MX_ADC2_Init+0x98>)
 80008d4:	f000 fb4a 	bl	8000f6c <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 f8db 	bl	8000a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008e2:	2303      	movs	r3, #3
 80008e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <MX_ADC2_Init+0x98>)
 80008f4:	f000 fd1c 	bl	8001330 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008fe:	f000 f8cb 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000c0 	.word	0x200000c0
 8000910:	40012100 	.word	0x40012100
 8000914:	0f000001 	.word	0x0f000001

08000918 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_CAN1_Init+0x64>)
 800091e:	4a18      	ldr	r2, [pc, #96]	@ (8000980 <MX_CAN1_Init+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_CAN1_Init+0x64>)
 8000924:	2212      	movs	r2, #18
 8000926:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_CAN1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_CAN1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_CAN1_Init+0x64>)
 8000936:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800093a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_CAN1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_CAN1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_CAN1_Init+0x64>)
 8000968:	f000 ff00 	bl	800176c <HAL_CAN_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000972:	f000 f891 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000108 	.word	0x20000108
 8000980:	40006400 	.word	0x40006400

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <MX_USART2_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009bc:	f002 f834 	bl	8002a28 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f867 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000130 	.word	0x20000130
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a26      	ldr	r2, [pc, #152]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_GPIO_Init+0xb8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <MX_GPIO_Init+0xbc>)
 8000a66:	f001 fb13 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000a6a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_GPIO_Init+0xbc>)
 8000a84:	f001 f968 	bl	8001d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f001 f904 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	@ 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a2e      	ldr	r2, [pc, #184]	@ (8000bcc <HAL_ADC_MspInit+0xd8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a25      	ldr	r2, [pc, #148]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481c      	ldr	r0, [pc, #112]	@ (8000bd4 <HAL_ADC_MspInit+0xe0>)
 8000b62:	f001 f8f9 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b66:	e02c      	b.n	8000bc2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd8 <HAL_ADC_MspInit+0xe4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d127      	bne.n	8000bc2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a15      	ldr	r2, [pc, #84]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_ADC_MspInit+0xdc>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MQ5_Pin;
 8000baa:	2308      	movs	r3, #8
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MQ5_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <HAL_ADC_MspInit+0xe0>)
 8000bbe:	f001 f8cb 	bl	8001d58 <HAL_GPIO_Init>
}
 8000bc2:	bf00      	nop
 8000bc4:	3730      	adds	r7, #48	@ 0x30
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40012100 	.word	0x40012100

08000bdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <HAL_CAN_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12c      	bne.n	8000c58 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <HAL_CAN_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_CAN_MspInit+0x88>)
 8000c08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_CAN_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <HAL_CAN_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <HAL_CAN_MspInit+0x88>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_CAN_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c48:	2309      	movs	r3, #9
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_CAN_MspInit+0x8c>)
 8000c54:	f001 f880 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40006400 	.word	0x40006400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12b      	bne.n	8000ce6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000ce2:	f001 f839 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <MemManage_Handler+0x4>

08000d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f8c7 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f002 fa82 	bl	8003294 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20020000 	.word	0x20020000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200001a0 	.word	0x200001a0
 8000dc4:	200002f0 	.word	0x200002f0

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 fa41 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fbc5 	bl	80005ac <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e30:	08003c14 	.word	0x08003c14
  ldr r2, =_sbss
 8000e34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e38:	200002f0 	.word	0x200002f0

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 ff41 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe16 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 ff4b 	bl	8001d3e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec0:	f000 ff21 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	200001a4 	.word	0x200001a4

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200001a4 	.word	0x200001a4

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffde 	bl	8000f0c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e033      	b.n	8000fea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fdb2 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d118      	bne.n	8000fdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fb2:	f023 0302 	bic.w	r3, r3, #2
 8000fb6:	f043 0202 	orr.w	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fad8 	bl	8001574 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fda:	e001      	b.n	8000fe0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <HAL_ADC_Start+0x1a>
 800100a:	2302      	movs	r3, #2
 800100c:	e0b2      	b.n	8001174 <HAL_ADC_Start+0x180>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d018      	beq.n	8001056 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001034:	4b52      	ldr	r3, [pc, #328]	@ (8001180 <HAL_ADC_Start+0x18c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a52      	ldr	r2, [pc, #328]	@ (8001184 <HAL_ADC_Start+0x190>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	0c9a      	lsrs	r2, r3, #18
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001048:	e002      	b.n	8001050 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	d17a      	bne.n	800115a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800108e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800109e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010a2:	d106      	bne.n	80010b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	f023 0206 	bic.w	r2, r3, #6
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80010b0:	e002      	b.n	80010b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010c0:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <HAL_ADC_Start+0x194>)
 80010c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d12a      	bne.n	8001130 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a2b      	ldr	r2, [pc, #172]	@ (800118c <HAL_ADC_Start+0x198>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d015      	beq.n	8001110 <HAL_ADC_Start+0x11c>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a29      	ldr	r2, [pc, #164]	@ (8001190 <HAL_ADC_Start+0x19c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d105      	bne.n	80010fa <HAL_ADC_Start+0x106>
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <HAL_ADC_Start+0x194>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a25      	ldr	r2, [pc, #148]	@ (8001194 <HAL_ADC_Start+0x1a0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d136      	bne.n	8001172 <HAL_ADC_Start+0x17e>
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <HAL_ADC_Start+0x194>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	d130      	bne.n	8001172 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d129      	bne.n	8001172 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	e020      	b.n	8001172 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a15      	ldr	r2, [pc, #84]	@ (800118c <HAL_ADC_Start+0x198>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d11b      	bne.n	8001172 <HAL_ADC_Start+0x17e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d114      	bne.n	8001172 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	e00b      	b.n	8001172 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f043 0210 	orr.w	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000000 	.word	0x20000000
 8001184:	431bde83 	.word	0x431bde83
 8001188:	40012300 	.word	0x40012300
 800118c:	40012000 	.word	0x40012000
 8001190:	40012100 	.word	0x40012100
 8001194:	40012200 	.word	0x40012200

08001198 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_ADC_Stop+0x16>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e021      	b.n	80011f2 <HAL_ADC_Stop+0x5a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d109      	bne.n	80011e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d113      	bne.n	8001244 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800122a:	d10b      	bne.n	8001244 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	f043 0220 	orr.w	r2, r3, #32
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e063      	b.n	800130c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff fe62 	bl	8000f0c <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800124a:	e021      	b.n	8001290 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001252:	d01d      	beq.n	8001290 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_ADC_PollForConversion+0x6c>
 800125a:	f7ff fe57 	bl	8000f0c <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d212      	bcs.n	8001290 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b02      	cmp	r3, #2
 8001276:	d00b      	beq.n	8001290 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f043 0204 	orr.w	r2, r3, #4
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e03d      	b.n	800130c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b02      	cmp	r3, #2
 800129c:	d1d6      	bne.n	800124c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f06f 0212 	mvn.w	r2, #18
 80012a6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d123      	bne.n	800130a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11f      	bne.n	800130a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d111      	bne.n	800130a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_ADC_ConfigChannel+0x1c>
 8001348:	2302      	movs	r3, #2
 800134a:	e105      	b.n	8001558 <HAL_ADC_ConfigChannel+0x228>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d925      	bls.n	80013a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68d9      	ldr	r1, [r3, #12]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	3b1e      	subs	r3, #30
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43da      	mvns	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68d9      	ldr	r1, [r3, #12]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	4603      	mov	r3, r0
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4403      	add	r3, r0
 800139a:	3b1e      	subs	r3, #30
 800139c:	409a      	lsls	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	e022      	b.n	80013ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6919      	ldr	r1, [r3, #16]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	2207      	movs	r2, #7
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	400a      	ands	r2, r1
 80013ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6919      	ldr	r1, [r3, #16]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	4603      	mov	r3, r0
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4403      	add	r3, r0
 80013e4:	409a      	lsls	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d824      	bhi.n	8001440 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b05      	subs	r3, #5
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	400a      	ands	r2, r1
 8001416:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b05      	subs	r3, #5
 8001432:	fa00 f203 	lsl.w	r2, r0, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34
 800143e:	e04c      	b.n	80014da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b0c      	cmp	r3, #12
 8001446:	d824      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b23      	subs	r3, #35	@ 0x23
 800145a:	221f      	movs	r2, #31
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43da      	mvns	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b23      	subs	r3, #35	@ 0x23
 8001484:	fa00 f203 	lsl.w	r2, r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001490:	e023      	b.n	80014da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3b41      	subs	r3, #65	@ 0x41
 80014a4:	221f      	movs	r2, #31
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	400a      	ands	r2, r1
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b41      	subs	r3, #65	@ 0x41
 80014ce:	fa00 f203 	lsl.w	r2, r0, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <HAL_ADC_ConfigChannel+0x234>)
 80014dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <HAL_ADC_ConfigChannel+0x238>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d109      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1cc>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b12      	cmp	r3, #18
 80014ee:	d105      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <HAL_ADC_ConfigChannel+0x238>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d123      	bne.n	800154e <HAL_ADC_ConfigChannel+0x21e>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d003      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x1e6>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b11      	cmp	r3, #17
 8001514:	d11b      	bne.n	800154e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d111      	bne.n	800154e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_ADC_ConfigChannel+0x23c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <HAL_ADC_ConfigChannel+0x240>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9a      	lsrs	r2, r3, #18
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001540:	e002      	b.n	8001548 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3b01      	subs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40012300 	.word	0x40012300
 8001568:	40012000 	.word	0x40012000
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157c:	4b79      	ldr	r3, [pc, #484]	@ (8001764 <ADC_Init+0x1f0>)
 800157e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	021a      	lsls	r2, r3, #8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6899      	ldr	r1, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	4a58      	ldr	r2, [pc, #352]	@ (8001768 <ADC_Init+0x1f4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800161a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6899      	ldr	r1, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800163c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e00f      	b.n	8001672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001670:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0202 	bic.w	r2, r2, #2
 8001680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e1b      	ldrb	r3, [r3, #24]
 800168c:	005a      	lsls	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6859      	ldr	r1, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	3b01      	subs	r3, #1
 80016cc:	035a      	lsls	r2, r3, #13
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	e007      	b.n	80016e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	3b01      	subs	r3, #1
 8001704:	051a      	lsls	r2, r3, #20
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800171c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800172a:	025a      	lsls	r2, r3, #9
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6899      	ldr	r1, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	029a      	lsls	r2, r3, #10
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40012300 	.word	0x40012300
 8001768:	0f000001 	.word	0x0f000001

0800176c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0ed      	b.n	800195a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fa26 	bl	8000bdc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a0:	f7ff fbb4 	bl	8000f0c <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017a6:	e012      	b.n	80017ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a8:	f7ff fbb0 	bl	8000f0c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	d90b      	bls.n	80017ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2205      	movs	r2, #5
 80017c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0c5      	b.n	800195a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0e5      	beq.n	80017a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0202 	bic.w	r2, r2, #2
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7ff fb8e 	bl	8000f0c <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f2:	e012      	b.n	800181a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f4:	f7ff fb8a 	bl	8000f0c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b0a      	cmp	r3, #10
 8001800:	d90b      	bls.n	800181a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2205      	movs	r2, #5
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e09f      	b.n	800195a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e5      	bne.n	80017f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e007      	b.n	8001852 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7e5b      	ldrb	r3, [r3, #25]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800187a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7e9b      	ldrb	r3, [r3, #26]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d108      	bne.n	8001896 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0220 	orr.w	r2, r2, #32
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e007      	b.n	80018a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0220 	bic.w	r2, r2, #32
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7edb      	ldrb	r3, [r3, #27]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0210 	bic.w	r2, r2, #16
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e007      	b.n	80018d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0210 	orr.w	r2, r2, #16
 80018ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7f1b      	ldrb	r3, [r3, #28]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d108      	bne.n	80018ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0208 	orr.w	r2, r2, #8
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e007      	b.n	80018fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0208 	bic.w	r2, r2, #8
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7f5b      	ldrb	r3, [r3, #29]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0204 	orr.w	r2, r2, #4
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e007      	b.n	8001924 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0204 	bic.w	r2, r2, #4
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	ea42 0103 	orr.w	r1, r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d12e      	bne.n	80019d4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800198e:	f7ff fabd 	bl	8000f0c <HAL_GetTick>
 8001992:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001994:	e012      	b.n	80019bc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001996:	f7ff fab9 	bl	8000f0c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b0a      	cmp	r3, #10
 80019a2:	d90b      	bls.n	80019bc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2205      	movs	r2, #5
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e012      	b.n	80019e2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1e5      	bne.n	8001996 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e006      	b.n	80019e2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b089      	sub	sp, #36	@ 0x24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a08:	7ffb      	ldrb	r3, [r7, #31]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d003      	beq.n	8001a16 <HAL_CAN_AddTxMessage+0x2c>
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	f040 80ad 	bne.w	8001b70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8095 	beq.w	8001b60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	0e1b      	lsrs	r3, r3, #24
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a40:	2201      	movs	r2, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	409a      	lsls	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3318      	adds	r3, #24
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	440b      	add	r3, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e00f      	b.n	8001a8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a7e:	68f9      	ldr	r1, [r7, #12]
 8001a80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3318      	adds	r3, #24
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	440b      	add	r3, r1
 8001a8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6819      	ldr	r1, [r3, #0]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3318      	adds	r3, #24
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	7d1b      	ldrb	r3, [r3, #20]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d111      	bne.n	8001ace <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3318      	adds	r3, #24
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	6811      	ldr	r1, [r2, #0]
 8001abe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	440b      	add	r3, r1
 8001aca:	3304      	adds	r3, #4
 8001acc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3307      	adds	r3, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	061a      	lsls	r2, r3, #24
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3306      	adds	r3, #6
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3305      	adds	r3, #5
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	3204      	adds	r2, #4
 8001aee:	7812      	ldrb	r2, [r2, #0]
 8001af0:	4610      	mov	r0, r2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	6811      	ldr	r1, [r2, #0]
 8001af6:	ea43 0200 	orr.w	r2, r3, r0
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3303      	adds	r3, #3
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	061a      	lsls	r2, r3, #24
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3302      	adds	r3, #2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	4313      	orrs	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	4610      	mov	r0, r2
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	6811      	ldr	r1, [r2, #0]
 8001b2c:	ea43 0200 	orr.w	r2, r3, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3318      	adds	r3, #24
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	6811      	ldr	r1, [r2, #0]
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3318      	adds	r3, #24
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e00e      	b.n	8001b7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e006      	b.n	8001b7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff47 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff5c 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffb0 	bl	8001cac <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e16b      	b.n	800204c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 815a 	bne.w	8002046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d005      	beq.n	8001daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d130      	bne.n	8001e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 0201 	and.w	r2, r3, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d017      	beq.n	8001e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d123      	bne.n	8001e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80b4 	beq.w	8002046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b60      	ldr	r3, [pc, #384]	@ (8002064 <HAL_GPIO_Init+0x30c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8002064 <HAL_GPIO_Init+0x30c>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b5d      	ldr	r3, [pc, #372]	@ (8002064 <HAL_GPIO_Init+0x30c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efa:	4a5b      	ldr	r2, [pc, #364]	@ (8002068 <HAL_GPIO_Init+0x310>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	@ (800206c <HAL_GPIO_Init+0x314>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a51      	ldr	r2, [pc, #324]	@ (8002070 <HAL_GPIO_Init+0x318>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_GPIO_Init+0x31c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_GPIO_Init+0x320>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	@ (800207c <HAL_GPIO_Init+0x324>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	@ (8002080 <HAL_GPIO_Init+0x328>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	@ (8002084 <HAL_GPIO_Init+0x32c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <HAL_GPIO_Init+0x330>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x20a>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e00e      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f62:	2308      	movs	r3, #8
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	@ (8002068 <HAL_GPIO_Init+0x310>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_GPIO_Init+0x334>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a32      	ldr	r2, [pc, #200]	@ (800208c <HAL_GPIO_Init+0x334>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	@ (800208c <HAL_GPIO_Init+0x334>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fec:	4a27      	ldr	r2, [pc, #156]	@ (800208c <HAL_GPIO_Init+0x334>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_GPIO_Init+0x334>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002016:	4a1d      	ldr	r2, [pc, #116]	@ (800208c <HAL_GPIO_Init+0x334>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_GPIO_Init+0x334>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002040:	4a12      	ldr	r2, [pc, #72]	@ (800208c <HAL_GPIO_Init+0x334>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f ae90 	bls.w	8001d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40021400 	.word	0x40021400
 8002084:	40021800 	.word	0x40021800
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d4:	887a      	ldrh	r2, [r7, #2]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	041a      	lsls	r2, r3, #16
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43d9      	mvns	r1, r3
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	400b      	ands	r3, r1
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e267      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d075      	beq.n	8002202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002116:	4b88      	ldr	r3, [pc, #544]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d00c      	beq.n	800213c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b85      	ldr	r3, [pc, #532]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800212a:	2b08      	cmp	r3, #8
 800212c:	d112      	bne.n	8002154 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212e:	4b82      	ldr	r3, [pc, #520]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800213a:	d10b      	bne.n	8002154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	4b7e      	ldr	r3, [pc, #504]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d05b      	beq.n	8002200 <HAL_RCC_OscConfig+0x108>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d157      	bne.n	8002200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e242      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215c:	d106      	bne.n	800216c <HAL_RCC_OscConfig+0x74>
 800215e:	4b76      	ldr	r3, [pc, #472]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a75      	ldr	r2, [pc, #468]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01d      	b.n	80021a8 <HAL_RCC_OscConfig+0xb0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b70      	ldr	r3, [pc, #448]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6f      	ldr	r2, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b6d      	ldr	r3, [pc, #436]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6c      	ldr	r2, [pc, #432]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xb0>
 8002190:	4b69      	ldr	r3, [pc, #420]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a68      	ldr	r2, [pc, #416]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a65      	ldr	r2, [pc, #404]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe feac 	bl	8000f0c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fea8 	bl	8000f0c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e207      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0xc0>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe98 	bl	8000f0c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fe94 	bl	8000f0c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	@ 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1f3      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	4b51      	ldr	r3, [pc, #324]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0xe8>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d063      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800220e:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002222:	2b08      	cmp	r3, #8
 8002224:	d11c      	bne.n	8002260 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b44      	ldr	r3, [pc, #272]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d116      	bne.n	8002260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_RCC_OscConfig+0x152>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e1c7      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b3b      	ldr	r3, [pc, #236]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4937      	ldr	r1, [pc, #220]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	e03a      	b.n	80022d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002268:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_RCC_OscConfig+0x244>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe fe4d 	bl	8000f0c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002276:	f7fe fe49 	bl	8000f0c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e1a8      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	4b2b      	ldr	r3, [pc, #172]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4925      	ldr	r1, [pc, #148]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e015      	b.n	80022d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022aa:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_RCC_OscConfig+0x244>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fe2c 	bl	8000f0c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b8:	f7fe fe28 	bl	8000f0c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e187      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d036      	beq.n	8002350 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_RCC_OscConfig+0x248>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7fe fe0c 	bl	8000f0c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe fe08 	bl	8000f0c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e167      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_OscConfig+0x240>)
 800230c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x200>
 8002316:	e01b      	b.n	8002350 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_OscConfig+0x248>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7fe fdf5 	bl	8000f0c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	e00e      	b.n	8002344 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002326:	f7fe fdf1 	bl	8000f0c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d907      	bls.n	8002344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e150      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
 8002338:	40023800 	.word	0x40023800
 800233c:	42470000 	.word	0x42470000
 8002340:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b88      	ldr	r3, [pc, #544]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ea      	bne.n	8002326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8097 	beq.w	800248c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b81      	ldr	r3, [pc, #516]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10f      	bne.n	800238e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b7d      	ldr	r3, [pc, #500]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	4a7c      	ldr	r2, [pc, #496]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	@ 0x40
 800237e:	4b7a      	ldr	r3, [pc, #488]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b77      	ldr	r3, [pc, #476]	@ (800256c <HAL_RCC_OscConfig+0x474>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b74      	ldr	r3, [pc, #464]	@ (800256c <HAL_RCC_OscConfig+0x474>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a73      	ldr	r2, [pc, #460]	@ (800256c <HAL_RCC_OscConfig+0x474>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fdb1 	bl	8000f0c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fdad 	bl	8000f0c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e10c      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b6a      	ldr	r3, [pc, #424]	@ (800256c <HAL_RCC_OscConfig+0x474>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2ea>
 80023d4:	4b64      	ldr	r3, [pc, #400]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	4a63      	ldr	r2, [pc, #396]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e0:	e01c      	b.n	800241c <HAL_RCC_OscConfig+0x324>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x30c>
 80023ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6713      	str	r3, [r2, #112]	@ 0x70
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0x324>
 8002404:	4b58      	ldr	r3, [pc, #352]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002408:	4a57      	ldr	r2, [pc, #348]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002410:	4b55      	ldr	r3, [pc, #340]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	4a54      	ldr	r2, [pc, #336]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe fd72 	bl	8000f0c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7fe fd6e 	bl	8000f0c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0cb      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	4b49      	ldr	r3, [pc, #292]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ee      	beq.n	800242c <HAL_RCC_OscConfig+0x334>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7fe fd5c 	bl	8000f0c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7fe fd58 	bl	8000f0c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0b5      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246e:	4b3e      	ldr	r3, [pc, #248]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ee      	bne.n	8002458 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800247a:	7dfb      	ldrb	r3, [r7, #23]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	4a38      	ldr	r2, [pc, #224]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800248a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a1 	beq.w	80025d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002496:	4b34      	ldr	r3, [pc, #208]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d05c      	beq.n	800255c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d141      	bne.n	800252e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4b31      	ldr	r3, [pc, #196]	@ (8002570 <HAL_RCC_OscConfig+0x478>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fd2c 	bl	8000f0c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fd28 	bl	8000f0c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e087      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	491b      	ldr	r1, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x478>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fd01 	bl	8000f0c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fcfd 	bl	8000f0c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e05c      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x416>
 800252c:	e054      	b.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_OscConfig+0x478>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fcea 	bl	8000f0c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fce6 	bl	8000f0c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e045      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_RCC_OscConfig+0x470>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
 800255a:	e03d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e038      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <HAL_RCC_OscConfig+0x4ec>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d121      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d111      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0cc      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b68      	ldr	r3, [pc, #416]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d90c      	bls.n	8002624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b65      	ldr	r3, [pc, #404]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002646:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800265e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d044      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b3f      	ldr	r3, [pc, #252]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e067      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4934      	ldr	r1, [pc, #208]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fc18 	bl	8000f0c <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe fc14 	bl	8000f0c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e04f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20c      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fb78 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08003bb8 	.word	0x08003bb8
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b8:	b094      	sub	sp, #80	@ 0x50
 80027ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027cc:	4b79      	ldr	r3, [pc, #484]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x40>
 80027d8:	2b08      	cmp	r3, #8
 80027da:	f200 80e1 	bhi.w	80029a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x34>
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x3a>
 80027e6:	e0db      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b73      	ldr	r3, [pc, #460]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ec:	e0db      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ee:	4b73      	ldr	r3, [pc, #460]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x208>)
 80027f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f2:	e0d8      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f4:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fe:	4b6d      	ldr	r3, [pc, #436]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d063      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280a:	4b6a      	ldr	r3, [pc, #424]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	099b      	lsrs	r3, r3, #6
 8002810:	2200      	movs	r2, #0
 8002812:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002814:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281c:	633b      	str	r3, [r7, #48]	@ 0x30
 800281e:	2300      	movs	r3, #0
 8002820:	637b      	str	r3, [r7, #52]	@ 0x34
 8002822:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002826:	4622      	mov	r2, r4
 8002828:	462b      	mov	r3, r5
 800282a:	f04f 0000 	mov.w	r0, #0
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002838:	0150      	lsls	r0, r2, #5
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4621      	mov	r1, r4
 8002840:	1a51      	subs	r1, r2, r1
 8002842:	6139      	str	r1, [r7, #16]
 8002844:	4629      	mov	r1, r5
 8002846:	eb63 0301 	sbc.w	r3, r3, r1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002858:	4659      	mov	r1, fp
 800285a:	018b      	lsls	r3, r1, #6
 800285c:	4651      	mov	r1, sl
 800285e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002862:	4651      	mov	r1, sl
 8002864:	018a      	lsls	r2, r1, #6
 8002866:	4651      	mov	r1, sl
 8002868:	ebb2 0801 	subs.w	r8, r2, r1
 800286c:	4659      	mov	r1, fp
 800286e:	eb63 0901 	sbc.w	r9, r3, r1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800287e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	4623      	mov	r3, r4
 800288c:	eb18 0303 	adds.w	r3, r8, r3
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	462b      	mov	r3, r5
 8002894:	eb49 0303 	adc.w	r3, r9, r3
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028a6:	4629      	mov	r1, r5
 80028a8:	024b      	lsls	r3, r1, #9
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b0:	4621      	mov	r1, r4
 80028b2:	024a      	lsls	r2, r1, #9
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ba:	2200      	movs	r2, #0
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028c4:	f7fd fcdc 	bl	8000280 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d0:	e058      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b38      	ldr	r3, [pc, #224]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	2200      	movs	r2, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	4611      	mov	r1, r2
 80028de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	0159      	lsls	r1, r3, #5
 80028fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fe:	0150      	lsls	r0, r2, #5
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4641      	mov	r1, r8
 8002906:	ebb2 0a01 	subs.w	sl, r2, r1
 800290a:	4649      	mov	r1, r9
 800290c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800291c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002920:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002924:	ebb2 040a 	subs.w	r4, r2, sl
 8002928:	eb63 050b 	sbc.w	r5, r3, fp
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	00eb      	lsls	r3, r5, #3
 8002936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293a:	00e2      	lsls	r2, r4, #3
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	4643      	mov	r3, r8
 8002942:	18e3      	adds	r3, r4, r3
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	464b      	mov	r3, r9
 8002948:	eb45 0303 	adc.w	r3, r5, r3
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295a:	4629      	mov	r1, r5
 800295c:	028b      	lsls	r3, r1, #10
 800295e:	4621      	mov	r1, r4
 8002960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002964:	4621      	mov	r1, r4
 8002966:	028a      	lsls	r2, r1, #10
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800296e:	2200      	movs	r2, #0
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	61fa      	str	r2, [r7, #28]
 8002974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002978:	f7fd fc82 	bl	8000280 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002994:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3750      	adds	r7, #80	@ 0x50
 80029ac:	46bd      	mov	sp, r7
 80029ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	007a1200 	.word	0x007a1200

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029dc:	f7ff fff0 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4903      	ldr	r1, [pc, #12]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08003bc8 	.word	0x08003bc8

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a04:	f7ff ffdc 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0b5b      	lsrs	r3, r3, #13
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	@ (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08003bc8 	.word	0x08003bc8

08002a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e042      	b.n	8002ac0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe f90c 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	@ 0x24
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f973 	bl	8002d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	@ 0x28
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d175      	bne.n	8002bd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_Transmit+0x2c>
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e06e      	b.n	8002bd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2221      	movs	r2, #33	@ 0x21
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b06:	f7fe fa01 	bl	8000f0c <HAL_GetTick>
 8002b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b20:	d108      	bne.n	8002b34 <HAL_UART_Transmit+0x6c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e003      	b.n	8002b3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b3c:	e02e      	b.n	8002b9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f848 	bl	8002bde <UART_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e03a      	b.n	8002bd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3302      	adds	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	e007      	b.n	8002b8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1cb      	bne.n	8002b3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2140      	movs	r1, #64	@ 0x40
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f814 	bl	8002bde <UART_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e006      	b.n	8002bd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bee:	e03b      	b.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf6:	d037      	beq.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf8:	f7fe f988 	bl	8000f0c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	6a3a      	ldr	r2, [r7, #32]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d302      	bcc.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e03a      	b.n	8002c88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d020      	beq.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d01d      	beq.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d116      	bne.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f81d 	bl	8002c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2208      	movs	r2, #8
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e00f      	b.n	8002c88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d0b4      	beq.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b095      	sub	sp, #84	@ 0x54
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e5      	bne.n	8002c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	e853 3f00 	ldrex	r3, [r3]
 8002cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e5      	bne.n	8002ccc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d119      	bne.n	8002d3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 0310 	bic.w	r3, r3, #16
 8002d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d28:	61ba      	str	r2, [r7, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	613b      	str	r3, [r7, #16]
   return(result);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e5      	bne.n	8002d08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d4a:	bf00      	nop
 8002d4c:	3754      	adds	r7, #84	@ 0x54
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d5c:	b0c0      	sub	sp, #256	@ 0x100
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d74:	68d9      	ldr	r1, [r3, #12]
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	ea40 0301 	orr.w	r3, r0, r1
 8002d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002db0:	f021 010c 	bic.w	r1, r1, #12
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd2:	6999      	ldr	r1, [r3, #24]
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	ea40 0301 	orr.w	r3, r0, r1
 8002dde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b8f      	ldr	r3, [pc, #572]	@ (8003024 <UART_SetConfig+0x2cc>)
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d005      	beq.n	8002df8 <UART_SetConfig+0xa0>
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b8d      	ldr	r3, [pc, #564]	@ (8003028 <UART_SetConfig+0x2d0>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d104      	bne.n	8002e02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002df8:	f7ff fe02 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 8002dfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e00:	e003      	b.n	8002e0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e02:	f7ff fde9 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8002e06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e14:	f040 810c 	bne.w	8003030 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e2a:	4622      	mov	r2, r4
 8002e2c:	462b      	mov	r3, r5
 8002e2e:	1891      	adds	r1, r2, r2
 8002e30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e32:	415b      	adcs	r3, r3
 8002e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	eb12 0801 	adds.w	r8, r2, r1
 8002e40:	4629      	mov	r1, r5
 8002e42:	eb43 0901 	adc.w	r9, r3, r1
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	4699      	mov	r9, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	eb18 0303 	adds.w	r3, r8, r3
 8002e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e68:	462b      	mov	r3, r5
 8002e6a:	eb49 0303 	adc.w	r3, r9, r3
 8002e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e86:	460b      	mov	r3, r1
 8002e88:	18db      	adds	r3, r3, r3
 8002e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	eb42 0303 	adc.w	r3, r2, r3
 8002e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e9c:	f7fd f9f0 	bl	8000280 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <UART_SetConfig+0x2d4>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	011c      	lsls	r4, r3, #4
 8002eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ebc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	1891      	adds	r1, r2, r2
 8002ec6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ec8:	415b      	adcs	r3, r3
 8002eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ee8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef0:	4692      	mov	sl, r2
 8002ef2:	469b      	mov	fp, r3
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	eb1a 0303 	adds.w	r3, sl, r3
 8002efa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002efe:	464b      	mov	r3, r9
 8002f00:	eb4b 0303 	adc.w	r3, fp, r3
 8002f04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	18db      	adds	r3, r3, r3
 8002f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f22:	4613      	mov	r3, r2
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f32:	f7fd f9a5 	bl	8000280 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <UART_SetConfig+0x2d4>)
 8002f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2264      	movs	r2, #100	@ 0x64
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	1acb      	subs	r3, r1, r3
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f52:	4b36      	ldr	r3, [pc, #216]	@ (800302c <UART_SetConfig+0x2d4>)
 8002f54:	fba3 2302 	umull	r2, r3, r3, r2
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f60:	441c      	add	r4, r3
 8002f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f74:	4642      	mov	r2, r8
 8002f76:	464b      	mov	r3, r9
 8002f78:	1891      	adds	r1, r2, r2
 8002f7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f7c:	415b      	adcs	r3, r3
 8002f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f84:	4641      	mov	r1, r8
 8002f86:	1851      	adds	r1, r2, r1
 8002f88:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	414b      	adcs	r3, r1
 8002f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	00cb      	lsls	r3, r1, #3
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	00ca      	lsls	r2, r1, #3
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	189b      	adds	r3, r3, r2
 8002fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fb8:	464b      	mov	r3, r9
 8002fba:	460a      	mov	r2, r1
 8002fbc:	eb42 0303 	adc.w	r3, r2, r3
 8002fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fd8:	460b      	mov	r3, r1
 8002fda:	18db      	adds	r3, r3, r3
 8002fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fde:	4613      	mov	r3, r2
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002fee:	f7fd f947 	bl	8000280 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <UART_SetConfig+0x2d4>)
 8002ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	2164      	movs	r1, #100	@ 0x64
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	3332      	adds	r3, #50	@ 0x32
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <UART_SetConfig+0x2d4>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	f003 0207 	and.w	r2, r3, #7
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4422      	add	r2, r4
 800301e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003020:	e106      	b.n	8003230 <UART_SetConfig+0x4d8>
 8003022:	bf00      	nop
 8003024:	40011000 	.word	0x40011000
 8003028:	40011400 	.word	0x40011400
 800302c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003034:	2200      	movs	r2, #0
 8003036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800303a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800303e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003042:	4642      	mov	r2, r8
 8003044:	464b      	mov	r3, r9
 8003046:	1891      	adds	r1, r2, r2
 8003048:	6239      	str	r1, [r7, #32]
 800304a:	415b      	adcs	r3, r3
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
 800304e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003052:	4641      	mov	r1, r8
 8003054:	1854      	adds	r4, r2, r1
 8003056:	4649      	mov	r1, r9
 8003058:	eb43 0501 	adc.w	r5, r3, r1
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	00eb      	lsls	r3, r5, #3
 8003066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306a:	00e2      	lsls	r2, r4, #3
 800306c:	4614      	mov	r4, r2
 800306e:	461d      	mov	r5, r3
 8003070:	4643      	mov	r3, r8
 8003072:	18e3      	adds	r3, r4, r3
 8003074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003078:	464b      	mov	r3, r9
 800307a:	eb45 0303 	adc.w	r3, r5, r3
 800307e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800308e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800309e:	4629      	mov	r1, r5
 80030a0:	008b      	lsls	r3, r1, #2
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a8:	4621      	mov	r1, r4
 80030aa:	008a      	lsls	r2, r1, #2
 80030ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030b0:	f7fd f8e6 	bl	8000280 <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4b60      	ldr	r3, [pc, #384]	@ (800323c <UART_SetConfig+0x4e4>)
 80030ba:	fba3 2302 	umull	r2, r3, r3, r2
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	011c      	lsls	r4, r3, #4
 80030c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	61b9      	str	r1, [r7, #24]
 80030dc:	415b      	adcs	r3, r3
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e4:	4641      	mov	r1, r8
 80030e6:	1851      	adds	r1, r2, r1
 80030e8:	6139      	str	r1, [r7, #16]
 80030ea:	4649      	mov	r1, r9
 80030ec:	414b      	adcs	r3, r1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030fc:	4659      	mov	r1, fp
 80030fe:	00cb      	lsls	r3, r1, #3
 8003100:	4651      	mov	r1, sl
 8003102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003106:	4651      	mov	r1, sl
 8003108:	00ca      	lsls	r2, r1, #3
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	4603      	mov	r3, r0
 8003110:	4642      	mov	r2, r8
 8003112:	189b      	adds	r3, r3, r2
 8003114:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003118:	464b      	mov	r3, r9
 800311a:	460a      	mov	r2, r1
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800312e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800313c:	4649      	mov	r1, r9
 800313e:	008b      	lsls	r3, r1, #2
 8003140:	4641      	mov	r1, r8
 8003142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003146:	4641      	mov	r1, r8
 8003148:	008a      	lsls	r2, r1, #2
 800314a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800314e:	f7fd f897 	bl	8000280 <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4611      	mov	r1, r2
 8003158:	4b38      	ldr	r3, [pc, #224]	@ (800323c <UART_SetConfig+0x4e4>)
 800315a:	fba3 2301 	umull	r2, r3, r3, r1
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2264      	movs	r2, #100	@ 0x64
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	1acb      	subs	r3, r1, r3
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	3332      	adds	r3, #50	@ 0x32
 800316c:	4a33      	ldr	r2, [pc, #204]	@ (800323c <UART_SetConfig+0x4e4>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003178:	441c      	add	r4, r3
 800317a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800317e:	2200      	movs	r2, #0
 8003180:	673b      	str	r3, [r7, #112]	@ 0x70
 8003182:	677a      	str	r2, [r7, #116]	@ 0x74
 8003184:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	1891      	adds	r1, r2, r2
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	415b      	adcs	r3, r3
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003198:	4641      	mov	r1, r8
 800319a:	1851      	adds	r1, r2, r1
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	4649      	mov	r1, r9
 80031a0:	414b      	adcs	r3, r1
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031b0:	4659      	mov	r1, fp
 80031b2:	00cb      	lsls	r3, r1, #3
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ba:	4651      	mov	r1, sl
 80031bc:	00ca      	lsls	r2, r1, #3
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	4642      	mov	r2, r8
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031ca:	464b      	mov	r3, r9
 80031cc:	460a      	mov	r2, r1
 80031ce:	eb42 0303 	adc.w	r3, r2, r3
 80031d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80031de:	667a      	str	r2, [r7, #100]	@ 0x64
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031ec:	4649      	mov	r1, r9
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	4641      	mov	r1, r8
 80031f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f6:	4641      	mov	r1, r8
 80031f8:	008a      	lsls	r2, r1, #2
 80031fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031fe:	f7fd f83f 	bl	8000280 <__aeabi_uldivmod>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <UART_SetConfig+0x4e4>)
 8003208:	fba3 1302 	umull	r1, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2164      	movs	r1, #100	@ 0x64
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	3332      	adds	r3, #50	@ 0x32
 800321a:	4a08      	ldr	r2, [pc, #32]	@ (800323c <UART_SetConfig+0x4e4>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4422      	add	r2, r4
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003236:	46bd      	mov	sp, r7
 8003238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800323c:	51eb851f 	.word	0x51eb851f

08003240 <siprintf>:
 8003240:	b40e      	push	{r1, r2, r3}
 8003242:	b510      	push	{r4, lr}
 8003244:	b09d      	sub	sp, #116	@ 0x74
 8003246:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003248:	9002      	str	r0, [sp, #8]
 800324a:	9006      	str	r0, [sp, #24]
 800324c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003250:	480a      	ldr	r0, [pc, #40]	@ (800327c <siprintf+0x3c>)
 8003252:	9107      	str	r1, [sp, #28]
 8003254:	9104      	str	r1, [sp, #16]
 8003256:	490a      	ldr	r1, [pc, #40]	@ (8003280 <siprintf+0x40>)
 8003258:	f853 2b04 	ldr.w	r2, [r3], #4
 800325c:	9105      	str	r1, [sp, #20]
 800325e:	2400      	movs	r4, #0
 8003260:	a902      	add	r1, sp, #8
 8003262:	6800      	ldr	r0, [r0, #0]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003268:	f000 f994 	bl	8003594 <_svfiprintf_r>
 800326c:	9b02      	ldr	r3, [sp, #8]
 800326e:	701c      	strb	r4, [r3, #0]
 8003270:	b01d      	add	sp, #116	@ 0x74
 8003272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003276:	b003      	add	sp, #12
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000000c 	.word	0x2000000c
 8003280:	ffff0208 	.word	0xffff0208

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	@ (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000000c 	.word	0x2000000c

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	@ (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	@ (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	@ (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	@ (80032e4 <__libc_init_array+0x44>)
 80032b4:	f000 fc64 	bl	8003b80 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003c0c 	.word	0x08003c0c
 80032dc:	08003c0c 	.word	0x08003c0c
 80032e0:	08003c0c 	.word	0x08003c0c
 80032e4:	08003c10 	.word	0x08003c10

080032e8 <__retarget_lock_acquire_recursive>:
 80032e8:	4770      	bx	lr

080032ea <__retarget_lock_release_recursive>:
 80032ea:	4770      	bx	lr

080032ec <_free_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4605      	mov	r5, r0
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d041      	beq.n	8003378 <_free_r+0x8c>
 80032f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f8:	1f0c      	subs	r4, r1, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bfb8      	it	lt
 80032fe:	18e4      	addlt	r4, r4, r3
 8003300:	f000 f8e0 	bl	80034c4 <__malloc_lock>
 8003304:	4a1d      	ldr	r2, [pc, #116]	@ (800337c <_free_r+0x90>)
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	b933      	cbnz	r3, 8003318 <_free_r+0x2c>
 800330a:	6063      	str	r3, [r4, #4]
 800330c:	6014      	str	r4, [r2, #0]
 800330e:	4628      	mov	r0, r5
 8003310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003314:	f000 b8dc 	b.w	80034d0 <__malloc_unlock>
 8003318:	42a3      	cmp	r3, r4
 800331a:	d908      	bls.n	800332e <_free_r+0x42>
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	1821      	adds	r1, r4, r0
 8003320:	428b      	cmp	r3, r1
 8003322:	bf01      	itttt	eq
 8003324:	6819      	ldreq	r1, [r3, #0]
 8003326:	685b      	ldreq	r3, [r3, #4]
 8003328:	1809      	addeq	r1, r1, r0
 800332a:	6021      	streq	r1, [r4, #0]
 800332c:	e7ed      	b.n	800330a <_free_r+0x1e>
 800332e:	461a      	mov	r2, r3
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	b10b      	cbz	r3, 8003338 <_free_r+0x4c>
 8003334:	42a3      	cmp	r3, r4
 8003336:	d9fa      	bls.n	800332e <_free_r+0x42>
 8003338:	6811      	ldr	r1, [r2, #0]
 800333a:	1850      	adds	r0, r2, r1
 800333c:	42a0      	cmp	r0, r4
 800333e:	d10b      	bne.n	8003358 <_free_r+0x6c>
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	4401      	add	r1, r0
 8003344:	1850      	adds	r0, r2, r1
 8003346:	4283      	cmp	r3, r0
 8003348:	6011      	str	r1, [r2, #0]
 800334a:	d1e0      	bne.n	800330e <_free_r+0x22>
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	6053      	str	r3, [r2, #4]
 8003352:	4408      	add	r0, r1
 8003354:	6010      	str	r0, [r2, #0]
 8003356:	e7da      	b.n	800330e <_free_r+0x22>
 8003358:	d902      	bls.n	8003360 <_free_r+0x74>
 800335a:	230c      	movs	r3, #12
 800335c:	602b      	str	r3, [r5, #0]
 800335e:	e7d6      	b.n	800330e <_free_r+0x22>
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	1821      	adds	r1, r4, r0
 8003364:	428b      	cmp	r3, r1
 8003366:	bf04      	itt	eq
 8003368:	6819      	ldreq	r1, [r3, #0]
 800336a:	685b      	ldreq	r3, [r3, #4]
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	bf04      	itt	eq
 8003370:	1809      	addeq	r1, r1, r0
 8003372:	6021      	streq	r1, [r4, #0]
 8003374:	6054      	str	r4, [r2, #4]
 8003376:	e7ca      	b.n	800330e <_free_r+0x22>
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	200002ec 	.word	0x200002ec

08003380 <sbrk_aligned>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	4e0f      	ldr	r6, [pc, #60]	@ (80033c0 <sbrk_aligned+0x40>)
 8003384:	460c      	mov	r4, r1
 8003386:	6831      	ldr	r1, [r6, #0]
 8003388:	4605      	mov	r5, r0
 800338a:	b911      	cbnz	r1, 8003392 <sbrk_aligned+0x12>
 800338c:	f000 fba4 	bl	8003ad8 <_sbrk_r>
 8003390:	6030      	str	r0, [r6, #0]
 8003392:	4621      	mov	r1, r4
 8003394:	4628      	mov	r0, r5
 8003396:	f000 fb9f 	bl	8003ad8 <_sbrk_r>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	d103      	bne.n	80033a6 <sbrk_aligned+0x26>
 800339e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80033a2:	4620      	mov	r0, r4
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
 80033a6:	1cc4      	adds	r4, r0, #3
 80033a8:	f024 0403 	bic.w	r4, r4, #3
 80033ac:	42a0      	cmp	r0, r4
 80033ae:	d0f8      	beq.n	80033a2 <sbrk_aligned+0x22>
 80033b0:	1a21      	subs	r1, r4, r0
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 fb90 	bl	8003ad8 <_sbrk_r>
 80033b8:	3001      	adds	r0, #1
 80033ba:	d1f2      	bne.n	80033a2 <sbrk_aligned+0x22>
 80033bc:	e7ef      	b.n	800339e <sbrk_aligned+0x1e>
 80033be:	bf00      	nop
 80033c0:	200002e8 	.word	0x200002e8

080033c4 <_malloc_r>:
 80033c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c8:	1ccd      	adds	r5, r1, #3
 80033ca:	f025 0503 	bic.w	r5, r5, #3
 80033ce:	3508      	adds	r5, #8
 80033d0:	2d0c      	cmp	r5, #12
 80033d2:	bf38      	it	cc
 80033d4:	250c      	movcc	r5, #12
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	4606      	mov	r6, r0
 80033da:	db01      	blt.n	80033e0 <_malloc_r+0x1c>
 80033dc:	42a9      	cmp	r1, r5
 80033de:	d904      	bls.n	80033ea <_malloc_r+0x26>
 80033e0:	230c      	movs	r3, #12
 80033e2:	6033      	str	r3, [r6, #0]
 80033e4:	2000      	movs	r0, #0
 80033e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034c0 <_malloc_r+0xfc>
 80033ee:	f000 f869 	bl	80034c4 <__malloc_lock>
 80033f2:	f8d8 3000 	ldr.w	r3, [r8]
 80033f6:	461c      	mov	r4, r3
 80033f8:	bb44      	cbnz	r4, 800344c <_malloc_r+0x88>
 80033fa:	4629      	mov	r1, r5
 80033fc:	4630      	mov	r0, r6
 80033fe:	f7ff ffbf 	bl	8003380 <sbrk_aligned>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	4604      	mov	r4, r0
 8003406:	d158      	bne.n	80034ba <_malloc_r+0xf6>
 8003408:	f8d8 4000 	ldr.w	r4, [r8]
 800340c:	4627      	mov	r7, r4
 800340e:	2f00      	cmp	r7, #0
 8003410:	d143      	bne.n	800349a <_malloc_r+0xd6>
 8003412:	2c00      	cmp	r4, #0
 8003414:	d04b      	beq.n	80034ae <_malloc_r+0xea>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	4639      	mov	r1, r7
 800341a:	4630      	mov	r0, r6
 800341c:	eb04 0903 	add.w	r9, r4, r3
 8003420:	f000 fb5a 	bl	8003ad8 <_sbrk_r>
 8003424:	4581      	cmp	r9, r0
 8003426:	d142      	bne.n	80034ae <_malloc_r+0xea>
 8003428:	6821      	ldr	r1, [r4, #0]
 800342a:	1a6d      	subs	r5, r5, r1
 800342c:	4629      	mov	r1, r5
 800342e:	4630      	mov	r0, r6
 8003430:	f7ff ffa6 	bl	8003380 <sbrk_aligned>
 8003434:	3001      	adds	r0, #1
 8003436:	d03a      	beq.n	80034ae <_malloc_r+0xea>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	442b      	add	r3, r5
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	f8d8 3000 	ldr.w	r3, [r8]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	bb62      	cbnz	r2, 80034a0 <_malloc_r+0xdc>
 8003446:	f8c8 7000 	str.w	r7, [r8]
 800344a:	e00f      	b.n	800346c <_malloc_r+0xa8>
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	1b52      	subs	r2, r2, r5
 8003450:	d420      	bmi.n	8003494 <_malloc_r+0xd0>
 8003452:	2a0b      	cmp	r2, #11
 8003454:	d917      	bls.n	8003486 <_malloc_r+0xc2>
 8003456:	1961      	adds	r1, r4, r5
 8003458:	42a3      	cmp	r3, r4
 800345a:	6025      	str	r5, [r4, #0]
 800345c:	bf18      	it	ne
 800345e:	6059      	strne	r1, [r3, #4]
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	bf08      	it	eq
 8003464:	f8c8 1000 	streq.w	r1, [r8]
 8003468:	5162      	str	r2, [r4, r5]
 800346a:	604b      	str	r3, [r1, #4]
 800346c:	4630      	mov	r0, r6
 800346e:	f000 f82f 	bl	80034d0 <__malloc_unlock>
 8003472:	f104 000b 	add.w	r0, r4, #11
 8003476:	1d23      	adds	r3, r4, #4
 8003478:	f020 0007 	bic.w	r0, r0, #7
 800347c:	1ac2      	subs	r2, r0, r3
 800347e:	bf1c      	itt	ne
 8003480:	1a1b      	subne	r3, r3, r0
 8003482:	50a3      	strne	r3, [r4, r2]
 8003484:	e7af      	b.n	80033e6 <_malloc_r+0x22>
 8003486:	6862      	ldr	r2, [r4, #4]
 8003488:	42a3      	cmp	r3, r4
 800348a:	bf0c      	ite	eq
 800348c:	f8c8 2000 	streq.w	r2, [r8]
 8003490:	605a      	strne	r2, [r3, #4]
 8003492:	e7eb      	b.n	800346c <_malloc_r+0xa8>
 8003494:	4623      	mov	r3, r4
 8003496:	6864      	ldr	r4, [r4, #4]
 8003498:	e7ae      	b.n	80033f8 <_malloc_r+0x34>
 800349a:	463c      	mov	r4, r7
 800349c:	687f      	ldr	r7, [r7, #4]
 800349e:	e7b6      	b.n	800340e <_malloc_r+0x4a>
 80034a0:	461a      	mov	r2, r3
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	d1fb      	bne.n	80034a0 <_malloc_r+0xdc>
 80034a8:	2300      	movs	r3, #0
 80034aa:	6053      	str	r3, [r2, #4]
 80034ac:	e7de      	b.n	800346c <_malloc_r+0xa8>
 80034ae:	230c      	movs	r3, #12
 80034b0:	6033      	str	r3, [r6, #0]
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 f80c 	bl	80034d0 <__malloc_unlock>
 80034b8:	e794      	b.n	80033e4 <_malloc_r+0x20>
 80034ba:	6005      	str	r5, [r0, #0]
 80034bc:	e7d6      	b.n	800346c <_malloc_r+0xa8>
 80034be:	bf00      	nop
 80034c0:	200002ec 	.word	0x200002ec

080034c4 <__malloc_lock>:
 80034c4:	4801      	ldr	r0, [pc, #4]	@ (80034cc <__malloc_lock+0x8>)
 80034c6:	f7ff bf0f 	b.w	80032e8 <__retarget_lock_acquire_recursive>
 80034ca:	bf00      	nop
 80034cc:	200002e4 	.word	0x200002e4

080034d0 <__malloc_unlock>:
 80034d0:	4801      	ldr	r0, [pc, #4]	@ (80034d8 <__malloc_unlock+0x8>)
 80034d2:	f7ff bf0a 	b.w	80032ea <__retarget_lock_release_recursive>
 80034d6:	bf00      	nop
 80034d8:	200002e4 	.word	0x200002e4

080034dc <__ssputs_r>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	688e      	ldr	r6, [r1, #8]
 80034e2:	461f      	mov	r7, r3
 80034e4:	42be      	cmp	r6, r7
 80034e6:	680b      	ldr	r3, [r1, #0]
 80034e8:	4682      	mov	sl, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	4690      	mov	r8, r2
 80034ee:	d82d      	bhi.n	800354c <__ssputs_r+0x70>
 80034f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034f8:	d026      	beq.n	8003548 <__ssputs_r+0x6c>
 80034fa:	6965      	ldr	r5, [r4, #20]
 80034fc:	6909      	ldr	r1, [r1, #16]
 80034fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003502:	eba3 0901 	sub.w	r9, r3, r1
 8003506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800350a:	1c7b      	adds	r3, r7, #1
 800350c:	444b      	add	r3, r9
 800350e:	106d      	asrs	r5, r5, #1
 8003510:	429d      	cmp	r5, r3
 8003512:	bf38      	it	cc
 8003514:	461d      	movcc	r5, r3
 8003516:	0553      	lsls	r3, r2, #21
 8003518:	d527      	bpl.n	800356a <__ssputs_r+0x8e>
 800351a:	4629      	mov	r1, r5
 800351c:	f7ff ff52 	bl	80033c4 <_malloc_r>
 8003520:	4606      	mov	r6, r0
 8003522:	b360      	cbz	r0, 800357e <__ssputs_r+0xa2>
 8003524:	6921      	ldr	r1, [r4, #16]
 8003526:	464a      	mov	r2, r9
 8003528:	f000 fae6 	bl	8003af8 <memcpy>
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003536:	81a3      	strh	r3, [r4, #12]
 8003538:	6126      	str	r6, [r4, #16]
 800353a:	6165      	str	r5, [r4, #20]
 800353c:	444e      	add	r6, r9
 800353e:	eba5 0509 	sub.w	r5, r5, r9
 8003542:	6026      	str	r6, [r4, #0]
 8003544:	60a5      	str	r5, [r4, #8]
 8003546:	463e      	mov	r6, r7
 8003548:	42be      	cmp	r6, r7
 800354a:	d900      	bls.n	800354e <__ssputs_r+0x72>
 800354c:	463e      	mov	r6, r7
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	4632      	mov	r2, r6
 8003552:	4641      	mov	r1, r8
 8003554:	f000 faa6 	bl	8003aa4 <memmove>
 8003558:	68a3      	ldr	r3, [r4, #8]
 800355a:	1b9b      	subs	r3, r3, r6
 800355c:	60a3      	str	r3, [r4, #8]
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	4433      	add	r3, r6
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	2000      	movs	r0, #0
 8003566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356a:	462a      	mov	r2, r5
 800356c:	f000 fad2 	bl	8003b14 <_realloc_r>
 8003570:	4606      	mov	r6, r0
 8003572:	2800      	cmp	r0, #0
 8003574:	d1e0      	bne.n	8003538 <__ssputs_r+0x5c>
 8003576:	6921      	ldr	r1, [r4, #16]
 8003578:	4650      	mov	r0, sl
 800357a:	f7ff feb7 	bl	80032ec <_free_r>
 800357e:	230c      	movs	r3, #12
 8003580:	f8ca 3000 	str.w	r3, [sl]
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800358a:	81a3      	strh	r3, [r4, #12]
 800358c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003590:	e7e9      	b.n	8003566 <__ssputs_r+0x8a>
	...

08003594 <_svfiprintf_r>:
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	4698      	mov	r8, r3
 800359a:	898b      	ldrh	r3, [r1, #12]
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	b09d      	sub	sp, #116	@ 0x74
 80035a0:	4607      	mov	r7, r0
 80035a2:	460d      	mov	r5, r1
 80035a4:	4614      	mov	r4, r2
 80035a6:	d510      	bpl.n	80035ca <_svfiprintf_r+0x36>
 80035a8:	690b      	ldr	r3, [r1, #16]
 80035aa:	b973      	cbnz	r3, 80035ca <_svfiprintf_r+0x36>
 80035ac:	2140      	movs	r1, #64	@ 0x40
 80035ae:	f7ff ff09 	bl	80033c4 <_malloc_r>
 80035b2:	6028      	str	r0, [r5, #0]
 80035b4:	6128      	str	r0, [r5, #16]
 80035b6:	b930      	cbnz	r0, 80035c6 <_svfiprintf_r+0x32>
 80035b8:	230c      	movs	r3, #12
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035c0:	b01d      	add	sp, #116	@ 0x74
 80035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c6:	2340      	movs	r3, #64	@ 0x40
 80035c8:	616b      	str	r3, [r5, #20]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035ce:	2320      	movs	r3, #32
 80035d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80035d8:	2330      	movs	r3, #48	@ 0x30
 80035da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003778 <_svfiprintf_r+0x1e4>
 80035de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035e2:	f04f 0901 	mov.w	r9, #1
 80035e6:	4623      	mov	r3, r4
 80035e8:	469a      	mov	sl, r3
 80035ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ee:	b10a      	cbz	r2, 80035f4 <_svfiprintf_r+0x60>
 80035f0:	2a25      	cmp	r2, #37	@ 0x25
 80035f2:	d1f9      	bne.n	80035e8 <_svfiprintf_r+0x54>
 80035f4:	ebba 0b04 	subs.w	fp, sl, r4
 80035f8:	d00b      	beq.n	8003612 <_svfiprintf_r+0x7e>
 80035fa:	465b      	mov	r3, fp
 80035fc:	4622      	mov	r2, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	4638      	mov	r0, r7
 8003602:	f7ff ff6b 	bl	80034dc <__ssputs_r>
 8003606:	3001      	adds	r0, #1
 8003608:	f000 80a7 	beq.w	800375a <_svfiprintf_r+0x1c6>
 800360c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800360e:	445a      	add	r2, fp
 8003610:	9209      	str	r2, [sp, #36]	@ 0x24
 8003612:	f89a 3000 	ldrb.w	r3, [sl]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 809f 	beq.w	800375a <_svfiprintf_r+0x1c6>
 800361c:	2300      	movs	r3, #0
 800361e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003626:	f10a 0a01 	add.w	sl, sl, #1
 800362a:	9304      	str	r3, [sp, #16]
 800362c:	9307      	str	r3, [sp, #28]
 800362e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003632:	931a      	str	r3, [sp, #104]	@ 0x68
 8003634:	4654      	mov	r4, sl
 8003636:	2205      	movs	r2, #5
 8003638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800363c:	484e      	ldr	r0, [pc, #312]	@ (8003778 <_svfiprintf_r+0x1e4>)
 800363e:	f7fc fdcf 	bl	80001e0 <memchr>
 8003642:	9a04      	ldr	r2, [sp, #16]
 8003644:	b9d8      	cbnz	r0, 800367e <_svfiprintf_r+0xea>
 8003646:	06d0      	lsls	r0, r2, #27
 8003648:	bf44      	itt	mi
 800364a:	2320      	movmi	r3, #32
 800364c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003650:	0711      	lsls	r1, r2, #28
 8003652:	bf44      	itt	mi
 8003654:	232b      	movmi	r3, #43	@ 0x2b
 8003656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800365a:	f89a 3000 	ldrb.w	r3, [sl]
 800365e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003660:	d015      	beq.n	800368e <_svfiprintf_r+0xfa>
 8003662:	9a07      	ldr	r2, [sp, #28]
 8003664:	4654      	mov	r4, sl
 8003666:	2000      	movs	r0, #0
 8003668:	f04f 0c0a 	mov.w	ip, #10
 800366c:	4621      	mov	r1, r4
 800366e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003672:	3b30      	subs	r3, #48	@ 0x30
 8003674:	2b09      	cmp	r3, #9
 8003676:	d94b      	bls.n	8003710 <_svfiprintf_r+0x17c>
 8003678:	b1b0      	cbz	r0, 80036a8 <_svfiprintf_r+0x114>
 800367a:	9207      	str	r2, [sp, #28]
 800367c:	e014      	b.n	80036a8 <_svfiprintf_r+0x114>
 800367e:	eba0 0308 	sub.w	r3, r0, r8
 8003682:	fa09 f303 	lsl.w	r3, r9, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	9304      	str	r3, [sp, #16]
 800368a:	46a2      	mov	sl, r4
 800368c:	e7d2      	b.n	8003634 <_svfiprintf_r+0xa0>
 800368e:	9b03      	ldr	r3, [sp, #12]
 8003690:	1d19      	adds	r1, r3, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	9103      	str	r1, [sp, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	bfbb      	ittet	lt
 800369a:	425b      	neglt	r3, r3
 800369c:	f042 0202 	orrlt.w	r2, r2, #2
 80036a0:	9307      	strge	r3, [sp, #28]
 80036a2:	9307      	strlt	r3, [sp, #28]
 80036a4:	bfb8      	it	lt
 80036a6:	9204      	strlt	r2, [sp, #16]
 80036a8:	7823      	ldrb	r3, [r4, #0]
 80036aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80036ac:	d10a      	bne.n	80036c4 <_svfiprintf_r+0x130>
 80036ae:	7863      	ldrb	r3, [r4, #1]
 80036b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036b2:	d132      	bne.n	800371a <_svfiprintf_r+0x186>
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	1d1a      	adds	r2, r3, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	9203      	str	r2, [sp, #12]
 80036bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036c0:	3402      	adds	r4, #2
 80036c2:	9305      	str	r3, [sp, #20]
 80036c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003788 <_svfiprintf_r+0x1f4>
 80036c8:	7821      	ldrb	r1, [r4, #0]
 80036ca:	2203      	movs	r2, #3
 80036cc:	4650      	mov	r0, sl
 80036ce:	f7fc fd87 	bl	80001e0 <memchr>
 80036d2:	b138      	cbz	r0, 80036e4 <_svfiprintf_r+0x150>
 80036d4:	9b04      	ldr	r3, [sp, #16]
 80036d6:	eba0 000a 	sub.w	r0, r0, sl
 80036da:	2240      	movs	r2, #64	@ 0x40
 80036dc:	4082      	lsls	r2, r0
 80036de:	4313      	orrs	r3, r2
 80036e0:	3401      	adds	r4, #1
 80036e2:	9304      	str	r3, [sp, #16]
 80036e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e8:	4824      	ldr	r0, [pc, #144]	@ (800377c <_svfiprintf_r+0x1e8>)
 80036ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036ee:	2206      	movs	r2, #6
 80036f0:	f7fc fd76 	bl	80001e0 <memchr>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d036      	beq.n	8003766 <_svfiprintf_r+0x1d2>
 80036f8:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <_svfiprintf_r+0x1ec>)
 80036fa:	bb1b      	cbnz	r3, 8003744 <_svfiprintf_r+0x1b0>
 80036fc:	9b03      	ldr	r3, [sp, #12]
 80036fe:	3307      	adds	r3, #7
 8003700:	f023 0307 	bic.w	r3, r3, #7
 8003704:	3308      	adds	r3, #8
 8003706:	9303      	str	r3, [sp, #12]
 8003708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800370a:	4433      	add	r3, r6
 800370c:	9309      	str	r3, [sp, #36]	@ 0x24
 800370e:	e76a      	b.n	80035e6 <_svfiprintf_r+0x52>
 8003710:	fb0c 3202 	mla	r2, ip, r2, r3
 8003714:	460c      	mov	r4, r1
 8003716:	2001      	movs	r0, #1
 8003718:	e7a8      	b.n	800366c <_svfiprintf_r+0xd8>
 800371a:	2300      	movs	r3, #0
 800371c:	3401      	adds	r4, #1
 800371e:	9305      	str	r3, [sp, #20]
 8003720:	4619      	mov	r1, r3
 8003722:	f04f 0c0a 	mov.w	ip, #10
 8003726:	4620      	mov	r0, r4
 8003728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800372c:	3a30      	subs	r2, #48	@ 0x30
 800372e:	2a09      	cmp	r2, #9
 8003730:	d903      	bls.n	800373a <_svfiprintf_r+0x1a6>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0c6      	beq.n	80036c4 <_svfiprintf_r+0x130>
 8003736:	9105      	str	r1, [sp, #20]
 8003738:	e7c4      	b.n	80036c4 <_svfiprintf_r+0x130>
 800373a:	fb0c 2101 	mla	r1, ip, r1, r2
 800373e:	4604      	mov	r4, r0
 8003740:	2301      	movs	r3, #1
 8003742:	e7f0      	b.n	8003726 <_svfiprintf_r+0x192>
 8003744:	ab03      	add	r3, sp, #12
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	462a      	mov	r2, r5
 800374a:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <_svfiprintf_r+0x1f0>)
 800374c:	a904      	add	r1, sp, #16
 800374e:	4638      	mov	r0, r7
 8003750:	f3af 8000 	nop.w
 8003754:	1c42      	adds	r2, r0, #1
 8003756:	4606      	mov	r6, r0
 8003758:	d1d6      	bne.n	8003708 <_svfiprintf_r+0x174>
 800375a:	89ab      	ldrh	r3, [r5, #12]
 800375c:	065b      	lsls	r3, r3, #25
 800375e:	f53f af2d 	bmi.w	80035bc <_svfiprintf_r+0x28>
 8003762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003764:	e72c      	b.n	80035c0 <_svfiprintf_r+0x2c>
 8003766:	ab03      	add	r3, sp, #12
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	462a      	mov	r2, r5
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <_svfiprintf_r+0x1f0>)
 800376e:	a904      	add	r1, sp, #16
 8003770:	4638      	mov	r0, r7
 8003772:	f000 f879 	bl	8003868 <_printf_i>
 8003776:	e7ed      	b.n	8003754 <_svfiprintf_r+0x1c0>
 8003778:	08003bd0 	.word	0x08003bd0
 800377c:	08003bda 	.word	0x08003bda
 8003780:	00000000 	.word	0x00000000
 8003784:	080034dd 	.word	0x080034dd
 8003788:	08003bd6 	.word	0x08003bd6

0800378c <_printf_common>:
 800378c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003790:	4616      	mov	r6, r2
 8003792:	4698      	mov	r8, r3
 8003794:	688a      	ldr	r2, [r1, #8]
 8003796:	690b      	ldr	r3, [r1, #16]
 8003798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800379c:	4293      	cmp	r3, r2
 800379e:	bfb8      	it	lt
 80037a0:	4613      	movlt	r3, r2
 80037a2:	6033      	str	r3, [r6, #0]
 80037a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037a8:	4607      	mov	r7, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	b10a      	cbz	r2, 80037b2 <_printf_common+0x26>
 80037ae:	3301      	adds	r3, #1
 80037b0:	6033      	str	r3, [r6, #0]
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	0699      	lsls	r1, r3, #26
 80037b6:	bf42      	ittt	mi
 80037b8:	6833      	ldrmi	r3, [r6, #0]
 80037ba:	3302      	addmi	r3, #2
 80037bc:	6033      	strmi	r3, [r6, #0]
 80037be:	6825      	ldr	r5, [r4, #0]
 80037c0:	f015 0506 	ands.w	r5, r5, #6
 80037c4:	d106      	bne.n	80037d4 <_printf_common+0x48>
 80037c6:	f104 0a19 	add.w	sl, r4, #25
 80037ca:	68e3      	ldr	r3, [r4, #12]
 80037cc:	6832      	ldr	r2, [r6, #0]
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	42ab      	cmp	r3, r5
 80037d2:	dc26      	bgt.n	8003822 <_printf_common+0x96>
 80037d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	3b00      	subs	r3, #0
 80037dc:	bf18      	it	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	0692      	lsls	r2, r2, #26
 80037e2:	d42b      	bmi.n	800383c <_printf_common+0xb0>
 80037e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037e8:	4641      	mov	r1, r8
 80037ea:	4638      	mov	r0, r7
 80037ec:	47c8      	blx	r9
 80037ee:	3001      	adds	r0, #1
 80037f0:	d01e      	beq.n	8003830 <_printf_common+0xa4>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	6922      	ldr	r2, [r4, #16]
 80037f6:	f003 0306 	and.w	r3, r3, #6
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf02      	ittt	eq
 80037fe:	68e5      	ldreq	r5, [r4, #12]
 8003800:	6833      	ldreq	r3, [r6, #0]
 8003802:	1aed      	subeq	r5, r5, r3
 8003804:	68a3      	ldr	r3, [r4, #8]
 8003806:	bf0c      	ite	eq
 8003808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800380c:	2500      	movne	r5, #0
 800380e:	4293      	cmp	r3, r2
 8003810:	bfc4      	itt	gt
 8003812:	1a9b      	subgt	r3, r3, r2
 8003814:	18ed      	addgt	r5, r5, r3
 8003816:	2600      	movs	r6, #0
 8003818:	341a      	adds	r4, #26
 800381a:	42b5      	cmp	r5, r6
 800381c:	d11a      	bne.n	8003854 <_printf_common+0xc8>
 800381e:	2000      	movs	r0, #0
 8003820:	e008      	b.n	8003834 <_printf_common+0xa8>
 8003822:	2301      	movs	r3, #1
 8003824:	4652      	mov	r2, sl
 8003826:	4641      	mov	r1, r8
 8003828:	4638      	mov	r0, r7
 800382a:	47c8      	blx	r9
 800382c:	3001      	adds	r0, #1
 800382e:	d103      	bne.n	8003838 <_printf_common+0xac>
 8003830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003838:	3501      	adds	r5, #1
 800383a:	e7c6      	b.n	80037ca <_printf_common+0x3e>
 800383c:	18e1      	adds	r1, r4, r3
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	2030      	movs	r0, #48	@ 0x30
 8003842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003846:	4422      	add	r2, r4
 8003848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800384c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003850:	3302      	adds	r3, #2
 8003852:	e7c7      	b.n	80037e4 <_printf_common+0x58>
 8003854:	2301      	movs	r3, #1
 8003856:	4622      	mov	r2, r4
 8003858:	4641      	mov	r1, r8
 800385a:	4638      	mov	r0, r7
 800385c:	47c8      	blx	r9
 800385e:	3001      	adds	r0, #1
 8003860:	d0e6      	beq.n	8003830 <_printf_common+0xa4>
 8003862:	3601      	adds	r6, #1
 8003864:	e7d9      	b.n	800381a <_printf_common+0x8e>
	...

08003868 <_printf_i>:
 8003868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	7e0f      	ldrb	r7, [r1, #24]
 800386e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003870:	2f78      	cmp	r7, #120	@ 0x78
 8003872:	4691      	mov	r9, r2
 8003874:	4680      	mov	r8, r0
 8003876:	460c      	mov	r4, r1
 8003878:	469a      	mov	sl, r3
 800387a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800387e:	d807      	bhi.n	8003890 <_printf_i+0x28>
 8003880:	2f62      	cmp	r7, #98	@ 0x62
 8003882:	d80a      	bhi.n	800389a <_printf_i+0x32>
 8003884:	2f00      	cmp	r7, #0
 8003886:	f000 80d1 	beq.w	8003a2c <_printf_i+0x1c4>
 800388a:	2f58      	cmp	r7, #88	@ 0x58
 800388c:	f000 80b8 	beq.w	8003a00 <_printf_i+0x198>
 8003890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003898:	e03a      	b.n	8003910 <_printf_i+0xa8>
 800389a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800389e:	2b15      	cmp	r3, #21
 80038a0:	d8f6      	bhi.n	8003890 <_printf_i+0x28>
 80038a2:	a101      	add	r1, pc, #4	@ (adr r1, 80038a8 <_printf_i+0x40>)
 80038a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a8:	08003901 	.word	0x08003901
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003891 	.word	0x08003891
 80038b4:	08003891 	.word	0x08003891
 80038b8:	08003891 	.word	0x08003891
 80038bc:	08003891 	.word	0x08003891
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003891 	.word	0x08003891
 80038c8:	08003891 	.word	0x08003891
 80038cc:	08003891 	.word	0x08003891
 80038d0:	08003891 	.word	0x08003891
 80038d4:	08003a13 	.word	0x08003a13
 80038d8:	0800393f 	.word	0x0800393f
 80038dc:	080039cd 	.word	0x080039cd
 80038e0:	08003891 	.word	0x08003891
 80038e4:	08003891 	.word	0x08003891
 80038e8:	08003a35 	.word	0x08003a35
 80038ec:	08003891 	.word	0x08003891
 80038f0:	0800393f 	.word	0x0800393f
 80038f4:	08003891 	.word	0x08003891
 80038f8:	08003891 	.word	0x08003891
 80038fc:	080039d5 	.word	0x080039d5
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6032      	str	r2, [r6, #0]
 8003908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800390c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003910:	2301      	movs	r3, #1
 8003912:	e09c      	b.n	8003a4e <_printf_i+0x1e6>
 8003914:	6833      	ldr	r3, [r6, #0]
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1d19      	adds	r1, r3, #4
 800391a:	6031      	str	r1, [r6, #0]
 800391c:	0606      	lsls	r6, r0, #24
 800391e:	d501      	bpl.n	8003924 <_printf_i+0xbc>
 8003920:	681d      	ldr	r5, [r3, #0]
 8003922:	e003      	b.n	800392c <_printf_i+0xc4>
 8003924:	0645      	lsls	r5, r0, #25
 8003926:	d5fb      	bpl.n	8003920 <_printf_i+0xb8>
 8003928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800392c:	2d00      	cmp	r5, #0
 800392e:	da03      	bge.n	8003938 <_printf_i+0xd0>
 8003930:	232d      	movs	r3, #45	@ 0x2d
 8003932:	426d      	negs	r5, r5
 8003934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003938:	4858      	ldr	r0, [pc, #352]	@ (8003a9c <_printf_i+0x234>)
 800393a:	230a      	movs	r3, #10
 800393c:	e011      	b.n	8003962 <_printf_i+0xfa>
 800393e:	6821      	ldr	r1, [r4, #0]
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	0608      	lsls	r0, r1, #24
 8003944:	f853 5b04 	ldr.w	r5, [r3], #4
 8003948:	d402      	bmi.n	8003950 <_printf_i+0xe8>
 800394a:	0649      	lsls	r1, r1, #25
 800394c:	bf48      	it	mi
 800394e:	b2ad      	uxthmi	r5, r5
 8003950:	2f6f      	cmp	r7, #111	@ 0x6f
 8003952:	4852      	ldr	r0, [pc, #328]	@ (8003a9c <_printf_i+0x234>)
 8003954:	6033      	str	r3, [r6, #0]
 8003956:	bf14      	ite	ne
 8003958:	230a      	movne	r3, #10
 800395a:	2308      	moveq	r3, #8
 800395c:	2100      	movs	r1, #0
 800395e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003962:	6866      	ldr	r6, [r4, #4]
 8003964:	60a6      	str	r6, [r4, #8]
 8003966:	2e00      	cmp	r6, #0
 8003968:	db05      	blt.n	8003976 <_printf_i+0x10e>
 800396a:	6821      	ldr	r1, [r4, #0]
 800396c:	432e      	orrs	r6, r5
 800396e:	f021 0104 	bic.w	r1, r1, #4
 8003972:	6021      	str	r1, [r4, #0]
 8003974:	d04b      	beq.n	8003a0e <_printf_i+0x1a6>
 8003976:	4616      	mov	r6, r2
 8003978:	fbb5 f1f3 	udiv	r1, r5, r3
 800397c:	fb03 5711 	mls	r7, r3, r1, r5
 8003980:	5dc7      	ldrb	r7, [r0, r7]
 8003982:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003986:	462f      	mov	r7, r5
 8003988:	42bb      	cmp	r3, r7
 800398a:	460d      	mov	r5, r1
 800398c:	d9f4      	bls.n	8003978 <_printf_i+0x110>
 800398e:	2b08      	cmp	r3, #8
 8003990:	d10b      	bne.n	80039aa <_printf_i+0x142>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	07df      	lsls	r7, r3, #31
 8003996:	d508      	bpl.n	80039aa <_printf_i+0x142>
 8003998:	6923      	ldr	r3, [r4, #16]
 800399a:	6861      	ldr	r1, [r4, #4]
 800399c:	4299      	cmp	r1, r3
 800399e:	bfde      	ittt	le
 80039a0:	2330      	movle	r3, #48	@ 0x30
 80039a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80039aa:	1b92      	subs	r2, r2, r6
 80039ac:	6122      	str	r2, [r4, #16]
 80039ae:	f8cd a000 	str.w	sl, [sp]
 80039b2:	464b      	mov	r3, r9
 80039b4:	aa03      	add	r2, sp, #12
 80039b6:	4621      	mov	r1, r4
 80039b8:	4640      	mov	r0, r8
 80039ba:	f7ff fee7 	bl	800378c <_printf_common>
 80039be:	3001      	adds	r0, #1
 80039c0:	d14a      	bne.n	8003a58 <_printf_i+0x1f0>
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039c6:	b004      	add	sp, #16
 80039c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	f043 0320 	orr.w	r3, r3, #32
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	4832      	ldr	r0, [pc, #200]	@ (8003aa0 <_printf_i+0x238>)
 80039d6:	2778      	movs	r7, #120	@ 0x78
 80039d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	6831      	ldr	r1, [r6, #0]
 80039e0:	061f      	lsls	r7, r3, #24
 80039e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80039e6:	d402      	bmi.n	80039ee <_printf_i+0x186>
 80039e8:	065f      	lsls	r7, r3, #25
 80039ea:	bf48      	it	mi
 80039ec:	b2ad      	uxthmi	r5, r5
 80039ee:	6031      	str	r1, [r6, #0]
 80039f0:	07d9      	lsls	r1, r3, #31
 80039f2:	bf44      	itt	mi
 80039f4:	f043 0320 	orrmi.w	r3, r3, #32
 80039f8:	6023      	strmi	r3, [r4, #0]
 80039fa:	b11d      	cbz	r5, 8003a04 <_printf_i+0x19c>
 80039fc:	2310      	movs	r3, #16
 80039fe:	e7ad      	b.n	800395c <_printf_i+0xf4>
 8003a00:	4826      	ldr	r0, [pc, #152]	@ (8003a9c <_printf_i+0x234>)
 8003a02:	e7e9      	b.n	80039d8 <_printf_i+0x170>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f023 0320 	bic.w	r3, r3, #32
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	e7f6      	b.n	80039fc <_printf_i+0x194>
 8003a0e:	4616      	mov	r6, r2
 8003a10:	e7bd      	b.n	800398e <_printf_i+0x126>
 8003a12:	6833      	ldr	r3, [r6, #0]
 8003a14:	6825      	ldr	r5, [r4, #0]
 8003a16:	6961      	ldr	r1, [r4, #20]
 8003a18:	1d18      	adds	r0, r3, #4
 8003a1a:	6030      	str	r0, [r6, #0]
 8003a1c:	062e      	lsls	r6, r5, #24
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	d501      	bpl.n	8003a26 <_printf_i+0x1be>
 8003a22:	6019      	str	r1, [r3, #0]
 8003a24:	e002      	b.n	8003a2c <_printf_i+0x1c4>
 8003a26:	0668      	lsls	r0, r5, #25
 8003a28:	d5fb      	bpl.n	8003a22 <_printf_i+0x1ba>
 8003a2a:	8019      	strh	r1, [r3, #0]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	4616      	mov	r6, r2
 8003a32:	e7bc      	b.n	80039ae <_printf_i+0x146>
 8003a34:	6833      	ldr	r3, [r6, #0]
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	6032      	str	r2, [r6, #0]
 8003a3a:	681e      	ldr	r6, [r3, #0]
 8003a3c:	6862      	ldr	r2, [r4, #4]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4630      	mov	r0, r6
 8003a42:	f7fc fbcd 	bl	80001e0 <memchr>
 8003a46:	b108      	cbz	r0, 8003a4c <_printf_i+0x1e4>
 8003a48:	1b80      	subs	r0, r0, r6
 8003a4a:	6060      	str	r0, [r4, #4]
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	2300      	movs	r3, #0
 8003a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a56:	e7aa      	b.n	80039ae <_printf_i+0x146>
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	4640      	mov	r0, r8
 8003a60:	47d0      	blx	sl
 8003a62:	3001      	adds	r0, #1
 8003a64:	d0ad      	beq.n	80039c2 <_printf_i+0x15a>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	079b      	lsls	r3, r3, #30
 8003a6a:	d413      	bmi.n	8003a94 <_printf_i+0x22c>
 8003a6c:	68e0      	ldr	r0, [r4, #12]
 8003a6e:	9b03      	ldr	r3, [sp, #12]
 8003a70:	4298      	cmp	r0, r3
 8003a72:	bfb8      	it	lt
 8003a74:	4618      	movlt	r0, r3
 8003a76:	e7a6      	b.n	80039c6 <_printf_i+0x15e>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4640      	mov	r0, r8
 8003a80:	47d0      	blx	sl
 8003a82:	3001      	adds	r0, #1
 8003a84:	d09d      	beq.n	80039c2 <_printf_i+0x15a>
 8003a86:	3501      	adds	r5, #1
 8003a88:	68e3      	ldr	r3, [r4, #12]
 8003a8a:	9903      	ldr	r1, [sp, #12]
 8003a8c:	1a5b      	subs	r3, r3, r1
 8003a8e:	42ab      	cmp	r3, r5
 8003a90:	dcf2      	bgt.n	8003a78 <_printf_i+0x210>
 8003a92:	e7eb      	b.n	8003a6c <_printf_i+0x204>
 8003a94:	2500      	movs	r5, #0
 8003a96:	f104 0619 	add.w	r6, r4, #25
 8003a9a:	e7f5      	b.n	8003a88 <_printf_i+0x220>
 8003a9c:	08003be1 	.word	0x08003be1
 8003aa0:	08003bf2 	.word	0x08003bf2

08003aa4 <memmove>:
 8003aa4:	4288      	cmp	r0, r1
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	eb01 0402 	add.w	r4, r1, r2
 8003aac:	d902      	bls.n	8003ab4 <memmove+0x10>
 8003aae:	4284      	cmp	r4, r0
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	d807      	bhi.n	8003ac4 <memmove+0x20>
 8003ab4:	1e43      	subs	r3, r0, #1
 8003ab6:	42a1      	cmp	r1, r4
 8003ab8:	d008      	beq.n	8003acc <memmove+0x28>
 8003aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ac2:	e7f8      	b.n	8003ab6 <memmove+0x12>
 8003ac4:	4402      	add	r2, r0
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	428a      	cmp	r2, r1
 8003aca:	d100      	bne.n	8003ace <memmove+0x2a>
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ad6:	e7f7      	b.n	8003ac8 <memmove+0x24>

08003ad8 <_sbrk_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d06      	ldr	r5, [pc, #24]	@ (8003af4 <_sbrk_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fd f93a 	bl	8000d5c <_sbrk>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_sbrk_r+0x1a>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_sbrk_r+0x1a>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	200002e0 	.word	0x200002e0

08003af8 <memcpy>:
 8003af8:	440a      	add	r2, r1
 8003afa:	4291      	cmp	r1, r2
 8003afc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003b00:	d100      	bne.n	8003b04 <memcpy+0xc>
 8003b02:	4770      	bx	lr
 8003b04:	b510      	push	{r4, lr}
 8003b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	d1f9      	bne.n	8003b06 <memcpy+0xe>
 8003b12:	bd10      	pop	{r4, pc}

08003b14 <_realloc_r>:
 8003b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b18:	4607      	mov	r7, r0
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	b921      	cbnz	r1, 8003b2a <_realloc_r+0x16>
 8003b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b24:	4611      	mov	r1, r2
 8003b26:	f7ff bc4d 	b.w	80033c4 <_malloc_r>
 8003b2a:	b92a      	cbnz	r2, 8003b38 <_realloc_r+0x24>
 8003b2c:	f7ff fbde 	bl	80032ec <_free_r>
 8003b30:	4625      	mov	r5, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b38:	f000 f81a 	bl	8003b70 <_malloc_usable_size_r>
 8003b3c:	4284      	cmp	r4, r0
 8003b3e:	4606      	mov	r6, r0
 8003b40:	d802      	bhi.n	8003b48 <_realloc_r+0x34>
 8003b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b46:	d8f4      	bhi.n	8003b32 <_realloc_r+0x1e>
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f7ff fc3a 	bl	80033c4 <_malloc_r>
 8003b50:	4680      	mov	r8, r0
 8003b52:	b908      	cbnz	r0, 8003b58 <_realloc_r+0x44>
 8003b54:	4645      	mov	r5, r8
 8003b56:	e7ec      	b.n	8003b32 <_realloc_r+0x1e>
 8003b58:	42b4      	cmp	r4, r6
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	bf28      	it	cs
 8003b60:	4632      	movcs	r2, r6
 8003b62:	f7ff ffc9 	bl	8003af8 <memcpy>
 8003b66:	4629      	mov	r1, r5
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f7ff fbbf 	bl	80032ec <_free_r>
 8003b6e:	e7f1      	b.n	8003b54 <_realloc_r+0x40>

08003b70 <_malloc_usable_size_r>:
 8003b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b74:	1f18      	subs	r0, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bfbc      	itt	lt
 8003b7a:	580b      	ldrlt	r3, [r1, r0]
 8003b7c:	18c0      	addlt	r0, r0, r3
 8003b7e:	4770      	bx	lr

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
