
CAN_RX_COMBINE_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000443c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800467c  0800467c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004680  08004680  00005680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004684  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000238  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000294  20000294  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4c5  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3b  00000000  00000000  00012551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  00014190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084b  00000000  00000000  00014c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fe2  00000000  00000000  0001547b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbe8  00000000  00000000  0003645d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7d24  00000000  00000000  00043045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ad69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003184  00000000  00000000  0010adac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0010df30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045b4 	.word	0x080045b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080045b4 	.word	0x080045b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LcdInit>:

#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;

void LcdInit(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80005b0:	2014      	movs	r0, #20
 80005b2:	f000 fd9b 	bl	80010ec <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005b6:	2103      	movs	r1, #3
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f82f 	bl	800061c <LcdWriteNibble>
	HAL_Delay(5);
 80005be:	2005      	movs	r0, #5
 80005c0:	f000 fd94 	bl	80010ec <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005c4:	2103      	movs	r1, #3
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f828 	bl	800061c <LcdWriteNibble>
	HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fd8d 	bl	80010ec <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005d2:	2103      	movs	r1, #3
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f821 	bl	800061c <LcdWriteNibble>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fd86 	bl	80010ec <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 80005e0:	2102      	movs	r1, #2
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f81a 	bl	800061c <LcdWriteNibble>
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fd7f 	bl	80010ec <HAL_Delay>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 80005ee:	2128      	movs	r1, #40	@ 0x28
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 f859 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 80005f6:	2108      	movs	r1, #8
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f855 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 80005fe:	2101      	movs	r1, #1
 8000600:	2000      	movs	r0, #0
 8000602:	f000 f851 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8000606:	2106      	movs	r1, #6
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f84d 	bl	80006a8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 800060e:	210c      	movs	r1, #12
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f849 	bl	80006a8 <LcdWriteByte>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b01      	cmp	r3, #1
 8000630:	bf0c      	ite	eq
 8000632:	2301      	moveq	r3, #1
 8000634:	2300      	movne	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 800063a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	b25a      	sxtb	r2, r3
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000646:	4313      	orrs	r3, r2
 8000648:	b25b      	sxtb	r3, r3
 800064a:	f043 030c 	orr.w	r3, r3, #12
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	73bb      	strb	r3, [r7, #14]
	//I2CWrite(LCD_SLAVE_ADDR_W, val);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t *)&val, sizeof(val), HAL_MAX_DELAY);
 8000654:	f107 020e 	add.w	r2, r7, #14
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	214e      	movs	r1, #78	@ 0x4e
 8000662:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <LcdWriteNibble+0x88>)
 8000664:	f001 ff08 	bl	8002478 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fd3f 	bl	80010ec <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 800066e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	b25a      	sxtb	r2, r3
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	4313      	orrs	r3, r2
 800067c:	b25b      	sxtb	r3, r3
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	b25b      	sxtb	r3, r3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73bb      	strb	r3, [r7, #14]
	//I2CWrite(LCD_SLAVE_ADDR_W, val);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t *)&val, sizeof(val), HAL_MAX_DELAY);
 8000688:	f107 020e 	add.w	r2, r7, #14
 800068c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	214e      	movs	r1, #78	@ 0x4e
 8000696:	4803      	ldr	r0, [pc, #12]	@ (80006a4 <LcdWriteNibble+0x88>)
 8000698:	f001 feee 	bl	8002478 <HAL_I2C_Master_Transmit>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffa5 	bl	800061c <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 80006d2:	7bba      	ldrb	r2, [r7, #14]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff9f 	bl	800061c <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fd04 	bl	80010ec <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ffd3 	bl	80006a8 <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e00a      	b.n	800071e <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ffc8 	bl	80006a8 <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1ee      	bne.n	8000708 <LcdPuts+0x1c>
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t Temp_Value = 0;
uint8_t Hum_Value = 0;
volatile uint8_t dataReady = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	f107 0214 	add.w	r2, r7, #20
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 ff12 	bl	8001570 <HAL_CAN_GetRxMessage>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d121      	bne.n	8000796 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	    {
	        if (RxHeader.DLC == 8)
 8000752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000754:	2b08      	cmp	r3, #8
 8000756:	d11e      	bne.n	8000796 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	        {

	            LDR_Value  = (RxData[0] << 8) | RxData[1];
 8000758:	7b3b      	ldrb	r3, [r7, #12]
 800075a:	b21b      	sxth	r3, r3
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	b21a      	sxth	r2, r3
 8000760:	7b7b      	ldrb	r3, [r7, #13]
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21b      	sxth	r3, r3
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800076c:	801a      	strh	r2, [r3, #0]
	            MQ5_Value  = (RxData[2] << 8) | RxData[3];
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	b21b      	sxth	r3, r3
 8000772:	021b      	lsls	r3, r3, #8
 8000774:	b21a      	sxth	r2, r3
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	b21b      	sxth	r3, r3
 800077a:	4313      	orrs	r3, r2
 800077c:	b21b      	sxth	r3, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000782:	801a      	strh	r2, [r3, #0]
	            Temp_Value = (RxData[4] << 8) | RxData[5];
 8000784:	7c7a      	ldrb	r2, [r7, #17]
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000788:	701a      	strb	r2, [r3, #0]
	            Hum_Value  = (RxData[6] << 8) | RxData[7];
 800078a:	7cfa      	ldrb	r2, [r7, #19]
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800078e:	701a      	strb	r2, [r3, #0]
	            dataReady  = 1;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
	        }
	    }
}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	@ 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000013c 	.word	0x2000013c
 80007a4:	2000013e 	.word	0x2000013e
 80007a8:	20000140 	.word	0x20000140
 80007ac:	20000141 	.word	0x20000141
 80007b0:	20000142 	.word	0x20000142

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b0ad      	sub	sp, #180	@ 0xb4
 80007b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fc25 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f8ff 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 fa15 	bl	8000bf0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007c6:	f000 f965 	bl	8000a94 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80007ca:	f000 f9e7 	bl	8000b9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007ce:	f000 f9b7 	bl	8000b40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80007d2:	486d      	ldr	r0, [pc, #436]	@ (8000988 <main+0x1d4>)
 80007d4:	f000 fe88 	bl	80014e8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007d8:	2102      	movs	r1, #2
 80007da:	486b      	ldr	r0, [pc, #428]	@ (8000988 <main+0x1d4>)
 80007dc:	f000 ffea 	bl	80017b4 <HAL_CAN_ActivateNotification>
  LcdInit();
 80007e0:	f7ff fee4 	bl	80005ac <LcdInit>
  HAL_Delay(100);
 80007e4:	2064      	movs	r0, #100	@ 0x64
 80007e6:	f000 fc81 	bl	80010ec <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	  if (dataReady)
 80007ea:	4b68      	ldr	r3, [pc, #416]	@ (800098c <main+0x1d8>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f000 80c5 	beq.w	8000980 <main+0x1cc>
	      char lcdMsgLine1[32];
	      char lcdMsgLine2[32];
	      char uartMsg[100];

	      // Line 1: Display temperature and humidity
	      sprintf(lcdMsgLine1, "T:%uC H:%u%%", Temp_Value, Hum_Value);
 80007f6:	4b66      	ldr	r3, [pc, #408]	@ (8000990 <main+0x1dc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b65      	ldr	r3, [pc, #404]	@ (8000994 <main+0x1e0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4638      	mov	r0, r7
 8000802:	4965      	ldr	r1, [pc, #404]	@ (8000998 <main+0x1e4>)
 8000804:	f003 fa36 	bl	8003c74 <siprintf>
	      sprintf(uartMsg, "LDR: %u  MQ5: %u  Temp: %uC  Humidity: %u%%\r\n",
 8000808:	4b64      	ldr	r3, [pc, #400]	@ (800099c <main+0x1e8>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4b64      	ldr	r3, [pc, #400]	@ (80009a0 <main+0x1ec>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	461c      	mov	r4, r3
 8000814:	4b5e      	ldr	r3, [pc, #376]	@ (8000990 <main+0x1dc>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b5e      	ldr	r3, [pc, #376]	@ (8000994 <main+0x1e0>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	9200      	str	r2, [sp, #0]
 8000826:	4623      	mov	r3, r4
 8000828:	460a      	mov	r2, r1
 800082a:	495e      	ldr	r1, [pc, #376]	@ (80009a4 <main+0x1f0>)
 800082c:	f003 fa22 	bl	8003c74 <siprintf>
	                      LDR_Value, MQ5_Value, Temp_Value, Hum_Value);

	      HAL_UART_Transmit(&huart2, (uint8_t *)uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 8000830:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fccb 	bl	80001d0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000846:	4858      	ldr	r0, [pc, #352]	@ (80009a8 <main+0x1f4>)
 8000848:	f002 fe58 	bl	80034fc <HAL_UART_Transmit>
	      LcdPuts(LCD_LINE1, lcdMsgLine1);
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	2080      	movs	r0, #128	@ 0x80
 8000852:	f7ff ff4b 	bl	80006ec <LcdPuts>

	      bool darkness = (LDR_Value > 2000);
 8000856:	4b51      	ldr	r3, [pc, #324]	@ (800099c <main+0x1e8>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800085e:	bf8c      	ite	hi
 8000860:	2301      	movhi	r3, #1
 8000862:	2300      	movls	r3, #0
 8000864:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	      bool gas      = (MQ5_Value > 1500);
 8000868:	4b4d      	ldr	r3, [pc, #308]	@ (80009a0 <main+0x1ec>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000870:	4293      	cmp	r3, r2
 8000872:	bf8c      	ite	hi
 8000874:	2301      	movhi	r3, #1
 8000876:	2300      	movls	r3, #0
 8000878:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

	      // Handle LEDs and Alert messages
	      if (darkness && gas) {
 800087c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000880:	2b00      	cmp	r3, #0
 8000882:	d016      	beq.n	80008b2 <main+0xfe>
 8000884:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8000888:	2b00      	cmp	r3, #0
 800088a:	d012      	beq.n	80008b2 <main+0xfe>
	          // Case 1: Darkness + Gas
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Red LED
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000892:	4846      	ldr	r0, [pc, #280]	@ (80009ac <main+0x1f8>)
 8000894:	f001 fc92 	bl	80021bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  // Green LED
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089e:	4843      	ldr	r0, [pc, #268]	@ (80009ac <main+0x1f8>)
 80008a0:	f001 fc8c 	bl	80021bc <HAL_GPIO_WritePin>
	          strcpy(lcdMsgLine2, "GAS DARK");
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4a41      	ldr	r2, [pc, #260]	@ (80009b0 <main+0x1fc>)
 80008aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ac:	c303      	stmia	r3!, {r0, r1}
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e060      	b.n	8000974 <main+0x1c0>
	      }
	      else if (!darkness && !gas) {
 80008b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80008b6:	f083 0301 	eor.w	r3, r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d01e      	beq.n	80008fe <main+0x14a>
 80008c0:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80008c4:	f083 0301 	eor.w	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d017      	beq.n	80008fe <main+0x14a>
	          // Case 2: Normal condition
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d4:	4835      	ldr	r0, [pc, #212]	@ (80009ac <main+0x1f8>)
 80008d6:	f001 fc71 	bl	80021bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008e0:	4832      	ldr	r0, [pc, #200]	@ (80009ac <main+0x1f8>)
 80008e2:	f001 fc6b 	bl	80021bc <HAL_GPIO_WritePin>
	          strcpy(lcdMsgLine2, "NORMAL");
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	4a32      	ldr	r2, [pc, #200]	@ (80009b4 <main+0x200>)
 80008ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f0:	6018      	str	r0, [r3, #0]
 80008f2:	3304      	adds	r3, #4
 80008f4:	8019      	strh	r1, [r3, #0]
 80008f6:	3302      	adds	r3, #2
 80008f8:	0c0a      	lsrs	r2, r1, #16
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e03a      	b.n	8000974 <main+0x1c0>
	      }
	      else if (darkness && !gas) {
 80008fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01b      	beq.n	800093e <main+0x18a>
 8000906:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800090a:	f083 0301 	eor.w	r3, r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d014      	beq.n	800093e <main+0x18a>
	          // Case 3: Only Darkness
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091a:	4824      	ldr	r0, [pc, #144]	@ (80009ac <main+0x1f8>)
 800091c:	f001 fc4e 	bl	80021bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000926:	4821      	ldr	r0, [pc, #132]	@ (80009ac <main+0x1f8>)
 8000928:	f001 fc48 	bl	80021bc <HAL_GPIO_WritePin>
	          strcpy(lcdMsgLine2, "DARK");
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <main+0x204>)
 8000932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000936:	6018      	str	r0, [r3, #0]
 8000938:	3304      	adds	r3, #4
 800093a:	7019      	strb	r1, [r3, #0]
 800093c:	e01a      	b.n	8000974 <main+0x1c0>
	      }
	      else if (!darkness && gas) {
 800093e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d013      	beq.n	8000974 <main+0x1c0>
 800094c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00f      	beq.n	8000974 <main+0x1c0>
	          // Case 4: Only Gas
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095a:	4814      	ldr	r0, [pc, #80]	@ (80009ac <main+0x1f8>)
 800095c:	f001 fc2e 	bl	80021bc <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000966:	4811      	ldr	r0, [pc, #68]	@ (80009ac <main+0x1f8>)
 8000968:	f001 fc28 	bl	80021bc <HAL_GPIO_WritePin>
	          strcpy(lcdMsgLine2, "GAS");
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <main+0x208>)
 8000972:	601a      	str	r2, [r3, #0]
	      }

	      // Show alert status on LCD Line 2
	      LcdPuts(LCD_LINE2, lcdMsgLine2);
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4619      	mov	r1, r3
 800097a:	20c0      	movs	r0, #192	@ 0xc0
 800097c:	f7ff feb6 	bl	80006ec <LcdPuts>
	  }


	      dataReady = 0;
 8000980:	4b02      	ldr	r3, [pc, #8]	@ (800098c <main+0x1d8>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	  if (dataReady)
 8000986:	e730      	b.n	80007ea <main+0x36>
 8000988:	20000078 	.word	0x20000078
 800098c:	20000142 	.word	0x20000142
 8000990:	20000140 	.word	0x20000140
 8000994:	20000141 	.word	0x20000141
 8000998:	080045cc 	.word	0x080045cc
 800099c:	2000013c 	.word	0x2000013c
 80009a0:	2000013e 	.word	0x2000013e
 80009a4:	080045dc 	.word	0x080045dc
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	0800460c 	.word	0x0800460c
 80009b4:	08004618 	.word	0x08004618
 80009b8:	08004620 	.word	0x08004620
 80009bc:	00534147 	.word	0x00534147

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	@ 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	@ 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f972 	bl	8003cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	@ (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <SystemClock_Config+0xd0>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a34:	2348      	movs	r3, #72	@ 0x48
 8000a36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 f871 	bl	8002b2c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a50:	f000 f920 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2102      	movs	r1, #2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fad2 	bl	800301c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 f909 	bl	8000c94 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	@ 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <MX_CAN1_Init+0xa8>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000aa2:	2212      	movs	r2, #18
 8000aa4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ab4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ab8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ae4:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000ae6:	f000 fb25 	bl	8001134 <HAL_CAN_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000af0:	f000 f8d0 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9; // CAN1-0 to 8, CAN2-9 to 27
 FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 FilterConfig.FilterBank = 0; // Use any Filter from 0 to 8
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use a 32-bit filter
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
 FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 FilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8000b04:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b08:	60bb      	str	r3, [r7, #8]
 FilterConfig.FilterMaskIdLow = 0x0000;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 FilterConfig.FilterIdHigh = 0x0A9 << 5;
 8000b0e:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8000b12:	603b      	str	r3, [r7, #0]
 FilterConfig.FilterIdLow = 0x0000;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]

 if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_CAN1_Init+0xa4>)
 8000b22:	f000 fc03 	bl	800132c <HAL_CAN_ConfigFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_CAN1_Init+0x9c>
	 Error_Handler();
 8000b2c:	f000 f8b2 	bl	8000c94 <Error_Handler>

  /* USER CODE END CAN1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	@ 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000078 	.word	0x20000078
 8000b3c:	40006400 	.word	0x40006400

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <MX_I2C1_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b7e:	f001 fb37 	bl	80021f0 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f884 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000a0 	.word	0x200000a0
 8000b94:	40005400 	.word	0x40005400
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f002 fc42 	bl	800345c <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f859 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a11      	ldr	r2, [pc, #68]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_GPIO_Init+0x9c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GAS_DETECTION_Pin|DARKNESS_DETECTION_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <MX_GPIO_Init+0xa0>)
 8000c62:	f001 faab 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GAS_DETECTION_Pin DARKNESS_DETECTION_Pin */
  GPIO_InitStruct.Pin = GAS_DETECTION_Pin|DARKNESS_DETECTION_Pin;
 8000c66:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_GPIO_Init+0xa0>)
 8000c80:	f001 f900 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020c00 	.word	0x40020c00

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	@ (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f001 f88e 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <HAL_CAN_MspInit+0x94>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d134      	bne.n	8000d7c <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_CAN_MspInit+0x98>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <HAL_CAN_MspInit+0x98>)
 8000d1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <HAL_CAN_MspInit+0x98>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_CAN_MspInit+0x98>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <HAL_CAN_MspInit+0x98>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_CAN_MspInit+0x98>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d5c:	2309      	movs	r3, #9
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <HAL_CAN_MspInit+0x9c>)
 8000d68:	f001 f88c 	bl	8001e84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2014      	movs	r0, #20
 8000d72:	f001 f850 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d76:	2014      	movs	r0, #20
 8000d78:	f001 f869 	bl	8001e4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40006400 	.word	0x40006400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <HAL_I2C_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_I2C_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a17      	ldr	r2, [pc, #92]	@ (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23c0      	movs	r3, #192	@ 0xc0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <HAL_I2C_MspInit+0x8c>)
 8000dea:	f001 f84b 	bl	8001e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_I2C_MspInit+0x88>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e7a:	2360      	movs	r3, #96	@ 0x60
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_UART_MspInit+0x8c>)
 8000e96:	f000 fff5 	bl	8001e84 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f8d1 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <CAN1_RX0_IRQHandler+0x10>)
 8000f16:	f000 fc73 	bl	8001800 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000078 	.word	0x20000078

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f002 feb8 	bl	8003cc8 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20020000 	.word	0x20020000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000144 	.word	0x20000144
 8000f8c:	20000298 	.word	0x20000298

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 fe77 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fbe5 	bl	80007b4 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ff8:	08004684 	.word	0x08004684
  ldr r2, =_sbss
 8000ffc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001000:	20000294 	.word	0x20000294

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 fee5 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fe30 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fefd 	bl	8001e6a <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001088:	f000 fec5 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000148 	.word	0x20000148

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000148 	.word	0x20000148

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0ed      	b.n	8001322 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fdcc 	bl	8000cf0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001168:	f7ff ffb4 	bl	80010d4 <HAL_GetTick>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116e:	e012      	b.n	8001196 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001170:	f7ff ffb0 	bl	80010d4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d90b      	bls.n	8001196 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001182:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2205      	movs	r2, #5
 800118e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0c5      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0e5      	beq.n	8001170 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0202 	bic.w	r2, r2, #2
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b4:	f7ff ff8e 	bl	80010d4 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff ff8a 	bl	80010d4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e09f      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e1b      	ldrb	r3, [r3, #24]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0220 	bic.w	r2, r2, #32
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7edb      	ldrb	r3, [r3, #27]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0210 	bic.w	r2, r2, #16
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0208 	bic.w	r2, r2, #8
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7f5b      	ldrb	r3, [r3, #29]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	ea42 0103 	orr.w	r1, r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <HAL_CAN_ConfigFilter+0x20>
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b02      	cmp	r3, #2
 8001348:	f040 80be 	bne.w	80014c8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800134c:	4b65      	ldr	r3, [pc, #404]	@ (80014e4 <HAL_CAN_ConfigFilter+0x1b8>)
 800134e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001366:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	431a      	orrs	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2201      	movs	r2, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d123      	bne.n	80013f6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3248      	adds	r2, #72	@ 0x48
 80013d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	3348      	adds	r3, #72	@ 0x48
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d122      	bne.n	8001444 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	431a      	orrs	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800141e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3248      	adds	r2, #72	@ 0x48
 8001424:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001438:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	3348      	adds	r3, #72	@ 0x48
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d109      	bne.n	8001460 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800145e:	e007      	b.n	8001470 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	431a      	orrs	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800148a:	e007      	b.n	800149c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014ba:	f023 0201 	bic.w	r2, r3, #1
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e006      	b.n	80014d6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
  }
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40006400 	.word	0x40006400

080014e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12e      	bne.n	800155a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fdde 	bl	80010d4 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800151a:	e012      	b.n	8001542 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151c:	f7ff fdda 	bl	80010d4 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e012      	b.n	8001568 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e5      	bne.n	800151c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e006      	b.n	8001568 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d003      	beq.n	8001594 <HAL_CAN_GetRxMessage+0x24>
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b02      	cmp	r3, #2
 8001590:	f040 8103 	bne.w	800179a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10e      	bne.n	80015b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d116      	bne.n	80015d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0f7      	b.n	80017a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0e8      	b.n	80017a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	331b      	adds	r3, #27
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0204 	and.w	r2, r3, #4
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10c      	bne.n	800160e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	331b      	adds	r3, #27
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0d5b      	lsrs	r3, r3, #21
 8001604:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e00b      	b.n	8001626 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	331b      	adds	r3, #27
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	331b      	adds	r3, #27
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0202 	and.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	331b      	adds	r3, #27
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2208      	movs	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	e00b      	b.n	8001674 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	331b      	adds	r3, #27
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	3304      	adds	r3, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 020f 	and.w	r2, r3, #15
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	331b      	adds	r3, #27
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b2da      	uxtb	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	331b      	adds	r3, #27
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0a1a      	lsrs	r2, r3, #8
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1a      	lsrs	r2, r3, #16
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3302      	adds	r3, #2
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0e1a      	lsrs	r2, r3, #24
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3303      	adds	r3, #3
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3304      	adds	r3, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0a1a      	lsrs	r2, r3, #8
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	3305      	adds	r3, #5
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c1a      	lsrs	r2, r3, #16
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3306      	adds	r3, #6
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	4413      	add	r3, r2
 800175e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e1a      	lsrs	r2, r3, #24
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3307      	adds	r3, #7
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d108      	bne.n	8001786 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	e007      	b.n	8001796 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e006      	b.n	80017a8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
  }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d002      	beq.n	80017d2 <HAL_CAN_ActivateNotification+0x1e>
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d109      	bne.n	80017e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e006      	b.n	80017f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
  }
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d07c      	beq.n	8001940 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d023      	beq.n	8001898 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f983 	bl	8001b6e <HAL_CAN_TxMailbox0CompleteCallback>
 8001868:	e016      	b.n	8001898 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
 800187c:	e00c      	b.n	8001898 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001890:	e002      	b.n	8001898 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f989 	bl	8001baa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d024      	beq.n	80018ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f963 	bl	8001b82 <HAL_CAN_TxMailbox1CompleteCallback>
 80018bc:	e016      	b.n	80018ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d0:	e00c      	b.n	80018ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e4:	e002      	b.n	80018ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f969 	bl	8001bbe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d024      	beq.n	8001940 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f943 	bl	8001b96 <HAL_CAN_TxMailbox2CompleteCallback>
 8001910:	e016      	b.n	8001940 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
 8001924:	e00c      	b.n	8001940 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	e002      	b.n	8001940 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f949 	bl	8001bd2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2208      	movs	r2, #8
 800197e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f930 	bl	8001be6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fec8 	bl	8000734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2210      	movs	r2, #16
 80019c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2208      	movs	r2, #8
 80019e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f912 	bl	8001c0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8f9 	bl	8001bfa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2210      	movs	r2, #16
 8001a22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f8fc 	bl	8001c22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2208      	movs	r2, #8
 8001a44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f8f5 	bl	8001c36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d07b      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d072      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d043      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d03e      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ace:	2b60      	cmp	r3, #96	@ 0x60
 8001ad0:	d02b      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x32a>
 8001ad2:	2b60      	cmp	r3, #96	@ 0x60
 8001ad4:	d82e      	bhi.n	8001b34 <HAL_CAN_IRQHandler+0x334>
 8001ad6:	2b50      	cmp	r3, #80	@ 0x50
 8001ad8:	d022      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x320>
 8001ada:	2b50      	cmp	r3, #80	@ 0x50
 8001adc:	d82a      	bhi.n	8001b34 <HAL_CAN_IRQHandler+0x334>
 8001ade:	2b40      	cmp	r3, #64	@ 0x40
 8001ae0:	d019      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x316>
 8001ae2:	2b40      	cmp	r3, #64	@ 0x40
 8001ae4:	d826      	bhi.n	8001b34 <HAL_CAN_IRQHandler+0x334>
 8001ae6:	2b30      	cmp	r3, #48	@ 0x30
 8001ae8:	d010      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x30c>
 8001aea:	2b30      	cmp	r3, #48	@ 0x30
 8001aec:	d822      	bhi.n	8001b34 <HAL_CAN_IRQHandler+0x334>
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d002      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x2f8>
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d005      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001af6:	e01d      	b.n	8001b34 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b00:	e019      	b.n	8001b36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b0a:	e014      	b.n	8001b36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	f043 0320 	orr.w	r3, r3, #32
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b14:	e00f      	b.n	8001b36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b1e:	e00a      	b.n	8001b36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b28:	e005      	b.n	8001b36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b32:	e000      	b.n	8001b36 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f872 	bl	8001c4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	@ (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e16b      	b.n	8002178 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 815a 	bne.w	8002172 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80b4 	beq.w	8002172 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b60      	ldr	r3, [pc, #384]	@ (8002190 <HAL_GPIO_Init+0x30c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a5f      	ldr	r2, [pc, #380]	@ (8002190 <HAL_GPIO_Init+0x30c>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b5d      	ldr	r3, [pc, #372]	@ (8002190 <HAL_GPIO_Init+0x30c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a5b      	ldr	r2, [pc, #364]	@ (8002194 <HAL_GPIO_Init+0x310>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_GPIO_Init+0x314>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02b      	beq.n	80020aa <HAL_GPIO_Init+0x226>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a51      	ldr	r2, [pc, #324]	@ (800219c <HAL_GPIO_Init+0x318>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x222>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a50      	ldr	r2, [pc, #320]	@ (80021a0 <HAL_GPIO_Init+0x31c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x21e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4f      	ldr	r2, [pc, #316]	@ (80021a4 <HAL_GPIO_Init+0x320>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x21a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4e      	ldr	r2, [pc, #312]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x216>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4d      	ldr	r2, [pc, #308]	@ (80021ac <HAL_GPIO_Init+0x328>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x212>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4c      	ldr	r2, [pc, #304]	@ (80021b0 <HAL_GPIO_Init+0x32c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x20e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4b      	ldr	r2, [pc, #300]	@ (80021b4 <HAL_GPIO_Init+0x330>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x20a>
 800208a:	2307      	movs	r3, #7
 800208c:	e00e      	b.n	80020ac <HAL_GPIO_Init+0x228>
 800208e:	2308      	movs	r3, #8
 8002090:	e00c      	b.n	80020ac <HAL_GPIO_Init+0x228>
 8002092:	2306      	movs	r3, #6
 8002094:	e00a      	b.n	80020ac <HAL_GPIO_Init+0x228>
 8002096:	2305      	movs	r3, #5
 8002098:	e008      	b.n	80020ac <HAL_GPIO_Init+0x228>
 800209a:	2304      	movs	r3, #4
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x228>
 800209e:	2303      	movs	r3, #3
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x228>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x228>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x228>
 80020aa:	2300      	movs	r3, #0
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020bc:	4935      	ldr	r1, [pc, #212]	@ (8002194 <HAL_GPIO_Init+0x310>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a32      	ldr	r2, [pc, #200]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b30      	ldr	r3, [pc, #192]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a27      	ldr	r2, [pc, #156]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211e:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002142:	4a1d      	ldr	r2, [pc, #116]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002148:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216c:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <HAL_GPIO_Init+0x334>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3301      	adds	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b0f      	cmp	r3, #15
 800217c:	f67f ae90 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40013800 	.word	0x40013800
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40021400 	.word	0x40021400
 80021b0:	40021800 	.word	0x40021800
 80021b4:	40021c00 	.word	0x40021c00
 80021b8:	40013c00 	.word	0x40013c00

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e12b      	b.n	800245a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fdba 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002254:	f001 f8da 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8002258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a81      	ldr	r2, [pc, #516]	@ (8002464 <HAL_I2C_Init+0x274>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d807      	bhi.n	8002274 <HAL_I2C_Init+0x84>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a80      	ldr	r2, [pc, #512]	@ (8002468 <HAL_I2C_Init+0x278>)
 8002268:	4293      	cmp	r3, r2
 800226a:	bf94      	ite	ls
 800226c:	2301      	movls	r3, #1
 800226e:	2300      	movhi	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e006      	b.n	8002282 <HAL_I2C_Init+0x92>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a7d      	ldr	r2, [pc, #500]	@ (800246c <HAL_I2C_Init+0x27c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	bf94      	ite	ls
 800227c:	2301      	movls	r3, #1
 800227e:	2300      	movhi	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0e7      	b.n	800245a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4a78      	ldr	r2, [pc, #480]	@ (8002470 <HAL_I2C_Init+0x280>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9b      	lsrs	r3, r3, #18
 8002294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002464 <HAL_I2C_Init+0x274>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d802      	bhi.n	80022c4 <HAL_I2C_Init+0xd4>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3301      	adds	r3, #1
 80022c2:	e009      	b.n	80022d8 <HAL_I2C_Init+0xe8>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4a69      	ldr	r2, [pc, #420]	@ (8002474 <HAL_I2C_Init+0x284>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	3301      	adds	r3, #1
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	495c      	ldr	r1, [pc, #368]	@ (8002464 <HAL_I2C_Init+0x274>)
 80022f4:	428b      	cmp	r3, r1
 80022f6:	d819      	bhi.n	800232c <HAL_I2C_Init+0x13c>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e59      	subs	r1, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fbb1 f3f3 	udiv	r3, r1, r3
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800230c:	400b      	ands	r3, r1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_I2C_Init+0x138>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e59      	subs	r1, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002326:	e051      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 8002328:	2304      	movs	r3, #4
 800232a:	e04f      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d111      	bne.n	8002358 <HAL_I2C_Init+0x168>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e58      	subs	r0, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	440b      	add	r3, r1
 8002342:	fbb0 f3f3 	udiv	r3, r0, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e012      	b.n	800237e <HAL_I2C_Init+0x18e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	0099      	lsls	r1, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Init+0x196>
 8002382:	2301      	movs	r3, #1
 8002384:	e022      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10e      	bne.n	80023ac <HAL_I2C_Init+0x1bc>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e58      	subs	r0, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	440b      	add	r3, r1
 800239c:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023aa:	e00f      	b.n	80023cc <HAL_I2C_Init+0x1dc>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	0099      	lsls	r1, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	6809      	ldr	r1, [r1, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6911      	ldr	r1, [r2, #16]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68d2      	ldr	r2, [r2, #12]
 8002406:	4311      	orrs	r1, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	000186a0 	.word	0x000186a0
 8002468:	001e847f 	.word	0x001e847f
 800246c:	003d08ff 	.word	0x003d08ff
 8002470:	431bde83 	.word	0x431bde83
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	460b      	mov	r3, r1
 8002486:	817b      	strh	r3, [r7, #10]
 8002488:	4613      	mov	r3, r2
 800248a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7fe fe22 	bl	80010d4 <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b20      	cmp	r3, #32
 800249c:	f040 80e0 	bne.w	8002660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2319      	movs	r3, #25
 80024a6:	2201      	movs	r2, #1
 80024a8:	4970      	ldr	r1, [pc, #448]	@ (800266c <HAL_I2C_Master_Transmit+0x1f4>)
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f964 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
 80024b8:	e0d3      	b.n	8002662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_I2C_Master_Transmit+0x50>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0cc      	b.n	8002662 <HAL_I2C_Master_Transmit+0x1ea>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d007      	beq.n	80024ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2221      	movs	r2, #33	@ 0x21
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2210      	movs	r2, #16
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	893a      	ldrh	r2, [r7, #8]
 800251e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a50      	ldr	r2, [pc, #320]	@ (8002670 <HAL_I2C_Master_Transmit+0x1f8>)
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002530:	8979      	ldrh	r1, [r7, #10]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f89c 	bl	8002674 <I2C_MasterRequestWrite>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e08d      	b.n	8002662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800255c:	e066      	b.n	800262c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	6a39      	ldr	r1, [r7, #32]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fa22 	bl	80029ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2b04      	cmp	r3, #4
 8002574:	d107      	bne.n	8002586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06b      	b.n	8002662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d11b      	bne.n	8002600 <HAL_I2C_Master_Transmit+0x188>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	6a39      	ldr	r1, [r7, #32]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fa19 	bl	8002a3c <I2C_WaitOnBTFFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	2b04      	cmp	r3, #4
 8002616:	d107      	bne.n	8002628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e01a      	b.n	8002662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d194      	bne.n	800255e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	00100002 	.word	0x00100002
 8002670:	ffff0000 	.word	0xffff0000

08002674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d006      	beq.n	800269e <I2C_MasterRequestWrite+0x2a>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d003      	beq.n	800269e <I2C_MasterRequestWrite+0x2a>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800269c:	d108      	bne.n	80026b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e00b      	b.n	80026c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	2b12      	cmp	r3, #18
 80026b6:	d107      	bne.n	80026c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f84f 	bl	8002778 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ee:	d103      	bne.n	80026f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e035      	b.n	8002768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002704:	d108      	bne.n	8002718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	e01b      	b.n	8002750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002718:	897b      	ldrh	r3, [r7, #10]
 800271a:	11db      	asrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0306 	and.w	r3, r3, #6
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f063 030f 	orn	r3, r3, #15
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	490e      	ldr	r1, [pc, #56]	@ (8002770 <I2C_MasterRequestWrite+0xfc>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f898 	bl	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e010      	b.n	8002768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4907      	ldr	r1, [pc, #28]	@ (8002774 <I2C_MasterRequestWrite+0x100>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f888 	bl	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	00010008 	.word	0x00010008
 8002774:	00010002 	.word	0x00010002

08002778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002788:	e048      	b.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002790:	d044      	beq.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7fe fc9f 	bl	80010d4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d139      	bne.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	0c1b      	lsrs	r3, r3, #16
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10d      	bne.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	e00c      	b.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d116      	bne.n	800281c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e023      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10d      	bne.n	8002842 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	e00c      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	429a      	cmp	r2, r3
 8002860:	d093      	beq.n	800278a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287a:	e071      	b.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288a:	d123      	bne.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e067      	b.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028da:	d041      	beq.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028dc:	f7fe fbfa 	bl	80010d4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d302      	bcc.n	80028f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d136      	bne.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10c      	bne.n	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf14      	ite	ne
 800290e:	2301      	movne	r3, #1
 8002910:	2300      	moveq	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	e00b      	b.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	43da      	mvns	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4013      	ands	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e021      	b.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d10c      	bne.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e00b      	b.n	800299c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f af6d 	bne.w	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b8:	e034      	b.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f886 	bl	8002acc <I2C_IsAcknowledgeFailed>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e034      	b.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029d0:	d028      	beq.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fe fb7f 	bl	80010d4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11d      	bne.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f2:	2b80      	cmp	r3, #128	@ 0x80
 80029f4:	d016      	beq.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e007      	b.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2e:	2b80      	cmp	r3, #128	@ 0x80
 8002a30:	d1c3      	bne.n	80029ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a48:	e034      	b.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f83e 	bl	8002acc <I2C_IsAcknowledgeFailed>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e034      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a60:	d028      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe fb37 	bl	80010d4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11d      	bne.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d016      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e007      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d1c3      	bne.n	8002a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae2:	d11b      	bne.n	8002b1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002aec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e267      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d075      	beq.n	8002c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b4a:	4b88      	ldr	r3, [pc, #544]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d00c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b85      	ldr	r3, [pc, #532]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d112      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b82      	ldr	r3, [pc, #520]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4b7e      	ldr	r3, [pc, #504]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x108>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d157      	bne.n	8002c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e242      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x74>
 8002b92:	4b76      	ldr	r3, [pc, #472]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a75      	ldr	r2, [pc, #468]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xb0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x98>
 8002baa:	4b70      	ldr	r3, [pc, #448]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6f      	ldr	r2, [pc, #444]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6c      	ldr	r2, [pc, #432]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xb0>
 8002bc4:	4b69      	ldr	r3, [pc, #420]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a68      	ldr	r2, [pc, #416]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b66      	ldr	r3, [pc, #408]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a65      	ldr	r2, [pc, #404]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fa76 	bl	80010d4 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fa72 	bl	80010d4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e207      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xc0>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fa62 	bl	80010d4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fa5e 	bl	80010d4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1f3      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	4b51      	ldr	r3, [pc, #324]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0xe8>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c42:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d11c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d116      	bne.n	8002c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	4b41      	ldr	r3, [pc, #260]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x152>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e1c7      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4937      	ldr	r1, [pc, #220]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	e03a      	b.n	8002d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9c:	4b34      	ldr	r3, [pc, #208]	@ (8002d70 <HAL_RCC_OscConfig+0x244>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fa17 	bl	80010d4 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fa13 	bl	80010d4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1a8      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4925      	ldr	r1, [pc, #148]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <HAL_RCC_OscConfig+0x244>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f9f6 	bl	80010d4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe f9f2 	bl	80010d4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e187      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d036      	beq.n	8002d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_RCC_OscConfig+0x248>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe f9d6 	bl	80010d4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f9d2 	bl	80010d4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e167      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x200>
 8002d4a:	e01b      	b.n	8002d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_OscConfig+0x248>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fe f9bf 	bl	80010d4 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	e00e      	b.n	8002d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f9bb 	bl	80010d4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d907      	bls.n	8002d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e150      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	42470000 	.word	0x42470000
 8002d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ea      	bne.n	8002d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8097 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b81      	ldr	r3, [pc, #516]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b7d      	ldr	r3, [pc, #500]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	4a7c      	ldr	r2, [pc, #496]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db2:	4b7a      	ldr	r3, [pc, #488]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b77      	ldr	r3, [pc, #476]	@ (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b74      	ldr	r3, [pc, #464]	@ (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a73      	ldr	r2, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f97b 	bl	80010d4 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe f977 	bl	80010d4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e10c      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2ea>
 8002e08:	4b64      	ldr	r3, [pc, #400]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0c:	4a63      	ldr	r2, [pc, #396]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e14:	e01c      	b.n	8002e50 <HAL_RCC_OscConfig+0x324>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x30c>
 8002e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	4a5e      	ldr	r2, [pc, #376]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0x324>
 8002e38:	4b58      	ldr	r3, [pc, #352]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a57      	ldr	r2, [pc, #348]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	4a54      	ldr	r2, [pc, #336]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e4a:	f023 0304 	bic.w	r3, r3, #4
 8002e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe f93c 	bl	80010d4 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe f938 	bl	80010d4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0cb      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	4b49      	ldr	r3, [pc, #292]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0ee      	beq.n	8002e60 <HAL_RCC_OscConfig+0x334>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe f926 	bl	80010d4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe f922 	bl	80010d4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0b5      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ee      	bne.n	8002e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b39      	ldr	r3, [pc, #228]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	4a38      	ldr	r2, [pc, #224]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a1 	beq.w	800300c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eca:	4b34      	ldr	r3, [pc, #208]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d05c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d141      	bne.n	8002f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <HAL_RCC_OscConfig+0x478>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe f8f6 	bl	80010d4 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe f8f2 	bl	80010d4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e087      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	3b01      	subs	r3, #1
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	491b      	ldr	r1, [pc, #108]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f34:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_RCC_OscConfig+0x478>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe f8cb 	bl	80010d4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe f8c7 	bl	80010d4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e05c      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x416>
 8002f60:	e054      	b.n	800300c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe f8b4 	bl	80010d4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe f8b0 	bl	80010d4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e045      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x444>
 8002f8e:	e03d      	b.n	800300c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e038      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x4ec>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d028      	beq.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d121      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d11a      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d111      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0cc      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b68      	ldr	r3, [pc, #416]	@ (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d90c      	bls.n	8003058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b65      	ldr	r3, [pc, #404]	@ (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b63      	ldr	r3, [pc, #396]	@ (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0b8      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003070:	4b59      	ldr	r3, [pc, #356]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a58      	ldr	r2, [pc, #352]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800307a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003088:	4b53      	ldr	r3, [pc, #332]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a52      	ldr	r2, [pc, #328]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b50      	ldr	r3, [pc, #320]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	494d      	ldr	r1, [pc, #308]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d044      	beq.n	800313c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b47      	ldr	r3, [pc, #284]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d119      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d003      	beq.n	80030da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030da:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ea:	4b3b      	ldr	r3, [pc, #236]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e067      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fa:	4b37      	ldr	r3, [pc, #220]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 0203 	bic.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4934      	ldr	r1, [pc, #208]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800310c:	f7fd ffe2 	bl	80010d4 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	e00a      	b.n	800312a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fd ffde 	bl	80010d4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e04f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 020c 	and.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	429a      	cmp	r2, r3
 800313a:	d1eb      	bne.n	8003114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b25      	ldr	r3, [pc, #148]	@ (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d20c      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e032      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4916      	ldr	r1, [pc, #88]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318e:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	490e      	ldr	r1, [pc, #56]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a2:	f000 f821 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	490a      	ldr	r1, [pc, #40]	@ (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	5ccb      	ldrb	r3, [r1, r3]
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd ff42 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00
 80031d8:	40023800 	.word	0x40023800
 80031dc:	08004628 	.word	0x08004628
 80031e0:	20000000 	.word	0x20000000
 80031e4:	20000004 	.word	0x20000004

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b094      	sub	sp, #80	@ 0x50
 80031ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003200:	4b79      	ldr	r3, [pc, #484]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d00d      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x40>
 800320c:	2b08      	cmp	r3, #8
 800320e:	f200 80e1 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x34>
 8003216:	2b04      	cmp	r3, #4
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x3a>
 800321a:	e0db      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b73      	ldr	r3, [pc, #460]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x204>)
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003220:	e0db      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003222:	4b73      	ldr	r3, [pc, #460]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003226:	e0d8      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003228:	4b6f      	ldr	r3, [pc, #444]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003232:	4b6d      	ldr	r3, [pc, #436]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323e:	4b6a      	ldr	r3, [pc, #424]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	2200      	movs	r2, #0
 8003246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	633b      	str	r3, [r7, #48]	@ 0x30
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
 8003256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800325a:	4622      	mov	r2, r4
 800325c:	462b      	mov	r3, r5
 800325e:	f04f 0000 	mov.w	r0, #0
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	0159      	lsls	r1, r3, #5
 8003268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326c:	0150      	lsls	r0, r2, #5
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4621      	mov	r1, r4
 8003274:	1a51      	subs	r1, r2, r1
 8003276:	6139      	str	r1, [r7, #16]
 8003278:	4629      	mov	r1, r5
 800327a:	eb63 0301 	sbc.w	r3, r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	018b      	lsls	r3, r1, #6
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003296:	4651      	mov	r1, sl
 8003298:	018a      	lsls	r2, r1, #6
 800329a:	4651      	mov	r1, sl
 800329c:	ebb2 0801 	subs.w	r8, r2, r1
 80032a0:	4659      	mov	r1, fp
 80032a2:	eb63 0901 	sbc.w	r9, r3, r1
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ba:	4690      	mov	r8, r2
 80032bc:	4699      	mov	r9, r3
 80032be:	4623      	mov	r3, r4
 80032c0:	eb18 0303 	adds.w	r3, r8, r3
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	462b      	mov	r3, r5
 80032c8:	eb49 0303 	adc.w	r3, r9, r3
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032da:	4629      	mov	r1, r5
 80032dc:	024b      	lsls	r3, r1, #9
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032e4:	4621      	mov	r1, r4
 80032e6:	024a      	lsls	r2, r1, #9
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ee:	2200      	movs	r2, #0
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032f8:	f7fc ffc2 	bl	8000280 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003304:	e058      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003306:	4b38      	ldr	r3, [pc, #224]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	2200      	movs	r2, #0
 800330e:	4618      	mov	r0, r3
 8003310:	4611      	mov	r1, r2
 8003312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
 800331c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	0159      	lsls	r1, r3, #5
 800332e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003332:	0150      	lsls	r0, r2, #5
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4641      	mov	r1, r8
 800333a:	ebb2 0a01 	subs.w	sl, r2, r1
 800333e:	4649      	mov	r1, r9
 8003340:	eb63 0b01 	sbc.w	fp, r3, r1
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003358:	ebb2 040a 	subs.w	r4, r2, sl
 800335c:	eb63 050b 	sbc.w	r5, r3, fp
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	00eb      	lsls	r3, r5, #3
 800336a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336e:	00e2      	lsls	r2, r4, #3
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	4643      	mov	r3, r8
 8003376:	18e3      	adds	r3, r4, r3
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	464b      	mov	r3, r9
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338e:	4629      	mov	r1, r5
 8003390:	028b      	lsls	r3, r1, #10
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003398:	4621      	mov	r1, r4
 800339a:	028a      	lsls	r2, r1, #10
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	61fa      	str	r2, [r7, #28]
 80033a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ac:	f7fc ff68 	bl	8000280 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	3301      	adds	r3, #1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3750      	adds	r7, #80	@ 0x50
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_RCC_GetHCLKFreq+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000000 	.word	0x20000000

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff0 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08004638 	.word	0x08004638

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffdc 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08004638 	.word	0x08004638

0800345c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e042      	b.n	80034f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fccc 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	@ 0x24
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800349e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f973 	bl	800378c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b20      	cmp	r3, #32
 800351a:	d175      	bne.n	8003608 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Transmit+0x2c>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e06e      	b.n	800360a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2221      	movs	r2, #33	@ 0x21
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353a:	f7fd fdcb 	bl	80010d4 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d108      	bne.n	8003568 <HAL_UART_Transmit+0x6c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e003      	b.n	8003570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003570:	e02e      	b.n	80035d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	2180      	movs	r1, #128	@ 0x80
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f848 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e03a      	b.n	800360a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3302      	adds	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e007      	b.n	80035c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1cb      	bne.n	8003572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2140      	movs	r1, #64	@ 0x40
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f814 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e006      	b.n	800360a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	e03b      	b.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800362a:	d037      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fd fd52 	bl	80010d4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <UART_WaitOnFlagUntilTimeout+0x30>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e03a      	b.n	80036bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d020      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d01d      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d116      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f81d 	bl	80036c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2208      	movs	r2, #8
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e00f      	b.n	80036bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d0b4      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b095      	sub	sp, #84	@ 0x54
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	d119      	bne.n	8003770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	60bb      	str	r3, [r7, #8]
   return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800375c:	61ba      	str	r2, [r7, #24]
 800375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6979      	ldr	r1, [r7, #20]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800377e:	bf00      	nop
 8003780:	3754      	adds	r7, #84	@ 0x54
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b0c0      	sub	sp, #256	@ 0x100
 8003792:	af00      	add	r7, sp, #0
 8003794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	68d9      	ldr	r1, [r3, #12]
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	ea40 0301 	orr.w	r3, r0, r1
 80037b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037e4:	f021 010c 	bic.w	r1, r1, #12
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037f2:	430b      	orrs	r3, r1
 80037f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	6999      	ldr	r1, [r3, #24]
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	ea40 0301 	orr.w	r3, r0, r1
 8003812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b8f      	ldr	r3, [pc, #572]	@ (8003a58 <UART_SetConfig+0x2cc>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d005      	beq.n	800382c <UART_SetConfig+0xa0>
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b8d      	ldr	r3, [pc, #564]	@ (8003a5c <UART_SetConfig+0x2d0>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d104      	bne.n	8003836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7ff fe02 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8003830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003834:	e003      	b.n	800383e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003836:	f7ff fde9 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 800383a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003848:	f040 810c 	bne.w	8003a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800384c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800385a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	1891      	adds	r1, r2, r2
 8003864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003866:	415b      	adcs	r3, r3
 8003868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800386a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800386e:	4621      	mov	r1, r4
 8003870:	eb12 0801 	adds.w	r8, r2, r1
 8003874:	4629      	mov	r1, r5
 8003876:	eb43 0901 	adc.w	r9, r3, r1
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388e:	4690      	mov	r8, r2
 8003890:	4699      	mov	r9, r3
 8003892:	4623      	mov	r3, r4
 8003894:	eb18 0303 	adds.w	r3, r8, r3
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800389c:	462b      	mov	r3, r5
 800389e:	eb49 0303 	adc.w	r3, r9, r3
 80038a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ba:	460b      	mov	r3, r1
 80038bc:	18db      	adds	r3, r3, r3
 80038be:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c0:	4613      	mov	r3, r2
 80038c2:	eb42 0303 	adc.w	r3, r2, r3
 80038c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80038c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d0:	f7fc fcd6 	bl	8000280 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4b61      	ldr	r3, [pc, #388]	@ (8003a60 <UART_SetConfig+0x2d4>)
 80038da:	fba3 2302 	umull	r2, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	011c      	lsls	r4, r3, #4
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038fc:	415b      	adcs	r3, r3
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003904:	4641      	mov	r1, r8
 8003906:	eb12 0a01 	adds.w	sl, r2, r1
 800390a:	4649      	mov	r1, r9
 800390c:	eb43 0b01 	adc.w	fp, r3, r1
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800391c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003924:	4692      	mov	sl, r2
 8003926:	469b      	mov	fp, r3
 8003928:	4643      	mov	r3, r8
 800392a:	eb1a 0303 	adds.w	r3, sl, r3
 800392e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003932:	464b      	mov	r3, r9
 8003934:	eb4b 0303 	adc.w	r3, fp, r3
 8003938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800394c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003950:	460b      	mov	r3, r1
 8003952:	18db      	adds	r3, r3, r3
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
 8003956:	4613      	mov	r3, r2
 8003958:	eb42 0303 	adc.w	r3, r2, r3
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
 800395e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003966:	f7fc fc8b 	bl	8000280 <__aeabi_uldivmod>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4611      	mov	r1, r2
 8003970:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003972:	fba3 2301 	umull	r2, r3, r3, r1
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2264      	movs	r2, #100	@ 0x64
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	1acb      	subs	r3, r1, r3
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003988:	fba3 2302 	umull	r2, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003994:	441c      	add	r4, r3
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b0:	415b      	adcs	r3, r3
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039b8:	4641      	mov	r1, r8
 80039ba:	1851      	adds	r1, r2, r1
 80039bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80039be:	4649      	mov	r1, r9
 80039c0:	414b      	adcs	r3, r1
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d0:	4659      	mov	r1, fp
 80039d2:	00cb      	lsls	r3, r1, #3
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039da:	4651      	mov	r1, sl
 80039dc:	00ca      	lsls	r2, r1, #3
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	4642      	mov	r2, r8
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ec:	464b      	mov	r3, r9
 80039ee:	460a      	mov	r2, r1
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	18db      	adds	r3, r3, r3
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a12:	4613      	mov	r3, r2
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a22:	f7fc fc2d 	bl	8000280 <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	2164      	movs	r1, #100	@ 0x64
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	3332      	adds	r3, #50	@ 0x32
 8003a3e:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <UART_SetConfig+0x2d4>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	f003 0207 	and.w	r2, r3, #7
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4422      	add	r2, r4
 8003a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a54:	e106      	b.n	8003c64 <UART_SetConfig+0x4d8>
 8003a56:	bf00      	nop
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40011400 	.word	0x40011400
 8003a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	6239      	str	r1, [r7, #32]
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a86:	4641      	mov	r1, r8
 8003a88:	1854      	adds	r4, r2, r1
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	eb43 0501 	adc.w	r5, r3, r1
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	00eb      	lsls	r3, r5, #3
 8003a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9e:	00e2      	lsls	r2, r4, #3
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	18e3      	adds	r3, r4, r3
 8003aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aac:	464b      	mov	r3, r9
 8003aae:	eb45 0303 	adc.w	r3, r5, r3
 8003ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	008b      	lsls	r3, r1, #2
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003adc:	4621      	mov	r1, r4
 8003ade:	008a      	lsls	r2, r1, #2
 8003ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ae4:	f7fc fbcc 	bl	8000280 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4b60      	ldr	r3, [pc, #384]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003aee:	fba3 2302 	umull	r2, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	011c      	lsls	r4, r3, #4
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	61b9      	str	r1, [r7, #24]
 8003b10:	415b      	adcs	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b18:	4641      	mov	r1, r8
 8003b1a:	1851      	adds	r1, r2, r1
 8003b1c:	6139      	str	r1, [r7, #16]
 8003b1e:	4649      	mov	r1, r9
 8003b20:	414b      	adcs	r3, r1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b30:	4659      	mov	r1, fp
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4642      	mov	r2, r8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b70:	4649      	mov	r1, r9
 8003b72:	008b      	lsls	r3, r1, #2
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	008a      	lsls	r2, r1, #2
 8003b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b82:	f7fc fb7d 	bl	8000280 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b38      	ldr	r3, [pc, #224]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	@ 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	3332      	adds	r3, #50	@ 0x32
 8003ba0:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	441c      	add	r4, r3
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bfe:	464b      	mov	r3, r9
 8003c00:	460a      	mov	r2, r1
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c20:	4649      	mov	r1, r9
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	4641      	mov	r1, r8
 8003c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	008a      	lsls	r2, r1, #2
 8003c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c32:	f7fc fb25 	bl	8000280 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2164      	movs	r1, #100	@ 0x64
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3332      	adds	r3, #50	@ 0x32
 8003c4e:	4a08      	ldr	r2, [pc, #32]	@ (8003c70 <UART_SetConfig+0x4e4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4422      	add	r2, r4
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c70:	51eb851f 	.word	0x51eb851f

08003c74 <siprintf>:
 8003c74:	b40e      	push	{r1, r2, r3}
 8003c76:	b510      	push	{r4, lr}
 8003c78:	b09d      	sub	sp, #116	@ 0x74
 8003c7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003c7c:	9002      	str	r0, [sp, #8]
 8003c7e:	9006      	str	r0, [sp, #24]
 8003c80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c84:	480a      	ldr	r0, [pc, #40]	@ (8003cb0 <siprintf+0x3c>)
 8003c86:	9107      	str	r1, [sp, #28]
 8003c88:	9104      	str	r1, [sp, #16]
 8003c8a:	490a      	ldr	r1, [pc, #40]	@ (8003cb4 <siprintf+0x40>)
 8003c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c90:	9105      	str	r1, [sp, #20]
 8003c92:	2400      	movs	r4, #0
 8003c94:	a902      	add	r1, sp, #8
 8003c96:	6800      	ldr	r0, [r0, #0]
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003c9c:	f000 f994 	bl	8003fc8 <_svfiprintf_r>
 8003ca0:	9b02      	ldr	r3, [sp, #8]
 8003ca2:	701c      	strb	r4, [r3, #0]
 8003ca4:	b01d      	add	sp, #116	@ 0x74
 8003ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003caa:	b003      	add	sp, #12
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	ffff0208 	.word	0xffff0208

08003cb8 <memset>:
 8003cb8:	4402      	add	r2, r0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d100      	bne.n	8003cc2 <memset+0xa>
 8003cc0:	4770      	bx	lr
 8003cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc6:	e7f9      	b.n	8003cbc <memset+0x4>

08003cc8 <__errno>:
 8003cc8:	4b01      	ldr	r3, [pc, #4]	@ (8003cd0 <__errno+0x8>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 fc64 	bl	80045b4 <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	0800467c 	.word	0x0800467c
 8003d10:	0800467c 	.word	0x0800467c
 8003d14:	0800467c 	.word	0x0800467c
 8003d18:	08004680 	.word	0x08004680

08003d1c <__retarget_lock_acquire_recursive>:
 8003d1c:	4770      	bx	lr

08003d1e <__retarget_lock_release_recursive>:
 8003d1e:	4770      	bx	lr

08003d20 <_free_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4605      	mov	r5, r0
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d041      	beq.n	8003dac <_free_r+0x8c>
 8003d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2c:	1f0c      	subs	r4, r1, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfb8      	it	lt
 8003d32:	18e4      	addlt	r4, r4, r3
 8003d34:	f000 f8e0 	bl	8003ef8 <__malloc_lock>
 8003d38:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <_free_r+0x90>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	b933      	cbnz	r3, 8003d4c <_free_r+0x2c>
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	6014      	str	r4, [r2, #0]
 8003d42:	4628      	mov	r0, r5
 8003d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d48:	f000 b8dc 	b.w	8003f04 <__malloc_unlock>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d908      	bls.n	8003d62 <_free_r+0x42>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	1821      	adds	r1, r4, r0
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	e7ed      	b.n	8003d3e <_free_r+0x1e>
 8003d62:	461a      	mov	r2, r3
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b10b      	cbz	r3, 8003d6c <_free_r+0x4c>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d9fa      	bls.n	8003d62 <_free_r+0x42>
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	1850      	adds	r0, r2, r1
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d10b      	bne.n	8003d8c <_free_r+0x6c>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	4401      	add	r1, r0
 8003d78:	1850      	adds	r0, r2, r1
 8003d7a:	4283      	cmp	r3, r0
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	d1e0      	bne.n	8003d42 <_free_r+0x22>
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	6053      	str	r3, [r2, #4]
 8003d86:	4408      	add	r0, r1
 8003d88:	6010      	str	r0, [r2, #0]
 8003d8a:	e7da      	b.n	8003d42 <_free_r+0x22>
 8003d8c:	d902      	bls.n	8003d94 <_free_r+0x74>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	e7d6      	b.n	8003d42 <_free_r+0x22>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	1821      	adds	r1, r4, r0
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf04      	itt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	bf04      	itt	eq
 8003da4:	1809      	addeq	r1, r1, r0
 8003da6:	6021      	streq	r1, [r4, #0]
 8003da8:	6054      	str	r4, [r2, #4]
 8003daa:	e7ca      	b.n	8003d42 <_free_r+0x22>
 8003dac:	bd38      	pop	{r3, r4, r5, pc}
 8003dae:	bf00      	nop
 8003db0:	20000290 	.word	0x20000290

08003db4 <sbrk_aligned>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4e0f      	ldr	r6, [pc, #60]	@ (8003df4 <sbrk_aligned+0x40>)
 8003db8:	460c      	mov	r4, r1
 8003dba:	6831      	ldr	r1, [r6, #0]
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	b911      	cbnz	r1, 8003dc6 <sbrk_aligned+0x12>
 8003dc0:	f000 fba4 	bl	800450c <_sbrk_r>
 8003dc4:	6030      	str	r0, [r6, #0]
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 fb9f 	bl	800450c <_sbrk_r>
 8003dce:	1c43      	adds	r3, r0, #1
 8003dd0:	d103      	bne.n	8003dda <sbrk_aligned+0x26>
 8003dd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
 8003dda:	1cc4      	adds	r4, r0, #3
 8003ddc:	f024 0403 	bic.w	r4, r4, #3
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d0f8      	beq.n	8003dd6 <sbrk_aligned+0x22>
 8003de4:	1a21      	subs	r1, r4, r0
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fb90 	bl	800450c <_sbrk_r>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d1f2      	bne.n	8003dd6 <sbrk_aligned+0x22>
 8003df0:	e7ef      	b.n	8003dd2 <sbrk_aligned+0x1e>
 8003df2:	bf00      	nop
 8003df4:	2000028c 	.word	0x2000028c

08003df8 <_malloc_r>:
 8003df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dfc:	1ccd      	adds	r5, r1, #3
 8003dfe:	f025 0503 	bic.w	r5, r5, #3
 8003e02:	3508      	adds	r5, #8
 8003e04:	2d0c      	cmp	r5, #12
 8003e06:	bf38      	it	cc
 8003e08:	250c      	movcc	r5, #12
 8003e0a:	2d00      	cmp	r5, #0
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	db01      	blt.n	8003e14 <_malloc_r+0x1c>
 8003e10:	42a9      	cmp	r1, r5
 8003e12:	d904      	bls.n	8003e1e <_malloc_r+0x26>
 8003e14:	230c      	movs	r3, #12
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ef4 <_malloc_r+0xfc>
 8003e22:	f000 f869 	bl	8003ef8 <__malloc_lock>
 8003e26:	f8d8 3000 	ldr.w	r3, [r8]
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	bb44      	cbnz	r4, 8003e80 <_malloc_r+0x88>
 8003e2e:	4629      	mov	r1, r5
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff ffbf 	bl	8003db4 <sbrk_aligned>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	4604      	mov	r4, r0
 8003e3a:	d158      	bne.n	8003eee <_malloc_r+0xf6>
 8003e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e40:	4627      	mov	r7, r4
 8003e42:	2f00      	cmp	r7, #0
 8003e44:	d143      	bne.n	8003ece <_malloc_r+0xd6>
 8003e46:	2c00      	cmp	r4, #0
 8003e48:	d04b      	beq.n	8003ee2 <_malloc_r+0xea>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	4639      	mov	r1, r7
 8003e4e:	4630      	mov	r0, r6
 8003e50:	eb04 0903 	add.w	r9, r4, r3
 8003e54:	f000 fb5a 	bl	800450c <_sbrk_r>
 8003e58:	4581      	cmp	r9, r0
 8003e5a:	d142      	bne.n	8003ee2 <_malloc_r+0xea>
 8003e5c:	6821      	ldr	r1, [r4, #0]
 8003e5e:	1a6d      	subs	r5, r5, r1
 8003e60:	4629      	mov	r1, r5
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff ffa6 	bl	8003db4 <sbrk_aligned>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d03a      	beq.n	8003ee2 <_malloc_r+0xea>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	442b      	add	r3, r5
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	f8d8 3000 	ldr.w	r3, [r8]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	bb62      	cbnz	r2, 8003ed4 <_malloc_r+0xdc>
 8003e7a:	f8c8 7000 	str.w	r7, [r8]
 8003e7e:	e00f      	b.n	8003ea0 <_malloc_r+0xa8>
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	1b52      	subs	r2, r2, r5
 8003e84:	d420      	bmi.n	8003ec8 <_malloc_r+0xd0>
 8003e86:	2a0b      	cmp	r2, #11
 8003e88:	d917      	bls.n	8003eba <_malloc_r+0xc2>
 8003e8a:	1961      	adds	r1, r4, r5
 8003e8c:	42a3      	cmp	r3, r4
 8003e8e:	6025      	str	r5, [r4, #0]
 8003e90:	bf18      	it	ne
 8003e92:	6059      	strne	r1, [r3, #4]
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	bf08      	it	eq
 8003e98:	f8c8 1000 	streq.w	r1, [r8]
 8003e9c:	5162      	str	r2, [r4, r5]
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f82f 	bl	8003f04 <__malloc_unlock>
 8003ea6:	f104 000b 	add.w	r0, r4, #11
 8003eaa:	1d23      	adds	r3, r4, #4
 8003eac:	f020 0007 	bic.w	r0, r0, #7
 8003eb0:	1ac2      	subs	r2, r0, r3
 8003eb2:	bf1c      	itt	ne
 8003eb4:	1a1b      	subne	r3, r3, r0
 8003eb6:	50a3      	strne	r3, [r4, r2]
 8003eb8:	e7af      	b.n	8003e1a <_malloc_r+0x22>
 8003eba:	6862      	ldr	r2, [r4, #4]
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	bf0c      	ite	eq
 8003ec0:	f8c8 2000 	streq.w	r2, [r8]
 8003ec4:	605a      	strne	r2, [r3, #4]
 8003ec6:	e7eb      	b.n	8003ea0 <_malloc_r+0xa8>
 8003ec8:	4623      	mov	r3, r4
 8003eca:	6864      	ldr	r4, [r4, #4]
 8003ecc:	e7ae      	b.n	8003e2c <_malloc_r+0x34>
 8003ece:	463c      	mov	r4, r7
 8003ed0:	687f      	ldr	r7, [r7, #4]
 8003ed2:	e7b6      	b.n	8003e42 <_malloc_r+0x4a>
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d1fb      	bne.n	8003ed4 <_malloc_r+0xdc>
 8003edc:	2300      	movs	r3, #0
 8003ede:	6053      	str	r3, [r2, #4]
 8003ee0:	e7de      	b.n	8003ea0 <_malloc_r+0xa8>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	6033      	str	r3, [r6, #0]
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f000 f80c 	bl	8003f04 <__malloc_unlock>
 8003eec:	e794      	b.n	8003e18 <_malloc_r+0x20>
 8003eee:	6005      	str	r5, [r0, #0]
 8003ef0:	e7d6      	b.n	8003ea0 <_malloc_r+0xa8>
 8003ef2:	bf00      	nop
 8003ef4:	20000290 	.word	0x20000290

08003ef8 <__malloc_lock>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	@ (8003f00 <__malloc_lock+0x8>)
 8003efa:	f7ff bf0f 	b.w	8003d1c <__retarget_lock_acquire_recursive>
 8003efe:	bf00      	nop
 8003f00:	20000288 	.word	0x20000288

08003f04 <__malloc_unlock>:
 8003f04:	4801      	ldr	r0, [pc, #4]	@ (8003f0c <__malloc_unlock+0x8>)
 8003f06:	f7ff bf0a 	b.w	8003d1e <__retarget_lock_release_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	20000288 	.word	0x20000288

08003f10 <__ssputs_r>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	688e      	ldr	r6, [r1, #8]
 8003f16:	461f      	mov	r7, r3
 8003f18:	42be      	cmp	r6, r7
 8003f1a:	680b      	ldr	r3, [r1, #0]
 8003f1c:	4682      	mov	sl, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	4690      	mov	r8, r2
 8003f22:	d82d      	bhi.n	8003f80 <__ssputs_r+0x70>
 8003f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f2c:	d026      	beq.n	8003f7c <__ssputs_r+0x6c>
 8003f2e:	6965      	ldr	r5, [r4, #20]
 8003f30:	6909      	ldr	r1, [r1, #16]
 8003f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f36:	eba3 0901 	sub.w	r9, r3, r1
 8003f3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f3e:	1c7b      	adds	r3, r7, #1
 8003f40:	444b      	add	r3, r9
 8003f42:	106d      	asrs	r5, r5, #1
 8003f44:	429d      	cmp	r5, r3
 8003f46:	bf38      	it	cc
 8003f48:	461d      	movcc	r5, r3
 8003f4a:	0553      	lsls	r3, r2, #21
 8003f4c:	d527      	bpl.n	8003f9e <__ssputs_r+0x8e>
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7ff ff52 	bl	8003df8 <_malloc_r>
 8003f54:	4606      	mov	r6, r0
 8003f56:	b360      	cbz	r0, 8003fb2 <__ssputs_r+0xa2>
 8003f58:	6921      	ldr	r1, [r4, #16]
 8003f5a:	464a      	mov	r2, r9
 8003f5c:	f000 fae6 	bl	800452c <memcpy>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	6126      	str	r6, [r4, #16]
 8003f6e:	6165      	str	r5, [r4, #20]
 8003f70:	444e      	add	r6, r9
 8003f72:	eba5 0509 	sub.w	r5, r5, r9
 8003f76:	6026      	str	r6, [r4, #0]
 8003f78:	60a5      	str	r5, [r4, #8]
 8003f7a:	463e      	mov	r6, r7
 8003f7c:	42be      	cmp	r6, r7
 8003f7e:	d900      	bls.n	8003f82 <__ssputs_r+0x72>
 8003f80:	463e      	mov	r6, r7
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	4632      	mov	r2, r6
 8003f86:	4641      	mov	r1, r8
 8003f88:	f000 faa6 	bl	80044d8 <memmove>
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	1b9b      	subs	r3, r3, r6
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4433      	add	r3, r6
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9e:	462a      	mov	r2, r5
 8003fa0:	f000 fad2 	bl	8004548 <_realloc_r>
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d1e0      	bne.n	8003f6c <__ssputs_r+0x5c>
 8003faa:	6921      	ldr	r1, [r4, #16]
 8003fac:	4650      	mov	r0, sl
 8003fae:	f7ff feb7 	bl	8003d20 <_free_r>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	f8ca 3000 	str.w	r3, [sl]
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fc4:	e7e9      	b.n	8003f9a <__ssputs_r+0x8a>
	...

08003fc8 <_svfiprintf_r>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	4698      	mov	r8, r3
 8003fce:	898b      	ldrh	r3, [r1, #12]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	b09d      	sub	sp, #116	@ 0x74
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	460d      	mov	r5, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	d510      	bpl.n	8003ffe <_svfiprintf_r+0x36>
 8003fdc:	690b      	ldr	r3, [r1, #16]
 8003fde:	b973      	cbnz	r3, 8003ffe <_svfiprintf_r+0x36>
 8003fe0:	2140      	movs	r1, #64	@ 0x40
 8003fe2:	f7ff ff09 	bl	8003df8 <_malloc_r>
 8003fe6:	6028      	str	r0, [r5, #0]
 8003fe8:	6128      	str	r0, [r5, #16]
 8003fea:	b930      	cbnz	r0, 8003ffa <_svfiprintf_r+0x32>
 8003fec:	230c      	movs	r3, #12
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ff4:	b01d      	add	sp, #116	@ 0x74
 8003ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffa:	2340      	movs	r3, #64	@ 0x40
 8003ffc:	616b      	str	r3, [r5, #20]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9309      	str	r3, [sp, #36]	@ 0x24
 8004002:	2320      	movs	r3, #32
 8004004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004008:	f8cd 800c 	str.w	r8, [sp, #12]
 800400c:	2330      	movs	r3, #48	@ 0x30
 800400e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041ac <_svfiprintf_r+0x1e4>
 8004012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004016:	f04f 0901 	mov.w	r9, #1
 800401a:	4623      	mov	r3, r4
 800401c:	469a      	mov	sl, r3
 800401e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004022:	b10a      	cbz	r2, 8004028 <_svfiprintf_r+0x60>
 8004024:	2a25      	cmp	r2, #37	@ 0x25
 8004026:	d1f9      	bne.n	800401c <_svfiprintf_r+0x54>
 8004028:	ebba 0b04 	subs.w	fp, sl, r4
 800402c:	d00b      	beq.n	8004046 <_svfiprintf_r+0x7e>
 800402e:	465b      	mov	r3, fp
 8004030:	4622      	mov	r2, r4
 8004032:	4629      	mov	r1, r5
 8004034:	4638      	mov	r0, r7
 8004036:	f7ff ff6b 	bl	8003f10 <__ssputs_r>
 800403a:	3001      	adds	r0, #1
 800403c:	f000 80a7 	beq.w	800418e <_svfiprintf_r+0x1c6>
 8004040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004042:	445a      	add	r2, fp
 8004044:	9209      	str	r2, [sp, #36]	@ 0x24
 8004046:	f89a 3000 	ldrb.w	r3, [sl]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 809f 	beq.w	800418e <_svfiprintf_r+0x1c6>
 8004050:	2300      	movs	r3, #0
 8004052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800405a:	f10a 0a01 	add.w	sl, sl, #1
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	9307      	str	r3, [sp, #28]
 8004062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004066:	931a      	str	r3, [sp, #104]	@ 0x68
 8004068:	4654      	mov	r4, sl
 800406a:	2205      	movs	r2, #5
 800406c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004070:	484e      	ldr	r0, [pc, #312]	@ (80041ac <_svfiprintf_r+0x1e4>)
 8004072:	f7fc f8b5 	bl	80001e0 <memchr>
 8004076:	9a04      	ldr	r2, [sp, #16]
 8004078:	b9d8      	cbnz	r0, 80040b2 <_svfiprintf_r+0xea>
 800407a:	06d0      	lsls	r0, r2, #27
 800407c:	bf44      	itt	mi
 800407e:	2320      	movmi	r3, #32
 8004080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004084:	0711      	lsls	r1, r2, #28
 8004086:	bf44      	itt	mi
 8004088:	232b      	movmi	r3, #43	@ 0x2b
 800408a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800408e:	f89a 3000 	ldrb.w	r3, [sl]
 8004092:	2b2a      	cmp	r3, #42	@ 0x2a
 8004094:	d015      	beq.n	80040c2 <_svfiprintf_r+0xfa>
 8004096:	9a07      	ldr	r2, [sp, #28]
 8004098:	4654      	mov	r4, sl
 800409a:	2000      	movs	r0, #0
 800409c:	f04f 0c0a 	mov.w	ip, #10
 80040a0:	4621      	mov	r1, r4
 80040a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040a6:	3b30      	subs	r3, #48	@ 0x30
 80040a8:	2b09      	cmp	r3, #9
 80040aa:	d94b      	bls.n	8004144 <_svfiprintf_r+0x17c>
 80040ac:	b1b0      	cbz	r0, 80040dc <_svfiprintf_r+0x114>
 80040ae:	9207      	str	r2, [sp, #28]
 80040b0:	e014      	b.n	80040dc <_svfiprintf_r+0x114>
 80040b2:	eba0 0308 	sub.w	r3, r0, r8
 80040b6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ba:	4313      	orrs	r3, r2
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	46a2      	mov	sl, r4
 80040c0:	e7d2      	b.n	8004068 <_svfiprintf_r+0xa0>
 80040c2:	9b03      	ldr	r3, [sp, #12]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	9103      	str	r1, [sp, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfbb      	ittet	lt
 80040ce:	425b      	neglt	r3, r3
 80040d0:	f042 0202 	orrlt.w	r2, r2, #2
 80040d4:	9307      	strge	r3, [sp, #28]
 80040d6:	9307      	strlt	r3, [sp, #28]
 80040d8:	bfb8      	it	lt
 80040da:	9204      	strlt	r2, [sp, #16]
 80040dc:	7823      	ldrb	r3, [r4, #0]
 80040de:	2b2e      	cmp	r3, #46	@ 0x2e
 80040e0:	d10a      	bne.n	80040f8 <_svfiprintf_r+0x130>
 80040e2:	7863      	ldrb	r3, [r4, #1]
 80040e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80040e6:	d132      	bne.n	800414e <_svfiprintf_r+0x186>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040f4:	3402      	adds	r4, #2
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041bc <_svfiprintf_r+0x1f4>
 80040fc:	7821      	ldrb	r1, [r4, #0]
 80040fe:	2203      	movs	r2, #3
 8004100:	4650      	mov	r0, sl
 8004102:	f7fc f86d 	bl	80001e0 <memchr>
 8004106:	b138      	cbz	r0, 8004118 <_svfiprintf_r+0x150>
 8004108:	9b04      	ldr	r3, [sp, #16]
 800410a:	eba0 000a 	sub.w	r0, r0, sl
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	4082      	lsls	r2, r0
 8004112:	4313      	orrs	r3, r2
 8004114:	3401      	adds	r4, #1
 8004116:	9304      	str	r3, [sp, #16]
 8004118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411c:	4824      	ldr	r0, [pc, #144]	@ (80041b0 <_svfiprintf_r+0x1e8>)
 800411e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004122:	2206      	movs	r2, #6
 8004124:	f7fc f85c 	bl	80001e0 <memchr>
 8004128:	2800      	cmp	r0, #0
 800412a:	d036      	beq.n	800419a <_svfiprintf_r+0x1d2>
 800412c:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <_svfiprintf_r+0x1ec>)
 800412e:	bb1b      	cbnz	r3, 8004178 <_svfiprintf_r+0x1b0>
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	3307      	adds	r3, #7
 8004134:	f023 0307 	bic.w	r3, r3, #7
 8004138:	3308      	adds	r3, #8
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800413e:	4433      	add	r3, r6
 8004140:	9309      	str	r3, [sp, #36]	@ 0x24
 8004142:	e76a      	b.n	800401a <_svfiprintf_r+0x52>
 8004144:	fb0c 3202 	mla	r2, ip, r2, r3
 8004148:	460c      	mov	r4, r1
 800414a:	2001      	movs	r0, #1
 800414c:	e7a8      	b.n	80040a0 <_svfiprintf_r+0xd8>
 800414e:	2300      	movs	r3, #0
 8004150:	3401      	adds	r4, #1
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	4619      	mov	r1, r3
 8004156:	f04f 0c0a 	mov.w	ip, #10
 800415a:	4620      	mov	r0, r4
 800415c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004160:	3a30      	subs	r2, #48	@ 0x30
 8004162:	2a09      	cmp	r2, #9
 8004164:	d903      	bls.n	800416e <_svfiprintf_r+0x1a6>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0c6      	beq.n	80040f8 <_svfiprintf_r+0x130>
 800416a:	9105      	str	r1, [sp, #20]
 800416c:	e7c4      	b.n	80040f8 <_svfiprintf_r+0x130>
 800416e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004172:	4604      	mov	r4, r0
 8004174:	2301      	movs	r3, #1
 8004176:	e7f0      	b.n	800415a <_svfiprintf_r+0x192>
 8004178:	ab03      	add	r3, sp, #12
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	462a      	mov	r2, r5
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <_svfiprintf_r+0x1f0>)
 8004180:	a904      	add	r1, sp, #16
 8004182:	4638      	mov	r0, r7
 8004184:	f3af 8000 	nop.w
 8004188:	1c42      	adds	r2, r0, #1
 800418a:	4606      	mov	r6, r0
 800418c:	d1d6      	bne.n	800413c <_svfiprintf_r+0x174>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	065b      	lsls	r3, r3, #25
 8004192:	f53f af2d 	bmi.w	8003ff0 <_svfiprintf_r+0x28>
 8004196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004198:	e72c      	b.n	8003ff4 <_svfiprintf_r+0x2c>
 800419a:	ab03      	add	r3, sp, #12
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	462a      	mov	r2, r5
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <_svfiprintf_r+0x1f0>)
 80041a2:	a904      	add	r1, sp, #16
 80041a4:	4638      	mov	r0, r7
 80041a6:	f000 f879 	bl	800429c <_printf_i>
 80041aa:	e7ed      	b.n	8004188 <_svfiprintf_r+0x1c0>
 80041ac:	08004640 	.word	0x08004640
 80041b0:	0800464a 	.word	0x0800464a
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08003f11 	.word	0x08003f11
 80041bc:	08004646 	.word	0x08004646

080041c0 <_printf_common>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4616      	mov	r6, r2
 80041c6:	4698      	mov	r8, r3
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfb8      	it	lt
 80041d4:	4613      	movlt	r3, r2
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041dc:	4607      	mov	r7, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b10a      	cbz	r2, 80041e6 <_printf_common+0x26>
 80041e2:	3301      	adds	r3, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	0699      	lsls	r1, r3, #26
 80041ea:	bf42      	ittt	mi
 80041ec:	6833      	ldrmi	r3, [r6, #0]
 80041ee:	3302      	addmi	r3, #2
 80041f0:	6033      	strmi	r3, [r6, #0]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	f015 0506 	ands.w	r5, r5, #6
 80041f8:	d106      	bne.n	8004208 <_printf_common+0x48>
 80041fa:	f104 0a19 	add.w	sl, r4, #25
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	6832      	ldr	r2, [r6, #0]
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	42ab      	cmp	r3, r5
 8004206:	dc26      	bgt.n	8004256 <_printf_common+0x96>
 8004208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	3b00      	subs	r3, #0
 8004210:	bf18      	it	ne
 8004212:	2301      	movne	r3, #1
 8004214:	0692      	lsls	r2, r2, #26
 8004216:	d42b      	bmi.n	8004270 <_printf_common+0xb0>
 8004218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800421c:	4641      	mov	r1, r8
 800421e:	4638      	mov	r0, r7
 8004220:	47c8      	blx	r9
 8004222:	3001      	adds	r0, #1
 8004224:	d01e      	beq.n	8004264 <_printf_common+0xa4>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	f003 0306 	and.w	r3, r3, #6
 800422e:	2b04      	cmp	r3, #4
 8004230:	bf02      	ittt	eq
 8004232:	68e5      	ldreq	r5, [r4, #12]
 8004234:	6833      	ldreq	r3, [r6, #0]
 8004236:	1aed      	subeq	r5, r5, r3
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	bf0c      	ite	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	2500      	movne	r5, #0
 8004242:	4293      	cmp	r3, r2
 8004244:	bfc4      	itt	gt
 8004246:	1a9b      	subgt	r3, r3, r2
 8004248:	18ed      	addgt	r5, r5, r3
 800424a:	2600      	movs	r6, #0
 800424c:	341a      	adds	r4, #26
 800424e:	42b5      	cmp	r5, r6
 8004250:	d11a      	bne.n	8004288 <_printf_common+0xc8>
 8004252:	2000      	movs	r0, #0
 8004254:	e008      	b.n	8004268 <_printf_common+0xa8>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4641      	mov	r1, r8
 800425c:	4638      	mov	r0, r7
 800425e:	47c8      	blx	r9
 8004260:	3001      	adds	r0, #1
 8004262:	d103      	bne.n	800426c <_printf_common+0xac>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	3501      	adds	r5, #1
 800426e:	e7c6      	b.n	80041fe <_printf_common+0x3e>
 8004270:	18e1      	adds	r1, r4, r3
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	2030      	movs	r0, #48	@ 0x30
 8004276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800427a:	4422      	add	r2, r4
 800427c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004284:	3302      	adds	r3, #2
 8004286:	e7c7      	b.n	8004218 <_printf_common+0x58>
 8004288:	2301      	movs	r3, #1
 800428a:	4622      	mov	r2, r4
 800428c:	4641      	mov	r1, r8
 800428e:	4638      	mov	r0, r7
 8004290:	47c8      	blx	r9
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xa4>
 8004296:	3601      	adds	r6, #1
 8004298:	e7d9      	b.n	800424e <_printf_common+0x8e>
	...

0800429c <_printf_i>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	7e0f      	ldrb	r7, [r1, #24]
 80042a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042a4:	2f78      	cmp	r7, #120	@ 0x78
 80042a6:	4691      	mov	r9, r2
 80042a8:	4680      	mov	r8, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	469a      	mov	sl, r3
 80042ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042b2:	d807      	bhi.n	80042c4 <_printf_i+0x28>
 80042b4:	2f62      	cmp	r7, #98	@ 0x62
 80042b6:	d80a      	bhi.n	80042ce <_printf_i+0x32>
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	f000 80d1 	beq.w	8004460 <_printf_i+0x1c4>
 80042be:	2f58      	cmp	r7, #88	@ 0x58
 80042c0:	f000 80b8 	beq.w	8004434 <_printf_i+0x198>
 80042c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042cc:	e03a      	b.n	8004344 <_printf_i+0xa8>
 80042ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042d2:	2b15      	cmp	r3, #21
 80042d4:	d8f6      	bhi.n	80042c4 <_printf_i+0x28>
 80042d6:	a101      	add	r1, pc, #4	@ (adr r1, 80042dc <_printf_i+0x40>)
 80042d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004349 	.word	0x08004349
 80042e4:	080042c5 	.word	0x080042c5
 80042e8:	080042c5 	.word	0x080042c5
 80042ec:	080042c5 	.word	0x080042c5
 80042f0:	080042c5 	.word	0x080042c5
 80042f4:	08004349 	.word	0x08004349
 80042f8:	080042c5 	.word	0x080042c5
 80042fc:	080042c5 	.word	0x080042c5
 8004300:	080042c5 	.word	0x080042c5
 8004304:	080042c5 	.word	0x080042c5
 8004308:	08004447 	.word	0x08004447
 800430c:	08004373 	.word	0x08004373
 8004310:	08004401 	.word	0x08004401
 8004314:	080042c5 	.word	0x080042c5
 8004318:	080042c5 	.word	0x080042c5
 800431c:	08004469 	.word	0x08004469
 8004320:	080042c5 	.word	0x080042c5
 8004324:	08004373 	.word	0x08004373
 8004328:	080042c5 	.word	0x080042c5
 800432c:	080042c5 	.word	0x080042c5
 8004330:	08004409 	.word	0x08004409
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6032      	str	r2, [r6, #0]
 800433c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004344:	2301      	movs	r3, #1
 8004346:	e09c      	b.n	8004482 <_printf_i+0x1e6>
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1d19      	adds	r1, r3, #4
 800434e:	6031      	str	r1, [r6, #0]
 8004350:	0606      	lsls	r6, r0, #24
 8004352:	d501      	bpl.n	8004358 <_printf_i+0xbc>
 8004354:	681d      	ldr	r5, [r3, #0]
 8004356:	e003      	b.n	8004360 <_printf_i+0xc4>
 8004358:	0645      	lsls	r5, r0, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0xb8>
 800435c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004360:	2d00      	cmp	r5, #0
 8004362:	da03      	bge.n	800436c <_printf_i+0xd0>
 8004364:	232d      	movs	r3, #45	@ 0x2d
 8004366:	426d      	negs	r5, r5
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800436c:	4858      	ldr	r0, [pc, #352]	@ (80044d0 <_printf_i+0x234>)
 800436e:	230a      	movs	r3, #10
 8004370:	e011      	b.n	8004396 <_printf_i+0xfa>
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	0608      	lsls	r0, r1, #24
 8004378:	f853 5b04 	ldr.w	r5, [r3], #4
 800437c:	d402      	bmi.n	8004384 <_printf_i+0xe8>
 800437e:	0649      	lsls	r1, r1, #25
 8004380:	bf48      	it	mi
 8004382:	b2ad      	uxthmi	r5, r5
 8004384:	2f6f      	cmp	r7, #111	@ 0x6f
 8004386:	4852      	ldr	r0, [pc, #328]	@ (80044d0 <_printf_i+0x234>)
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	bf14      	ite	ne
 800438c:	230a      	movne	r3, #10
 800438e:	2308      	moveq	r3, #8
 8004390:	2100      	movs	r1, #0
 8004392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004396:	6866      	ldr	r6, [r4, #4]
 8004398:	60a6      	str	r6, [r4, #8]
 800439a:	2e00      	cmp	r6, #0
 800439c:	db05      	blt.n	80043aa <_printf_i+0x10e>
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	432e      	orrs	r6, r5
 80043a2:	f021 0104 	bic.w	r1, r1, #4
 80043a6:	6021      	str	r1, [r4, #0]
 80043a8:	d04b      	beq.n	8004442 <_printf_i+0x1a6>
 80043aa:	4616      	mov	r6, r2
 80043ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80043b0:	fb03 5711 	mls	r7, r3, r1, r5
 80043b4:	5dc7      	ldrb	r7, [r0, r7]
 80043b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043ba:	462f      	mov	r7, r5
 80043bc:	42bb      	cmp	r3, r7
 80043be:	460d      	mov	r5, r1
 80043c0:	d9f4      	bls.n	80043ac <_printf_i+0x110>
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d10b      	bne.n	80043de <_printf_i+0x142>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07df      	lsls	r7, r3, #31
 80043ca:	d508      	bpl.n	80043de <_printf_i+0x142>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	6861      	ldr	r1, [r4, #4]
 80043d0:	4299      	cmp	r1, r3
 80043d2:	bfde      	ittt	le
 80043d4:	2330      	movle	r3, #48	@ 0x30
 80043d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80043de:	1b92      	subs	r2, r2, r6
 80043e0:	6122      	str	r2, [r4, #16]
 80043e2:	f8cd a000 	str.w	sl, [sp]
 80043e6:	464b      	mov	r3, r9
 80043e8:	aa03      	add	r2, sp, #12
 80043ea:	4621      	mov	r1, r4
 80043ec:	4640      	mov	r0, r8
 80043ee:	f7ff fee7 	bl	80041c0 <_printf_common>
 80043f2:	3001      	adds	r0, #1
 80043f4:	d14a      	bne.n	800448c <_printf_i+0x1f0>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043fa:	b004      	add	sp, #16
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	f043 0320 	orr.w	r3, r3, #32
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	4832      	ldr	r0, [pc, #200]	@ (80044d4 <_printf_i+0x238>)
 800440a:	2778      	movs	r7, #120	@ 0x78
 800440c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6831      	ldr	r1, [r6, #0]
 8004414:	061f      	lsls	r7, r3, #24
 8004416:	f851 5b04 	ldr.w	r5, [r1], #4
 800441a:	d402      	bmi.n	8004422 <_printf_i+0x186>
 800441c:	065f      	lsls	r7, r3, #25
 800441e:	bf48      	it	mi
 8004420:	b2ad      	uxthmi	r5, r5
 8004422:	6031      	str	r1, [r6, #0]
 8004424:	07d9      	lsls	r1, r3, #31
 8004426:	bf44      	itt	mi
 8004428:	f043 0320 	orrmi.w	r3, r3, #32
 800442c:	6023      	strmi	r3, [r4, #0]
 800442e:	b11d      	cbz	r5, 8004438 <_printf_i+0x19c>
 8004430:	2310      	movs	r3, #16
 8004432:	e7ad      	b.n	8004390 <_printf_i+0xf4>
 8004434:	4826      	ldr	r0, [pc, #152]	@ (80044d0 <_printf_i+0x234>)
 8004436:	e7e9      	b.n	800440c <_printf_i+0x170>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	e7f6      	b.n	8004430 <_printf_i+0x194>
 8004442:	4616      	mov	r6, r2
 8004444:	e7bd      	b.n	80043c2 <_printf_i+0x126>
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	6825      	ldr	r5, [r4, #0]
 800444a:	6961      	ldr	r1, [r4, #20]
 800444c:	1d18      	adds	r0, r3, #4
 800444e:	6030      	str	r0, [r6, #0]
 8004450:	062e      	lsls	r6, r5, #24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	d501      	bpl.n	800445a <_printf_i+0x1be>
 8004456:	6019      	str	r1, [r3, #0]
 8004458:	e002      	b.n	8004460 <_printf_i+0x1c4>
 800445a:	0668      	lsls	r0, r5, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0x1ba>
 800445e:	8019      	strh	r1, [r3, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	6123      	str	r3, [r4, #16]
 8004464:	4616      	mov	r6, r2
 8004466:	e7bc      	b.n	80043e2 <_printf_i+0x146>
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	6032      	str	r2, [r6, #0]
 800446e:	681e      	ldr	r6, [r3, #0]
 8004470:	6862      	ldr	r2, [r4, #4]
 8004472:	2100      	movs	r1, #0
 8004474:	4630      	mov	r0, r6
 8004476:	f7fb feb3 	bl	80001e0 <memchr>
 800447a:	b108      	cbz	r0, 8004480 <_printf_i+0x1e4>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	6060      	str	r0, [r4, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2300      	movs	r3, #0
 8004486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800448a:	e7aa      	b.n	80043e2 <_printf_i+0x146>
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	4632      	mov	r2, r6
 8004490:	4649      	mov	r1, r9
 8004492:	4640      	mov	r0, r8
 8004494:	47d0      	blx	sl
 8004496:	3001      	adds	r0, #1
 8004498:	d0ad      	beq.n	80043f6 <_printf_i+0x15a>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	d413      	bmi.n	80044c8 <_printf_i+0x22c>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	4298      	cmp	r0, r3
 80044a6:	bfb8      	it	lt
 80044a8:	4618      	movlt	r0, r3
 80044aa:	e7a6      	b.n	80043fa <_printf_i+0x15e>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4632      	mov	r2, r6
 80044b0:	4649      	mov	r1, r9
 80044b2:	4640      	mov	r0, r8
 80044b4:	47d0      	blx	sl
 80044b6:	3001      	adds	r0, #1
 80044b8:	d09d      	beq.n	80043f6 <_printf_i+0x15a>
 80044ba:	3501      	adds	r5, #1
 80044bc:	68e3      	ldr	r3, [r4, #12]
 80044be:	9903      	ldr	r1, [sp, #12]
 80044c0:	1a5b      	subs	r3, r3, r1
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	dcf2      	bgt.n	80044ac <_printf_i+0x210>
 80044c6:	e7eb      	b.n	80044a0 <_printf_i+0x204>
 80044c8:	2500      	movs	r5, #0
 80044ca:	f104 0619 	add.w	r6, r4, #25
 80044ce:	e7f5      	b.n	80044bc <_printf_i+0x220>
 80044d0:	08004651 	.word	0x08004651
 80044d4:	08004662 	.word	0x08004662

080044d8 <memmove>:
 80044d8:	4288      	cmp	r0, r1
 80044da:	b510      	push	{r4, lr}
 80044dc:	eb01 0402 	add.w	r4, r1, r2
 80044e0:	d902      	bls.n	80044e8 <memmove+0x10>
 80044e2:	4284      	cmp	r4, r0
 80044e4:	4623      	mov	r3, r4
 80044e6:	d807      	bhi.n	80044f8 <memmove+0x20>
 80044e8:	1e43      	subs	r3, r0, #1
 80044ea:	42a1      	cmp	r1, r4
 80044ec:	d008      	beq.n	8004500 <memmove+0x28>
 80044ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044f6:	e7f8      	b.n	80044ea <memmove+0x12>
 80044f8:	4402      	add	r2, r0
 80044fa:	4601      	mov	r1, r0
 80044fc:	428a      	cmp	r2, r1
 80044fe:	d100      	bne.n	8004502 <memmove+0x2a>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800450a:	e7f7      	b.n	80044fc <memmove+0x24>

0800450c <_sbrk_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d06      	ldr	r5, [pc, #24]	@ (8004528 <_sbrk_r+0x1c>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f7fc fd04 	bl	8000f24 <_sbrk>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_sbrk_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_sbrk_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	20000284 	.word	0x20000284

0800452c <memcpy>:
 800452c:	440a      	add	r2, r1
 800452e:	4291      	cmp	r1, r2
 8004530:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004534:	d100      	bne.n	8004538 <memcpy+0xc>
 8004536:	4770      	bx	lr
 8004538:	b510      	push	{r4, lr}
 800453a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800453e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004542:	4291      	cmp	r1, r2
 8004544:	d1f9      	bne.n	800453a <memcpy+0xe>
 8004546:	bd10      	pop	{r4, pc}

08004548 <_realloc_r>:
 8004548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454c:	4607      	mov	r7, r0
 800454e:	4614      	mov	r4, r2
 8004550:	460d      	mov	r5, r1
 8004552:	b921      	cbnz	r1, 800455e <_realloc_r+0x16>
 8004554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	4611      	mov	r1, r2
 800455a:	f7ff bc4d 	b.w	8003df8 <_malloc_r>
 800455e:	b92a      	cbnz	r2, 800456c <_realloc_r+0x24>
 8004560:	f7ff fbde 	bl	8003d20 <_free_r>
 8004564:	4625      	mov	r5, r4
 8004566:	4628      	mov	r0, r5
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456c:	f000 f81a 	bl	80045a4 <_malloc_usable_size_r>
 8004570:	4284      	cmp	r4, r0
 8004572:	4606      	mov	r6, r0
 8004574:	d802      	bhi.n	800457c <_realloc_r+0x34>
 8004576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800457a:	d8f4      	bhi.n	8004566 <_realloc_r+0x1e>
 800457c:	4621      	mov	r1, r4
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff fc3a 	bl	8003df8 <_malloc_r>
 8004584:	4680      	mov	r8, r0
 8004586:	b908      	cbnz	r0, 800458c <_realloc_r+0x44>
 8004588:	4645      	mov	r5, r8
 800458a:	e7ec      	b.n	8004566 <_realloc_r+0x1e>
 800458c:	42b4      	cmp	r4, r6
 800458e:	4622      	mov	r2, r4
 8004590:	4629      	mov	r1, r5
 8004592:	bf28      	it	cs
 8004594:	4632      	movcs	r2, r6
 8004596:	f7ff ffc9 	bl	800452c <memcpy>
 800459a:	4629      	mov	r1, r5
 800459c:	4638      	mov	r0, r7
 800459e:	f7ff fbbf 	bl	8003d20 <_free_r>
 80045a2:	e7f1      	b.n	8004588 <_realloc_r+0x40>

080045a4 <_malloc_usable_size_r>:
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f18      	subs	r0, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfbc      	itt	lt
 80045ae:	580b      	ldrlt	r3, [r1, r0]
 80045b0:	18c0      	addlt	r0, r0, r3
 80045b2:	4770      	bx	lr

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr
