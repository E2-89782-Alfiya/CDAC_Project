
CAN_TX_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005df4  08005df4  00006df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005df8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000042dc  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000433c  2000433c  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f8b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c8  00000000  00000000  0001d01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  000200e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb7  00000000  00000000  000213d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002492c  00000000  00000000  0002228f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001455f  00000000  00000000  00046bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e32c1  00000000  00000000  0005b11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e3db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054a0  00000000  00000000  0013e420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001438c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cf0 	.word	0x08005cf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005cf0 	.word	0x08005cf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	2000011c 	.word	0x2000011c

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fd47 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f86b 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f9d7 	bl	80009a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f2:	f000 f8d1 	bl	8000798 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f6:	f000 f921 	bl	800083c <MX_ADC2_Init>
  MX_CAN1_Init();
 80005fa:	f000 f971 	bl	80008e0 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f9a5 	bl	800094c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000602:	4828      	ldr	r0, [pc, #160]	@ (80006a4 <main+0xc4>)
 8000604:	f001 fa75 	bl	8001af2 <HAL_CAN_Start>


  // Configure CAN Tx Header
  TxHeader.DLC = 4;                            // Data length = 4 bytes
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <main+0xc8>)
 800060a:	2204      	movs	r2, #4
 800060c:	611a      	str	r2, [r3, #16]
  TxHeader.RTR = CAN_RTR_DATA;                // Remote Transmission Request = DATA
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <main+0xc8>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;                  // Standard Identifier
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <main+0xc8>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x0A9;                      // Identifier
 800061a:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <main+0xc8>)
 800061c:	22a9      	movs	r2, #169	@ 0xa9
 800061e:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x00;                       // Not used for standard ID
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <main+0xc8>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  TxHeader.TransmitGlobalTime = DISABLE;      // Disable timestamp
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <main+0xc8>)
 8000628:	2200      	movs	r2, #0
 800062a:	751a      	strb	r2, [r3, #20]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <main+0xcc>)
 800062e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000640:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fbe3 	bl	8003e12 <osThreadCreate>
 800064c:	4603      	mov	r3, r0
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <main+0xd0>)
 8000650:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Create sensor reading task
    osThreadDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 128);
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0xd4>)
 8000654:	f107 0420 	add.w	r4, r7, #32
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fbd0 	bl	8003e12 <osThreadCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <main+0xd8>)
 8000676:	6013      	str	r3, [r2, #0]

    // Create CAN transmit task
    osThreadDef(canTxTask, StartCanTxTask, osPriorityAboveNormal, 0, 128);
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <main+0xdc>)
 800067a:	1d3c      	adds	r4, r7, #4
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fbbf 	bl	8003e12 <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <main+0xe0>)
 8000698:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069a:	f003 fbb3 	bl	8003e04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <main+0xbe>
 80006a2:	bf00      	nop
 80006a4:	200003ac 	.word	0x200003ac
 80006a8:	2000042c 	.word	0x2000042c
 80006ac:	08005d14 	.word	0x08005d14
 80006b0:	2000041c 	.word	0x2000041c
 80006b4:	08005d3c 	.word	0x08005d3c
 80006b8:	20000420 	.word	0x20000420
 80006bc:	08005d64 	.word	0x08005d64
 80006c0:	20000424 	.word	0x20000424

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fe30 	bl	8005338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000738:	2348      	movs	r3, #72	@ 0x48
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 ffd1 	bl	80026f0 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fa34 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fa32 	bl	8002be0 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 fa1d 	bl	8000bc0 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <MX_ADC1_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <MX_ADC1_Init+0xa0>)
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_ADC1_Init+0x98>)
 80007fa:	f000 fc7f 	bl	80010fc <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 f9dc 	bl	8000bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000808:	2301      	movs	r3, #1
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_ADC1_Init+0x98>)
 800081a:	f000 fe51 	bl	80014c0 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 f9cc 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000031c 	.word	0x2000031c
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800084e:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000850:	4a21      	ldr	r2, [pc, #132]	@ (80008d8 <MX_ADC2_Init+0x9c>)
 8000852:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000856:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800085a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800085c:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_ADC2_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_ADC2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_ADC2_Init+0x98>)
 800087e:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <MX_ADC2_Init+0xa0>)
 8000880:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_ADC2_Init+0x98>)
 800088a:	2201      	movs	r2, #1
 800088c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_ADC2_Init+0x98>)
 8000898:	2201      	movs	r2, #1
 800089a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800089c:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <MX_ADC2_Init+0x98>)
 800089e:	f000 fc2d 	bl	80010fc <HAL_ADC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 f98a 	bl	8000bc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ac:	2303      	movs	r3, #3
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_ADC2_Init+0x98>)
 80008be:	f000 fdff 	bl	80014c0 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008c8:	f000 f97a 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000364 	.word	0x20000364
 80008d8:	40012100 	.word	0x40012100
 80008dc:	0f000001 	.word	0x0f000001

080008e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008e4:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_CAN1_Init+0x64>)
 80008e6:	4a18      	ldr	r2, [pc, #96]	@ (8000948 <MX_CAN1_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_CAN1_Init+0x64>)
 80008ec:	2212      	movs	r2, #18
 80008ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_CAN1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_CAN1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_CAN1_Init+0x64>)
 80008fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000902:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_CAN1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_CAN1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_CAN1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_CAN1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_CAN1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_CAN1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_CAN1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_CAN1_Init+0x64>)
 8000930:	f000 ffe4 	bl	80018fc <HAL_CAN_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 f941 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200003ac 	.word	0x200003ac
 8000948:	40006400 	.word	0x40006400

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_USART2_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART2_UART_Init+0x4c>)
 8000984:	f002 fe1a 	bl	80035bc <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f917 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200003d4 	.word	0x200003d4
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a26      	ldr	r2, [pc, #152]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a11      	ldr	r2, [pc, #68]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_GPIO_Init+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000a2c:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <MX_GPIO_Init+0xbc>)
 8000a2e:	f001 fe2b 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000a32:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_GPIO_Init+0xbc>)
 8000a4c:	f001 fc80 	bl	8002350 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	@ 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020c00 	.word	0x40020c00

08000a60 <StartSensorTask>:

/* USER CODE BEGIN 4 */
// Task to read data from LDR and MQ5 sensors using ADC
void StartSensorTask(void const * argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  while (1)
  {
    // Read LDR value from ADC1
    HAL_ADC_Start(&hadc1);
 8000a68:	4814      	ldr	r0, [pc, #80]	@ (8000abc <StartSensorTask+0x5c>)
 8000a6a:	f000 fb8b 	bl	8001184 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a6e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a72:	4812      	ldr	r0, [pc, #72]	@ (8000abc <StartSensorTask+0x5c>)
 8000a74:	f000 fc8b 	bl	800138e <HAL_ADC_PollForConversion>
    LDR_DATA = HAL_ADC_GetValue(&hadc1);
 8000a78:	4810      	ldr	r0, [pc, #64]	@ (8000abc <StartSensorTask+0x5c>)
 8000a7a:	f000 fd13 	bl	80014a4 <HAL_ADC_GetValue>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <StartSensorTask+0x60>)
 8000a84:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <StartSensorTask+0x5c>)
 8000a88:	f000 fc4e 	bl	8001328 <HAL_ADC_Stop>

    // Read MQ5 value from ADC2
    HAL_ADC_Start(&hadc2);
 8000a8c:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <StartSensorTask+0x64>)
 8000a8e:	f000 fb79 	bl	8001184 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000a92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a96:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <StartSensorTask+0x64>)
 8000a98:	f000 fc79 	bl	800138e <HAL_ADC_PollForConversion>
    MQ5_DATA = HAL_ADC_GetValue(&hadc2);
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <StartSensorTask+0x64>)
 8000a9e:	f000 fd01 	bl	80014a4 <HAL_ADC_GetValue>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <StartSensorTask+0x68>)
 8000aa8:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc2);
 8000aaa:	4806      	ldr	r0, [pc, #24]	@ (8000ac4 <StartSensorTask+0x64>)
 8000aac:	f000 fc3c 	bl	8001328 <HAL_ADC_Stop>

    osDelay(2000);  // Delay 2 seconds
 8000ab0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ab4:	f003 f9f9 	bl	8003eaa <osDelay>
    HAL_ADC_Start(&hadc1);
 8000ab8:	bf00      	nop
 8000aba:	e7d5      	b.n	8000a68 <StartSensorTask+0x8>
 8000abc:	2000031c 	.word	0x2000031c
 8000ac0:	20000428 	.word	0x20000428
 8000ac4:	20000364 	.word	0x20000364
 8000ac8:	2000042a 	.word	0x2000042a

08000acc <StartCanTxTask>:
  }
}

// Task to transmit data over CAN and UART
void StartCanTxTask(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b092      	sub	sp, #72	@ 0x48
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  char msg[64];
  while (1)
  {
    // Send data over UART2
    sprintf(msg, "LDR: %d  MQ5: %d\r\n", LDR_DATA, MQ5_DATA);
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <StartCanTxTask+0x9c>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <StartCanTxTask+0xa0>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	f107 0008 	add.w	r0, r7, #8
 8000ae2:	4923      	ldr	r1, [pc, #140]	@ (8000b70 <StartCanTxTask+0xa4>)
 8000ae4:	f004 fc06 	bl	80052f4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb6f 	bl	80001d0 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	f107 0108 	add.w	r1, r7, #8
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000afe:	481d      	ldr	r0, [pc, #116]	@ (8000b74 <StartCanTxTask+0xa8>)
 8000b00:	f002 fdac 	bl	800365c <HAL_UART_Transmit>

    // Pack sensor data into CAN data array
    TxData[0] = (LDR_DATA >> 8) & 0xFF;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <StartCanTxTask+0x9c>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <StartCanTxTask+0xac>)
 8000b10:	701a      	strb	r2, [r3, #0]
    TxData[1] = LDR_DATA & 0xFF;
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <StartCanTxTask+0x9c>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <StartCanTxTask+0xac>)
 8000b1a:	705a      	strb	r2, [r3, #1]
    TxData[2] = (MQ5_DATA >> 8) & 0xFF;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <StartCanTxTask+0xa0>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <StartCanTxTask+0xac>)
 8000b28:	709a      	strb	r2, [r3, #2]
    TxData[3] = MQ5_DATA & 0xFF;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <StartCanTxTask+0xa0>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <StartCanTxTask+0xac>)
 8000b32:	70da      	strb	r2, [r3, #3]

    // Send CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <StartCanTxTask+0xb0>)
 8000b36:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <StartCanTxTask+0xac>)
 8000b38:	4911      	ldr	r1, [pc, #68]	@ (8000b80 <StartCanTxTask+0xb4>)
 8000b3a:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <StartCanTxTask+0xb8>)
 8000b3c:	f001 f81d 	bl	8001b7a <HAL_CAN_AddTxMessage>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <StartCanTxTask+0x88>
    {
      // Indicate error using RED LED (PD14)
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b4c:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <StartCanTxTask+0xbc>)
 8000b4e:	f001 fd9b 	bl	8002688 <HAL_GPIO_WritePin>
 8000b52:	e004      	b.n	8000b5e <StartCanTxTask+0x92>
    }
    else
    {
      // Toggle GREEN LED (PD12) on success
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <StartCanTxTask+0xbc>)
 8000b5a:	f001 fdae 	bl	80026ba <HAL_GPIO_TogglePin>
    }

    osDelay(2000);  // Delay 2 seconds
 8000b5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b62:	f003 f9a2 	bl	8003eaa <osDelay>
    sprintf(msg, "LDR: %d  MQ5: %d\r\n", LDR_DATA, MQ5_DATA);
 8000b66:	e7b5      	b.n	8000ad4 <StartCanTxTask+0x8>
 8000b68:	20000428 	.word	0x20000428
 8000b6c:	2000042a 	.word	0x2000042a
 8000b70:	08005d80 	.word	0x08005d80
 8000b74:	200003d4 	.word	0x200003d4
 8000b78:	20000444 	.word	0x20000444
 8000b7c:	2000044c 	.word	0x2000044c
 8000b80:	2000042c 	.word	0x2000042c
 8000b84:	200003ac 	.word	0x200003ac
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f003 f988 	bl	8003eaa <osDelay>
 8000b9a:	e7fb      	b.n	8000b94 <StartDefaultTask+0x8>

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bae:	f000 fa85 	bl	80010bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <HAL_MspInit+0x54>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_MspInit+0x54>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f001 fb73 	bl	80022fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2e      	ldr	r2, [pc, #184]	@ (8000cfc <HAL_ADC_MspInit+0xd8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d128      	bne.n	8000c98 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a25      	ldr	r2, [pc, #148]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481c      	ldr	r0, [pc, #112]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c92:	f001 fb5d 	bl	8002350 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c96:	e02c      	b.n	8000cf2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d127      	bne.n	8000cf2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MQ5_Pin;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MQ5_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000cee:	f001 fb2f 	bl	8002350 <HAL_GPIO_Init>
}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	@ 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40012000 	.word	0x40012000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40012100 	.word	0x40012100

08000d0c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <HAL_CAN_MspInit+0x94>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d134      	bne.n	8000d98 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <HAL_CAN_MspInit+0x98>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <HAL_CAN_MspInit+0x98>)
 8000d38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_CAN_MspInit+0x98>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_CAN_MspInit+0x98>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_CAN_MspInit+0x98>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_CAN_MspInit+0x98>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d78:	2309      	movs	r3, #9
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <HAL_CAN_MspInit+0x9c>)
 8000d84:	f001 fae4 	bl	8002350 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2105      	movs	r1, #5
 8000d8c:	2013      	movs	r0, #19
 8000d8e:	f001 fab5 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d92:	2013      	movs	r0, #19
 8000d94:	f001 face 	bl	8002334 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40006400 	.word	0x40006400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <HAL_UART_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e06:	2360      	movs	r3, #96	@ 0x60
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_UART_MspInit+0x8c>)
 8000e22:	f001 fa95 	bl	8002350 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020c00 	.word	0x40020c00

08000e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	@ 0x38
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <HAL_InitTick+0xe4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a32      	ldr	r2, [pc, #200]	@ (8000f20 <HAL_InitTick+0xe4>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <HAL_InitTick+0xe4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f003 0310 	and.w	r3, r3, #16
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e68:	f107 0210 	add.w	r2, r7, #16
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 f8d4 	bl	8003020 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e82:	f002 f8a5 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8000e86:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e8a:	f002 f8a1 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e96:	4a23      	ldr	r2, [pc, #140]	@ (8000f24 <HAL_InitTick+0xe8>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	0c9b      	lsrs	r3, r3, #18
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <HAL_InitTick+0xec>)
 8000ea4:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <HAL_InitTick+0xf0>)
 8000ea6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <HAL_InitTick+0xec>)
 8000eaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <HAL_InitTick+0xec>)
 8000eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <HAL_InitTick+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <HAL_InitTick+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_InitTick+0xec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ec8:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <HAL_InitTick+0xec>)
 8000eca:	f002 f8db 	bl	8003084 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11b      	bne.n	8000f14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000edc:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <HAL_InitTick+0xec>)
 8000ede:	f002 f92b 	bl	8003138 <HAL_TIM_Base_Start_IT>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d111      	bne.n	8000f14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef0:	2036      	movs	r0, #54	@ 0x36
 8000ef2:	f001 fa1f 	bl	8002334 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d808      	bhi.n	8000f0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2036      	movs	r0, #54	@ 0x36
 8000f02:	f001 f9fb 	bl	80022fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <HAL_InitTick+0xf4>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e002      	b.n	8000f14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3738      	adds	r7, #56	@ 0x38
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	20000450 	.word	0x20000450
 8000f2c:	40001000 	.word	0x40001000
 8000f30:	20000004 	.word	0x20000004

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <CAN1_TX_IRQHandler+0x10>)
 8000f72:	f000 fed2 	bl	8001d1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200003ac 	.word	0x200003ac

08000f80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <TIM6_DAC_IRQHandler+0x10>)
 8000f86:	f002 f947 	bl	8003218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000450 	.word	0x20000450

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f004 fa1e 	bl	8005404 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20020000 	.word	0x20020000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000498 	.word	0x20000498
 8000ffc:	20004340 	.word	0x20004340

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001028:	f7ff ffea 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f004 f9dd 	bl	8005410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fac3 	bl	80005e0 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001068:	08005df8 	.word	0x08005df8
  ldr r2, =_sbss
 800106c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001070:	2000433c 	.word	0x2000433c

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f001 f920 	bl	80022e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fec8 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fd8e 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	2000049c 	.word	0x2000049c

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000049c 	.word	0x2000049c

080010fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e033      	b.n	800117a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fd82 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d118      	bne.n	800116c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001142:	f023 0302 	bic.w	r3, r3, #2
 8001146:	f043 0202 	orr.w	r2, r3, #2
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fad8 	bl	8001704 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f023 0303 	bic.w	r3, r3, #3
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
 800116a:	e001      	b.n	8001170 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_ADC_Start+0x1a>
 800119a:	2302      	movs	r3, #2
 800119c:	e0b2      	b.n	8001304 <HAL_ADC_Start+0x180>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d018      	beq.n	80011e6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c4:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <HAL_ADC_Start+0x18c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a52      	ldr	r2, [pc, #328]	@ (8001314 <HAL_ADC_Start+0x190>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9a      	lsrs	r2, r3, #18
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d17a      	bne.n	80012ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800121e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800122e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001232:	d106      	bne.n	8001242 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001238:	f023 0206 	bic.w	r2, r3, #6
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001240:	e002      	b.n	8001248 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001250:	4b31      	ldr	r3, [pc, #196]	@ (8001318 <HAL_ADC_Start+0x194>)
 8001252:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800125c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	2b00      	cmp	r3, #0
 8001268:	d12a      	bne.n	80012c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2b      	ldr	r2, [pc, #172]	@ (800131c <HAL_ADC_Start+0x198>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d015      	beq.n	80012a0 <HAL_ADC_Start+0x11c>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <HAL_ADC_Start+0x19c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d105      	bne.n	800128a <HAL_ADC_Start+0x106>
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_ADC_Start+0x194>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a25      	ldr	r2, [pc, #148]	@ (8001324 <HAL_ADC_Start+0x1a0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d136      	bne.n	8001302 <HAL_ADC_Start+0x17e>
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_ADC_Start+0x194>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d130      	bne.n	8001302 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d129      	bne.n	8001302 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	e020      	b.n	8001302 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a15      	ldr	r2, [pc, #84]	@ (800131c <HAL_ADC_Start+0x198>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d11b      	bne.n	8001302 <HAL_ADC_Start+0x17e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d114      	bne.n	8001302 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	e00b      	b.n	8001302 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f043 0210 	orr.w	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000000 	.word	0x20000000
 8001314:	431bde83 	.word	0x431bde83
 8001318:	40012300 	.word	0x40012300
 800131c:	40012000 	.word	0x40012000
 8001320:	40012100 	.word	0x40012100
 8001324:	40012200 	.word	0x40012200

08001328 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Stop+0x16>
 800133a:	2302      	movs	r3, #2
 800133c:	e021      	b.n	8001382 <HAL_ADC_Stop+0x5a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013aa:	d113      	bne.n	80013d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013ba:	d10b      	bne.n	80013d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e063      	b.n	800149c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff fe86 	bl	80010e4 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013da:	e021      	b.n	8001420 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013e2:	d01d      	beq.n	8001420 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_ADC_PollForConversion+0x6c>
 80013ea:	f7ff fe7b 	bl	80010e4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d212      	bcs.n	8001420 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b02      	cmp	r3, #2
 8001406:	d00b      	beq.n	8001420 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f043 0204 	orr.w	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e03d      	b.n	800149c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d1d6      	bne.n	80013dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 0212 	mvn.w	r2, #18
 8001436:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d123      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11f      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c>
 80014d8:	2302      	movs	r3, #2
 80014da:	e105      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x228>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d925      	bls.n	8001538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43da      	mvns	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	400a      	ands	r2, r1
 8001510:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	4603      	mov	r3, r0
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4403      	add	r3, r0
 800152a:	3b1e      	subs	r3, #30
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e022      	b.n	800157e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4403      	add	r3, r0
 8001574:	409a      	lsls	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d824      	bhi.n	80015d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ce:	e04c      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d824      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	@ 0x23
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b23      	subs	r3, #35	@ 0x23
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001620:	e023      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b41      	subs	r3, #65	@ 0x41
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	@ 0x41
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <HAL_ADC_ConfigChannel+0x234>)
 800166c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	@ (80016f8 <HAL_ADC_ConfigChannel+0x238>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d109      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d105      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_ADC_ConfigChannel+0x238>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d123      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d003      	beq.n	80016a6 <HAL_ADC_ConfigChannel+0x1e6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b11      	cmp	r3, #17
 80016a4:	d11b      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d111      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <HAL_ADC_ConfigChannel+0x23c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a10      	ldr	r2, [pc, #64]	@ (8001700 <HAL_ADC_ConfigChannel+0x240>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40012300 	.word	0x40012300
 80016f8:	40012000 	.word	0x40012000
 80016fc:	20000000 	.word	0x20000000
 8001700:	431bde83 	.word	0x431bde83

08001704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170c:	4b79      	ldr	r3, [pc, #484]	@ (80018f4 <ADC_Init+0x1f0>)
 800170e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800175c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001796:	4a58      	ldr	r2, [pc, #352]	@ (80018f8 <ADC_Init+0x1f4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d022      	beq.n	80017e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6899      	ldr	r1, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	e00f      	b.n	8001802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001800:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0202 	bic.w	r2, r2, #2
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7e1b      	ldrb	r3, [r3, #24]
 800181c:	005a      	lsls	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800183e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800184e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	3b01      	subs	r3, #1
 800185c:	035a      	lsls	r2, r3, #13
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	e007      	b.n	8001878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001876:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	3b01      	subs	r3, #1
 8001894:	051a      	lsls	r2, r3, #20
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018ba:	025a      	lsls	r2, r3, #9
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	029a      	lsls	r2, r3, #10
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40012300 	.word	0x40012300
 80018f8:	0f000001 	.word	0x0f000001

080018fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0ed      	b.n	8001aea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff f9f6 	bl	8000d0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff fbd8 	bl	80010e4 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7ff fbd4 	bl	80010e4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0c5      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0e5      	beq.n	8001938 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0202 	bic.w	r2, r2, #2
 800197a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff fbb2 	bl	80010e4 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001982:	e012      	b.n	80019aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001984:	f7ff fbae 	bl	80010e4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d90b      	bls.n	80019aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e09f      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e5      	bne.n	8001984 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e1b      	ldrb	r3, [r3, #24]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e9b      	ldrb	r3, [r3, #26]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0220 	bic.w	r2, r2, #32
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7edb      	ldrb	r3, [r3, #27]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0210 	bic.w	r2, r2, #16
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0208 	orr.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0208 	bic.w	r2, r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7f5b      	ldrb	r3, [r3, #29]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0204 	orr.w	r2, r2, #4
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e007      	b.n	8001ab4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	ea42 0103 	orr.w	r1, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d12e      	bne.n	8001b64 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b1e:	f7ff fae1 	bl	80010e4 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b24:	e012      	b.n	8001b4c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b26:	f7ff fadd 	bl	80010e4 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b0a      	cmp	r3, #10
 8001b32:	d90b      	bls.n	8001b4c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2205      	movs	r2, #5
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e012      	b.n	8001b72 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e5      	bne.n	8001b26 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e006      	b.n	8001b72 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b089      	sub	sp, #36	@ 0x24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b98:	7ffb      	ldrb	r3, [r7, #31]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d003      	beq.n	8001ba6 <HAL_CAN_AddTxMessage+0x2c>
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	f040 80ad 	bne.w	8001d00 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10a      	bne.n	8001bc6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8095 	beq.w	8001cf0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	0e1b      	lsrs	r3, r3, #24
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10d      	bne.n	8001bfe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	6809      	ldr	r1, [r1, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e00f      	b.n	8001c1e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3318      	adds	r3, #24
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	440b      	add	r3, r1
 8001c1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3318      	adds	r3, #24
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3304      	adds	r3, #4
 8001c30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	7d1b      	ldrb	r3, [r3, #20]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d111      	bne.n	8001c5e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3318      	adds	r3, #24
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	6811      	ldr	r1, [r2, #0]
 8001c4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3318      	adds	r3, #24
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	440b      	add	r3, r1
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3307      	adds	r3, #7
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	061a      	lsls	r2, r3, #24
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3306      	adds	r3, #6
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3305      	adds	r3, #5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	3204      	adds	r2, #4
 8001c7e:	7812      	ldrb	r2, [r2, #0]
 8001c80:	4610      	mov	r0, r2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6811      	ldr	r1, [r2, #0]
 8001c86:	ea43 0200 	orr.w	r2, r3, r0
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	061a      	lsls	r2, r3, #24
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	ea43 0200 	orr.w	r2, r3, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6811      	ldr	r1, [r2, #0]
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e00e      	b.n	8001d0e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e006      	b.n	8001d0e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	@ 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08a      	sub	sp, #40	@ 0x28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d07c      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d023      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f983 	bl	8002088 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d82:	e016      	b.n	8001db2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d96:	e00c      	b.n	8001db2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001daa:	e002      	b.n	8001db2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f989 	bl	80020c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d024      	beq.n	8001e06 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f963 	bl	800209c <HAL_CAN_TxMailbox1CompleteCallback>
 8001dd6:	e016      	b.n	8001e06 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dea:	e00c      	b.n	8001e06 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	e002      	b.n	8001e06 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f969 	bl	80020d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d024      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f943 	bl	80020b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e2a:	e016      	b.n	8001e5a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3e:	e00c      	b.n	8001e5a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	e002      	b.n	8001e5a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f949 	bl	80020ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00c      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2208      	movs	r2, #8
 8001e98:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f93a 	bl	8002114 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f921 	bl	8002100 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2210      	movs	r2, #16
 8001ee0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2208      	movs	r2, #8
 8001efc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f91c 	bl	800213c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f903 	bl	8002128 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00b      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f906 	bl	8002150 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8ff 	bl	8002164 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d07b      	beq.n	8002068 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d072      	beq.n	8002060 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d043      	beq.n	8002060 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03e      	beq.n	8002060 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fe8:	2b60      	cmp	r3, #96	@ 0x60
 8001fea:	d02b      	beq.n	8002044 <HAL_CAN_IRQHandler+0x32a>
 8001fec:	2b60      	cmp	r3, #96	@ 0x60
 8001fee:	d82e      	bhi.n	800204e <HAL_CAN_IRQHandler+0x334>
 8001ff0:	2b50      	cmp	r3, #80	@ 0x50
 8001ff2:	d022      	beq.n	800203a <HAL_CAN_IRQHandler+0x320>
 8001ff4:	2b50      	cmp	r3, #80	@ 0x50
 8001ff6:	d82a      	bhi.n	800204e <HAL_CAN_IRQHandler+0x334>
 8001ff8:	2b40      	cmp	r3, #64	@ 0x40
 8001ffa:	d019      	beq.n	8002030 <HAL_CAN_IRQHandler+0x316>
 8001ffc:	2b40      	cmp	r3, #64	@ 0x40
 8001ffe:	d826      	bhi.n	800204e <HAL_CAN_IRQHandler+0x334>
 8002000:	2b30      	cmp	r3, #48	@ 0x30
 8002002:	d010      	beq.n	8002026 <HAL_CAN_IRQHandler+0x30c>
 8002004:	2b30      	cmp	r3, #48	@ 0x30
 8002006:	d822      	bhi.n	800204e <HAL_CAN_IRQHandler+0x334>
 8002008:	2b10      	cmp	r3, #16
 800200a:	d002      	beq.n	8002012 <HAL_CAN_IRQHandler+0x2f8>
 800200c:	2b20      	cmp	r3, #32
 800200e:	d005      	beq.n	800201c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002010:	e01d      	b.n	800204e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800201a:	e019      	b.n	8002050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002024:	e014      	b.n	8002050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f043 0320 	orr.w	r3, r3, #32
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800202e:	e00f      	b.n	8002050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002038:	e00a      	b.n	8002050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002042:	e005      	b.n	8002050 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800204c:	e000      	b.n	8002050 <HAL_CAN_IRQHandler+0x336>
            break;
 800204e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800205e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2204      	movs	r2, #4
 8002066:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f87c 	bl	8002178 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	@ 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	@ (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	@ (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	@ (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff4c 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230e:	f7ff ff61 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f7ff ffb1 	bl	8002280 <NVIC_EncodePriority>
 800231e:	4602      	mov	r2, r0
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff80 	bl	800222c <__NVIC_SetPriority>
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff54 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e16b      	b.n	8002644 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 815a 	bne.w	800263e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d005      	beq.n	80023a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d130      	bne.n	8002404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b03      	cmp	r3, #3
 800240e:	d017      	beq.n	8002440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d123      	bne.n	8002494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80b4 	beq.w	800263e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b60      	ldr	r3, [pc, #384]	@ (800265c <HAL_GPIO_Init+0x30c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	4a5f      	ldr	r2, [pc, #380]	@ (800265c <HAL_GPIO_Init+0x30c>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <HAL_GPIO_Init+0x30c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002660 <HAL_GPIO_Init+0x310>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_GPIO_Init+0x314>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02b      	beq.n	8002576 <HAL_GPIO_Init+0x226>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a51      	ldr	r2, [pc, #324]	@ (8002668 <HAL_GPIO_Init+0x318>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d025      	beq.n	8002572 <HAL_GPIO_Init+0x222>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a50      	ldr	r2, [pc, #320]	@ (800266c <HAL_GPIO_Init+0x31c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01f      	beq.n	800256e <HAL_GPIO_Init+0x21e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4f      	ldr	r2, [pc, #316]	@ (8002670 <HAL_GPIO_Init+0x320>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4e      	ldr	r2, [pc, #312]	@ (8002674 <HAL_GPIO_Init+0x324>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x216>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4d      	ldr	r2, [pc, #308]	@ (8002678 <HAL_GPIO_Init+0x328>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x212>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4c      	ldr	r2, [pc, #304]	@ (800267c <HAL_GPIO_Init+0x32c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4b      	ldr	r2, [pc, #300]	@ (8002680 <HAL_GPIO_Init+0x330>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x20a>
 8002556:	2307      	movs	r3, #7
 8002558:	e00e      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800255a:	2308      	movs	r3, #8
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800255e:	2306      	movs	r3, #6
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	@ (8002660 <HAL_GPIO_Init+0x310>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <HAL_GPIO_Init+0x334>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a32      	ldr	r2, [pc, #200]	@ (8002684 <HAL_GPIO_Init+0x334>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <HAL_GPIO_Init+0x334>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a27      	ldr	r2, [pc, #156]	@ (8002684 <HAL_GPIO_Init+0x334>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ea:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <HAL_GPIO_Init+0x334>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260e:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <HAL_GPIO_Init+0x334>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002614:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <HAL_GPIO_Init+0x334>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002638:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <HAL_GPIO_Init+0x334>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f ae90 	bls.w	800236c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a4:	e003      	b.n	80026ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	041a      	lsls	r2, r3, #16
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	400b      	ands	r3, r1
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	619a      	str	r2, [r3, #24]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e267      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d075      	beq.n	80027fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800270e:	4b88      	ldr	r3, [pc, #544]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00c      	beq.n	8002734 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002722:	2b08      	cmp	r3, #8
 8002724:	d112      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x108>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d157      	bne.n	80027f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e242      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x74>
 8002756:	4b76      	ldr	r3, [pc, #472]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a75      	ldr	r2, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x98>
 800276e:	4b70      	ldr	r3, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6f      	ldr	r2, [pc, #444]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b6d      	ldr	r3, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6c      	ldr	r2, [pc, #432]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002788:	4b69      	ldr	r3, [pc, #420]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a68      	ldr	r2, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b66      	ldr	r3, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a65      	ldr	r2, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fc9c 	bl	80010e4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fc98 	bl	80010e4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e207      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fc88 	bl	80010e4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fc84 	bl	80010e4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	@ 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1f3      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	4b51      	ldr	r3, [pc, #324]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0xe8>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d063      	beq.n	80028ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002806:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b47      	ldr	r3, [pc, #284]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1c7      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b3b      	ldr	r3, [pc, #236]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4937      	ldr	r1, [pc, #220]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	e03a      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b34      	ldr	r3, [pc, #208]	@ (8002934 <HAL_RCC_OscConfig+0x244>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe fc3d 	bl	80010e4 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7fe fc39 	bl	80010e4 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1a8      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4925      	ldr	r1, [pc, #148]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_OscConfig+0x244>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fc1c 	bl	80010e4 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe fc18 	bl	80010e4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e187      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d036      	beq.n	8002948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e2:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_RCC_OscConfig+0x248>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fbfc 	bl	80010e4 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe fbf8 	bl	80010e4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e167      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x200>
 800290e:	e01b      	b.n	8002948 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_OscConfig+0x248>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fbe5 	bl	80010e4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	e00e      	b.n	800293c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe fbe1 	bl	80010e4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d907      	bls.n	800293c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e150      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
 8002930:	40023800 	.word	0x40023800
 8002934:	42470000 	.word	0x42470000
 8002938:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	4b88      	ldr	r3, [pc, #544]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ea      	bne.n	800291e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8097 	beq.w	8002a84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295a:	4b81      	ldr	r3, [pc, #516]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b7a      	ldr	r3, [pc, #488]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b77      	ldr	r3, [pc, #476]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b74      	ldr	r3, [pc, #464]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a73      	ldr	r2, [pc, #460]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe fba1 	bl	80010e4 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe fb9d 	bl	80010e4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e10c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x2ea>
 80029cc:	4b64      	ldr	r3, [pc, #400]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a63      	ldr	r2, [pc, #396]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0x324>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x30c>
 80029e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0x324>
 80029fc:	4b58      	ldr	r3, [pc, #352]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a57      	ldr	r2, [pc, #348]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	4b55      	ldr	r3, [pc, #340]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	4a54      	ldr	r2, [pc, #336]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 0304 	bic.w	r3, r3, #4
 8002a12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fb62 	bl	80010e4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fb5e 	bl	80010e4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0cb      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3a:	4b49      	ldr	r3, [pc, #292]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ee      	beq.n	8002a24 <HAL_RCC_OscConfig+0x334>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe fb4c 	bl	80010e4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a50:	f7fe fb48 	bl	80010e4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0b5      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a66:	4b3e      	ldr	r3, [pc, #248]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ee      	bne.n	8002a50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	4a38      	ldr	r2, [pc, #224]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a1 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a8e:	4b34      	ldr	r3, [pc, #208]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d05c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d141      	bne.n	8002b26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <HAL_RCC_OscConfig+0x478>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fb1c 	bl	80010e4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fb18 	bl	80010e4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e087      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	491b      	ldr	r1, [pc, #108]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCC_OscConfig+0x478>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe faf1 	bl	80010e4 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe faed 	bl	80010e4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e05c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x416>
 8002b24:	e054      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCC_OscConfig+0x478>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fada 	bl	80010e4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fad6 	bl	80010e4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e045      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x444>
 8002b52:	e03d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e038      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40007000 	.word	0x40007000
 8002b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x4ec>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d028      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d121      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d11a      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d111      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0cc      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d90c      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b65      	ldr	r3, [pc, #404]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c34:	4b59      	ldr	r3, [pc, #356]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a58      	ldr	r2, [pc, #352]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c4c:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a52      	ldr	r2, [pc, #328]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b50      	ldr	r3, [pc, #320]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	494d      	ldr	r1, [pc, #308]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d044      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d119      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e067      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4934      	ldr	r1, [pc, #208]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fa08 	bl	80010e4 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe fa04 	bl	80010e4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e04f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20c      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e032      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4916      	ldr	r1, [pc, #88]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d52:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	490e      	ldr	r1, [pc, #56]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f821 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490a      	ldr	r1, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d82:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe f858 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08005d9c 	.word	0x08005d9c
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b094      	sub	sp, #80	@ 0x50
 8002db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc4:	4b79      	ldr	r3, [pc, #484]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d00d      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x40>
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	f200 80e1 	bhi.w	8002f98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dde:	e0db      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de4:	e0db      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de6:	4b73      	ldr	r3, [pc, #460]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dea:	e0d8      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dec:	4b6f      	ldr	r3, [pc, #444]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002df4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df6:	4b6d      	ldr	r3, [pc, #436]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e02:	4b6a      	ldr	r3, [pc, #424]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	2200      	movs	r2, #0
 8002e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	0159      	lsls	r1, r3, #5
 8002e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e30:	0150      	lsls	r0, r2, #5
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4621      	mov	r1, r4
 8002e38:	1a51      	subs	r1, r2, r1
 8002e3a:	6139      	str	r1, [r7, #16]
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e50:	4659      	mov	r1, fp
 8002e52:	018b      	lsls	r3, r1, #6
 8002e54:	4651      	mov	r1, sl
 8002e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	018a      	lsls	r2, r1, #6
 8002e5e:	4651      	mov	r1, sl
 8002e60:	ebb2 0801 	subs.w	r8, r2, r1
 8002e64:	4659      	mov	r1, fp
 8002e66:	eb63 0901 	sbc.w	r9, r3, r1
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7e:	4690      	mov	r8, r2
 8002e80:	4699      	mov	r9, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	eb18 0303 	adds.w	r3, r8, r3
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	462b      	mov	r3, r5
 8002e8c:	eb49 0303 	adc.w	r3, r9, r3
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	024b      	lsls	r3, r1, #9
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	024a      	lsls	r2, r1, #9
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ebc:	f7fd f9e0 	bl	8000280 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec8:	e058      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	f04f 0000 	mov.w	r0, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	0159      	lsls	r1, r3, #5
 8002ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef6:	0150      	lsls	r0, r2, #5
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4641      	mov	r1, r8
 8002efe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f20:	eb63 050b 	sbc.w	r5, r3, fp
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	00eb      	lsls	r3, r5, #3
 8002f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f32:	00e2      	lsls	r2, r4, #3
 8002f34:	4614      	mov	r4, r2
 8002f36:	461d      	mov	r5, r3
 8002f38:	4643      	mov	r3, r8
 8002f3a:	18e3      	adds	r3, r4, r3
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	464b      	mov	r3, r9
 8002f40:	eb45 0303 	adc.w	r3, r5, r3
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	61fa      	str	r2, [r7, #28]
 8002f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f70:	f7fd f986 	bl	8000280 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3750      	adds	r7, #80	@ 0x50
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	007a1200 	.word	0x007a1200

08002fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd4:	f7ff fff0 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0a9b      	lsrs	r3, r3, #10
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	@ (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08005dac 	.word	0x08005dac

08002ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ffc:	f7ff ffdc 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0b5b      	lsrs	r3, r3, #13
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	@ (800301c <HAL_RCC_GetPCLK2Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40023800 	.word	0x40023800
 800301c:	08005dac 	.word	0x08005dac

08003020 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	220f      	movs	r2, #15
 800302e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003030:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_RCC_GetClockConfig+0x5c>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0203 	and.w	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800303c:	4b0f      	ldr	r3, [pc, #60]	@ (800307c <HAL_RCC_GetClockConfig+0x5c>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003048:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <HAL_RCC_GetClockConfig+0x5c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_GetClockConfig+0x5c>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003062:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <HAL_RCC_GetClockConfig+0x60>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	40023c00 	.word	0x40023c00

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e041      	b.n	800311a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f839 	bl	8003122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 f9c0 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e04e      	b.n	80031ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a23      	ldr	r2, [pc, #140]	@ (80031fc <HAL_TIM_Base_Start_IT+0xc4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d022      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317a:	d01d      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <HAL_TIM_Base_Start_IT+0xc8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d018      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <HAL_TIM_Base_Start_IT+0xcc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1c      	ldr	r2, [pc, #112]	@ (8003208 <HAL_TIM_Base_Start_IT+0xd0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	@ (800320c <HAL_TIM_Base_Start_IT+0xd4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <HAL_TIM_Base_Start_IT+0xd8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x80>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <HAL_TIM_Base_Start_IT+0xdc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d111      	bne.n	80031dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d010      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	e007      	b.n	80031ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40001800 	.word	0x40001800

08003218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0202 	mvn.w	r2, #2
 800324c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8d2 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8c4 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f8d5 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d020      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0204 	mvn.w	r2, #4
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8ac 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f89e 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8af 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d020      	beq.n	8003314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01b      	beq.n	8003314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0208 	mvn.w	r2, #8
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2204      	movs	r2, #4
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f886 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f878 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f889 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0210 	mvn.w	r2, #16
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2208      	movs	r2, #8
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f860 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f852 	bl	80033f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f863 	bl	8003420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0201 	mvn.w	r2, #1
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fc0c 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f900 	bl	80035a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f834 	bl	8003434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00c      	beq.n	80033f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0220 	mvn.w	r2, #32
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8d2 	bl	8003594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a43      	ldr	r2, [pc, #268]	@ (8003568 <TIM_Base_SetConfig+0x120>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a40      	ldr	r2, [pc, #256]	@ (800356c <TIM_Base_SetConfig+0x124>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3f      	ldr	r2, [pc, #252]	@ (8003570 <TIM_Base_SetConfig+0x128>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3e      	ldr	r2, [pc, #248]	@ (8003574 <TIM_Base_SetConfig+0x12c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3d      	ldr	r2, [pc, #244]	@ (8003578 <TIM_Base_SetConfig+0x130>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a32      	ldr	r2, [pc, #200]	@ (8003568 <TIM_Base_SetConfig+0x120>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a8:	d027      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2f      	ldr	r2, [pc, #188]	@ (800356c <TIM_Base_SetConfig+0x124>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d023      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003570 <TIM_Base_SetConfig+0x128>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003574 <TIM_Base_SetConfig+0x12c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003578 <TIM_Base_SetConfig+0x130>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d017      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2b      	ldr	r2, [pc, #172]	@ (800357c <TIM_Base_SetConfig+0x134>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003580 <TIM_Base_SetConfig+0x138>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00f      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a29      	ldr	r2, [pc, #164]	@ (8003584 <TIM_Base_SetConfig+0x13c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a28      	ldr	r2, [pc, #160]	@ (8003588 <TIM_Base_SetConfig+0x140>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a27      	ldr	r2, [pc, #156]	@ (800358c <TIM_Base_SetConfig+0x144>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <TIM_Base_SetConfig+0x148>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a0e      	ldr	r2, [pc, #56]	@ (8003568 <TIM_Base_SetConfig+0x120>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0xf2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <TIM_Base_SetConfig+0x130>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d103      	bne.n	8003542 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f043 0204 	orr.w	r2, r3, #4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40010400 	.word	0x40010400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	40001800 	.word	0x40001800
 800358c:	40001c00 	.word	0x40001c00
 8003590:	40002000 	.word	0x40002000

08003594 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e042      	b.n	8003654 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fbe2 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	@ 0x24
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f973 	bl	80038ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b20      	cmp	r3, #32
 800367a:	d175      	bne.n	8003768 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Transmit+0x2c>
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e06e      	b.n	800376a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2221      	movs	r2, #33	@ 0x21
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369a:	f7fd fd23 	bl	80010e4 <HAL_GetTick>
 800369e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b4:	d108      	bne.n	80036c8 <HAL_UART_Transmit+0x6c>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e003      	b.n	80036d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036d0:	e02e      	b.n	8003730 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	2180      	movs	r1, #128	@ 0x80
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f848 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e03a      	b.n	800376a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003708:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3302      	adds	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e007      	b.n	8003722 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3301      	adds	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1cb      	bne.n	80036d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	2140      	movs	r1, #64	@ 0x40
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f814 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e006      	b.n	800376a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003782:	e03b      	b.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800378a:	d037      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378c:	f7fd fcaa 	bl	80010e4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	6a3a      	ldr	r2, [r7, #32]
 8003798:	429a      	cmp	r2, r3
 800379a:	d302      	bcc.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e03a      	b.n	800381c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d023      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b80      	cmp	r3, #128	@ 0x80
 80037b8:	d020      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d01d      	beq.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d116      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f81d 	bl	8003824 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2208      	movs	r2, #8
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e00f      	b.n	800381c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	429a      	cmp	r2, r3
 8003818:	d0b4      	beq.n	8003784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b095      	sub	sp, #84	@ 0x54
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800384c:	643a      	str	r2, [r7, #64]	@ 0x40
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003852:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	2b01      	cmp	r3, #1
 800389a:	d119      	bne.n	80038d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038bc:	61ba      	str	r2, [r7, #24]
 80038be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6979      	ldr	r1, [r7, #20]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038de:	bf00      	nop
 80038e0:	3754      	adds	r7, #84	@ 0x54
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b0c0      	sub	sp, #256	@ 0x100
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	ea40 0301 	orr.w	r3, r0, r1
 8003914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	431a      	orrs	r2, r3
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	431a      	orrs	r2, r3
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003944:	f021 010c 	bic.w	r1, r1, #12
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003952:	430b      	orrs	r3, r1
 8003954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	6999      	ldr	r1, [r3, #24]
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	ea40 0301 	orr.w	r3, r0, r1
 8003972:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb8 <UART_SetConfig+0x2cc>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d005      	beq.n	800398c <UART_SetConfig+0xa0>
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b8d      	ldr	r3, [pc, #564]	@ (8003bbc <UART_SetConfig+0x2d0>)
 8003988:	429a      	cmp	r2, r3
 800398a:	d104      	bne.n	8003996 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800398c:	f7ff fb34 	bl	8002ff8 <HAL_RCC_GetPCLK2Freq>
 8003990:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003994:	e003      	b.n	800399e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003996:	f7ff fb1b 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 800399a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a8:	f040 810c 	bne.w	8003bc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	1891      	adds	r1, r2, r2
 80039c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039c6:	415b      	adcs	r3, r3
 80039c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ce:	4621      	mov	r1, r4
 80039d0:	eb12 0801 	adds.w	r8, r2, r1
 80039d4:	4629      	mov	r1, r5
 80039d6:	eb43 0901 	adc.w	r9, r3, r1
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ee:	4690      	mov	r8, r2
 80039f0:	4699      	mov	r9, r3
 80039f2:	4623      	mov	r3, r4
 80039f4:	eb18 0303 	adds.w	r3, r8, r3
 80039f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039fc:	462b      	mov	r3, r5
 80039fe:	eb49 0303 	adc.w	r3, r9, r3
 8003a02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	18db      	adds	r3, r3, r3
 8003a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a20:	4613      	mov	r3, r2
 8003a22:	eb42 0303 	adc.w	r3, r2, r3
 8003a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a30:	f7fc fc26 	bl	8000280 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4b61      	ldr	r3, [pc, #388]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	011c      	lsls	r4, r3, #4
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a64:	4641      	mov	r1, r8
 8003a66:	eb12 0a01 	adds.w	sl, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a84:	4692      	mov	sl, r2
 8003a86:	469b      	mov	fp, r3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a92:	464b      	mov	r3, r9
 8003a94:	eb4b 0303 	adc.w	r3, fp, r3
 8003a98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003aac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	18db      	adds	r3, r3, r3
 8003ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	eb42 0303 	adc.w	r3, r2, r3
 8003abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ac2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ac6:	f7fc fbdb 	bl	8000280 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2264      	movs	r2, #100	@ 0x64
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	1acb      	subs	r3, r1, r3
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ae6:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003af4:	441c      	add	r4, r3
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	1891      	adds	r1, r2, r2
 8003b0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b10:	415b      	adcs	r3, r3
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b18:	4641      	mov	r1, r8
 8003b1a:	1851      	adds	r1, r2, r1
 8003b1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b1e:	4649      	mov	r1, r9
 8003b20:	414b      	adcs	r3, r1
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b30:	4659      	mov	r1, fp
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4642      	mov	r2, r8
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	18db      	adds	r3, r3, r3
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b72:	4613      	mov	r3, r2
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b82:	f7fc fb7d 	bl	8000280 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	2164      	movs	r1, #100	@ 0x64
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	3332      	adds	r3, #50	@ 0x32
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <UART_SetConfig+0x2d4>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 0207 	and.w	r2, r3, #7
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4422      	add	r2, r4
 8003bb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb4:	e106      	b.n	8003dc4 <UART_SetConfig+0x4d8>
 8003bb6:	bf00      	nop
 8003bb8:	40011000 	.word	0x40011000
 8003bbc:	40011400 	.word	0x40011400
 8003bc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	464b      	mov	r3, r9
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	6239      	str	r1, [r7, #32]
 8003bde:	415b      	adcs	r3, r3
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003be6:	4641      	mov	r1, r8
 8003be8:	1854      	adds	r4, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb43 0501 	adc.w	r5, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	00eb      	lsls	r3, r5, #3
 8003bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfe:	00e2      	lsls	r2, r4, #3
 8003c00:	4614      	mov	r4, r2
 8003c02:	461d      	mov	r5, r3
 8003c04:	4643      	mov	r3, r8
 8003c06:	18e3      	adds	r3, r4, r3
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	eb45 0303 	adc.w	r3, r5, r3
 8003c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c32:	4629      	mov	r1, r5
 8003c34:	008b      	lsls	r3, r1, #2
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	008a      	lsls	r2, r1, #2
 8003c40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c44:	f7fc fb1c 	bl	8000280 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4b60      	ldr	r3, [pc, #384]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	011c      	lsls	r4, r3, #4
 8003c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	1891      	adds	r1, r2, r2
 8003c6e:	61b9      	str	r1, [r7, #24]
 8003c70:	415b      	adcs	r3, r3
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c78:	4641      	mov	r1, r8
 8003c7a:	1851      	adds	r1, r2, r1
 8003c7c:	6139      	str	r1, [r7, #16]
 8003c7e:	4649      	mov	r1, r9
 8003c80:	414b      	adcs	r3, r1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c90:	4659      	mov	r1, fp
 8003c92:	00cb      	lsls	r3, r1, #3
 8003c94:	4651      	mov	r1, sl
 8003c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	00ca      	lsls	r2, r1, #3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cac:	464b      	mov	r3, r9
 8003cae:	460a      	mov	r2, r1
 8003cb0:	eb42 0303 	adc.w	r3, r2, r3
 8003cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	008b      	lsls	r3, r1, #2
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cda:	4641      	mov	r1, r8
 8003cdc:	008a      	lsls	r2, r1, #2
 8003cde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ce2:	f7fc facd 	bl	8000280 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	4b38      	ldr	r3, [pc, #224]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003cee:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	2264      	movs	r2, #100	@ 0x64
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	1acb      	subs	r3, r1, r3
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	3332      	adds	r3, #50	@ 0x32
 8003d00:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0c:	441c      	add	r4, r3
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d16:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	415b      	adcs	r3, r3
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	1851      	adds	r1, r2, r1
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	4649      	mov	r1, r9
 8003d34:	414b      	adcs	r3, r1
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d44:	4659      	mov	r1, fp
 8003d46:	00cb      	lsls	r3, r1, #3
 8003d48:	4651      	mov	r1, sl
 8003d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4e:	4651      	mov	r1, sl
 8003d50:	00ca      	lsls	r2, r1, #3
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	4642      	mov	r2, r8
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d5e:	464b      	mov	r3, r9
 8003d60:	460a      	mov	r2, r1
 8003d62:	eb42 0303 	adc.w	r3, r2, r3
 8003d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d72:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d80:	4649      	mov	r1, r9
 8003d82:	008b      	lsls	r3, r1, #2
 8003d84:	4641      	mov	r1, r8
 8003d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	008a      	lsls	r2, r1, #2
 8003d8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d92:	f7fc fa75 	bl	8000280 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	2164      	movs	r1, #100	@ 0x64
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	3332      	adds	r3, #50	@ 0x32
 8003dae:	4a08      	ldr	r2, [pc, #32]	@ (8003dd0 <UART_SetConfig+0x4e4>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4422      	add	r2, r4
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd0:	51eb851f 	.word	0x51eb851f

08003dd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003de6:	2b84      	cmp	r3, #132	@ 0x84
 8003de8:	d005      	beq.n	8003df6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003dea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	3303      	adds	r3, #3
 8003df4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e08:	f000 fafc 	bl	8004404 <vTaskStartScheduler>
  
  return osOK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e14:	b089      	sub	sp, #36	@ 0x24
 8003e16:	af04      	add	r7, sp, #16
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <osThreadCreate+0x54>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01c      	beq.n	8003e66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685c      	ldr	r4, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691e      	ldr	r6, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ffc8 	bl	8003dd4 <makeFreeRtosPriority>
 8003e44:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e4e:	9202      	str	r2, [sp, #8]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	9100      	str	r1, [sp, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4632      	mov	r2, r6
 8003e58:	4629      	mov	r1, r5
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 f8ed 	bl	800403a <xTaskCreateStatic>
 8003e60:	4603      	mov	r3, r0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e01c      	b.n	8003ea0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685c      	ldr	r4, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e72:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffaa 	bl	8003dd4 <makeFreeRtosPriority>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	9200      	str	r2, [sp, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4629      	mov	r1, r5
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 f932 	bl	80040fa <xTaskCreate>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d001      	beq.n	8003ea0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eaa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <osDelay+0x16>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e000      	b.n	8003ec2 <osDelay+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fa68 	bl	8004398 <vTaskDelay>
  
  return osOK;
 8003ec8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f103 0208 	add.w	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f103 0208 	add.w	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 0208 	add.w	r2, r3, #8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f8a:	d103      	bne.n	8003f94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e00c      	b.n	8003fae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3308      	adds	r3, #8
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e002      	b.n	8003fa2 <vListInsert+0x2e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d2f6      	bcs.n	8003f9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6892      	ldr	r2, [r2, #8]
 8003ffc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6852      	ldr	r2, [r2, #4]
 8004006:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d103      	bne.n	800401a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1e5a      	subs	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08e      	sub	sp, #56	@ 0x38
 800403e:	af04      	add	r7, sp, #16
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10b      	bne.n	8004084 <xTaskCreateStatic+0x4a>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61fb      	str	r3, [r7, #28]
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004084:	23a0      	movs	r3, #160	@ 0xa0
 8004086:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2ba0      	cmp	r3, #160	@ 0xa0
 800408c:	d00b      	beq.n	80040a6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	61bb      	str	r3, [r7, #24]
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	e7fd      	b.n	80040a2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01e      	beq.n	80040ec <xTaskCreateStatic+0xb2>
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040c6:	2300      	movs	r3, #0
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	f107 0314 	add.w	r3, r7, #20
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f850 	bl	8004184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040e6:	f000 f8ed 	bl	80042c4 <prvAddNewTaskToReadyList>
 80040ea:	e001      	b.n	80040f0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040f0:	697b      	ldr	r3, [r7, #20]
	}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3728      	adds	r7, #40	@ 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b08c      	sub	sp, #48	@ 0x30
 80040fe:	af04      	add	r7, sp, #16
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 ff02 	bl	8004f18 <pvPortMalloc>
 8004114:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800411c:	20a0      	movs	r0, #160	@ 0xa0
 800411e:	f000 fefb 	bl	8004f18 <pvPortMalloc>
 8004122:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004130:	e005      	b.n	800413e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f000 ffbe 	bl	80050b4 <vPortFree>
 8004138:	e001      	b.n	800413e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	2300      	movs	r3, #0
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f80e 	bl	8004184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004168:	69f8      	ldr	r0, [r7, #28]
 800416a:	f000 f8ab 	bl	80042c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	e002      	b.n	800417a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004178:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800417a:	69bb      	ldr	r3, [r7, #24]
	}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800419c:	3b01      	subs	r3, #1
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f023 0307 	bic.w	r3, r3, #7
 80041aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <prvInitialiseNewTask+0x4a>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	617b      	str	r3, [r7, #20]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01f      	beq.n	8004214 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e012      	b.n	8004200 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	7819      	ldrb	r1, [r3, #0]
 80041e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	3334      	adds	r3, #52	@ 0x34
 80041ea:	460a      	mov	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3301      	adds	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	d9e9      	bls.n	80041da <prvInitialiseNewTask+0x56>
 8004206:	e000      	b.n	800420a <prvInitialiseNewTask+0x86>
			{
				break;
 8004208:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004212:	e003      	b.n	800421c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	2b06      	cmp	r3, #6
 8004220:	d901      	bls.n	8004226 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004222:	2306      	movs	r3, #6
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004230:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	2200      	movs	r2, #0
 8004236:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe68 	bl	8003f12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	3318      	adds	r3, #24
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fe63 	bl	8003f12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800424c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004250:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	f1c3 0207 	rsb	r2, r3, #7
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	2200      	movs	r2, #0
 800426e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	334c      	adds	r3, #76	@ 0x4c
 8004276:	224c      	movs	r2, #76	@ 0x4c
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f85c 	bl	8005338 <memset>
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	4a0d      	ldr	r2, [pc, #52]	@ (80042b8 <prvInitialiseNewTask+0x134>)
 8004284:	651a      	str	r2, [r3, #80]	@ 0x50
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	4a0c      	ldr	r2, [pc, #48]	@ (80042bc <prvInitialiseNewTask+0x138>)
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	4a0c      	ldr	r2, [pc, #48]	@ (80042c0 <prvInitialiseNewTask+0x13c>)
 8004290:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	68f9      	ldr	r1, [r7, #12]
 8004296:	69b8      	ldr	r0, [r7, #24]
 8004298:	f000 fc2a 	bl	8004af0 <pxPortInitialiseStack>
 800429c:	4602      	mov	r2, r0
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ae:	bf00      	nop
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200041f4 	.word	0x200041f4
 80042bc:	2000425c 	.word	0x2000425c
 80042c0:	200042c4 	.word	0x200042c4

080042c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042cc:	f000 fd44 	bl	8004d58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042d0:	4b2a      	ldr	r3, [pc, #168]	@ (800437c <prvAddNewTaskToReadyList+0xb8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a29      	ldr	r2, [pc, #164]	@ (800437c <prvAddNewTaskToReadyList+0xb8>)
 80042d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042da:	4b29      	ldr	r3, [pc, #164]	@ (8004380 <prvAddNewTaskToReadyList+0xbc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042e2:	4a27      	ldr	r2, [pc, #156]	@ (8004380 <prvAddNewTaskToReadyList+0xbc>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042e8:	4b24      	ldr	r3, [pc, #144]	@ (800437c <prvAddNewTaskToReadyList+0xb8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d110      	bne.n	8004312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042f0:	f000 fad4 	bl	800489c <prvInitialiseTaskLists>
 80042f4:	e00d      	b.n	8004312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042f6:	4b23      	ldr	r3, [pc, #140]	@ (8004384 <prvAddNewTaskToReadyList+0xc0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <prvAddNewTaskToReadyList+0xbc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	429a      	cmp	r2, r3
 800430a:	d802      	bhi.n	8004312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800430c:	4a1c      	ldr	r2, [pc, #112]	@ (8004380 <prvAddNewTaskToReadyList+0xbc>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004312:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <prvAddNewTaskToReadyList+0xc4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	4a1b      	ldr	r2, [pc, #108]	@ (8004388 <prvAddNewTaskToReadyList+0xc4>)
 800431a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	2201      	movs	r2, #1
 8004322:	409a      	lsls	r2, r3
 8004324:	4b19      	ldr	r3, [pc, #100]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4313      	orrs	r3, r2
 800432a:	4a18      	ldr	r2, [pc, #96]	@ (800438c <prvAddNewTaskToReadyList+0xc8>)
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4a15      	ldr	r2, [pc, #84]	@ (8004390 <prvAddNewTaskToReadyList+0xcc>)
 800433c:	441a      	add	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7ff fdf1 	bl	8003f2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800434a:	f000 fd37 	bl	8004dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <prvAddNewTaskToReadyList+0xc0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004356:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <prvAddNewTaskToReadyList+0xbc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d207      	bcs.n	8004374 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <prvAddNewTaskToReadyList+0xd0>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200005a0 	.word	0x200005a0
 8004380:	200004a0 	.word	0x200004a0
 8004384:	200005ac 	.word	0x200005ac
 8004388:	200005bc 	.word	0x200005bc
 800438c:	200005a8 	.word	0x200005a8
 8004390:	200004a4 	.word	0x200004a4
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d018      	beq.n	80043dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043aa:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <vTaskDelay+0x64>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <vTaskDelay+0x32>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60bb      	str	r3, [r7, #8]
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043ca:	f000 f885 	bl	80044d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043ce:	2100      	movs	r1, #0
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fb27 	bl	8004a24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043d6:	f000 f88d 	bl	80044f4 <xTaskResumeAll>
 80043da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <vTaskDelay+0x68>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200005c8 	.word	0x200005c8
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	@ 0x28
 8004408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004412:	463a      	mov	r2, r7
 8004414:	1d39      	adds	r1, r7, #4
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	4618      	mov	r0, r3
 800441c:	f7fc f8c6 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	9202      	str	r2, [sp, #8]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	2300      	movs	r3, #0
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2300      	movs	r3, #0
 8004430:	460a      	mov	r2, r1
 8004432:	4921      	ldr	r1, [pc, #132]	@ (80044b8 <vTaskStartScheduler+0xb4>)
 8004434:	4821      	ldr	r0, [pc, #132]	@ (80044bc <vTaskStartScheduler+0xb8>)
 8004436:	f7ff fe00 	bl	800403a <xTaskCreateStatic>
 800443a:	4603      	mov	r3, r0
 800443c:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <vTaskStartScheduler+0xbc>)
 800443e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004440:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <vTaskStartScheduler+0xbc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004448:	2301      	movs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e001      	b.n	8004452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d11b      	bne.n	8004490 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	613b      	str	r3, [r7, #16]
}
 800446a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800446c:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <vTaskStartScheduler+0xc0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	334c      	adds	r3, #76	@ 0x4c
 8004472:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <vTaskStartScheduler+0xc4>)
 8004474:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004476:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <vTaskStartScheduler+0xc8>)
 8004478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800447c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800447e:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <vTaskStartScheduler+0xcc>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004484:	4b13      	ldr	r3, [pc, #76]	@ (80044d4 <vTaskStartScheduler+0xd0>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800448a:	f000 fbc1 	bl	8004c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800448e:	e00f      	b.n	80044b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004496:	d10b      	bne.n	80044b0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60fb      	str	r3, [r7, #12]
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <vTaskStartScheduler+0xa8>
}
 80044b0:	bf00      	nop
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08005d94 	.word	0x08005d94
 80044bc:	0800486d 	.word	0x0800486d
 80044c0:	200005c4 	.word	0x200005c4
 80044c4:	200004a0 	.word	0x200004a0
 80044c8:	20000010 	.word	0x20000010
 80044cc:	200005c0 	.word	0x200005c0
 80044d0:	200005ac 	.word	0x200005ac
 80044d4:	200005a4 	.word	0x200005a4

080044d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044dc:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <vTaskSuspendAll+0x18>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	4a03      	ldr	r2, [pc, #12]	@ (80044f0 <vTaskSuspendAll+0x18>)
 80044e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	200005c8 	.word	0x200005c8

080044f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004502:	4b42      	ldr	r3, [pc, #264]	@ (800460c <xTaskResumeAll+0x118>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <xTaskResumeAll+0x2e>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	603b      	str	r3, [r7, #0]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004522:	f000 fc19 	bl	8004d58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004526:	4b39      	ldr	r3, [pc, #228]	@ (800460c <xTaskResumeAll+0x118>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	4a37      	ldr	r2, [pc, #220]	@ (800460c <xTaskResumeAll+0x118>)
 800452e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004530:	4b36      	ldr	r3, [pc, #216]	@ (800460c <xTaskResumeAll+0x118>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d161      	bne.n	80045fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004538:	4b35      	ldr	r3, [pc, #212]	@ (8004610 <xTaskResumeAll+0x11c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05d      	beq.n	80045fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004540:	e02e      	b.n	80045a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004542:	4b34      	ldr	r3, [pc, #208]	@ (8004614 <xTaskResumeAll+0x120>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3318      	adds	r3, #24
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fd49 	bl	8003fe6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fd44 	bl	8003fe6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	2201      	movs	r2, #1
 8004564:	409a      	lsls	r2, r3
 8004566:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <xTaskResumeAll+0x124>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	4a2a      	ldr	r2, [pc, #168]	@ (8004618 <xTaskResumeAll+0x124>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4a27      	ldr	r2, [pc, #156]	@ (800461c <xTaskResumeAll+0x128>)
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7ff fcd0 	bl	8003f2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004590:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <xTaskResumeAll+0x12c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800459a:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <xTaskResumeAll+0x130>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <xTaskResumeAll+0x120>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1cc      	bne.n	8004542 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ae:	f000 fa19 	bl	80049e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <xTaskResumeAll+0x134>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045be:	f000 f837 	bl	8004630 <xTaskIncrementTick>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045c8:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <xTaskResumeAll+0x130>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f1      	bne.n	80045be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80045da:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <xTaskResumeAll+0x134>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045e0:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <xTaskResumeAll+0x130>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045ec:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <xTaskResumeAll+0x138>)
 80045ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045fc:	f000 fbde 	bl	8004dbc <vPortExitCritical>

	return xAlreadyYielded;
 8004600:	68bb      	ldr	r3, [r7, #8]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	200005c8 	.word	0x200005c8
 8004610:	200005a0 	.word	0x200005a0
 8004614:	20000560 	.word	0x20000560
 8004618:	200005a8 	.word	0x200005a8
 800461c:	200004a4 	.word	0x200004a4
 8004620:	200004a0 	.word	0x200004a0
 8004624:	200005b4 	.word	0x200005b4
 8004628:	200005b0 	.word	0x200005b0
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463a:	4b4f      	ldr	r3, [pc, #316]	@ (8004778 <xTaskIncrementTick+0x148>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f040 808f 	bne.w	8004762 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004644:	4b4d      	ldr	r3, [pc, #308]	@ (800477c <xTaskIncrementTick+0x14c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800464c:	4a4b      	ldr	r2, [pc, #300]	@ (800477c <xTaskIncrementTick+0x14c>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d121      	bne.n	800469c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004658:	4b49      	ldr	r3, [pc, #292]	@ (8004780 <xTaskIncrementTick+0x150>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	603b      	str	r3, [r7, #0]
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	e7fd      	b.n	8004676 <xTaskIncrementTick+0x46>
 800467a:	4b41      	ldr	r3, [pc, #260]	@ (8004780 <xTaskIncrementTick+0x150>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	4b40      	ldr	r3, [pc, #256]	@ (8004784 <xTaskIncrementTick+0x154>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3e      	ldr	r2, [pc, #248]	@ (8004780 <xTaskIncrementTick+0x150>)
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4a3e      	ldr	r2, [pc, #248]	@ (8004784 <xTaskIncrementTick+0x154>)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b3e      	ldr	r3, [pc, #248]	@ (8004788 <xTaskIncrementTick+0x158>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a3c      	ldr	r2, [pc, #240]	@ (8004788 <xTaskIncrementTick+0x158>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	f000 f9a4 	bl	80049e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800469c:	4b3b      	ldr	r3, [pc, #236]	@ (800478c <xTaskIncrementTick+0x15c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d348      	bcc.n	8004738 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a6:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <xTaskIncrementTick+0x150>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b0:	4b36      	ldr	r3, [pc, #216]	@ (800478c <xTaskIncrementTick+0x15c>)
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046b6:	601a      	str	r2, [r3, #0]
					break;
 80046b8:	e03e      	b.n	8004738 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ba:	4b31      	ldr	r3, [pc, #196]	@ (8004780 <xTaskIncrementTick+0x150>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d203      	bcs.n	80046da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046d2:	4a2e      	ldr	r2, [pc, #184]	@ (800478c <xTaskIncrementTick+0x15c>)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046d8:	e02e      	b.n	8004738 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3304      	adds	r3, #4
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fc81 	bl	8003fe6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3318      	adds	r3, #24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fc78 	bl	8003fe6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	2201      	movs	r2, #1
 80046fc:	409a      	lsls	r2, r3
 80046fe:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <xTaskIncrementTick+0x160>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	4a22      	ldr	r2, [pc, #136]	@ (8004790 <xTaskIncrementTick+0x160>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <xTaskIncrementTick+0x164>)
 8004716:	441a      	add	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f7ff fc04 	bl	8003f2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004728:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <xTaskIncrementTick+0x168>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	429a      	cmp	r2, r3
 8004730:	d3b9      	bcc.n	80046a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004736:	e7b6      	b.n	80046a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004738:	4b17      	ldr	r3, [pc, #92]	@ (8004798 <xTaskIncrementTick+0x168>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473e:	4915      	ldr	r1, [pc, #84]	@ (8004794 <xTaskIncrementTick+0x164>)
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d901      	bls.n	8004754 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004750:	2301      	movs	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004754:	4b11      	ldr	r3, [pc, #68]	@ (800479c <xTaskIncrementTick+0x16c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e004      	b.n	800476c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004762:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <xTaskIncrementTick+0x170>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a0d      	ldr	r2, [pc, #52]	@ (80047a0 <xTaskIncrementTick+0x170>)
 800476a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	200005c8 	.word	0x200005c8
 800477c:	200005a4 	.word	0x200005a4
 8004780:	20000558 	.word	0x20000558
 8004784:	2000055c 	.word	0x2000055c
 8004788:	200005b8 	.word	0x200005b8
 800478c:	200005c0 	.word	0x200005c0
 8004790:	200005a8 	.word	0x200005a8
 8004794:	200004a4 	.word	0x200004a4
 8004798:	200004a0 	.word	0x200004a0
 800479c:	200005b4 	.word	0x200005b4
 80047a0:	200005b0 	.word	0x200005b0

080047a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004854 <vTaskSwitchContext+0xb0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047b2:	4b29      	ldr	r3, [pc, #164]	@ (8004858 <vTaskSwitchContext+0xb4>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047b8:	e045      	b.n	8004846 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80047ba:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <vTaskSwitchContext+0xb4>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c0:	4b26      	ldr	r3, [pc, #152]	@ (800485c <vTaskSwitchContext+0xb8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	f1c3 031f 	rsb	r3, r3, #31
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	4922      	ldr	r1, [pc, #136]	@ (8004860 <vTaskSwitchContext+0xbc>)
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <vTaskSwitchContext+0x5e>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	607b      	str	r3, [r7, #4]
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <vTaskSwitchContext+0x5a>
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4a14      	ldr	r2, [pc, #80]	@ (8004860 <vTaskSwitchContext+0xbc>)
 800480e:	4413      	add	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3308      	adds	r3, #8
 8004824:	429a      	cmp	r2, r3
 8004826:	d104      	bne.n	8004832 <vTaskSwitchContext+0x8e>
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a0a      	ldr	r2, [pc, #40]	@ (8004864 <vTaskSwitchContext+0xc0>)
 800483a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800483c:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <vTaskSwitchContext+0xc0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	334c      	adds	r3, #76	@ 0x4c
 8004842:	4a09      	ldr	r2, [pc, #36]	@ (8004868 <vTaskSwitchContext+0xc4>)
 8004844:	6013      	str	r3, [r2, #0]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	200005c8 	.word	0x200005c8
 8004858:	200005b4 	.word	0x200005b4
 800485c:	200005a8 	.word	0x200005a8
 8004860:	200004a4 	.word	0x200004a4
 8004864:	200004a0 	.word	0x200004a0
 8004868:	20000010 	.word	0x20000010

0800486c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004874:	f000 f852 	bl	800491c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004878:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <prvIdleTask+0x28>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d9f9      	bls.n	8004874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <prvIdleTask+0x2c>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004890:	e7f0      	b.n	8004874 <prvIdleTask+0x8>
 8004892:	bf00      	nop
 8004894:	200004a4 	.word	0x200004a4
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	e00c      	b.n	80048c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4a12      	ldr	r2, [pc, #72]	@ (80048fc <prvInitialiseTaskLists+0x60>)
 80048b4:	4413      	add	r3, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fb0b 	bl	8003ed2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d9ef      	bls.n	80048a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c8:	480d      	ldr	r0, [pc, #52]	@ (8004900 <prvInitialiseTaskLists+0x64>)
 80048ca:	f7ff fb02 	bl	8003ed2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ce:	480d      	ldr	r0, [pc, #52]	@ (8004904 <prvInitialiseTaskLists+0x68>)
 80048d0:	f7ff faff 	bl	8003ed2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048d4:	480c      	ldr	r0, [pc, #48]	@ (8004908 <prvInitialiseTaskLists+0x6c>)
 80048d6:	f7ff fafc 	bl	8003ed2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048da:	480c      	ldr	r0, [pc, #48]	@ (800490c <prvInitialiseTaskLists+0x70>)
 80048dc:	f7ff faf9 	bl	8003ed2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048e0:	480b      	ldr	r0, [pc, #44]	@ (8004910 <prvInitialiseTaskLists+0x74>)
 80048e2:	f7ff faf6 	bl	8003ed2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <prvInitialiseTaskLists+0x78>)
 80048e8:	4a05      	ldr	r2, [pc, #20]	@ (8004900 <prvInitialiseTaskLists+0x64>)
 80048ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <prvInitialiseTaskLists+0x7c>)
 80048ee:	4a05      	ldr	r2, [pc, #20]	@ (8004904 <prvInitialiseTaskLists+0x68>)
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200004a4 	.word	0x200004a4
 8004900:	20000530 	.word	0x20000530
 8004904:	20000544 	.word	0x20000544
 8004908:	20000560 	.word	0x20000560
 800490c:	20000574 	.word	0x20000574
 8004910:	2000058c 	.word	0x2000058c
 8004914:	20000558 	.word	0x20000558
 8004918:	2000055c 	.word	0x2000055c

0800491c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004922:	e019      	b.n	8004958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004924:	f000 fa18 	bl	8004d58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004928:	4b10      	ldr	r3, [pc, #64]	@ (800496c <prvCheckTasksWaitingTermination+0x50>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fb56 	bl	8003fe6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <prvCheckTasksWaitingTermination+0x54>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	4a0b      	ldr	r2, [pc, #44]	@ (8004970 <prvCheckTasksWaitingTermination+0x54>)
 8004942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004944:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <prvCheckTasksWaitingTermination+0x58>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3b01      	subs	r3, #1
 800494a:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <prvCheckTasksWaitingTermination+0x58>)
 800494c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800494e:	f000 fa35 	bl	8004dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f810 	bl	8004978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <prvCheckTasksWaitingTermination+0x58>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e1      	bne.n	8004924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000574 	.word	0x20000574
 8004970:	200005a0 	.word	0x200005a0
 8004974:	20000588 	.word	0x20000588

08004978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	334c      	adds	r3, #76	@ 0x4c
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fcdf 	bl	8005348 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004990:	2b00      	cmp	r3, #0
 8004992:	d108      	bne.n	80049a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fb8b 	bl	80050b4 <vPortFree>
				vPortFree( pxTCB );
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fb88 	bl	80050b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049a4:	e019      	b.n	80049da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d103      	bne.n	80049b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fb7f 	bl	80050b4 <vPortFree>
	}
 80049b6:	e010      	b.n	80049da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d00b      	beq.n	80049da <prvDeleteTCB+0x62>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	e7fd      	b.n	80049d6 <prvDeleteTCB+0x5e>
	}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ea:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <prvResetNextTaskUnblockTime+0x38>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <prvResetNextTaskUnblockTime+0x3c>)
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049fc:	e008      	b.n	8004a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fe:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <prvResetNextTaskUnblockTime+0x38>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <prvResetNextTaskUnblockTime+0x3c>)
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000558 	.word	0x20000558
 8004a20:	200005c0 	.word	0x200005c0

08004a24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a2e:	4b29      	ldr	r3, [pc, #164]	@ (8004ad4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a34:	4b28      	ldr	r3, [pc, #160]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fad3 	bl	8003fe6 <uxListRemove>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a46:	4b24      	ldr	r3, [pc, #144]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43da      	mvns	r2, r3
 8004a54:	4b21      	ldr	r3, [pc, #132]	@ (8004adc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	4a20      	ldr	r2, [pc, #128]	@ (8004adc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a64:	d10a      	bne.n	8004a7c <prvAddCurrentTaskToDelayedList+0x58>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	481a      	ldr	r0, [pc, #104]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a76:	f7ff fa59 	bl	8003f2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a7a:	e026      	b.n	8004aca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a84:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d209      	bcs.n	8004aa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a94:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7ff fa67 	bl	8003f74 <vListInsert>
}
 8004aa6:	e010      	b.n	8004aca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7ff fa5d 	bl	8003f74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d202      	bcs.n	8004aca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ac4:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200005a4 	.word	0x200005a4
 8004ad8:	200004a0 	.word	0x200004a0
 8004adc:	200005a8 	.word	0x200005a8
 8004ae0:	2000058c 	.word	0x2000058c
 8004ae4:	2000055c 	.word	0x2000055c
 8004ae8:	20000558 	.word	0x20000558
 8004aec:	200005c0 	.word	0x200005c0

08004af0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b04      	subs	r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b20:	4a0c      	ldr	r2, [pc, #48]	@ (8004b54 <pxPortInitialiseStack+0x64>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b14      	subs	r3, #20
 8004b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f06f 0202 	mvn.w	r2, #2
 8004b3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3b20      	subs	r3, #32
 8004b44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	08004b59 	.word	0x08004b59

08004b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b62:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <prvTaskExitError+0x58>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b6a:	d00b      	beq.n	8004b84 <prvTaskExitError+0x2c>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <prvTaskExitError+0x28>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60bb      	str	r3, [r7, #8]
}
 8004b96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b98:	bf00      	nop
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0fc      	beq.n	8004b9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	2000000c 	.word	0x2000000c
	...

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	4770      	bx	lr
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst2>:
 8004be0:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004be8:	4808      	ldr	r0, [pc, #32]	@ (8004c0c <prvPortStartFirstTask+0x24>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8814 	msr	CONTROL, r0
 8004bfa:	b662      	cpsie	i
 8004bfc:	b661      	cpsie	f
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	df00      	svc	0
 8004c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c0a:	bf00      	nop
 8004c0c:	e000ed08 	.word	0xe000ed08

08004c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <xPortStartScheduler+0x124>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a47      	ldr	r2, [pc, #284]	@ (8004d38 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10b      	bne.n	8004c38 <xPortStartScheduler+0x28>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c38:	4b3e      	ldr	r3, [pc, #248]	@ (8004d34 <xPortStartScheduler+0x124>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d3c <xPortStartScheduler+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10b      	bne.n	8004c5a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	613b      	str	r3, [r7, #16]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c5a:	4b39      	ldr	r3, [pc, #228]	@ (8004d40 <xPortStartScheduler+0x130>)
 8004c5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	22ff      	movs	r2, #255	@ 0xff
 8004c6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <xPortStartScheduler+0x134>)
 8004c80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c82:	4b31      	ldr	r3, [pc, #196]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004c84:	2207      	movs	r2, #7
 8004c86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c88:	e009      	b.n	8004c9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4a2d      	ldr	r2, [pc, #180]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004c92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d0ef      	beq.n	8004c8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004caa:	4b27      	ldr	r3, [pc, #156]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00b      	beq.n	8004cce <xPortStartScheduler+0xbe>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60bb      	str	r3, [r7, #8]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cce:	4b1e      	ldr	r3, [pc, #120]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004ce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a16      	ldr	r2, [pc, #88]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cf8:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d04:	f000 f8da 	bl	8004ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d08:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <xPortStartScheduler+0x140>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d0e:	f000 f8f9 	bl	8004f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <xPortStartScheduler+0x144>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a0f      	ldr	r2, [pc, #60]	@ (8004d54 <xPortStartScheduler+0x144>)
 8004d18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d1e:	f7ff ff63 	bl	8004be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d22:	f7ff fd3f 	bl	80047a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d26:	f7ff ff17 	bl	8004b58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	e000ed00 	.word	0xe000ed00
 8004d38:	410fc271 	.word	0x410fc271
 8004d3c:	410fc270 	.word	0x410fc270
 8004d40:	e000e400 	.word	0xe000e400
 8004d44:	200005cc 	.word	0x200005cc
 8004d48:	200005d0 	.word	0x200005d0
 8004d4c:	e000ed20 	.word	0xe000ed20
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	e000ef34 	.word	0xe000ef34

08004d58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	607b      	str	r3, [r7, #4]
}
 8004d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d72:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <vPortEnterCritical+0x5c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <vPortEnterCritical+0x5c>)
 8004d7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <vPortEnterCritical+0x5c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d110      	bne.n	8004da6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <vPortEnterCritical+0x60>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	603b      	str	r3, [r7, #0]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <vPortEnterCritical+0x4a>
	}
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dc2:	4b12      	ldr	r3, [pc, #72]	@ (8004e0c <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <vPortExitCritical+0x26>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	607b      	str	r3, [r7, #4]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <vPortExitCritical+0x50>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <vPortExitCritical+0x50>)
 8004dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <vPortExitCritical+0x50>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <vPortExitCritical+0x44>
 8004df4:	2300      	movs	r3, #0
 8004df6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	2000000c 	.word	0x2000000c

08004e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e10:	f3ef 8009 	mrs	r0, PSP
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <pxCurrentTCBConst>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f01e 0f10 	tst.w	lr, #16
 8004e20:	bf08      	it	eq
 8004e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e34:	f380 8811 	msr	BASEPRI, r0
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f7ff fcb0 	bl	80047a4 <vTaskSwitchContext>
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f380 8811 	msr	BASEPRI, r0
 8004e4c:	bc09      	pop	{r0, r3}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e56:	f01e 0f10 	tst.w	lr, #16
 8004e5a:	bf08      	it	eq
 8004e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e60:	f380 8809 	msr	PSP, r0
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <pxCurrentTCBConst>:
 8004e70:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
}
 8004e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e92:	f7ff fbcd 	bl	8004630 <xTaskIncrementTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <SysTick_Handler+0x40>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	4a09      	ldr	r2, [pc, #36]	@ (8004f00 <vPortSetupTimerInterrupt+0x44>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	10624dd3 	.word	0x10624dd3
 8004f00:	e000e014 	.word	0xe000e014

08004f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f14 <vPortEnableVFP+0x10>
 8004f08:	6801      	ldr	r1, [r0, #0]
 8004f0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f0e:	6001      	str	r1, [r0, #0]
 8004f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f12:	bf00      	nop
 8004f14:	e000ed88 	.word	0xe000ed88

08004f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	@ 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f24:	f7ff fad8 	bl	80044d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f28:	4b5c      	ldr	r3, [pc, #368]	@ (800509c <pvPortMalloc+0x184>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f30:	f000 f924 	bl	800517c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f34:	4b5a      	ldr	r3, [pc, #360]	@ (80050a0 <pvPortMalloc+0x188>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 8095 	bne.w	800506c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01e      	beq.n	8004f86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f48:	2208      	movs	r2, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d015      	beq.n	8004f86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <pvPortMalloc+0x6e>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	617b      	str	r3, [r7, #20]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d06f      	beq.n	800506c <pvPortMalloc+0x154>
 8004f8c:	4b45      	ldr	r3, [pc, #276]	@ (80050a4 <pvPortMalloc+0x18c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d86a      	bhi.n	800506c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f96:	4b44      	ldr	r3, [pc, #272]	@ (80050a8 <pvPortMalloc+0x190>)
 8004f98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f9a:	4b43      	ldr	r3, [pc, #268]	@ (80050a8 <pvPortMalloc+0x190>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa0:	e004      	b.n	8004fac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <pvPortMalloc+0xa6>
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f1      	bne.n	8004fa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fbe:	4b37      	ldr	r3, [pc, #220]	@ (800509c <pvPortMalloc+0x184>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d051      	beq.n	800506c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	4413      	add	r3, r2
 8004fd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1ad2      	subs	r2, r2, r3
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d920      	bls.n	800502c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <pvPortMalloc+0xfc>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	613b      	str	r3, [r7, #16]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005026:	69b8      	ldr	r0, [r7, #24]
 8005028:	f000 f90a 	bl	8005240 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800502c:	4b1d      	ldr	r3, [pc, #116]	@ (80050a4 <pvPortMalloc+0x18c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <pvPortMalloc+0x18c>)
 8005038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800503a:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <pvPortMalloc+0x18c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b1b      	ldr	r3, [pc, #108]	@ (80050ac <pvPortMalloc+0x194>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d203      	bcs.n	800504e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005046:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <pvPortMalloc+0x18c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a18      	ldr	r2, [pc, #96]	@ (80050ac <pvPortMalloc+0x194>)
 800504c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b13      	ldr	r3, [pc, #76]	@ (80050a0 <pvPortMalloc+0x188>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	431a      	orrs	r2, r3
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005062:	4b13      	ldr	r3, [pc, #76]	@ (80050b0 <pvPortMalloc+0x198>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	4a11      	ldr	r2, [pc, #68]	@ (80050b0 <pvPortMalloc+0x198>)
 800506a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800506c:	f7ff fa42 	bl	80044f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <pvPortMalloc+0x17a>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60fb      	str	r3, [r7, #12]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <pvPortMalloc+0x176>
	return pvReturn;
 8005092:	69fb      	ldr	r3, [r7, #28]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	@ 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200041dc 	.word	0x200041dc
 80050a0:	200041f0 	.word	0x200041f0
 80050a4:	200041e0 	.word	0x200041e0
 80050a8:	200041d4 	.word	0x200041d4
 80050ac:	200041e4 	.word	0x200041e4
 80050b0:	200041e8 	.word	0x200041e8

080050b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04f      	beq.n	8005166 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050c6:	2308      	movs	r3, #8
 80050c8:	425b      	negs	r3, r3
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <vPortFree+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <vPortFree+0x46>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <vPortFree+0x66>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60bb      	str	r3, [r7, #8]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4b14      	ldr	r3, [pc, #80]	@ (8005170 <vPortFree+0xbc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01e      	beq.n	8005166 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11a      	bne.n	8005166 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <vPortFree+0xbc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005140:	f7ff f9ca 	bl	80044d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <vPortFree+0xc0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4413      	add	r3, r2
 800514e:	4a09      	ldr	r2, [pc, #36]	@ (8005174 <vPortFree+0xc0>)
 8005150:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f000 f874 	bl	8005240 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005158:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <vPortFree+0xc4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <vPortFree+0xc4>)
 8005160:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005162:	f7ff f9c7 	bl	80044f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200041f0 	.word	0x200041f0
 8005174:	200041e0 	.word	0x200041e0
 8005178:	200041ec 	.word	0x200041ec

0800517c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005182:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005186:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005188:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <prvHeapInit+0xac>)
 800518a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3307      	adds	r3, #7
 800519a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005228 <prvHeapInit+0xac>)
 80051ac:	4413      	add	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <prvHeapInit+0xb0>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051ba:	4b1c      	ldr	r3, [pc, #112]	@ (800522c <prvHeapInit+0xb0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4413      	add	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c8:	2208      	movs	r2, #8
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0307 	bic.w	r3, r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <prvHeapInit+0xb4>)
 80051dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051de:	4b14      	ldr	r3, [pc, #80]	@ (8005230 <prvHeapInit+0xb4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051e6:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <prvHeapInit+0xb4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	1ad2      	subs	r2, r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <prvHeapInit+0xb4>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a0a      	ldr	r2, [pc, #40]	@ (8005234 <prvHeapInit+0xb8>)
 800520a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <prvHeapInit+0xbc>)
 8005212:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <prvHeapInit+0xc0>)
 8005216:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	200005d4 	.word	0x200005d4
 800522c:	200041d4 	.word	0x200041d4
 8005230:	200041dc 	.word	0x200041dc
 8005234:	200041e4 	.word	0x200041e4
 8005238:	200041e0 	.word	0x200041e0
 800523c:	200041f0 	.word	0x200041f0

08005240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005248:	4b28      	ldr	r3, [pc, #160]	@ (80052ec <prvInsertBlockIntoFreeList+0xac>)
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e002      	b.n	8005254 <prvInsertBlockIntoFreeList+0x14>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d8f7      	bhi.n	800524e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4413      	add	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d108      	bne.n	8005282 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d118      	bne.n	80052c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b15      	ldr	r3, [pc, #84]	@ (80052f0 <prvInsertBlockIntoFreeList+0xb0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d00d      	beq.n	80052be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e008      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <prvInsertBlockIntoFreeList+0xb0>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e003      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d002      	beq.n	80052de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	200041d4 	.word	0x200041d4
 80052f0:	200041dc 	.word	0x200041dc

080052f4 <siprintf>:
 80052f4:	b40e      	push	{r1, r2, r3}
 80052f6:	b510      	push	{r4, lr}
 80052f8:	b09d      	sub	sp, #116	@ 0x74
 80052fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80052fc:	9002      	str	r0, [sp, #8]
 80052fe:	9006      	str	r0, [sp, #24]
 8005300:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005304:	480a      	ldr	r0, [pc, #40]	@ (8005330 <siprintf+0x3c>)
 8005306:	9107      	str	r1, [sp, #28]
 8005308:	9104      	str	r1, [sp, #16]
 800530a:	490a      	ldr	r1, [pc, #40]	@ (8005334 <siprintf+0x40>)
 800530c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005310:	9105      	str	r1, [sp, #20]
 8005312:	2400      	movs	r4, #0
 8005314:	a902      	add	r1, sp, #8
 8005316:	6800      	ldr	r0, [r0, #0]
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800531c:	f000 fa00 	bl	8005720 <_svfiprintf_r>
 8005320:	9b02      	ldr	r3, [sp, #8]
 8005322:	701c      	strb	r4, [r3, #0]
 8005324:	b01d      	add	sp, #116	@ 0x74
 8005326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532a:	b003      	add	sp, #12
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000010 	.word	0x20000010
 8005334:	ffff0208 	.word	0xffff0208

08005338 <memset>:
 8005338:	4402      	add	r2, r0
 800533a:	4603      	mov	r3, r0
 800533c:	4293      	cmp	r3, r2
 800533e:	d100      	bne.n	8005342 <memset+0xa>
 8005340:	4770      	bx	lr
 8005342:	f803 1b01 	strb.w	r1, [r3], #1
 8005346:	e7f9      	b.n	800533c <memset+0x4>

08005348 <_reclaim_reent>:
 8005348:	4b2d      	ldr	r3, [pc, #180]	@ (8005400 <_reclaim_reent+0xb8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4283      	cmp	r3, r0
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	d053      	beq.n	80053fc <_reclaim_reent+0xb4>
 8005354:	69c3      	ldr	r3, [r0, #28]
 8005356:	b31b      	cbz	r3, 80053a0 <_reclaim_reent+0x58>
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	b163      	cbz	r3, 8005376 <_reclaim_reent+0x2e>
 800535c:	2500      	movs	r5, #0
 800535e:	69e3      	ldr	r3, [r4, #28]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	5959      	ldr	r1, [r3, r5]
 8005364:	b9b1      	cbnz	r1, 8005394 <_reclaim_reent+0x4c>
 8005366:	3504      	adds	r5, #4
 8005368:	2d80      	cmp	r5, #128	@ 0x80
 800536a:	d1f8      	bne.n	800535e <_reclaim_reent+0x16>
 800536c:	69e3      	ldr	r3, [r4, #28]
 800536e:	4620      	mov	r0, r4
 8005370:	68d9      	ldr	r1, [r3, #12]
 8005372:	f000 f881 	bl	8005478 <_free_r>
 8005376:	69e3      	ldr	r3, [r4, #28]
 8005378:	6819      	ldr	r1, [r3, #0]
 800537a:	b111      	cbz	r1, 8005382 <_reclaim_reent+0x3a>
 800537c:	4620      	mov	r0, r4
 800537e:	f000 f87b 	bl	8005478 <_free_r>
 8005382:	69e3      	ldr	r3, [r4, #28]
 8005384:	689d      	ldr	r5, [r3, #8]
 8005386:	b15d      	cbz	r5, 80053a0 <_reclaim_reent+0x58>
 8005388:	4629      	mov	r1, r5
 800538a:	4620      	mov	r0, r4
 800538c:	682d      	ldr	r5, [r5, #0]
 800538e:	f000 f873 	bl	8005478 <_free_r>
 8005392:	e7f8      	b.n	8005386 <_reclaim_reent+0x3e>
 8005394:	680e      	ldr	r6, [r1, #0]
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f86e 	bl	8005478 <_free_r>
 800539c:	4631      	mov	r1, r6
 800539e:	e7e1      	b.n	8005364 <_reclaim_reent+0x1c>
 80053a0:	6961      	ldr	r1, [r4, #20]
 80053a2:	b111      	cbz	r1, 80053aa <_reclaim_reent+0x62>
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 f867 	bl	8005478 <_free_r>
 80053aa:	69e1      	ldr	r1, [r4, #28]
 80053ac:	b111      	cbz	r1, 80053b4 <_reclaim_reent+0x6c>
 80053ae:	4620      	mov	r0, r4
 80053b0:	f000 f862 	bl	8005478 <_free_r>
 80053b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80053b6:	b111      	cbz	r1, 80053be <_reclaim_reent+0x76>
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f85d 	bl	8005478 <_free_r>
 80053be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053c0:	b111      	cbz	r1, 80053c8 <_reclaim_reent+0x80>
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f858 	bl	8005478 <_free_r>
 80053c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80053ca:	b111      	cbz	r1, 80053d2 <_reclaim_reent+0x8a>
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 f853 	bl	8005478 <_free_r>
 80053d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80053d4:	b111      	cbz	r1, 80053dc <_reclaim_reent+0x94>
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 f84e 	bl	8005478 <_free_r>
 80053dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053de:	b111      	cbz	r1, 80053e6 <_reclaim_reent+0x9e>
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f849 	bl	8005478 <_free_r>
 80053e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053e8:	b111      	cbz	r1, 80053f0 <_reclaim_reent+0xa8>
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 f844 	bl	8005478 <_free_r>
 80053f0:	6a23      	ldr	r3, [r4, #32]
 80053f2:	b11b      	cbz	r3, 80053fc <_reclaim_reent+0xb4>
 80053f4:	4620      	mov	r0, r4
 80053f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053fa:	4718      	bx	r3
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	bf00      	nop
 8005400:	20000010 	.word	0x20000010

08005404 <__errno>:
 8005404:	4b01      	ldr	r3, [pc, #4]	@ (800540c <__errno+0x8>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000010 	.word	0x20000010

08005410 <__libc_init_array>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4d0d      	ldr	r5, [pc, #52]	@ (8005448 <__libc_init_array+0x38>)
 8005414:	4c0d      	ldr	r4, [pc, #52]	@ (800544c <__libc_init_array+0x3c>)
 8005416:	1b64      	subs	r4, r4, r5
 8005418:	10a4      	asrs	r4, r4, #2
 800541a:	2600      	movs	r6, #0
 800541c:	42a6      	cmp	r6, r4
 800541e:	d109      	bne.n	8005434 <__libc_init_array+0x24>
 8005420:	4d0b      	ldr	r5, [pc, #44]	@ (8005450 <__libc_init_array+0x40>)
 8005422:	4c0c      	ldr	r4, [pc, #48]	@ (8005454 <__libc_init_array+0x44>)
 8005424:	f000 fc64 	bl	8005cf0 <_init>
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	2600      	movs	r6, #0
 800542e:	42a6      	cmp	r6, r4
 8005430:	d105      	bne.n	800543e <__libc_init_array+0x2e>
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	f855 3b04 	ldr.w	r3, [r5], #4
 8005438:	4798      	blx	r3
 800543a:	3601      	adds	r6, #1
 800543c:	e7ee      	b.n	800541c <__libc_init_array+0xc>
 800543e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005442:	4798      	blx	r3
 8005444:	3601      	adds	r6, #1
 8005446:	e7f2      	b.n	800542e <__libc_init_array+0x1e>
 8005448:	08005df0 	.word	0x08005df0
 800544c:	08005df0 	.word	0x08005df0
 8005450:	08005df0 	.word	0x08005df0
 8005454:	08005df4 	.word	0x08005df4

08005458 <__retarget_lock_acquire_recursive>:
 8005458:	4770      	bx	lr

0800545a <__retarget_lock_release_recursive>:
 800545a:	4770      	bx	lr

0800545c <memcpy>:
 800545c:	440a      	add	r2, r1
 800545e:	4291      	cmp	r1, r2
 8005460:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005464:	d100      	bne.n	8005468 <memcpy+0xc>
 8005466:	4770      	bx	lr
 8005468:	b510      	push	{r4, lr}
 800546a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800546e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005472:	4291      	cmp	r1, r2
 8005474:	d1f9      	bne.n	800546a <memcpy+0xe>
 8005476:	bd10      	pop	{r4, pc}

08005478 <_free_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4605      	mov	r5, r0
 800547c:	2900      	cmp	r1, #0
 800547e:	d041      	beq.n	8005504 <_free_r+0x8c>
 8005480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005484:	1f0c      	subs	r4, r1, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	bfb8      	it	lt
 800548a:	18e4      	addlt	r4, r4, r3
 800548c:	f000 f8e0 	bl	8005650 <__malloc_lock>
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <_free_r+0x90>)
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	b933      	cbnz	r3, 80054a4 <_free_r+0x2c>
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6014      	str	r4, [r2, #0]
 800549a:	4628      	mov	r0, r5
 800549c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a0:	f000 b8dc 	b.w	800565c <__malloc_unlock>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d908      	bls.n	80054ba <_free_r+0x42>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	1821      	adds	r1, r4, r0
 80054ac:	428b      	cmp	r3, r1
 80054ae:	bf01      	itttt	eq
 80054b0:	6819      	ldreq	r1, [r3, #0]
 80054b2:	685b      	ldreq	r3, [r3, #4]
 80054b4:	1809      	addeq	r1, r1, r0
 80054b6:	6021      	streq	r1, [r4, #0]
 80054b8:	e7ed      	b.n	8005496 <_free_r+0x1e>
 80054ba:	461a      	mov	r2, r3
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b10b      	cbz	r3, 80054c4 <_free_r+0x4c>
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d9fa      	bls.n	80054ba <_free_r+0x42>
 80054c4:	6811      	ldr	r1, [r2, #0]
 80054c6:	1850      	adds	r0, r2, r1
 80054c8:	42a0      	cmp	r0, r4
 80054ca:	d10b      	bne.n	80054e4 <_free_r+0x6c>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	4401      	add	r1, r0
 80054d0:	1850      	adds	r0, r2, r1
 80054d2:	4283      	cmp	r3, r0
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	d1e0      	bne.n	800549a <_free_r+0x22>
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	6053      	str	r3, [r2, #4]
 80054de:	4408      	add	r0, r1
 80054e0:	6010      	str	r0, [r2, #0]
 80054e2:	e7da      	b.n	800549a <_free_r+0x22>
 80054e4:	d902      	bls.n	80054ec <_free_r+0x74>
 80054e6:	230c      	movs	r3, #12
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	e7d6      	b.n	800549a <_free_r+0x22>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	1821      	adds	r1, r4, r0
 80054f0:	428b      	cmp	r3, r1
 80054f2:	bf04      	itt	eq
 80054f4:	6819      	ldreq	r1, [r3, #0]
 80054f6:	685b      	ldreq	r3, [r3, #4]
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	bf04      	itt	eq
 80054fc:	1809      	addeq	r1, r1, r0
 80054fe:	6021      	streq	r1, [r4, #0]
 8005500:	6054      	str	r4, [r2, #4]
 8005502:	e7ca      	b.n	800549a <_free_r+0x22>
 8005504:	bd38      	pop	{r3, r4, r5, pc}
 8005506:	bf00      	nop
 8005508:	20004338 	.word	0x20004338

0800550c <sbrk_aligned>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4e0f      	ldr	r6, [pc, #60]	@ (800554c <sbrk_aligned+0x40>)
 8005510:	460c      	mov	r4, r1
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	4605      	mov	r5, r0
 8005516:	b911      	cbnz	r1, 800551e <sbrk_aligned+0x12>
 8005518:	f000 fba4 	bl	8005c64 <_sbrk_r>
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 fb9f 	bl	8005c64 <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d103      	bne.n	8005532 <sbrk_aligned+0x26>
 800552a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800552e:	4620      	mov	r0, r4
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	1cc4      	adds	r4, r0, #3
 8005534:	f024 0403 	bic.w	r4, r4, #3
 8005538:	42a0      	cmp	r0, r4
 800553a:	d0f8      	beq.n	800552e <sbrk_aligned+0x22>
 800553c:	1a21      	subs	r1, r4, r0
 800553e:	4628      	mov	r0, r5
 8005540:	f000 fb90 	bl	8005c64 <_sbrk_r>
 8005544:	3001      	adds	r0, #1
 8005546:	d1f2      	bne.n	800552e <sbrk_aligned+0x22>
 8005548:	e7ef      	b.n	800552a <sbrk_aligned+0x1e>
 800554a:	bf00      	nop
 800554c:	20004334 	.word	0x20004334

08005550 <_malloc_r>:
 8005550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005554:	1ccd      	adds	r5, r1, #3
 8005556:	f025 0503 	bic.w	r5, r5, #3
 800555a:	3508      	adds	r5, #8
 800555c:	2d0c      	cmp	r5, #12
 800555e:	bf38      	it	cc
 8005560:	250c      	movcc	r5, #12
 8005562:	2d00      	cmp	r5, #0
 8005564:	4606      	mov	r6, r0
 8005566:	db01      	blt.n	800556c <_malloc_r+0x1c>
 8005568:	42a9      	cmp	r1, r5
 800556a:	d904      	bls.n	8005576 <_malloc_r+0x26>
 800556c:	230c      	movs	r3, #12
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	2000      	movs	r0, #0
 8005572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800564c <_malloc_r+0xfc>
 800557a:	f000 f869 	bl	8005650 <__malloc_lock>
 800557e:	f8d8 3000 	ldr.w	r3, [r8]
 8005582:	461c      	mov	r4, r3
 8005584:	bb44      	cbnz	r4, 80055d8 <_malloc_r+0x88>
 8005586:	4629      	mov	r1, r5
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff ffbf 	bl	800550c <sbrk_aligned>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	4604      	mov	r4, r0
 8005592:	d158      	bne.n	8005646 <_malloc_r+0xf6>
 8005594:	f8d8 4000 	ldr.w	r4, [r8]
 8005598:	4627      	mov	r7, r4
 800559a:	2f00      	cmp	r7, #0
 800559c:	d143      	bne.n	8005626 <_malloc_r+0xd6>
 800559e:	2c00      	cmp	r4, #0
 80055a0:	d04b      	beq.n	800563a <_malloc_r+0xea>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	4639      	mov	r1, r7
 80055a6:	4630      	mov	r0, r6
 80055a8:	eb04 0903 	add.w	r9, r4, r3
 80055ac:	f000 fb5a 	bl	8005c64 <_sbrk_r>
 80055b0:	4581      	cmp	r9, r0
 80055b2:	d142      	bne.n	800563a <_malloc_r+0xea>
 80055b4:	6821      	ldr	r1, [r4, #0]
 80055b6:	1a6d      	subs	r5, r5, r1
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffa6 	bl	800550c <sbrk_aligned>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d03a      	beq.n	800563a <_malloc_r+0xea>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	442b      	add	r3, r5
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	f8d8 3000 	ldr.w	r3, [r8]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	bb62      	cbnz	r2, 800562c <_malloc_r+0xdc>
 80055d2:	f8c8 7000 	str.w	r7, [r8]
 80055d6:	e00f      	b.n	80055f8 <_malloc_r+0xa8>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	1b52      	subs	r2, r2, r5
 80055dc:	d420      	bmi.n	8005620 <_malloc_r+0xd0>
 80055de:	2a0b      	cmp	r2, #11
 80055e0:	d917      	bls.n	8005612 <_malloc_r+0xc2>
 80055e2:	1961      	adds	r1, r4, r5
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	6025      	str	r5, [r4, #0]
 80055e8:	bf18      	it	ne
 80055ea:	6059      	strne	r1, [r3, #4]
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	bf08      	it	eq
 80055f0:	f8c8 1000 	streq.w	r1, [r8]
 80055f4:	5162      	str	r2, [r4, r5]
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f82f 	bl	800565c <__malloc_unlock>
 80055fe:	f104 000b 	add.w	r0, r4, #11
 8005602:	1d23      	adds	r3, r4, #4
 8005604:	f020 0007 	bic.w	r0, r0, #7
 8005608:	1ac2      	subs	r2, r0, r3
 800560a:	bf1c      	itt	ne
 800560c:	1a1b      	subne	r3, r3, r0
 800560e:	50a3      	strne	r3, [r4, r2]
 8005610:	e7af      	b.n	8005572 <_malloc_r+0x22>
 8005612:	6862      	ldr	r2, [r4, #4]
 8005614:	42a3      	cmp	r3, r4
 8005616:	bf0c      	ite	eq
 8005618:	f8c8 2000 	streq.w	r2, [r8]
 800561c:	605a      	strne	r2, [r3, #4]
 800561e:	e7eb      	b.n	80055f8 <_malloc_r+0xa8>
 8005620:	4623      	mov	r3, r4
 8005622:	6864      	ldr	r4, [r4, #4]
 8005624:	e7ae      	b.n	8005584 <_malloc_r+0x34>
 8005626:	463c      	mov	r4, r7
 8005628:	687f      	ldr	r7, [r7, #4]
 800562a:	e7b6      	b.n	800559a <_malloc_r+0x4a>
 800562c:	461a      	mov	r2, r3
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	42a3      	cmp	r3, r4
 8005632:	d1fb      	bne.n	800562c <_malloc_r+0xdc>
 8005634:	2300      	movs	r3, #0
 8005636:	6053      	str	r3, [r2, #4]
 8005638:	e7de      	b.n	80055f8 <_malloc_r+0xa8>
 800563a:	230c      	movs	r3, #12
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	4630      	mov	r0, r6
 8005640:	f000 f80c 	bl	800565c <__malloc_unlock>
 8005644:	e794      	b.n	8005570 <_malloc_r+0x20>
 8005646:	6005      	str	r5, [r0, #0]
 8005648:	e7d6      	b.n	80055f8 <_malloc_r+0xa8>
 800564a:	bf00      	nop
 800564c:	20004338 	.word	0x20004338

08005650 <__malloc_lock>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__malloc_lock+0x8>)
 8005652:	f7ff bf01 	b.w	8005458 <__retarget_lock_acquire_recursive>
 8005656:	bf00      	nop
 8005658:	20004330 	.word	0x20004330

0800565c <__malloc_unlock>:
 800565c:	4801      	ldr	r0, [pc, #4]	@ (8005664 <__malloc_unlock+0x8>)
 800565e:	f7ff befc 	b.w	800545a <__retarget_lock_release_recursive>
 8005662:	bf00      	nop
 8005664:	20004330 	.word	0x20004330

08005668 <__ssputs_r>:
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	688e      	ldr	r6, [r1, #8]
 800566e:	461f      	mov	r7, r3
 8005670:	42be      	cmp	r6, r7
 8005672:	680b      	ldr	r3, [r1, #0]
 8005674:	4682      	mov	sl, r0
 8005676:	460c      	mov	r4, r1
 8005678:	4690      	mov	r8, r2
 800567a:	d82d      	bhi.n	80056d8 <__ssputs_r+0x70>
 800567c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005680:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005684:	d026      	beq.n	80056d4 <__ssputs_r+0x6c>
 8005686:	6965      	ldr	r5, [r4, #20]
 8005688:	6909      	ldr	r1, [r1, #16]
 800568a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800568e:	eba3 0901 	sub.w	r9, r3, r1
 8005692:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005696:	1c7b      	adds	r3, r7, #1
 8005698:	444b      	add	r3, r9
 800569a:	106d      	asrs	r5, r5, #1
 800569c:	429d      	cmp	r5, r3
 800569e:	bf38      	it	cc
 80056a0:	461d      	movcc	r5, r3
 80056a2:	0553      	lsls	r3, r2, #21
 80056a4:	d527      	bpl.n	80056f6 <__ssputs_r+0x8e>
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7ff ff52 	bl	8005550 <_malloc_r>
 80056ac:	4606      	mov	r6, r0
 80056ae:	b360      	cbz	r0, 800570a <__ssputs_r+0xa2>
 80056b0:	6921      	ldr	r1, [r4, #16]
 80056b2:	464a      	mov	r2, r9
 80056b4:	f7ff fed2 	bl	800545c <memcpy>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	6126      	str	r6, [r4, #16]
 80056c6:	6165      	str	r5, [r4, #20]
 80056c8:	444e      	add	r6, r9
 80056ca:	eba5 0509 	sub.w	r5, r5, r9
 80056ce:	6026      	str	r6, [r4, #0]
 80056d0:	60a5      	str	r5, [r4, #8]
 80056d2:	463e      	mov	r6, r7
 80056d4:	42be      	cmp	r6, r7
 80056d6:	d900      	bls.n	80056da <__ssputs_r+0x72>
 80056d8:	463e      	mov	r6, r7
 80056da:	6820      	ldr	r0, [r4, #0]
 80056dc:	4632      	mov	r2, r6
 80056de:	4641      	mov	r1, r8
 80056e0:	f000 faa6 	bl	8005c30 <memmove>
 80056e4:	68a3      	ldr	r3, [r4, #8]
 80056e6:	1b9b      	subs	r3, r3, r6
 80056e8:	60a3      	str	r3, [r4, #8]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	4433      	add	r3, r6
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	2000      	movs	r0, #0
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	462a      	mov	r2, r5
 80056f8:	f000 fac4 	bl	8005c84 <_realloc_r>
 80056fc:	4606      	mov	r6, r0
 80056fe:	2800      	cmp	r0, #0
 8005700:	d1e0      	bne.n	80056c4 <__ssputs_r+0x5c>
 8005702:	6921      	ldr	r1, [r4, #16]
 8005704:	4650      	mov	r0, sl
 8005706:	f7ff feb7 	bl	8005478 <_free_r>
 800570a:	230c      	movs	r3, #12
 800570c:	f8ca 3000 	str.w	r3, [sl]
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800571c:	e7e9      	b.n	80056f2 <__ssputs_r+0x8a>
	...

08005720 <_svfiprintf_r>:
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	4698      	mov	r8, r3
 8005726:	898b      	ldrh	r3, [r1, #12]
 8005728:	061b      	lsls	r3, r3, #24
 800572a:	b09d      	sub	sp, #116	@ 0x74
 800572c:	4607      	mov	r7, r0
 800572e:	460d      	mov	r5, r1
 8005730:	4614      	mov	r4, r2
 8005732:	d510      	bpl.n	8005756 <_svfiprintf_r+0x36>
 8005734:	690b      	ldr	r3, [r1, #16]
 8005736:	b973      	cbnz	r3, 8005756 <_svfiprintf_r+0x36>
 8005738:	2140      	movs	r1, #64	@ 0x40
 800573a:	f7ff ff09 	bl	8005550 <_malloc_r>
 800573e:	6028      	str	r0, [r5, #0]
 8005740:	6128      	str	r0, [r5, #16]
 8005742:	b930      	cbnz	r0, 8005752 <_svfiprintf_r+0x32>
 8005744:	230c      	movs	r3, #12
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800574c:	b01d      	add	sp, #116	@ 0x74
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005752:	2340      	movs	r3, #64	@ 0x40
 8005754:	616b      	str	r3, [r5, #20]
 8005756:	2300      	movs	r3, #0
 8005758:	9309      	str	r3, [sp, #36]	@ 0x24
 800575a:	2320      	movs	r3, #32
 800575c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005760:	f8cd 800c 	str.w	r8, [sp, #12]
 8005764:	2330      	movs	r3, #48	@ 0x30
 8005766:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005904 <_svfiprintf_r+0x1e4>
 800576a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800576e:	f04f 0901 	mov.w	r9, #1
 8005772:	4623      	mov	r3, r4
 8005774:	469a      	mov	sl, r3
 8005776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800577a:	b10a      	cbz	r2, 8005780 <_svfiprintf_r+0x60>
 800577c:	2a25      	cmp	r2, #37	@ 0x25
 800577e:	d1f9      	bne.n	8005774 <_svfiprintf_r+0x54>
 8005780:	ebba 0b04 	subs.w	fp, sl, r4
 8005784:	d00b      	beq.n	800579e <_svfiprintf_r+0x7e>
 8005786:	465b      	mov	r3, fp
 8005788:	4622      	mov	r2, r4
 800578a:	4629      	mov	r1, r5
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ff6b 	bl	8005668 <__ssputs_r>
 8005792:	3001      	adds	r0, #1
 8005794:	f000 80a7 	beq.w	80058e6 <_svfiprintf_r+0x1c6>
 8005798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800579a:	445a      	add	r2, fp
 800579c:	9209      	str	r2, [sp, #36]	@ 0x24
 800579e:	f89a 3000 	ldrb.w	r3, [sl]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 809f 	beq.w	80058e6 <_svfiprintf_r+0x1c6>
 80057a8:	2300      	movs	r3, #0
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057b2:	f10a 0a01 	add.w	sl, sl, #1
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	9307      	str	r3, [sp, #28]
 80057ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057be:	931a      	str	r3, [sp, #104]	@ 0x68
 80057c0:	4654      	mov	r4, sl
 80057c2:	2205      	movs	r2, #5
 80057c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c8:	484e      	ldr	r0, [pc, #312]	@ (8005904 <_svfiprintf_r+0x1e4>)
 80057ca:	f7fa fd09 	bl	80001e0 <memchr>
 80057ce:	9a04      	ldr	r2, [sp, #16]
 80057d0:	b9d8      	cbnz	r0, 800580a <_svfiprintf_r+0xea>
 80057d2:	06d0      	lsls	r0, r2, #27
 80057d4:	bf44      	itt	mi
 80057d6:	2320      	movmi	r3, #32
 80057d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057dc:	0711      	lsls	r1, r2, #28
 80057de:	bf44      	itt	mi
 80057e0:	232b      	movmi	r3, #43	@ 0x2b
 80057e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057e6:	f89a 3000 	ldrb.w	r3, [sl]
 80057ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ec:	d015      	beq.n	800581a <_svfiprintf_r+0xfa>
 80057ee:	9a07      	ldr	r2, [sp, #28]
 80057f0:	4654      	mov	r4, sl
 80057f2:	2000      	movs	r0, #0
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	4621      	mov	r1, r4
 80057fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057fe:	3b30      	subs	r3, #48	@ 0x30
 8005800:	2b09      	cmp	r3, #9
 8005802:	d94b      	bls.n	800589c <_svfiprintf_r+0x17c>
 8005804:	b1b0      	cbz	r0, 8005834 <_svfiprintf_r+0x114>
 8005806:	9207      	str	r2, [sp, #28]
 8005808:	e014      	b.n	8005834 <_svfiprintf_r+0x114>
 800580a:	eba0 0308 	sub.w	r3, r0, r8
 800580e:	fa09 f303 	lsl.w	r3, r9, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	9304      	str	r3, [sp, #16]
 8005816:	46a2      	mov	sl, r4
 8005818:	e7d2      	b.n	80057c0 <_svfiprintf_r+0xa0>
 800581a:	9b03      	ldr	r3, [sp, #12]
 800581c:	1d19      	adds	r1, r3, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	9103      	str	r1, [sp, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	bfbb      	ittet	lt
 8005826:	425b      	neglt	r3, r3
 8005828:	f042 0202 	orrlt.w	r2, r2, #2
 800582c:	9307      	strge	r3, [sp, #28]
 800582e:	9307      	strlt	r3, [sp, #28]
 8005830:	bfb8      	it	lt
 8005832:	9204      	strlt	r2, [sp, #16]
 8005834:	7823      	ldrb	r3, [r4, #0]
 8005836:	2b2e      	cmp	r3, #46	@ 0x2e
 8005838:	d10a      	bne.n	8005850 <_svfiprintf_r+0x130>
 800583a:	7863      	ldrb	r3, [r4, #1]
 800583c:	2b2a      	cmp	r3, #42	@ 0x2a
 800583e:	d132      	bne.n	80058a6 <_svfiprintf_r+0x186>
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	1d1a      	adds	r2, r3, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	9203      	str	r2, [sp, #12]
 8005848:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800584c:	3402      	adds	r4, #2
 800584e:	9305      	str	r3, [sp, #20]
 8005850:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005914 <_svfiprintf_r+0x1f4>
 8005854:	7821      	ldrb	r1, [r4, #0]
 8005856:	2203      	movs	r2, #3
 8005858:	4650      	mov	r0, sl
 800585a:	f7fa fcc1 	bl	80001e0 <memchr>
 800585e:	b138      	cbz	r0, 8005870 <_svfiprintf_r+0x150>
 8005860:	9b04      	ldr	r3, [sp, #16]
 8005862:	eba0 000a 	sub.w	r0, r0, sl
 8005866:	2240      	movs	r2, #64	@ 0x40
 8005868:	4082      	lsls	r2, r0
 800586a:	4313      	orrs	r3, r2
 800586c:	3401      	adds	r4, #1
 800586e:	9304      	str	r3, [sp, #16]
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	4824      	ldr	r0, [pc, #144]	@ (8005908 <_svfiprintf_r+0x1e8>)
 8005876:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800587a:	2206      	movs	r2, #6
 800587c:	f7fa fcb0 	bl	80001e0 <memchr>
 8005880:	2800      	cmp	r0, #0
 8005882:	d036      	beq.n	80058f2 <_svfiprintf_r+0x1d2>
 8005884:	4b21      	ldr	r3, [pc, #132]	@ (800590c <_svfiprintf_r+0x1ec>)
 8005886:	bb1b      	cbnz	r3, 80058d0 <_svfiprintf_r+0x1b0>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	3307      	adds	r3, #7
 800588c:	f023 0307 	bic.w	r3, r3, #7
 8005890:	3308      	adds	r3, #8
 8005892:	9303      	str	r3, [sp, #12]
 8005894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005896:	4433      	add	r3, r6
 8005898:	9309      	str	r3, [sp, #36]	@ 0x24
 800589a:	e76a      	b.n	8005772 <_svfiprintf_r+0x52>
 800589c:	fb0c 3202 	mla	r2, ip, r2, r3
 80058a0:	460c      	mov	r4, r1
 80058a2:	2001      	movs	r0, #1
 80058a4:	e7a8      	b.n	80057f8 <_svfiprintf_r+0xd8>
 80058a6:	2300      	movs	r3, #0
 80058a8:	3401      	adds	r4, #1
 80058aa:	9305      	str	r3, [sp, #20]
 80058ac:	4619      	mov	r1, r3
 80058ae:	f04f 0c0a 	mov.w	ip, #10
 80058b2:	4620      	mov	r0, r4
 80058b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058b8:	3a30      	subs	r2, #48	@ 0x30
 80058ba:	2a09      	cmp	r2, #9
 80058bc:	d903      	bls.n	80058c6 <_svfiprintf_r+0x1a6>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0c6      	beq.n	8005850 <_svfiprintf_r+0x130>
 80058c2:	9105      	str	r1, [sp, #20]
 80058c4:	e7c4      	b.n	8005850 <_svfiprintf_r+0x130>
 80058c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058ca:	4604      	mov	r4, r0
 80058cc:	2301      	movs	r3, #1
 80058ce:	e7f0      	b.n	80058b2 <_svfiprintf_r+0x192>
 80058d0:	ab03      	add	r3, sp, #12
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	462a      	mov	r2, r5
 80058d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005910 <_svfiprintf_r+0x1f0>)
 80058d8:	a904      	add	r1, sp, #16
 80058da:	4638      	mov	r0, r7
 80058dc:	f3af 8000 	nop.w
 80058e0:	1c42      	adds	r2, r0, #1
 80058e2:	4606      	mov	r6, r0
 80058e4:	d1d6      	bne.n	8005894 <_svfiprintf_r+0x174>
 80058e6:	89ab      	ldrh	r3, [r5, #12]
 80058e8:	065b      	lsls	r3, r3, #25
 80058ea:	f53f af2d 	bmi.w	8005748 <_svfiprintf_r+0x28>
 80058ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058f0:	e72c      	b.n	800574c <_svfiprintf_r+0x2c>
 80058f2:	ab03      	add	r3, sp, #12
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	462a      	mov	r2, r5
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <_svfiprintf_r+0x1f0>)
 80058fa:	a904      	add	r1, sp, #16
 80058fc:	4638      	mov	r0, r7
 80058fe:	f000 f879 	bl	80059f4 <_printf_i>
 8005902:	e7ed      	b.n	80058e0 <_svfiprintf_r+0x1c0>
 8005904:	08005db4 	.word	0x08005db4
 8005908:	08005dbe 	.word	0x08005dbe
 800590c:	00000000 	.word	0x00000000
 8005910:	08005669 	.word	0x08005669
 8005914:	08005dba 	.word	0x08005dba

08005918 <_printf_common>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	4616      	mov	r6, r2
 800591e:	4698      	mov	r8, r3
 8005920:	688a      	ldr	r2, [r1, #8]
 8005922:	690b      	ldr	r3, [r1, #16]
 8005924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005928:	4293      	cmp	r3, r2
 800592a:	bfb8      	it	lt
 800592c:	4613      	movlt	r3, r2
 800592e:	6033      	str	r3, [r6, #0]
 8005930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005934:	4607      	mov	r7, r0
 8005936:	460c      	mov	r4, r1
 8005938:	b10a      	cbz	r2, 800593e <_printf_common+0x26>
 800593a:	3301      	adds	r3, #1
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	0699      	lsls	r1, r3, #26
 8005942:	bf42      	ittt	mi
 8005944:	6833      	ldrmi	r3, [r6, #0]
 8005946:	3302      	addmi	r3, #2
 8005948:	6033      	strmi	r3, [r6, #0]
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	f015 0506 	ands.w	r5, r5, #6
 8005950:	d106      	bne.n	8005960 <_printf_common+0x48>
 8005952:	f104 0a19 	add.w	sl, r4, #25
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	6832      	ldr	r2, [r6, #0]
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	42ab      	cmp	r3, r5
 800595e:	dc26      	bgt.n	80059ae <_printf_common+0x96>
 8005960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	3b00      	subs	r3, #0
 8005968:	bf18      	it	ne
 800596a:	2301      	movne	r3, #1
 800596c:	0692      	lsls	r2, r2, #26
 800596e:	d42b      	bmi.n	80059c8 <_printf_common+0xb0>
 8005970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005974:	4641      	mov	r1, r8
 8005976:	4638      	mov	r0, r7
 8005978:	47c8      	blx	r9
 800597a:	3001      	adds	r0, #1
 800597c:	d01e      	beq.n	80059bc <_printf_common+0xa4>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	6922      	ldr	r2, [r4, #16]
 8005982:	f003 0306 	and.w	r3, r3, #6
 8005986:	2b04      	cmp	r3, #4
 8005988:	bf02      	ittt	eq
 800598a:	68e5      	ldreq	r5, [r4, #12]
 800598c:	6833      	ldreq	r3, [r6, #0]
 800598e:	1aed      	subeq	r5, r5, r3
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	bf0c      	ite	eq
 8005994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005998:	2500      	movne	r5, #0
 800599a:	4293      	cmp	r3, r2
 800599c:	bfc4      	itt	gt
 800599e:	1a9b      	subgt	r3, r3, r2
 80059a0:	18ed      	addgt	r5, r5, r3
 80059a2:	2600      	movs	r6, #0
 80059a4:	341a      	adds	r4, #26
 80059a6:	42b5      	cmp	r5, r6
 80059a8:	d11a      	bne.n	80059e0 <_printf_common+0xc8>
 80059aa:	2000      	movs	r0, #0
 80059ac:	e008      	b.n	80059c0 <_printf_common+0xa8>
 80059ae:	2301      	movs	r3, #1
 80059b0:	4652      	mov	r2, sl
 80059b2:	4641      	mov	r1, r8
 80059b4:	4638      	mov	r0, r7
 80059b6:	47c8      	blx	r9
 80059b8:	3001      	adds	r0, #1
 80059ba:	d103      	bne.n	80059c4 <_printf_common+0xac>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c4:	3501      	adds	r5, #1
 80059c6:	e7c6      	b.n	8005956 <_printf_common+0x3e>
 80059c8:	18e1      	adds	r1, r4, r3
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	2030      	movs	r0, #48	@ 0x30
 80059ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059d2:	4422      	add	r2, r4
 80059d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059dc:	3302      	adds	r3, #2
 80059de:	e7c7      	b.n	8005970 <_printf_common+0x58>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4622      	mov	r2, r4
 80059e4:	4641      	mov	r1, r8
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c8      	blx	r9
 80059ea:	3001      	adds	r0, #1
 80059ec:	d0e6      	beq.n	80059bc <_printf_common+0xa4>
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7d9      	b.n	80059a6 <_printf_common+0x8e>
	...

080059f4 <_printf_i>:
 80059f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	7e0f      	ldrb	r7, [r1, #24]
 80059fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059fc:	2f78      	cmp	r7, #120	@ 0x78
 80059fe:	4691      	mov	r9, r2
 8005a00:	4680      	mov	r8, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	469a      	mov	sl, r3
 8005a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a0a:	d807      	bhi.n	8005a1c <_printf_i+0x28>
 8005a0c:	2f62      	cmp	r7, #98	@ 0x62
 8005a0e:	d80a      	bhi.n	8005a26 <_printf_i+0x32>
 8005a10:	2f00      	cmp	r7, #0
 8005a12:	f000 80d1 	beq.w	8005bb8 <_printf_i+0x1c4>
 8005a16:	2f58      	cmp	r7, #88	@ 0x58
 8005a18:	f000 80b8 	beq.w	8005b8c <_printf_i+0x198>
 8005a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a24:	e03a      	b.n	8005a9c <_printf_i+0xa8>
 8005a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a2a:	2b15      	cmp	r3, #21
 8005a2c:	d8f6      	bhi.n	8005a1c <_printf_i+0x28>
 8005a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a34 <_printf_i+0x40>)
 8005a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005a1d 	.word	0x08005a1d
 8005a40:	08005a1d 	.word	0x08005a1d
 8005a44:	08005a1d 	.word	0x08005a1d
 8005a48:	08005a1d 	.word	0x08005a1d
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005a1d 	.word	0x08005a1d
 8005a54:	08005a1d 	.word	0x08005a1d
 8005a58:	08005a1d 	.word	0x08005a1d
 8005a5c:	08005a1d 	.word	0x08005a1d
 8005a60:	08005b9f 	.word	0x08005b9f
 8005a64:	08005acb 	.word	0x08005acb
 8005a68:	08005b59 	.word	0x08005b59
 8005a6c:	08005a1d 	.word	0x08005a1d
 8005a70:	08005a1d 	.word	0x08005a1d
 8005a74:	08005bc1 	.word	0x08005bc1
 8005a78:	08005a1d 	.word	0x08005a1d
 8005a7c:	08005acb 	.word	0x08005acb
 8005a80:	08005a1d 	.word	0x08005a1d
 8005a84:	08005a1d 	.word	0x08005a1d
 8005a88:	08005b61 	.word	0x08005b61
 8005a8c:	6833      	ldr	r3, [r6, #0]
 8005a8e:	1d1a      	adds	r2, r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6032      	str	r2, [r6, #0]
 8005a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e09c      	b.n	8005bda <_printf_i+0x1e6>
 8005aa0:	6833      	ldr	r3, [r6, #0]
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	1d19      	adds	r1, r3, #4
 8005aa6:	6031      	str	r1, [r6, #0]
 8005aa8:	0606      	lsls	r6, r0, #24
 8005aaa:	d501      	bpl.n	8005ab0 <_printf_i+0xbc>
 8005aac:	681d      	ldr	r5, [r3, #0]
 8005aae:	e003      	b.n	8005ab8 <_printf_i+0xc4>
 8005ab0:	0645      	lsls	r5, r0, #25
 8005ab2:	d5fb      	bpl.n	8005aac <_printf_i+0xb8>
 8005ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	da03      	bge.n	8005ac4 <_printf_i+0xd0>
 8005abc:	232d      	movs	r3, #45	@ 0x2d
 8005abe:	426d      	negs	r5, r5
 8005ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ac4:	4858      	ldr	r0, [pc, #352]	@ (8005c28 <_printf_i+0x234>)
 8005ac6:	230a      	movs	r3, #10
 8005ac8:	e011      	b.n	8005aee <_printf_i+0xfa>
 8005aca:	6821      	ldr	r1, [r4, #0]
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	0608      	lsls	r0, r1, #24
 8005ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ad4:	d402      	bmi.n	8005adc <_printf_i+0xe8>
 8005ad6:	0649      	lsls	r1, r1, #25
 8005ad8:	bf48      	it	mi
 8005ada:	b2ad      	uxthmi	r5, r5
 8005adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ade:	4852      	ldr	r0, [pc, #328]	@ (8005c28 <_printf_i+0x234>)
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	bf14      	ite	ne
 8005ae4:	230a      	movne	r3, #10
 8005ae6:	2308      	moveq	r3, #8
 8005ae8:	2100      	movs	r1, #0
 8005aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005aee:	6866      	ldr	r6, [r4, #4]
 8005af0:	60a6      	str	r6, [r4, #8]
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	db05      	blt.n	8005b02 <_printf_i+0x10e>
 8005af6:	6821      	ldr	r1, [r4, #0]
 8005af8:	432e      	orrs	r6, r5
 8005afa:	f021 0104 	bic.w	r1, r1, #4
 8005afe:	6021      	str	r1, [r4, #0]
 8005b00:	d04b      	beq.n	8005b9a <_printf_i+0x1a6>
 8005b02:	4616      	mov	r6, r2
 8005b04:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b08:	fb03 5711 	mls	r7, r3, r1, r5
 8005b0c:	5dc7      	ldrb	r7, [r0, r7]
 8005b0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b12:	462f      	mov	r7, r5
 8005b14:	42bb      	cmp	r3, r7
 8005b16:	460d      	mov	r5, r1
 8005b18:	d9f4      	bls.n	8005b04 <_printf_i+0x110>
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d10b      	bne.n	8005b36 <_printf_i+0x142>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	07df      	lsls	r7, r3, #31
 8005b22:	d508      	bpl.n	8005b36 <_printf_i+0x142>
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	6861      	ldr	r1, [r4, #4]
 8005b28:	4299      	cmp	r1, r3
 8005b2a:	bfde      	ittt	le
 8005b2c:	2330      	movle	r3, #48	@ 0x30
 8005b2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b32:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005b36:	1b92      	subs	r2, r2, r6
 8005b38:	6122      	str	r2, [r4, #16]
 8005b3a:	f8cd a000 	str.w	sl, [sp]
 8005b3e:	464b      	mov	r3, r9
 8005b40:	aa03      	add	r2, sp, #12
 8005b42:	4621      	mov	r1, r4
 8005b44:	4640      	mov	r0, r8
 8005b46:	f7ff fee7 	bl	8005918 <_printf_common>
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d14a      	bne.n	8005be4 <_printf_i+0x1f0>
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b52:	b004      	add	sp, #16
 8005b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	f043 0320 	orr.w	r3, r3, #32
 8005b5e:	6023      	str	r3, [r4, #0]
 8005b60:	4832      	ldr	r0, [pc, #200]	@ (8005c2c <_printf_i+0x238>)
 8005b62:	2778      	movs	r7, #120	@ 0x78
 8005b64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	6831      	ldr	r1, [r6, #0]
 8005b6c:	061f      	lsls	r7, r3, #24
 8005b6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b72:	d402      	bmi.n	8005b7a <_printf_i+0x186>
 8005b74:	065f      	lsls	r7, r3, #25
 8005b76:	bf48      	it	mi
 8005b78:	b2ad      	uxthmi	r5, r5
 8005b7a:	6031      	str	r1, [r6, #0]
 8005b7c:	07d9      	lsls	r1, r3, #31
 8005b7e:	bf44      	itt	mi
 8005b80:	f043 0320 	orrmi.w	r3, r3, #32
 8005b84:	6023      	strmi	r3, [r4, #0]
 8005b86:	b11d      	cbz	r5, 8005b90 <_printf_i+0x19c>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	e7ad      	b.n	8005ae8 <_printf_i+0xf4>
 8005b8c:	4826      	ldr	r0, [pc, #152]	@ (8005c28 <_printf_i+0x234>)
 8005b8e:	e7e9      	b.n	8005b64 <_printf_i+0x170>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	e7f6      	b.n	8005b88 <_printf_i+0x194>
 8005b9a:	4616      	mov	r6, r2
 8005b9c:	e7bd      	b.n	8005b1a <_printf_i+0x126>
 8005b9e:	6833      	ldr	r3, [r6, #0]
 8005ba0:	6825      	ldr	r5, [r4, #0]
 8005ba2:	6961      	ldr	r1, [r4, #20]
 8005ba4:	1d18      	adds	r0, r3, #4
 8005ba6:	6030      	str	r0, [r6, #0]
 8005ba8:	062e      	lsls	r6, r5, #24
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	d501      	bpl.n	8005bb2 <_printf_i+0x1be>
 8005bae:	6019      	str	r1, [r3, #0]
 8005bb0:	e002      	b.n	8005bb8 <_printf_i+0x1c4>
 8005bb2:	0668      	lsls	r0, r5, #25
 8005bb4:	d5fb      	bpl.n	8005bae <_printf_i+0x1ba>
 8005bb6:	8019      	strh	r1, [r3, #0]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6123      	str	r3, [r4, #16]
 8005bbc:	4616      	mov	r6, r2
 8005bbe:	e7bc      	b.n	8005b3a <_printf_i+0x146>
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	6032      	str	r2, [r6, #0]
 8005bc6:	681e      	ldr	r6, [r3, #0]
 8005bc8:	6862      	ldr	r2, [r4, #4]
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7fa fb07 	bl	80001e0 <memchr>
 8005bd2:	b108      	cbz	r0, 8005bd8 <_printf_i+0x1e4>
 8005bd4:	1b80      	subs	r0, r0, r6
 8005bd6:	6060      	str	r0, [r4, #4]
 8005bd8:	6863      	ldr	r3, [r4, #4]
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be2:	e7aa      	b.n	8005b3a <_printf_i+0x146>
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	4632      	mov	r2, r6
 8005be8:	4649      	mov	r1, r9
 8005bea:	4640      	mov	r0, r8
 8005bec:	47d0      	blx	sl
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d0ad      	beq.n	8005b4e <_printf_i+0x15a>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	079b      	lsls	r3, r3, #30
 8005bf6:	d413      	bmi.n	8005c20 <_printf_i+0x22c>
 8005bf8:	68e0      	ldr	r0, [r4, #12]
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	4298      	cmp	r0, r3
 8005bfe:	bfb8      	it	lt
 8005c00:	4618      	movlt	r0, r3
 8005c02:	e7a6      	b.n	8005b52 <_printf_i+0x15e>
 8005c04:	2301      	movs	r3, #1
 8005c06:	4632      	mov	r2, r6
 8005c08:	4649      	mov	r1, r9
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	47d0      	blx	sl
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d09d      	beq.n	8005b4e <_printf_i+0x15a>
 8005c12:	3501      	adds	r5, #1
 8005c14:	68e3      	ldr	r3, [r4, #12]
 8005c16:	9903      	ldr	r1, [sp, #12]
 8005c18:	1a5b      	subs	r3, r3, r1
 8005c1a:	42ab      	cmp	r3, r5
 8005c1c:	dcf2      	bgt.n	8005c04 <_printf_i+0x210>
 8005c1e:	e7eb      	b.n	8005bf8 <_printf_i+0x204>
 8005c20:	2500      	movs	r5, #0
 8005c22:	f104 0619 	add.w	r6, r4, #25
 8005c26:	e7f5      	b.n	8005c14 <_printf_i+0x220>
 8005c28:	08005dc5 	.word	0x08005dc5
 8005c2c:	08005dd6 	.word	0x08005dd6

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0402 	add.w	r4, r1, r2
 8005c38:	d902      	bls.n	8005c40 <memmove+0x10>
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	d807      	bhi.n	8005c50 <memmove+0x20>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	42a1      	cmp	r1, r4
 8005c44:	d008      	beq.n	8005c58 <memmove+0x28>
 8005c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4e:	e7f8      	b.n	8005c42 <memmove+0x12>
 8005c50:	4402      	add	r2, r0
 8005c52:	4601      	mov	r1, r0
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d100      	bne.n	8005c5a <memmove+0x2a>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c62:	e7f7      	b.n	8005c54 <memmove+0x24>

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d06      	ldr	r5, [pc, #24]	@ (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fb f990 	bl	8000f94 <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	2000432c 	.word	0x2000432c

08005c84 <_realloc_r>:
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	4607      	mov	r7, r0
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	b921      	cbnz	r1, 8005c9a <_realloc_r+0x16>
 8005c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	4611      	mov	r1, r2
 8005c96:	f7ff bc5b 	b.w	8005550 <_malloc_r>
 8005c9a:	b92a      	cbnz	r2, 8005ca8 <_realloc_r+0x24>
 8005c9c:	f7ff fbec 	bl	8005478 <_free_r>
 8005ca0:	4625      	mov	r5, r4
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca8:	f000 f81a 	bl	8005ce0 <_malloc_usable_size_r>
 8005cac:	4284      	cmp	r4, r0
 8005cae:	4606      	mov	r6, r0
 8005cb0:	d802      	bhi.n	8005cb8 <_realloc_r+0x34>
 8005cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cb6:	d8f4      	bhi.n	8005ca2 <_realloc_r+0x1e>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f7ff fc48 	bl	8005550 <_malloc_r>
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	b908      	cbnz	r0, 8005cc8 <_realloc_r+0x44>
 8005cc4:	4645      	mov	r5, r8
 8005cc6:	e7ec      	b.n	8005ca2 <_realloc_r+0x1e>
 8005cc8:	42b4      	cmp	r4, r6
 8005cca:	4622      	mov	r2, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	bf28      	it	cs
 8005cd0:	4632      	movcs	r2, r6
 8005cd2:	f7ff fbc3 	bl	800545c <memcpy>
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff fbcd 	bl	8005478 <_free_r>
 8005cde:	e7f1      	b.n	8005cc4 <_realloc_r+0x40>

08005ce0 <_malloc_usable_size_r>:
 8005ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce4:	1f18      	subs	r0, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bfbc      	itt	lt
 8005cea:	580b      	ldrlt	r3, [r1, r0]
 8005cec:	18c0      	addlt	r0, r0, r3
 8005cee:	4770      	bx	lr

08005cf0 <_init>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr

08005cfc <_fini>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	bf00      	nop
 8005d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d02:	bc08      	pop	{r3}
 8005d04:	469e      	mov	lr, r3
 8005d06:	4770      	bx	lr
