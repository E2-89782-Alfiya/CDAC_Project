
rtos_CAN_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08009dc8  08009dc8  0000adc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a26c  0800a26c  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a26c  0800a26c  0000b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a274  0800a274  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a274  0800a274  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a278  0800a278  0000b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a27c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          0000424c  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004424  20004424  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015382  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ffb  00000000  00000000  0002158a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00024588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e60  00000000  00000000  00025818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002400a  00000000  00000000  00026678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013629  00000000  00000000  0004a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d83fd  00000000  00000000  0005dcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001360a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062bc  00000000  00000000  001360ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0013c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dac 	.word	0x08009dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009dac 	.word	0x08009dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a07      	ldr	r2, [pc, #28]	@ (800104c <vApplicationGetIdleTaskMemory+0x2c>)
 8001030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <vApplicationGetIdleTaskMemory+0x30>)
 8001036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001f4 	.word	0x200001f4
 8001050:	20000294 	.word	0x20000294

08001054 <HAL_CAN_RxFifo0MsgPendingCallback>:
//        }
//    }
//}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800105e:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fece 	bl	8001e04 <HAL_CAN_GetRxMessage>
  dataReady = 1;
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000524 	.word	0x20000524
 800107c:	20000508 	.word	0x20000508
 8001080:	2000052c 	.word	0x2000052c

08001084 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	@ 0x40
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg, "CAN Error: 0x%08lX\r\n", HAL_CAN_GetError(hcan));
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fa26 	bl	80024de <HAL_CAN_GetError>
 8001092:	4602      	mov	r2, r0
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	490a      	ldr	r1, [pc, #40]	@ (80010c4 <HAL_CAN_ErrorCallback+0x40>)
 800109a:	4618      	mov	r0, r3
 800109c:	f005 f9e8 	bl	8006470 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f8e3 	bl	8000270 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f107 010c 	add.w	r1, r7, #12
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <HAL_CAN_ErrorCallback+0x44>)
 80010b8:	f002 fc6c 	bl	8003994 <HAL_UART_Transmit>
}
 80010bc:	bf00      	nop
 80010be:	3740      	adds	r7, #64	@ 0x40
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	08009dc8 	.word	0x08009dc8
 80010c8:	200004bc 	.word	0x200004bc

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f000 fc37 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f829 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 f911 	bl	8001300 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010de:	f000 f8e5 	bl	80012ac <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80010e2:	f000 f88d 	bl	8001200 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80010e6:	480e      	ldr	r0, [pc, #56]	@ (8001120 <main+0x54>)
 80010e8:	f000 fe48 	bl	8001d7c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR);
 80010ec:	f248 0102 	movw	r1, #32770	@ 0x8002
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <main+0x54>)
 80010f2:	f000 ffa9 	bl	8002048 <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <main+0x58>)
 80010f8:	1d3c      	adds	r4, r7, #4
 80010fa:	461d      	mov	r5, r3
 80010fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f003 f81c 	bl	800414a <osThreadCreate>
 8001112:	4603      	mov	r3, r0
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <main+0x5c>)
 8001116:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001118:	f003 f810 	bl	800413c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <main+0x50>
 8001120:	20000494 	.word	0x20000494
 8001124:	08009dec 	.word	0x08009dec
 8001128:	20000504 	.word	0x20000504

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	@ 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f005 f9fd 	bl	800653a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a27      	ldr	r2, [pc, #156]	@ (80011f8 <SystemClock_Config+0xcc>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <SystemClock_Config+0xd0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <SystemClock_Config+0xd0>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001196:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011a0:	2348      	movs	r3, #72	@ 0x48
 80011a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fc39 	bl	8002a28 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f000 f94a 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fe9a 	bl	8002f18 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ea:	f000 f933 	bl	8001454 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	@ 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001206:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001208:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <MX_CAN1_Init+0xa8>)
 800120a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800120c:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 800120e:	2212      	movs	r2, #18
 8001210:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001212:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001218:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001220:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001224:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001250:	4814      	ldr	r0, [pc, #80]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 8001252:	f000 fbb9 	bl	80019c8 <HAL_CAN_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800125c:	f000 f8fa 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9; // CAN1-0 to 8, CAN2-9 to 27
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 0; // Use any Filter from 0 to 8
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use a 32-bit filter
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8001270:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001274:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x0A9 << 5;
 800127a:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800127e:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_CAN1_Init+0xa4>)
 800128e:	f000 fc97 	bl	8001bc0 <HAL_CAN_ConfigFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_CAN1_Init+0x9c>
    Error_Handler();
 8001298:	f000 f8dc 	bl	8001454 <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	@ 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000494 	.word	0x20000494
 80012a8:	40006400 	.word	0x40006400

080012ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <MX_USART2_UART_Init+0x50>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_USART2_UART_Init+0x4c>)
 80012e4:	f002 fb06 	bl	80038f4 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ee:	f000 f8b1 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200004bc 	.word	0x200004bc
 80012fc:	40004400 	.word	0x40004400

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <MX_GPIO_Init+0x9c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a1f      	ldr	r2, [pc, #124]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <MX_GPIO_Init+0x9c>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a11      	ldr	r2, [pc, #68]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_GPIO_Init+0x9c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001370:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <MX_GPIO_Init+0xa0>)
 8001372:	f001 fb3f 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001376:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_GPIO_Init+0xa0>)
 8001390:	f001 f994 	bl	80026bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020c00 	.word	0x40020c00

080013a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09c      	sub	sp, #112	@ 0x70
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  while(1)  //  for(;;)
  {
      if (dataReady)
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <StartDefaultTask+0x74>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d02c      	beq.n	8001410 <StartDefaultTask+0x6c>
      {
          char uartMsg[100];

          // Format messages for LCD and UART
          sprintf(uartMsg, "LDR: %u  MQ5: %u  \r\n",LDR_Value, MQ5_Value);
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <StartDefaultTask+0x78>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <StartDefaultTask+0x7c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	f107 000c 	add.w	r0, r7, #12
 80013c4:	4917      	ldr	r1, [pc, #92]	@ (8001424 <StartDefaultTask+0x80>)
 80013c6:	f005 f853 	bl	8006470 <siprintf>

          // Transmit over UART
          HAL_UART_Transmit(&huart2, (uint8_t*)uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff4e 	bl	8000270 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f107 010c 	add.w	r1, r7, #12
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <StartDefaultTask+0x84>)
 80013e2:	f002 fad7 	bl	8003994 <HAL_UART_Transmit>

          // LED control based on LDR value
          if (LDR_Value < 2000)
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <StartDefaultTask+0x78>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013ee:	d206      	bcs.n	80013fe <StartDefaultTask+0x5a>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Turn on LED
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <StartDefaultTask+0x88>)
 80013f8:	f001 fafc 	bl	80029f4 <HAL_GPIO_WritePin>
 80013fc:	e005      	b.n	800140a <StartDefaultTask+0x66>
          else
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Turn off LED
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001404:	4809      	ldr	r0, [pc, #36]	@ (800142c <StartDefaultTask+0x88>)
 8001406:	f001 faf5 	bl	80029f4 <HAL_GPIO_WritePin>

          dataReady = 0; // Reset flag
 800140a:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <StartDefaultTask+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
      }
      osDelay(100); // Wait for 100ms
 8001410:	2064      	movs	r0, #100	@ 0x64
 8001412:	f002 fee6 	bl	80041e2 <osDelay>
      if (dataReady)
 8001416:	e7c9      	b.n	80013ac <StartDefaultTask+0x8>
 8001418:	2000052c 	.word	0x2000052c
 800141c:	2000052e 	.word	0x2000052e
 8001420:	20000530 	.word	0x20000530
 8001424:	08009e08 	.word	0x08009e08
 8001428:	200004bc 	.word	0x200004bc
 800142c:	40020c00 	.word	0x40020c00

08001430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001442:	f000 faa1 	bl	8001988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40001000 	.word	0x40001000

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_MspInit+0x54>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <HAL_MspInit+0x54>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_MspInit+0x54>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_MspInit+0x54>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_MspInit+0x54>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_MspInit+0x54>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	210f      	movs	r1, #15
 80014a2:	f06f 0001 	mvn.w	r0, #1
 80014a6:	f001 f8df 	bl	8002668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <HAL_CAN_MspInit+0x94>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d134      	bne.n	8001544 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <HAL_CAN_MspInit+0x98>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_CAN_MspInit+0x98>)
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_CAN_MspInit+0x98>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_CAN_MspInit+0x98>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <HAL_CAN_MspInit+0x98>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_CAN_MspInit+0x98>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001512:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001524:	2309      	movs	r3, #9
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4809      	ldr	r0, [pc, #36]	@ (8001554 <HAL_CAN_MspInit+0x9c>)
 8001530:	f001 f8c4 	bl	80026bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2105      	movs	r1, #5
 8001538:	2014      	movs	r0, #20
 800153a:	f001 f895 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800153e:	2014      	movs	r0, #20
 8001540:	f001 f8ae 	bl	80026a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40006400 	.word	0x40006400
 8001550:	40023800 	.word	0x40023800
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12b      	bne.n	80015d2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_UART_MspInit+0x88>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_UART_MspInit+0x88>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_UART_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_UART_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <HAL_UART_MspInit+0x88>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_UART_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015b2:	2360      	movs	r3, #96	@ 0x60
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_UART_MspInit+0x8c>)
 80015ce:	f001 f875 	bl	80026bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40004400 	.word	0x40004400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b33      	ldr	r3, [pc, #204]	@ (80016cc <HAL_InitTick+0xe4>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	4a32      	ldr	r2, [pc, #200]	@ (80016cc <HAL_InitTick+0xe4>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6413      	str	r3, [r2, #64]	@ 0x40
 8001608:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <HAL_InitTick+0xe4>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001614:	f107 0210 	add.w	r2, r7, #16
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f001 fe9a 	bl	8003358 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800162e:	f001 fe6b 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8001632:	6378      	str	r0, [r7, #52]	@ 0x34
 8001634:	e004      	b.n	8001640 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001636:	f001 fe67 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 800163a:	4603      	mov	r3, r0
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <HAL_InitTick+0xe8>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	0c9b      	lsrs	r3, r3, #18
 800164a:	3b01      	subs	r3, #1
 800164c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800164e:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <HAL_InitTick+0xec>)
 8001650:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <HAL_InitTick+0xf0>)
 8001652:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <HAL_InitTick+0xec>)
 8001656:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800165a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800165c:	4a1d      	ldr	r2, [pc, #116]	@ (80016d4 <HAL_InitTick+0xec>)
 800165e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001660:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001662:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <HAL_InitTick+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_InitTick+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_InitTick+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001674:	4817      	ldr	r0, [pc, #92]	@ (80016d4 <HAL_InitTick+0xec>)
 8001676:	f001 fea1 	bl	80033bc <HAL_TIM_Base_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001680:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001684:	2b00      	cmp	r3, #0
 8001686:	d11b      	bne.n	80016c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001688:	4812      	ldr	r0, [pc, #72]	@ (80016d4 <HAL_InitTick+0xec>)
 800168a:	f001 fef1 	bl	8003470 <HAL_TIM_Base_Start_IT>
 800168e:	4603      	mov	r3, r0
 8001690:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001694:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800169c:	2036      	movs	r0, #54	@ 0x36
 800169e:	f000 ffff 	bl	80026a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d808      	bhi.n	80016ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	2036      	movs	r0, #54	@ 0x36
 80016ae:	f000 ffdb 	bl	8002668 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_InitTick+0xf4>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e002      	b.n	80016c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3738      	adds	r7, #56	@ 0x38
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	20000534 	.word	0x20000534
 80016d8:	40001000 	.word	0x40001000
 80016dc:	20000004 	.word	0x20000004

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <CAN1_RX0_IRQHandler+0x10>)
 800171e:	f000 fcb9 	bl	8002094 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000494 	.word	0x20000494

0800172c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM6_DAC_IRQHandler+0x10>)
 8001732:	f001 ff0d 	bl	8003550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000534 	.word	0x20000534

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175a:	f004 ff9f 	bl	800669c <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001782:	bf00      	nop
 8001784:	e7fd      	b.n	8001782 <_exit+0x12>

08001786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e00a      	b.n	80017ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001798:	f3af 8000 	nop.w
 800179c:	4601      	mov	r1, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf0      	blt.n	8001798 <_read+0x12>
  }

  return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e009      	b.n	80017e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	60ba      	str	r2, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf1      	blt.n	80017d2 <_write+0x12>
  }
  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_close>:

int _close(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001820:	605a      	str	r2, [r3, #4]
  return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_isatty>:

int _isatty(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f004 ff04 	bl	800669c <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20020000 	.word	0x20020000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	2000057c 	.word	0x2000057c
 80018c8:	20004428 	.word	0x20004428

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001928 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018f4:	f7ff ffea 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	@ (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	@ (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191e:	f004 fec3 	bl	80066a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff fbd3 	bl	80010cc <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001934:	0800a27c 	.word	0x0800a27c
  ldr r2, =_sbss
 8001938:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800193c:	20004424 	.word	0x20004424

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <HAL_Init+0x40>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <HAL_Init+0x40>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800195e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_Init+0x40>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 fe70 	bl	8002652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	200f      	movs	r0, #15
 8001974:	f7ff fe38 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fd72 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000580 	.word	0x20000580

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000580 	.word	0x20000580

080019c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ed      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd66 	bl	80014b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff ffd8 	bl	80019b0 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a02:	e012      	b.n	8001a2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a04:	f7ff ffd4 	bl	80019b0 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90b      	bls.n	8001a2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0c5      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0e5      	beq.n	8001a04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0202 	bic.w	r2, r2, #2
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff ffb2 	bl	80019b0 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff ffae 	bl	80019b0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09f      	b.n	8001bb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e5      	bne.n	8001a50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e5b      	ldrb	r3, [r3, #25]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e9b      	ldrb	r3, [r3, #26]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0220 	bic.w	r2, r2, #32
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7edb      	ldrb	r3, [r3, #27]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0210 	bic.w	r2, r2, #16
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0210 	orr.w	r2, r2, #16
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7f5b      	ldrb	r3, [r3, #29]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0204 	orr.w	r2, r2, #4
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0204 	bic.w	r2, r2, #4
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d003      	beq.n	8001be0 <HAL_CAN_ConfigFilter+0x20>
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	f040 80be 	bne.w	8001d5c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001be0:	4b65      	ldr	r3, [pc, #404]	@ (8001d78 <HAL_CAN_ConfigFilter+0x1b8>)
 8001be2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bfa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	431a      	orrs	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	2201      	movs	r2, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d123      	bne.n	8001c8a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	3248      	adds	r2, #72	@ 0x48
 8001c6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	3348      	adds	r3, #72	@ 0x48
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d122      	bne.n	8001cd8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	3248      	adds	r2, #72	@ 0x48
 8001cb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ccc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cce:	6939      	ldr	r1, [r7, #16]
 8001cd0:	3348      	adds	r3, #72	@ 0x48
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cf2:	e007      	b.n	8001d04 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d1e:	e007      	b.n	8001d30 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d107      	bne.n	8001d48 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d4e:	f023 0201 	bic.w	r2, r3, #1
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e006      	b.n	8001d6a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40006400 	.word	0x40006400

08001d7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d12e      	bne.n	8001dee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff fe02 	bl	80019b0 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dae:	e012      	b.n	8001dd6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db0:	f7ff fdfe 	bl	80019b0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d90b      	bls.n	8001dd6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2205      	movs	r2, #5
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e012      	b.n	8001dfc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e5      	bne.n	8001db0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e006      	b.n	8001dfc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d003      	beq.n	8001e28 <HAL_CAN_GetRxMessage+0x24>
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	f040 8103 	bne.w	800202e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10e      	bne.n	8001e4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d116      	bne.n	8001e6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0f7      	b.n	800203c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0e8      	b.n	800203c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	331b      	adds	r3, #27
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	4413      	add	r3, r2
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0204 	and.w	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10c      	bne.n	8001ea2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	331b      	adds	r3, #27
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e00b      	b.n	8001eba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	331b      	adds	r3, #27
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	331b      	adds	r3, #27
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	4413      	add	r3, r2
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0202 	and.w	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	331b      	adds	r3, #27
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4413      	add	r3, r2
 8001edc:	3304      	adds	r3, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2208      	movs	r2, #8
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	e00b      	b.n	8001f08 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	331b      	adds	r3, #27
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	331b      	adds	r3, #27
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0a1a      	lsrs	r2, r3, #8
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0c1a      	lsrs	r2, r3, #16
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0e1a      	lsrs	r2, r3, #24
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	3303      	adds	r3, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0a1a      	lsrs	r2, r3, #8
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3305      	adds	r3, #5
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0c1a      	lsrs	r2, r3, #16
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e1a      	lsrs	r2, r3, #24
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d108      	bne.n	800201a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	e007      	b.n	800202a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0220 	orr.w	r2, r2, #32
 8002028:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e006      	b.n	800203c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002058:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d002      	beq.n	8002066 <HAL_CAN_ActivateNotification+0x1e>
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d109      	bne.n	800207a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6959      	ldr	r1, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e006      	b.n	8002088 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07c      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f983 	bl	8002402 <HAL_CAN_TxMailbox0CompleteCallback>
 80020fc:	e016      	b.n	800212c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002110:	e00c      	b.n	800212c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
 8002124:	e002      	b.n	800212c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f989 	bl	800243e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d024      	beq.n	8002180 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800213e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f963 	bl	8002416 <HAL_CAN_TxMailbox1CompleteCallback>
 8002150:	e016      	b.n	8002180 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
 8002164:	e00c      	b.n	8002180 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
 8002178:	e002      	b.n	8002180 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f969 	bl	8002452 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d024      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f943 	bl	800242a <HAL_CAN_TxMailbox2CompleteCallback>
 80021a4:	e016      	b.n	80021d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b8:	e00c      	b.n	80021d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	e002      	b.n	80021d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f949 	bl	8002466 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2208      	movs	r2, #8
 8002212:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f930 	bl	800247a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe ff0e 	bl	8001054 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f912 	bl	80024a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8f9 	bl	800248e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f8fc 	bl	80024b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00b      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2208      	movs	r2, #8
 80022d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8f5 	bl	80024ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07b      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d072      	beq.n	80023da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	d043      	beq.n	80023da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03e      	beq.n	80023da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002362:	2b60      	cmp	r3, #96	@ 0x60
 8002364:	d02b      	beq.n	80023be <HAL_CAN_IRQHandler+0x32a>
 8002366:	2b60      	cmp	r3, #96	@ 0x60
 8002368:	d82e      	bhi.n	80023c8 <HAL_CAN_IRQHandler+0x334>
 800236a:	2b50      	cmp	r3, #80	@ 0x50
 800236c:	d022      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x320>
 800236e:	2b50      	cmp	r3, #80	@ 0x50
 8002370:	d82a      	bhi.n	80023c8 <HAL_CAN_IRQHandler+0x334>
 8002372:	2b40      	cmp	r3, #64	@ 0x40
 8002374:	d019      	beq.n	80023aa <HAL_CAN_IRQHandler+0x316>
 8002376:	2b40      	cmp	r3, #64	@ 0x40
 8002378:	d826      	bhi.n	80023c8 <HAL_CAN_IRQHandler+0x334>
 800237a:	2b30      	cmp	r3, #48	@ 0x30
 800237c:	d010      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x30c>
 800237e:	2b30      	cmp	r3, #48	@ 0x30
 8002380:	d822      	bhi.n	80023c8 <HAL_CAN_IRQHandler+0x334>
 8002382:	2b10      	cmp	r3, #16
 8002384:	d002      	beq.n	800238c <HAL_CAN_IRQHandler+0x2f8>
 8002386:	2b20      	cmp	r3, #32
 8002388:	d005      	beq.n	8002396 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800238a:	e01d      	b.n	80023c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002394:	e019      	b.n	80023ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	f043 0310 	orr.w	r3, r3, #16
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800239e:	e014      	b.n	80023ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	f043 0320 	orr.w	r3, r3, #32
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023a8:	e00f      	b.n	80023ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023b2:	e00a      	b.n	80023ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023bc:	e005      	b.n	80023ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023c6:	e000      	b.n	80023ca <HAL_CAN_IRQHandler+0x336>
            break;
 80023c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe fe45 	bl	8001084 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	@ 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	@ (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	@ (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	@ (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	@ (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	@ 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff4c 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267a:	f7ff ff61 	bl	8002540 <__NVIC_GetPriorityGrouping>
 800267e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f7ff ffb1 	bl	80025ec <NVIC_EncodePriority>
 800268a:	4602      	mov	r2, r0
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff80 	bl	8002598 <__NVIC_SetPriority>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff54 	bl	800255c <__NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e16b      	b.n	80029b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f040 815a 	bne.w	80029aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d005      	beq.n	800270e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	2b02      	cmp	r3, #2
 800270c:	d130      	bne.n	8002770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 0201 	and.w	r2, r3, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b03      	cmp	r3, #3
 800277a:	d017      	beq.n	80027ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80b4 	beq.w	80029aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b60      	ldr	r3, [pc, #384]	@ (80029c8 <HAL_GPIO_Init+0x30c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a5f      	ldr	r2, [pc, #380]	@ (80029c8 <HAL_GPIO_Init+0x30c>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b5d      	ldr	r3, [pc, #372]	@ (80029c8 <HAL_GPIO_Init+0x30c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285e:	4a5b      	ldr	r2, [pc, #364]	@ (80029cc <HAL_GPIO_Init+0x310>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a52      	ldr	r2, [pc, #328]	@ (80029d0 <HAL_GPIO_Init+0x314>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02b      	beq.n	80028e2 <HAL_GPIO_Init+0x226>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a51      	ldr	r2, [pc, #324]	@ (80029d4 <HAL_GPIO_Init+0x318>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d025      	beq.n	80028de <HAL_GPIO_Init+0x222>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a50      	ldr	r2, [pc, #320]	@ (80029d8 <HAL_GPIO_Init+0x31c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <HAL_GPIO_Init+0x21e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	@ (80029dc <HAL_GPIO_Init+0x320>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_GPIO_Init+0x21a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4e      	ldr	r2, [pc, #312]	@ (80029e0 <HAL_GPIO_Init+0x324>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x216>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	@ (80029e4 <HAL_GPIO_Init+0x328>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x212>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	@ (80029e8 <HAL_GPIO_Init+0x32c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	@ (80029ec <HAL_GPIO_Init+0x330>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x20a>
 80028c2:	2307      	movs	r3, #7
 80028c4:	e00e      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e00c      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028ca:	2306      	movs	r3, #6
 80028cc:	e00a      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028ce:	2305      	movs	r3, #5
 80028d0:	e008      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e004      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028da:	2302      	movs	r3, #2
 80028dc:	e002      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_GPIO_Init+0x228>
 80028e2:	2300      	movs	r3, #0
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f002 0203 	and.w	r2, r2, #3
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	4093      	lsls	r3, r2
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f4:	4935      	ldr	r1, [pc, #212]	@ (80029cc <HAL_GPIO_Init+0x310>)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b3b      	ldr	r3, [pc, #236]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002926:	4a32      	ldr	r2, [pc, #200]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292c:	4b30      	ldr	r3, [pc, #192]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002950:	4a27      	ldr	r2, [pc, #156]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297a:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a4:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <HAL_GPIO_Init+0x334>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	f67f ae90 	bls.w	80026d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3724      	adds	r7, #36	@ 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e267      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a46:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b85      	ldr	r3, [pc, #532]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b82      	ldr	r3, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e242      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b76      	ldr	r3, [pc, #472]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a75      	ldr	r2, [pc, #468]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b69      	ldr	r3, [pc, #420]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a68      	ldr	r2, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe ff66 	bl	80019b0 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe ff62 	bl	80019b0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e207      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe ff52 	bl	80019b0 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe ff4e 	bl	80019b0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1f3      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b44      	ldr	r3, [pc, #272]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1c7      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4937      	ldr	r1, [pc, #220]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b34      	ldr	r3, [pc, #208]	@ (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe ff07 	bl	80019b0 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe ff03 	bl	80019b0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a8      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4925      	ldr	r1, [pc, #148]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fee6 	bl	80019b0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fee2 	bl	80019b0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e187      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d036      	beq.n	8002c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fec6 	bl	80019b0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fec2 	bl	80019b0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e167      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe feaf 	bl	80019b0 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e00e      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe feab 	bl	80019b0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d907      	bls.n	8002c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e150      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	42470000 	.word	0x42470000
 8002c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b88      	ldr	r3, [pc, #544]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ea      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8097 	beq.w	8002dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b81      	ldr	r3, [pc, #516]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cae:	4b7a      	ldr	r3, [pc, #488]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b77      	ldr	r3, [pc, #476]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d118      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b74      	ldr	r3, [pc, #464]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a73      	ldr	r2, [pc, #460]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fe6b 	bl	80019b0 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe fe67 	bl	80019b0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e10c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2ea>
 8002d04:	4b64      	ldr	r3, [pc, #400]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a63      	ldr	r2, [pc, #396]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x30c>
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d26:	4b5c      	ldr	r3, [pc, #368]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d34:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d40:	4b55      	ldr	r3, [pc, #340]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0304 	bic.w	r3, r3, #4
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fe2c 	bl	80019b0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fe28 	bl	80019b0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0cb      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ee      	beq.n	8002d5c <HAL_RCC_OscConfig+0x334>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fe16 	bl	80019b0 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe fe12 	bl	80019b0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0b5      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	4a38      	ldr	r2, [pc, #224]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a1 	beq.w	8002f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d05c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d141      	bne.n	8002e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fde6 	bl	80019b0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fde2 	bl	80019b0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e087      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	491b      	ldr	r1, [pc, #108]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fdbb 	bl	80019b0 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fdb7 	bl	80019b0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e05c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x416>
 8002e5c:	e054      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fda4 	bl	80019b0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fda0 	bl	80019b0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e045      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x444>
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e038      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe fcd2 	bl	80019b0 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe fcce 	bl	80019b0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fa92 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08009e28 	.word	0x08009e28
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b094      	sub	sp, #80	@ 0x50
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80e1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0db      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b73      	ldr	r3, [pc, #460]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800311a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311c:	e0db      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003122:	e0d8      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800312c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	633b      	str	r3, [r7, #48]	@ 0x30
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
 8003152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4621      	mov	r1, r4
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	6139      	str	r1, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	ebb2 0801 	subs.w	r8, r2, r1
 800319c:	4659      	mov	r1, fp
 800319e:	eb63 0901 	sbc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	462b      	mov	r3, r5
 80031c4:	eb49 0303 	adc.w	r3, r9, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	024b      	lsls	r3, r1, #9
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e0:	4621      	mov	r1, r4
 80031e2:	024a      	lsls	r2, r1, #9
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f4:	f7fd fd48 	bl	8000c88 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003200:	e058      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b38      	ldr	r3, [pc, #224]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	4611      	mov	r1, r2
 800320e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
 8003218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322e:	0150      	lsls	r0, r2, #5
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4641      	mov	r1, r8
 8003236:	ebb2 0a01 	subs.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003254:	ebb2 040a 	subs.w	r4, r2, sl
 8003258:	eb63 050b 	sbc.w	r5, r3, fp
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	464b      	mov	r3, r9
 8003278:	eb45 0303 	adc.w	r3, r5, r3
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	61fa      	str	r2, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	f7fd fcee 	bl	8000c88 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3750      	adds	r7, #80	@ 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08009e38 	.word	0x08009e38

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	@ (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08009e38 	.word	0x08009e38

08003358 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	220f      	movs	r2, #15
 8003366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003368:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <HAL_RCC_GetClockConfig+0x5c>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003374:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003380:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800338c:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_GetClockConfig+0x5c>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <HAL_RCC_GetClockConfig+0x60>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0207 	and.w	r2, r3, #7
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40023c00 	.word	0x40023c00

080033bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e041      	b.n	8003452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f839 	bl	800345a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 f9c0 	bl	8003780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04e      	b.n	8003526 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a23      	ldr	r2, [pc, #140]	@ (8003534 <HAL_TIM_Base_Start_IT+0xc4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d022      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b2:	d01d      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <HAL_TIM_Base_Start_IT+0xc8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d018      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <HAL_TIM_Base_Start_IT+0xcc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <HAL_TIM_Base_Start_IT+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <HAL_TIM_Base_Start_IT+0xd4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a19      	ldr	r2, [pc, #100]	@ (8003548 <HAL_TIM_Base_Start_IT+0xd8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_TIM_Base_Start_IT+0xdc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d111      	bne.n	8003514 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d010      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	e007      	b.n	8003524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40010400 	.word	0x40010400
 8003548:	40014000 	.word	0x40014000
 800354c:	40001800 	.word	0x40001800

08003550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d020      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01b      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0202 	mvn.w	r2, #2
 8003584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8d2 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8c4 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8d5 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d020      	beq.n	8003600 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01b      	beq.n	8003600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0204 	mvn.w	r2, #4
 80035d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8ac 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 80035ec:	e005      	b.n	80035fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f89e 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f8af 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d020      	beq.n	800364c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0208 	mvn.w	r2, #8
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f886 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f878 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f889 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	d020      	beq.n	8003698 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0210 	mvn.w	r2, #16
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2208      	movs	r2, #8
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f860 	bl	8003744 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f852 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f863 	bl	8003758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0201 	mvn.w	r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd feba 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f900 	bl	80038e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f834 	bl	800376c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00c      	beq.n	8003728 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0220 	mvn.w	r2, #32
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8d2 	bl	80038cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a43      	ldr	r2, [pc, #268]	@ (80038a0 <TIM_Base_SetConfig+0x120>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379e:	d00f      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a40      	ldr	r2, [pc, #256]	@ (80038a4 <TIM_Base_SetConfig+0x124>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3f      	ldr	r2, [pc, #252]	@ (80038a8 <TIM_Base_SetConfig+0x128>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3e      	ldr	r2, [pc, #248]	@ (80038ac <TIM_Base_SetConfig+0x12c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3d      	ldr	r2, [pc, #244]	@ (80038b0 <TIM_Base_SetConfig+0x130>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <TIM_Base_SetConfig+0x120>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02b      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e0:	d027      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <TIM_Base_SetConfig+0x124>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d023      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	@ (80038a8 <TIM_Base_SetConfig+0x128>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01f      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <TIM_Base_SetConfig+0x12c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01b      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	@ (80038b0 <TIM_Base_SetConfig+0x130>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d017      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2b      	ldr	r2, [pc, #172]	@ (80038b4 <TIM_Base_SetConfig+0x134>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a2a      	ldr	r2, [pc, #168]	@ (80038b8 <TIM_Base_SetConfig+0x138>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00f      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a29      	ldr	r2, [pc, #164]	@ (80038bc <TIM_Base_SetConfig+0x13c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a28      	ldr	r2, [pc, #160]	@ (80038c0 <TIM_Base_SetConfig+0x140>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <TIM_Base_SetConfig+0x144>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <TIM_Base_SetConfig+0x148>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d108      	bne.n	8003844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a0e      	ldr	r2, [pc, #56]	@ (80038a0 <TIM_Base_SetConfig+0x120>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0xf2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a10      	ldr	r2, [pc, #64]	@ (80038b0 <TIM_Base_SetConfig+0x130>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d103      	bne.n	800387a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40010400 	.word	0x40010400
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800
 80038c0:	40001800 	.word	0x40001800
 80038c4:	40001c00 	.word	0x40001c00
 80038c8:	40002000 	.word	0x40002000

080038cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e042      	b.n	800398c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fe1c 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	@ 0x24
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f973 	bl	8003c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800394c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800395c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800396c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	@ 0x28
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d175      	bne.n	8003aa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_UART_Transmit+0x2c>
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e06e      	b.n	8003aa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2221      	movs	r2, #33	@ 0x21
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d2:	f7fd ffed 	bl	80019b0 <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ec:	d108      	bne.n	8003a00 <HAL_UART_Transmit+0x6c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	e003      	b.n	8003a08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a08:	e02e      	b.n	8003a68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	@ 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f848 	bl	8003aaa <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e03a      	b.n	8003aa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	3302      	adds	r3, #2
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e007      	b.n	8003a5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3301      	adds	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1cb      	bne.n	8003a0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2140      	movs	r1, #64	@ 0x40
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f814 	bl	8003aaa <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e006      	b.n	8003aa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aba:	e03b      	b.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac2:	d037      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac4:	f7fd ff74 	bl	80019b0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e03a      	b.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d023      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b80      	cmp	r3, #128	@ 0x80
 8003af0:	d020      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d01d      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d116      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f81d 	bl	8003b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2208      	movs	r2, #8
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e00f      	b.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d0b4      	beq.n	8003abc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b095      	sub	sp, #84	@ 0x54
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b84:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d119      	bne.n	8003c08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf4:	61ba      	str	r2, [r7, #24]
 8003bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	613b      	str	r3, [r7, #16]
   return(result);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c16:	bf00      	nop
 8003c18:	3754      	adds	r7, #84	@ 0x54
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c28:	b0c0      	sub	sp, #256	@ 0x100
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c40:	68d9      	ldr	r1, [r3, #12]
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	ea40 0301 	orr.w	r3, r0, r1
 8003c4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c7c:	f021 010c 	bic.w	r1, r1, #12
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9e:	6999      	ldr	r1, [r3, #24]
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	ea40 0301 	orr.w	r3, r0, r1
 8003caa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef0 <UART_SetConfig+0x2cc>)
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d005      	beq.n	8003cc4 <UART_SetConfig+0xa0>
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b8d      	ldr	r3, [pc, #564]	@ (8003ef4 <UART_SetConfig+0x2d0>)
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d104      	bne.n	8003cce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc4:	f7ff fb34 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 8003cc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ccc:	e003      	b.n	8003cd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cce:	f7ff fb1b 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8003cd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce0:	f040 810c 	bne.w	8003efc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	1891      	adds	r1, r2, r2
 8003cfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cfe:	415b      	adcs	r3, r3
 8003d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d06:	4621      	mov	r1, r4
 8003d08:	eb12 0801 	adds.w	r8, r2, r1
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	eb43 0901 	adc.w	r9, r3, r1
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d26:	4690      	mov	r8, r2
 8003d28:	4699      	mov	r9, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	eb18 0303 	adds.w	r3, r8, r3
 8003d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d34:	462b      	mov	r3, r5
 8003d36:	eb49 0303 	adc.w	r3, r9, r3
 8003d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d52:	460b      	mov	r3, r1
 8003d54:	18db      	adds	r3, r3, r3
 8003d56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d58:	4613      	mov	r3, r2
 8003d5a:	eb42 0303 	adc.w	r3, r2, r3
 8003d5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d68:	f7fc ff8e 	bl	8000c88 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4b61      	ldr	r3, [pc, #388]	@ (8003ef8 <UART_SetConfig+0x2d4>)
 8003d72:	fba3 2302 	umull	r2, r3, r3, r2
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	011c      	lsls	r4, r3, #4
 8003d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	1891      	adds	r1, r2, r2
 8003d92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d94:	415b      	adcs	r3, r3
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb43 0b01 	adc.w	fp, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003db4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbc:	4692      	mov	sl, r2
 8003dbe:	469b      	mov	fp, r3
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	eb4b 0303 	adc.w	r3, fp, r3
 8003dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003de0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003de4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003de8:	460b      	mov	r3, r1
 8003dea:	18db      	adds	r3, r3, r3
 8003dec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dee:	4613      	mov	r3, r2
 8003df0:	eb42 0303 	adc.w	r3, r2, r3
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dfe:	f7fc ff43 	bl	8000c88 <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <UART_SetConfig+0x2d4>)
 8003e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2264      	movs	r2, #100	@ 0x64
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	1acb      	subs	r3, r1, r3
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e1e:	4b36      	ldr	r3, [pc, #216]	@ (8003ef8 <UART_SetConfig+0x2d4>)
 8003e20:	fba3 2302 	umull	r2, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e2c:	441c      	add	r4, r3
 8003e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e40:	4642      	mov	r2, r8
 8003e42:	464b      	mov	r3, r9
 8003e44:	1891      	adds	r1, r2, r2
 8003e46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e48:	415b      	adcs	r3, r3
 8003e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e50:	4641      	mov	r1, r8
 8003e52:	1851      	adds	r1, r2, r1
 8003e54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e56:	4649      	mov	r1, r9
 8003e58:	414b      	adcs	r3, r1
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e68:	4659      	mov	r1, fp
 8003e6a:	00cb      	lsls	r3, r1, #3
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e72:	4651      	mov	r1, sl
 8003e74:	00ca      	lsls	r2, r1, #3
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e84:	464b      	mov	r3, r9
 8003e86:	460a      	mov	r2, r1
 8003e88:	eb42 0303 	adc.w	r3, r2, r3
 8003e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ea0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	18db      	adds	r3, r3, r3
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eaa:	4613      	mov	r3, r2
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003eba:	f7fc fee5 	bl	8000c88 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <UART_SetConfig+0x2d4>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	@ 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	3332      	adds	r3, #50	@ 0x32
 8003ed6:	4a08      	ldr	r2, [pc, #32]	@ (8003ef8 <UART_SetConfig+0x2d4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 0207 	and.w	r2, r3, #7
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4422      	add	r2, r4
 8003eea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eec:	e106      	b.n	80040fc <UART_SetConfig+0x4d8>
 8003eee:	bf00      	nop
 8003ef0:	40011000 	.word	0x40011000
 8003ef4:	40011400 	.word	0x40011400
 8003ef8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f0e:	4642      	mov	r2, r8
 8003f10:	464b      	mov	r3, r9
 8003f12:	1891      	adds	r1, r2, r2
 8003f14:	6239      	str	r1, [r7, #32]
 8003f16:	415b      	adcs	r3, r3
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f1e:	4641      	mov	r1, r8
 8003f20:	1854      	adds	r4, r2, r1
 8003f22:	4649      	mov	r1, r9
 8003f24:	eb43 0501 	adc.w	r5, r3, r1
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	00eb      	lsls	r3, r5, #3
 8003f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f36:	00e2      	lsls	r2, r4, #3
 8003f38:	4614      	mov	r4, r2
 8003f3a:	461d      	mov	r5, r3
 8003f3c:	4643      	mov	r3, r8
 8003f3e:	18e3      	adds	r3, r4, r3
 8003f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f44:	464b      	mov	r3, r9
 8003f46:	eb45 0303 	adc.w	r3, r5, r3
 8003f4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	008b      	lsls	r3, r1, #2
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f74:	4621      	mov	r1, r4
 8003f76:	008a      	lsls	r2, r1, #2
 8003f78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f7c:	f7fc fe84 	bl	8000c88 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4b60      	ldr	r3, [pc, #384]	@ (8004108 <UART_SetConfig+0x4e4>)
 8003f86:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	011c      	lsls	r4, r3, #4
 8003f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	61b9      	str	r1, [r7, #24]
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	1851      	adds	r1, r2, r1
 8003fb4:	6139      	str	r1, [r7, #16]
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	414b      	adcs	r3, r1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	00ca      	lsls	r2, r1, #3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	eb42 0303 	adc.w	r3, r2, r3
 8003fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ffa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004008:	4649      	mov	r1, r9
 800400a:	008b      	lsls	r3, r1, #2
 800400c:	4641      	mov	r1, r8
 800400e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004012:	4641      	mov	r1, r8
 8004014:	008a      	lsls	r2, r1, #2
 8004016:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800401a:	f7fc fe35 	bl	8000c88 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4611      	mov	r1, r2
 8004024:	4b38      	ldr	r3, [pc, #224]	@ (8004108 <UART_SetConfig+0x4e4>)
 8004026:	fba3 2301 	umull	r2, r3, r3, r1
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2264      	movs	r2, #100	@ 0x64
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	1acb      	subs	r3, r1, r3
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	3332      	adds	r3, #50	@ 0x32
 8004038:	4a33      	ldr	r2, [pc, #204]	@ (8004108 <UART_SetConfig+0x4e4>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004044:	441c      	add	r4, r3
 8004046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404a:	2200      	movs	r2, #0
 800404c:	673b      	str	r3, [r7, #112]	@ 0x70
 800404e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004050:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004054:	4642      	mov	r2, r8
 8004056:	464b      	mov	r3, r9
 8004058:	1891      	adds	r1, r2, r2
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	415b      	adcs	r3, r3
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004064:	4641      	mov	r1, r8
 8004066:	1851      	adds	r1, r2, r1
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	4649      	mov	r1, r9
 800406c:	414b      	adcs	r3, r1
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800407c:	4659      	mov	r1, fp
 800407e:	00cb      	lsls	r3, r1, #3
 8004080:	4651      	mov	r1, sl
 8004082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004086:	4651      	mov	r1, sl
 8004088:	00ca      	lsls	r2, r1, #3
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	4603      	mov	r3, r0
 8004090:	4642      	mov	r2, r8
 8004092:	189b      	adds	r3, r3, r2
 8004094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004096:	464b      	mov	r3, r9
 8004098:	460a      	mov	r2, r1
 800409a:	eb42 0303 	adc.w	r3, r2, r3
 800409e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040b8:	4649      	mov	r1, r9
 80040ba:	008b      	lsls	r3, r1, #2
 80040bc:	4641      	mov	r1, r8
 80040be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c2:	4641      	mov	r1, r8
 80040c4:	008a      	lsls	r2, r1, #2
 80040c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040ca:	f7fc fddd 	bl	8000c88 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <UART_SetConfig+0x4e4>)
 80040d4:	fba3 1302 	umull	r1, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	2164      	movs	r1, #100	@ 0x64
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	3332      	adds	r3, #50	@ 0x32
 80040e6:	4a08      	ldr	r2, [pc, #32]	@ (8004108 <UART_SetConfig+0x4e4>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	f003 020f 	and.w	r2, r3, #15
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4422      	add	r2, r4
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004102:	46bd      	mov	sp, r7
 8004104:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004108:	51eb851f 	.word	0x51eb851f

0800410c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800411a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411e:	2b84      	cmp	r3, #132	@ 0x84
 8004120:	d005      	beq.n	800412e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	3303      	adds	r3, #3
 800412c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004140:	f000 fafc 	bl	800473c <vTaskStartScheduler>
  
  return osOK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd80      	pop	{r7, pc}

0800414a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800414a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414c:	b089      	sub	sp, #36	@ 0x24
 800414e:	af04      	add	r7, sp, #16
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <osThreadCreate+0x54>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685c      	ldr	r4, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691e      	ldr	r6, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ffc8 	bl	800410c <makeFreeRtosPriority>
 800417c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004186:	9202      	str	r2, [sp, #8]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	9100      	str	r1, [sp, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4632      	mov	r2, r6
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f000 f8ed 	bl	8004372 <xTaskCreateStatic>
 8004198:	4603      	mov	r3, r0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e01c      	b.n	80041d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685c      	ldr	r4, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ffaa 	bl	800410c <makeFreeRtosPriority>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4632      	mov	r2, r6
 80041c6:	4629      	mov	r1, r5
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 f932 	bl	8004432 <xTaskCreate>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <osDelay+0x16>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e000      	b.n	80041fa <osDelay+0x18>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa68 	bl	80046d0 <vTaskDelay>
  
  return osOK;
 8004200:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f103 0208 	add.w	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004222:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f103 0208 	add.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f103 0208 	add.w	r2, r3, #8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042c2:	d103      	bne.n	80042cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e00c      	b.n	80042e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3308      	adds	r3, #8
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e002      	b.n	80042da <vListInsert+0x2e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d2f6      	bcs.n	80042d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6852      	ldr	r2, [r2, #4]
 800433e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d103      	bne.n	8004352 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004372:	b580      	push	{r7, lr}
 8004374:	b08e      	sub	sp, #56	@ 0x38
 8004376:	af04      	add	r7, sp, #16
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xTaskCreateStatic+0x4a>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61fb      	str	r3, [r7, #28]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043bc:	23a0      	movs	r3, #160	@ 0xa0
 80043be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80043c4:	d00b      	beq.n	80043de <xTaskCreateStatic+0x6c>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61bb      	str	r3, [r7, #24]
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	e7fd      	b.n	80043da <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01e      	beq.n	8004424 <xTaskCreateStatic+0xb2>
 80043e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01b      	beq.n	8004424 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043fe:	2300      	movs	r3, #0
 8004400:	9303      	str	r3, [sp, #12]
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	9302      	str	r3, [sp, #8]
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f850 	bl	80044bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800441c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800441e:	f000 f8ed 	bl	80045fc <prvAddNewTaskToReadyList>
 8004422:	e001      	b.n	8004428 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004428:	697b      	ldr	r3, [r7, #20]
	}
 800442a:	4618      	mov	r0, r3
 800442c:	3728      	adds	r7, #40	@ 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004432:	b580      	push	{r7, lr}
 8004434:	b08c      	sub	sp, #48	@ 0x30
 8004436:	af04      	add	r7, sp, #16
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fefe 	bl	8005248 <pvPortMalloc>
 800444c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00e      	beq.n	8004472 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004454:	20a0      	movs	r0, #160	@ 0xa0
 8004456:	f000 fef7 	bl	8005248 <pvPortMalloc>
 800445a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
 8004468:	e005      	b.n	8004476 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f000 ffba 	bl	80053e4 <vPortFree>
 8004470:	e001      	b.n	8004476 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d017      	beq.n	80044ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	2300      	movs	r3, #0
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	9302      	str	r3, [sp, #8]
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f80e 	bl	80044bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a0:	69f8      	ldr	r0, [r7, #28]
 80044a2:	f000 f8ab 	bl	80045fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e002      	b.n	80044b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044b2:	69bb      	ldr	r3, [r7, #24]
	}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044d4:	3b01      	subs	r3, #1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f023 0307 	bic.w	r3, r3, #7
 80044e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	617b      	str	r3, [r7, #20]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e012      	b.n	8004538 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	7819      	ldrb	r1, [r3, #0]
 800451a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	3334      	adds	r3, #52	@ 0x34
 8004522:	460a      	mov	r2, r1
 8004524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d006      	beq.n	8004540 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	d9e9      	bls.n	8004512 <prvInitialiseNewTask+0x56>
 800453e:	e000      	b.n	8004542 <prvInitialiseNewTask+0x86>
			{
				break;
 8004540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800454a:	e003      	b.n	8004554 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	2b06      	cmp	r3, #6
 8004558:	d901      	bls.n	800455e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800455a:	2306      	movs	r3, #6
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004568:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2200      	movs	r2, #0
 800456e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fe68 	bl	800424a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	3318      	adds	r3, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe63 	bl	800424a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	f1c3 0207 	rsb	r2, r3, #7
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	2200      	movs	r2, #0
 800459e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	334c      	adds	r3, #76	@ 0x4c
 80045ae:	224c      	movs	r2, #76	@ 0x4c
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 ffc1 	bl	800653a <memset>
 80045b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ba:	4a0d      	ldr	r2, [pc, #52]	@ (80045f0 <prvInitialiseNewTask+0x134>)
 80045bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	4a0c      	ldr	r2, [pc, #48]	@ (80045f4 <prvInitialiseNewTask+0x138>)
 80045c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	4a0c      	ldr	r2, [pc, #48]	@ (80045f8 <prvInitialiseNewTask+0x13c>)
 80045c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	69b8      	ldr	r0, [r7, #24]
 80045d0:	f000 fc2a 	bl	8004e28 <pxPortInitialiseStack>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e6:	bf00      	nop
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	200042d8 	.word	0x200042d8
 80045f4:	20004340 	.word	0x20004340
 80045f8:	200043a8 	.word	0x200043a8

080045fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004604:	f000 fd40 	bl	8005088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004608:	4b2a      	ldr	r3, [pc, #168]	@ (80046b4 <prvAddNewTaskToReadyList+0xb8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3301      	adds	r3, #1
 800460e:	4a29      	ldr	r2, [pc, #164]	@ (80046b4 <prvAddNewTaskToReadyList+0xb8>)
 8004610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004612:	4b29      	ldr	r3, [pc, #164]	@ (80046b8 <prvAddNewTaskToReadyList+0xbc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800461a:	4a27      	ldr	r2, [pc, #156]	@ (80046b8 <prvAddNewTaskToReadyList+0xbc>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004620:	4b24      	ldr	r3, [pc, #144]	@ (80046b4 <prvAddNewTaskToReadyList+0xb8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d110      	bne.n	800464a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004628:	f000 fad4 	bl	8004bd4 <prvInitialiseTaskLists>
 800462c:	e00d      	b.n	800464a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800462e:	4b23      	ldr	r3, [pc, #140]	@ (80046bc <prvAddNewTaskToReadyList+0xc0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004636:	4b20      	ldr	r3, [pc, #128]	@ (80046b8 <prvAddNewTaskToReadyList+0xbc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d802      	bhi.n	800464a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004644:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <prvAddNewTaskToReadyList+0xbc>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800464a:	4b1d      	ldr	r3, [pc, #116]	@ (80046c0 <prvAddNewTaskToReadyList+0xc4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <prvAddNewTaskToReadyList+0xc4>)
 8004652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	2201      	movs	r2, #1
 800465a:	409a      	lsls	r2, r3
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4313      	orrs	r3, r2
 8004662:	4a18      	ldr	r2, [pc, #96]	@ (80046c4 <prvAddNewTaskToReadyList+0xc8>)
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <prvAddNewTaskToReadyList+0xcc>)
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7ff fdf1 	bl	8004264 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004682:	f000 fd33 	bl	80050ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <prvAddNewTaskToReadyList+0xc0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <prvAddNewTaskToReadyList+0xbc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	429a      	cmp	r2, r3
 800469a:	d207      	bcs.n	80046ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <prvAddNewTaskToReadyList+0xd0>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000684 	.word	0x20000684
 80046b8:	20000584 	.word	0x20000584
 80046bc:	20000690 	.word	0x20000690
 80046c0:	200006a0 	.word	0x200006a0
 80046c4:	2000068c 	.word	0x2000068c
 80046c8:	20000588 	.word	0x20000588
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046e2:	4b14      	ldr	r3, [pc, #80]	@ (8004734 <vTaskDelay+0x64>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <vTaskDelay+0x32>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60bb      	str	r3, [r7, #8]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004702:	f000 f885 	bl	8004810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004706:	2100      	movs	r1, #0
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb27 	bl	8004d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800470e:	f000 f88d 	bl	800482c <xTaskResumeAll>
 8004712:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800471a:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <vTaskDelay+0x68>)
 800471c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200006ac 	.word	0x200006ac
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	@ 0x28
 8004740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800474a:	463a      	mov	r2, r7
 800474c:	1d39      	adds	r1, r7, #4
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fc64 	bl	8001020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	9202      	str	r2, [sp, #8]
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	2300      	movs	r3, #0
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2300      	movs	r3, #0
 8004768:	460a      	mov	r2, r1
 800476a:	4921      	ldr	r1, [pc, #132]	@ (80047f0 <vTaskStartScheduler+0xb4>)
 800476c:	4821      	ldr	r0, [pc, #132]	@ (80047f4 <vTaskStartScheduler+0xb8>)
 800476e:	f7ff fe00 	bl	8004372 <xTaskCreateStatic>
 8004772:	4603      	mov	r3, r0
 8004774:	4a20      	ldr	r2, [pc, #128]	@ (80047f8 <vTaskStartScheduler+0xbc>)
 8004776:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004778:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <vTaskStartScheduler+0xbc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e001      	b.n	800478a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11b      	bne.n	80047c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
}
 80047a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047a4:	4b15      	ldr	r3, [pc, #84]	@ (80047fc <vTaskStartScheduler+0xc0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	334c      	adds	r3, #76	@ 0x4c
 80047aa:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <vTaskStartScheduler+0xc4>)
 80047ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <vTaskStartScheduler+0xc8>)
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047b6:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <vTaskStartScheduler+0xcc>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <vTaskStartScheduler+0xd0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047c2:	f000 fbbd 	bl	8004f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047c6:	e00f      	b.n	80047e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047ce:	d10b      	bne.n	80047e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <vTaskStartScheduler+0xa8>
}
 80047e8:	bf00      	nop
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	08009e20 	.word	0x08009e20
 80047f4:	08004ba5 	.word	0x08004ba5
 80047f8:	200006a8 	.word	0x200006a8
 80047fc:	20000584 	.word	0x20000584
 8004800:	2000001c 	.word	0x2000001c
 8004804:	200006a4 	.word	0x200006a4
 8004808:	20000690 	.word	0x20000690
 800480c:	20000688 	.word	0x20000688

08004810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004814:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <vTaskSuspendAll+0x18>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	4a03      	ldr	r2, [pc, #12]	@ (8004828 <vTaskSuspendAll+0x18>)
 800481c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800481e:	bf00      	nop
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	200006ac 	.word	0x200006ac

0800482c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800483a:	4b42      	ldr	r3, [pc, #264]	@ (8004944 <xTaskResumeAll+0x118>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10b      	bne.n	800485a <xTaskResumeAll+0x2e>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	603b      	str	r3, [r7, #0]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800485a:	f000 fc15 	bl	8005088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800485e:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <xTaskResumeAll+0x118>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3b01      	subs	r3, #1
 8004864:	4a37      	ldr	r2, [pc, #220]	@ (8004944 <xTaskResumeAll+0x118>)
 8004866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004868:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <xTaskResumeAll+0x118>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d161      	bne.n	8004934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004870:	4b35      	ldr	r3, [pc, #212]	@ (8004948 <xTaskResumeAll+0x11c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05d      	beq.n	8004934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004878:	e02e      	b.n	80048d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487a:	4b34      	ldr	r3, [pc, #208]	@ (800494c <xTaskResumeAll+0x120>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3318      	adds	r3, #24
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fd49 	bl	800431e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fd44 	bl	800431e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	2201      	movs	r2, #1
 800489c:	409a      	lsls	r2, r3
 800489e:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <xTaskResumeAll+0x124>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004950 <xTaskResumeAll+0x124>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <xTaskResumeAll+0x128>)
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7ff fcd0 	bl	8004264 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c8:	4b23      	ldr	r3, [pc, #140]	@ (8004958 <xTaskResumeAll+0x12c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048d2:	4b22      	ldr	r3, [pc, #136]	@ (800495c <xTaskResumeAll+0x130>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048d8:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <xTaskResumeAll+0x120>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1cc      	bne.n	800487a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048e6:	f000 fa19 	bl	8004d1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <xTaskResumeAll+0x134>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d010      	beq.n	8004918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048f6:	f000 f837 	bl	8004968 <xTaskIncrementTick>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004900:	4b16      	ldr	r3, [pc, #88]	@ (800495c <xTaskResumeAll+0x130>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3b01      	subs	r3, #1
 800490a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f1      	bne.n	80048f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <xTaskResumeAll+0x134>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004918:	4b10      	ldr	r3, [pc, #64]	@ (800495c <xTaskResumeAll+0x130>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004924:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <xTaskResumeAll+0x138>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004934:	f000 fbda 	bl	80050ec <vPortExitCritical>

	return xAlreadyYielded;
 8004938:	68bb      	ldr	r3, [r7, #8]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200006ac 	.word	0x200006ac
 8004948:	20000684 	.word	0x20000684
 800494c:	20000644 	.word	0x20000644
 8004950:	2000068c 	.word	0x2000068c
 8004954:	20000588 	.word	0x20000588
 8004958:	20000584 	.word	0x20000584
 800495c:	20000698 	.word	0x20000698
 8004960:	20000694 	.word	0x20000694
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004972:	4b4f      	ldr	r3, [pc, #316]	@ (8004ab0 <xTaskIncrementTick+0x148>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 808f 	bne.w	8004a9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800497c:	4b4d      	ldr	r3, [pc, #308]	@ (8004ab4 <xTaskIncrementTick+0x14c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004984:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab4 <xTaskIncrementTick+0x14c>)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d121      	bne.n	80049d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004990:	4b49      	ldr	r3, [pc, #292]	@ (8004ab8 <xTaskIncrementTick+0x150>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	603b      	str	r3, [r7, #0]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <xTaskIncrementTick+0x46>
 80049b2:	4b41      	ldr	r3, [pc, #260]	@ (8004ab8 <xTaskIncrementTick+0x150>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	4b40      	ldr	r3, [pc, #256]	@ (8004abc <xTaskIncrementTick+0x154>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab8 <xTaskIncrementTick+0x150>)
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	4a3e      	ldr	r2, [pc, #248]	@ (8004abc <xTaskIncrementTick+0x154>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac0 <xTaskIncrementTick+0x158>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac0 <xTaskIncrementTick+0x158>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	f000 f9a4 	bl	8004d1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049d4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac4 <xTaskIncrementTick+0x15c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d348      	bcc.n	8004a70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049de:	4b36      	ldr	r3, [pc, #216]	@ (8004ab8 <xTaskIncrementTick+0x150>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e8:	4b36      	ldr	r3, [pc, #216]	@ (8004ac4 <xTaskIncrementTick+0x15c>)
 80049ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049ee:	601a      	str	r2, [r3, #0]
					break;
 80049f0:	e03e      	b.n	8004a70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f2:	4b31      	ldr	r3, [pc, #196]	@ (8004ab8 <xTaskIncrementTick+0x150>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d203      	bcs.n	8004a12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac4 <xTaskIncrementTick+0x15c>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a10:	e02e      	b.n	8004a70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fc81 	bl	800431e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3318      	adds	r3, #24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fc78 	bl	800431e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	2201      	movs	r2, #1
 8004a34:	409a      	lsls	r2, r3
 8004a36:	4b24      	ldr	r3, [pc, #144]	@ (8004ac8 <xTaskIncrementTick+0x160>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ac8 <xTaskIncrementTick+0x160>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004acc <xTaskIncrementTick+0x164>)
 8004a4e:	441a      	add	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7ff fc04 	bl	8004264 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <xTaskIncrementTick+0x168>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3b9      	bcc.n	80049de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6e:	e7b6      	b.n	80049de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a70:	4b17      	ldr	r3, [pc, #92]	@ (8004ad0 <xTaskIncrementTick+0x168>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	4915      	ldr	r1, [pc, #84]	@ (8004acc <xTaskIncrementTick+0x164>)
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d901      	bls.n	8004a8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <xTaskIncrementTick+0x16c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e004      	b.n	8004aa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <xTaskIncrementTick+0x170>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad8 <xTaskIncrementTick+0x170>)
 8004aa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aa4:	697b      	ldr	r3, [r7, #20]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200006ac 	.word	0x200006ac
 8004ab4:	20000688 	.word	0x20000688
 8004ab8:	2000063c 	.word	0x2000063c
 8004abc:	20000640 	.word	0x20000640
 8004ac0:	2000069c 	.word	0x2000069c
 8004ac4:	200006a4 	.word	0x200006a4
 8004ac8:	2000068c 	.word	0x2000068c
 8004acc:	20000588 	.word	0x20000588
 8004ad0:	20000584 	.word	0x20000584
 8004ad4:	20000698 	.word	0x20000698
 8004ad8:	20000694 	.word	0x20000694

08004adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <vTaskSwitchContext+0xb0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aea:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <vTaskSwitchContext+0xb4>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004af0:	e045      	b.n	8004b7e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004af2:	4b27      	ldr	r3, [pc, #156]	@ (8004b90 <vTaskSwitchContext+0xb4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af8:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <vTaskSwitchContext+0xb8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b06:	7afb      	ldrb	r3, [r7, #11]
 8004b08:	f1c3 031f 	rsb	r3, r3, #31
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	4922      	ldr	r1, [pc, #136]	@ (8004b98 <vTaskSwitchContext+0xbc>)
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	607b      	str	r3, [r7, #4]
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <vTaskSwitchContext+0x5a>
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <vTaskSwitchContext+0xbc>)
 8004b46:	4413      	add	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d104      	bne.n	8004b6a <vTaskSwitchContext+0x8e>
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	@ (8004b9c <vTaskSwitchContext+0xc0>)
 8004b72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <vTaskSwitchContext+0xc0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	334c      	adds	r3, #76	@ 0x4c
 8004b7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ba0 <vTaskSwitchContext+0xc4>)
 8004b7c:	6013      	str	r3, [r2, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	200006ac 	.word	0x200006ac
 8004b90:	20000698 	.word	0x20000698
 8004b94:	2000068c 	.word	0x2000068c
 8004b98:	20000588 	.word	0x20000588
 8004b9c:	20000584 	.word	0x20000584
 8004ba0:	2000001c 	.word	0x2000001c

08004ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bac:	f000 f852 	bl	8004c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bb0:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <prvIdleTask+0x28>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d9f9      	bls.n	8004bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <prvIdleTask+0x2c>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc8:	e7f0      	b.n	8004bac <prvIdleTask+0x8>
 8004bca:	bf00      	nop
 8004bcc:	20000588 	.word	0x20000588
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	e00c      	b.n	8004bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4a12      	ldr	r2, [pc, #72]	@ (8004c34 <prvInitialiseTaskLists+0x60>)
 8004bec:	4413      	add	r3, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fb0b 	bl	800420a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d9ef      	bls.n	8004be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c00:	480d      	ldr	r0, [pc, #52]	@ (8004c38 <prvInitialiseTaskLists+0x64>)
 8004c02:	f7ff fb02 	bl	800420a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c06:	480d      	ldr	r0, [pc, #52]	@ (8004c3c <prvInitialiseTaskLists+0x68>)
 8004c08:	f7ff faff 	bl	800420a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c0c:	480c      	ldr	r0, [pc, #48]	@ (8004c40 <prvInitialiseTaskLists+0x6c>)
 8004c0e:	f7ff fafc 	bl	800420a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c12:	480c      	ldr	r0, [pc, #48]	@ (8004c44 <prvInitialiseTaskLists+0x70>)
 8004c14:	f7ff faf9 	bl	800420a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c18:	480b      	ldr	r0, [pc, #44]	@ (8004c48 <prvInitialiseTaskLists+0x74>)
 8004c1a:	f7ff faf6 	bl	800420a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <prvInitialiseTaskLists+0x78>)
 8004c20:	4a05      	ldr	r2, [pc, #20]	@ (8004c38 <prvInitialiseTaskLists+0x64>)
 8004c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <prvInitialiseTaskLists+0x7c>)
 8004c26:	4a05      	ldr	r2, [pc, #20]	@ (8004c3c <prvInitialiseTaskLists+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000588 	.word	0x20000588
 8004c38:	20000614 	.word	0x20000614
 8004c3c:	20000628 	.word	0x20000628
 8004c40:	20000644 	.word	0x20000644
 8004c44:	20000658 	.word	0x20000658
 8004c48:	20000670 	.word	0x20000670
 8004c4c:	2000063c 	.word	0x2000063c
 8004c50:	20000640 	.word	0x20000640

08004c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c5a:	e019      	b.n	8004c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c5c:	f000 fa14 	bl	8005088 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c60:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <prvCheckTasksWaitingTermination+0x50>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fb56 	bl	800431e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca8 <prvCheckTasksWaitingTermination+0x54>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca8 <prvCheckTasksWaitingTermination+0x54>)
 8004c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4a0a      	ldr	r2, [pc, #40]	@ (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c86:	f000 fa31 	bl	80050ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f810 	bl	8004cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e1      	bne.n	8004c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000658 	.word	0x20000658
 8004ca8:	20000684 	.word	0x20000684
 8004cac:	2000066c 	.word	0x2000066c

08004cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	334c      	adds	r3, #76	@ 0x4c
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fc59 	bl	8006574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fb87 	bl	80053e4 <vPortFree>
				vPortFree( pxTCB );
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fb84 	bl	80053e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cdc:	e019      	b.n	8004d12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d103      	bne.n	8004cf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb7b 	bl	80053e4 <vPortFree>
	}
 8004cee:	e010      	b.n	8004d12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d00b      	beq.n	8004d12 <prvDeleteTCB+0x62>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	e7fd      	b.n	8004d0e <prvDeleteTCB+0x5e>
	}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d22:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <prvResetNextTaskUnblockTime+0x38>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d34:	e008      	b.n	8004d48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <prvResetNextTaskUnblockTime+0x38>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a04      	ldr	r2, [pc, #16]	@ (8004d58 <prvResetNextTaskUnblockTime+0x3c>)
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	2000063c 	.word	0x2000063c
 8004d58:	200006a4 	.word	0x200006a4

08004d5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d66:	4b29      	ldr	r3, [pc, #164]	@ (8004e0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d6c:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fad3 	bl	800431e <uxListRemove>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d7e:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	2201      	movs	r2, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4013      	ands	r3, r2
 8004d92:	4a20      	ldr	r2, [pc, #128]	@ (8004e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d9c:	d10a      	bne.n	8004db4 <prvAddCurrentTaskToDelayedList+0x58>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4619      	mov	r1, r3
 8004dac:	481a      	ldr	r0, [pc, #104]	@ (8004e18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dae:	f7ff fa59 	bl	8004264 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004db2:	e026      	b.n	8004e02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d209      	bcs.n	8004de0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dcc:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7ff fa67 	bl	80042ac <vListInsert>
}
 8004dde:	e010      	b.n	8004e02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004de0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f7ff fa5d 	bl	80042ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d202      	bcs.n	8004e02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004dfc:	4a09      	ldr	r2, [pc, #36]	@ (8004e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6013      	str	r3, [r2, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000688 	.word	0x20000688
 8004e10:	20000584 	.word	0x20000584
 8004e14:	2000068c 	.word	0x2000068c
 8004e18:	20000670 	.word	0x20000670
 8004e1c:	20000640 	.word	0x20000640
 8004e20:	2000063c 	.word	0x2000063c
 8004e24:	200006a4 	.word	0x200006a4

08004e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b04      	subs	r3, #4
 8004e38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b04      	subs	r3, #4
 8004e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e58:	4a0c      	ldr	r2, [pc, #48]	@ (8004e8c <pxPortInitialiseStack+0x64>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b14      	subs	r3, #20
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f06f 0202 	mvn.w	r2, #2
 8004e76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b20      	subs	r3, #32
 8004e7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	08004e91 	.word	0x08004e91

08004e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ee8 <prvTaskExitError+0x58>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea2:	d00b      	beq.n	8004ebc <prvTaskExitError+0x2c>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <prvTaskExitError+0x28>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60bb      	str	r3, [r7, #8]
}
 8004ece:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ed0:	bf00      	nop
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0fc      	beq.n	8004ed2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000000c 	.word	0x2000000c
 8004eec:	00000000 	.word	0x00000000

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	4770      	bx	lr
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst2>:
 8004f10:	20000584 	.word	0x20000584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f18:	4808      	ldr	r0, [pc, #32]	@ (8004f3c <prvPortStartFirstTask+0x24>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8814 	msr	CONTROL, r0
 8004f2a:	b662      	cpsie	i
 8004f2c:	b661      	cpsie	f
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	df00      	svc	0
 8004f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed08 	.word	0xe000ed08

08004f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f46:	4b47      	ldr	r3, [pc, #284]	@ (8005064 <xPortStartScheduler+0x124>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a47      	ldr	r2, [pc, #284]	@ (8005068 <xPortStartScheduler+0x128>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10b      	bne.n	8004f68 <xPortStartScheduler+0x28>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f68:	4b3e      	ldr	r3, [pc, #248]	@ (8005064 <xPortStartScheduler+0x124>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800506c <xPortStartScheduler+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10b      	bne.n	8004f8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	613b      	str	r3, [r7, #16]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f8a:	4b39      	ldr	r3, [pc, #228]	@ (8005070 <xPortStartScheduler+0x130>)
 8004f8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	22ff      	movs	r2, #255	@ 0xff
 8004f9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	4b31      	ldr	r3, [pc, #196]	@ (8005074 <xPortStartScheduler+0x134>)
 8004fb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fb2:	4b31      	ldr	r3, [pc, #196]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb8:	e009      	b.n	8004fce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004fba:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b80      	cmp	r3, #128	@ 0x80
 8004fd8:	d0ef      	beq.n	8004fba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fda:	4b27      	ldr	r3, [pc, #156]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1c3 0307 	rsb	r3, r3, #7
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d00b      	beq.n	8004ffe <xPortStartScheduler+0xbe>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60bb      	str	r3, [r7, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8005078 <xPortStartScheduler+0x138>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <xPortStartScheduler+0x138>)
 8005006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <xPortStartScheduler+0x138>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <xPortStartScheduler+0x138>)
 8005012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800501c:	4b17      	ldr	r3, [pc, #92]	@ (800507c <xPortStartScheduler+0x13c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a16      	ldr	r2, [pc, #88]	@ (800507c <xPortStartScheduler+0x13c>)
 8005022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005028:	4b14      	ldr	r3, [pc, #80]	@ (800507c <xPortStartScheduler+0x13c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a13      	ldr	r2, [pc, #76]	@ (800507c <xPortStartScheduler+0x13c>)
 800502e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005034:	f000 f8da 	bl	80051ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <xPortStartScheduler+0x140>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800503e:	f000 f8f9 	bl	8005234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <xPortStartScheduler+0x144>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a0f      	ldr	r2, [pc, #60]	@ (8005084 <xPortStartScheduler+0x144>)
 8005048:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800504c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800504e:	f7ff ff63 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005052:	f7ff fd43 	bl	8004adc <vTaskSwitchContext>
	prvTaskExitError();
 8005056:	f7ff ff1b 	bl	8004e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed00 	.word	0xe000ed00
 8005068:	410fc271 	.word	0x410fc271
 800506c:	410fc270 	.word	0x410fc270
 8005070:	e000e400 	.word	0xe000e400
 8005074:	200006b0 	.word	0x200006b0
 8005078:	200006b4 	.word	0x200006b4
 800507c:	e000ed20 	.word	0xe000ed20
 8005080:	2000000c 	.word	0x2000000c
 8005084:	e000ef34 	.word	0xe000ef34

08005088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
}
 80050a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050a2:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <vPortEnterCritical+0x5c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a0e      	ldr	r2, [pc, #56]	@ (80050e4 <vPortEnterCritical+0x5c>)
 80050aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050ac:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <vPortEnterCritical+0x5c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d110      	bne.n	80050d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050b4:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <vPortEnterCritical+0x60>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	603b      	str	r3, [r7, #0]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <vPortEnterCritical+0x4a>
	}
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000000c 	.word	0x2000000c
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050f2:	4b12      	ldr	r3, [pc, #72]	@ (800513c <vPortExitCritical+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <vPortExitCritical+0x26>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	607b      	str	r3, [r7, #4]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <vPortExitCritical+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a08      	ldr	r2, [pc, #32]	@ (800513c <vPortExitCritical+0x50>)
 800511a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800511c:	4b07      	ldr	r3, [pc, #28]	@ (800513c <vPortExitCritical+0x50>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <vPortExitCritical+0x44>
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800512e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	2000000c 	.word	0x2000000c

08005140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005140:	f3ef 8009 	mrs	r0, PSP
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <pxCurrentTCBConst>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f01e 0f10 	tst.w	lr, #16
 8005150:	bf08      	it	eq
 8005152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005164:	f380 8811 	msr	BASEPRI, r0
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f7ff fcb4 	bl	8004adc <vTaskSwitchContext>
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f380 8811 	msr	BASEPRI, r0
 800517c:	bc09      	pop	{r0, r3}
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6808      	ldr	r0, [r1, #0]
 8005182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005186:	f01e 0f10 	tst.w	lr, #16
 800518a:	bf08      	it	eq
 800518c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005190:	f380 8809 	msr	PSP, r0
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst>:
 80051a0:	20000584 	.word	0x20000584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c2:	f7ff fbd1 	bl	8004968 <xTaskIncrementTick>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <SysTick_Handler+0x40>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
}
 80051de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <vPortSetupTimerInterrupt+0x34>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <vPortSetupTimerInterrupt+0x38>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <vPortSetupTimerInterrupt+0x3c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <vPortSetupTimerInterrupt+0x40>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	4a09      	ldr	r2, [pc, #36]	@ (8005230 <vPortSetupTimerInterrupt+0x44>)
 800520a:	3b01      	subs	r3, #1
 800520c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800520e:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <vPortSetupTimerInterrupt+0x34>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e010 	.word	0xe000e010
 8005224:	e000e018 	.word	0xe000e018
 8005228:	20000000 	.word	0x20000000
 800522c:	10624dd3 	.word	0x10624dd3
 8005230:	e000e014 	.word	0xe000e014

08005234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005244 <vPortEnableVFP+0x10>
 8005238:	6801      	ldr	r1, [r0, #0]
 800523a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800523e:	6001      	str	r1, [r0, #0]
 8005240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005242:	bf00      	nop
 8005244:	e000ed88 	.word	0xe000ed88

08005248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	@ 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005254:	f7ff fadc 	bl	8004810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005258:	4b5c      	ldr	r3, [pc, #368]	@ (80053cc <pvPortMalloc+0x184>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005260:	f000 f924 	bl	80054ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005264:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <pvPortMalloc+0x188>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 8095 	bne.w	800539c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01e      	beq.n	80052b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005278:	2208      	movs	r2, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	d015      	beq.n	80052b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f023 0307 	bic.w	r3, r3, #7
 8005290:	3308      	adds	r3, #8
 8005292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <pvPortMalloc+0x6e>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	617b      	str	r3, [r7, #20]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d06f      	beq.n	800539c <pvPortMalloc+0x154>
 80052bc:	4b45      	ldr	r3, [pc, #276]	@ (80053d4 <pvPortMalloc+0x18c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d86a      	bhi.n	800539c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052c6:	4b44      	ldr	r3, [pc, #272]	@ (80053d8 <pvPortMalloc+0x190>)
 80052c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052ca:	4b43      	ldr	r3, [pc, #268]	@ (80053d8 <pvPortMalloc+0x190>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d0:	e004      	b.n	80052dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d903      	bls.n	80052ee <pvPortMalloc+0xa6>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f1      	bne.n	80052d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052ee:	4b37      	ldr	r3, [pc, #220]	@ (80053cc <pvPortMalloc+0x184>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d051      	beq.n	800539c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2208      	movs	r2, #8
 80052fe:	4413      	add	r3, r2
 8005300:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	2308      	movs	r3, #8
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	429a      	cmp	r2, r3
 8005318:	d920      	bls.n	800535c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800531a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <pvPortMalloc+0xfc>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	613b      	str	r3, [r7, #16]
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1ad2      	subs	r2, r2, r3
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005356:	69b8      	ldr	r0, [r7, #24]
 8005358:	f000 f90a 	bl	8005570 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <pvPortMalloc+0x18c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a1b      	ldr	r2, [pc, #108]	@ (80053d4 <pvPortMalloc+0x18c>)
 8005368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800536a:	4b1a      	ldr	r3, [pc, #104]	@ (80053d4 <pvPortMalloc+0x18c>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <pvPortMalloc+0x194>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d203      	bcs.n	800537e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005376:	4b17      	ldr	r3, [pc, #92]	@ (80053d4 <pvPortMalloc+0x18c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <pvPortMalloc+0x194>)
 800537c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <pvPortMalloc+0x188>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	431a      	orrs	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005392:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <pvPortMalloc+0x198>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <pvPortMalloc+0x198>)
 800539a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800539c:	f7ff fa46 	bl	800482c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <pvPortMalloc+0x17a>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60fb      	str	r3, [r7, #12]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <pvPortMalloc+0x176>
	return pvReturn;
 80053c2:	69fb      	ldr	r3, [r7, #28]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3728      	adds	r7, #40	@ 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200042c0 	.word	0x200042c0
 80053d0:	200042d4 	.word	0x200042d4
 80053d4:	200042c4 	.word	0x200042c4
 80053d8:	200042b8 	.word	0x200042b8
 80053dc:	200042c8 	.word	0x200042c8
 80053e0:	200042cc 	.word	0x200042cc

080053e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d04f      	beq.n	8005496 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053f6:	2308      	movs	r3, #8
 80053f8:	425b      	negs	r3, r3
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <vPortFree+0xbc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <vPortFree+0x46>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60fb      	str	r3, [r7, #12]
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <vPortFree+0x66>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <vPortFree+0xbc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01e      	beq.n	8005496 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11a      	bne.n	8005496 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4b0e      	ldr	r3, [pc, #56]	@ (80054a0 <vPortFree+0xbc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	43db      	mvns	r3, r3
 800546a:	401a      	ands	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005470:	f7ff f9ce 	bl	8004810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <vPortFree+0xc0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4413      	add	r3, r2
 800547e:	4a09      	ldr	r2, [pc, #36]	@ (80054a4 <vPortFree+0xc0>)
 8005480:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005482:	6938      	ldr	r0, [r7, #16]
 8005484:	f000 f874 	bl	8005570 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005488:	4b07      	ldr	r3, [pc, #28]	@ (80054a8 <vPortFree+0xc4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	4a06      	ldr	r2, [pc, #24]	@ (80054a8 <vPortFree+0xc4>)
 8005490:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005492:	f7ff f9cb 	bl	800482c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	200042d4 	.word	0x200042d4
 80054a4:	200042c4 	.word	0x200042c4
 80054a8:	200042d0 	.word	0x200042d0

080054ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80054b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054b8:	4b27      	ldr	r3, [pc, #156]	@ (8005558 <prvHeapInit+0xac>)
 80054ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3307      	adds	r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0307 	bic.w	r3, r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <prvHeapInit+0xac>)
 80054dc:	4413      	add	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <prvHeapInit+0xb0>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054ea:	4b1c      	ldr	r3, [pc, #112]	@ (800555c <prvHeapInit+0xb0>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054f8:	2208      	movs	r2, #8
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <prvHeapInit+0xb4>)
 800550c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800550e:	4b14      	ldr	r3, [pc, #80]	@ (8005560 <prvHeapInit+0xb4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005516:	4b12      	ldr	r3, [pc, #72]	@ (8005560 <prvHeapInit+0xb4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800552c:	4b0c      	ldr	r3, [pc, #48]	@ (8005560 <prvHeapInit+0xb4>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a0a      	ldr	r2, [pc, #40]	@ (8005564 <prvHeapInit+0xb8>)
 800553a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a09      	ldr	r2, [pc, #36]	@ (8005568 <prvHeapInit+0xbc>)
 8005542:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <prvHeapInit+0xc0>)
 8005546:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800554a:	601a      	str	r2, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	200006b8 	.word	0x200006b8
 800555c:	200042b8 	.word	0x200042b8
 8005560:	200042c0 	.word	0x200042c0
 8005564:	200042c8 	.word	0x200042c8
 8005568:	200042c4 	.word	0x200042c4
 800556c:	200042d4 	.word	0x200042d4

08005570 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005578:	4b28      	ldr	r3, [pc, #160]	@ (800561c <prvInsertBlockIntoFreeList+0xac>)
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e002      	b.n	8005584 <prvInsertBlockIntoFreeList+0x14>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d8f7      	bhi.n	800557e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4413      	add	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d108      	bne.n	80055b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	441a      	add	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d118      	bne.n	80055f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <prvInsertBlockIntoFreeList+0xb0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d00d      	beq.n	80055ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e008      	b.n	8005600 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <prvInsertBlockIntoFreeList+0xb0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e003      	b.n	8005600 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d002      	beq.n	800560e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	200042b8 	.word	0x200042b8
 8005620:	200042c0 	.word	0x200042c0

08005624 <__cvt>:
 8005624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	ec57 6b10 	vmov	r6, r7, d0
 800562c:	2f00      	cmp	r7, #0
 800562e:	460c      	mov	r4, r1
 8005630:	4619      	mov	r1, r3
 8005632:	463b      	mov	r3, r7
 8005634:	bfbb      	ittet	lt
 8005636:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800563a:	461f      	movlt	r7, r3
 800563c:	2300      	movge	r3, #0
 800563e:	232d      	movlt	r3, #45	@ 0x2d
 8005640:	700b      	strb	r3, [r1, #0]
 8005642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005644:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005648:	4691      	mov	r9, r2
 800564a:	f023 0820 	bic.w	r8, r3, #32
 800564e:	bfbc      	itt	lt
 8005650:	4632      	movlt	r2, r6
 8005652:	4616      	movlt	r6, r2
 8005654:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005658:	d005      	beq.n	8005666 <__cvt+0x42>
 800565a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800565e:	d100      	bne.n	8005662 <__cvt+0x3e>
 8005660:	3401      	adds	r4, #1
 8005662:	2102      	movs	r1, #2
 8005664:	e000      	b.n	8005668 <__cvt+0x44>
 8005666:	2103      	movs	r1, #3
 8005668:	ab03      	add	r3, sp, #12
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	ab02      	add	r3, sp, #8
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	ec47 6b10 	vmov	d0, r6, r7
 8005674:	4653      	mov	r3, sl
 8005676:	4622      	mov	r2, r4
 8005678:	f001 f8da 	bl	8006830 <_dtoa_r>
 800567c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005680:	4605      	mov	r5, r0
 8005682:	d119      	bne.n	80056b8 <__cvt+0x94>
 8005684:	f019 0f01 	tst.w	r9, #1
 8005688:	d00e      	beq.n	80056a8 <__cvt+0x84>
 800568a:	eb00 0904 	add.w	r9, r0, r4
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	4630      	mov	r0, r6
 8005694:	4639      	mov	r1, r7
 8005696:	f7fb fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800569a:	b108      	cbz	r0, 80056a0 <__cvt+0x7c>
 800569c:	f8cd 900c 	str.w	r9, [sp, #12]
 80056a0:	2230      	movs	r2, #48	@ 0x30
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	454b      	cmp	r3, r9
 80056a6:	d31e      	bcc.n	80056e6 <__cvt+0xc2>
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056ac:	1b5b      	subs	r3, r3, r5
 80056ae:	4628      	mov	r0, r5
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	b004      	add	sp, #16
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056bc:	eb00 0904 	add.w	r9, r0, r4
 80056c0:	d1e5      	bne.n	800568e <__cvt+0x6a>
 80056c2:	7803      	ldrb	r3, [r0, #0]
 80056c4:	2b30      	cmp	r3, #48	@ 0x30
 80056c6:	d10a      	bne.n	80056de <__cvt+0xba>
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fb f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80056d4:	b918      	cbnz	r0, 80056de <__cvt+0xba>
 80056d6:	f1c4 0401 	rsb	r4, r4, #1
 80056da:	f8ca 4000 	str.w	r4, [sl]
 80056de:	f8da 3000 	ldr.w	r3, [sl]
 80056e2:	4499      	add	r9, r3
 80056e4:	e7d3      	b.n	800568e <__cvt+0x6a>
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	9103      	str	r1, [sp, #12]
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	e7d9      	b.n	80056a2 <__cvt+0x7e>

080056ee <__exponent>:
 80056ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f0:	2900      	cmp	r1, #0
 80056f2:	bfba      	itte	lt
 80056f4:	4249      	neglt	r1, r1
 80056f6:	232d      	movlt	r3, #45	@ 0x2d
 80056f8:	232b      	movge	r3, #43	@ 0x2b
 80056fa:	2909      	cmp	r1, #9
 80056fc:	7002      	strb	r2, [r0, #0]
 80056fe:	7043      	strb	r3, [r0, #1]
 8005700:	dd29      	ble.n	8005756 <__exponent+0x68>
 8005702:	f10d 0307 	add.w	r3, sp, #7
 8005706:	461d      	mov	r5, r3
 8005708:	270a      	movs	r7, #10
 800570a:	461a      	mov	r2, r3
 800570c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005710:	fb07 1416 	mls	r4, r7, r6, r1
 8005714:	3430      	adds	r4, #48	@ 0x30
 8005716:	f802 4c01 	strb.w	r4, [r2, #-1]
 800571a:	460c      	mov	r4, r1
 800571c:	2c63      	cmp	r4, #99	@ 0x63
 800571e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005722:	4631      	mov	r1, r6
 8005724:	dcf1      	bgt.n	800570a <__exponent+0x1c>
 8005726:	3130      	adds	r1, #48	@ 0x30
 8005728:	1e94      	subs	r4, r2, #2
 800572a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800572e:	1c41      	adds	r1, r0, #1
 8005730:	4623      	mov	r3, r4
 8005732:	42ab      	cmp	r3, r5
 8005734:	d30a      	bcc.n	800574c <__exponent+0x5e>
 8005736:	f10d 0309 	add.w	r3, sp, #9
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	42ac      	cmp	r4, r5
 800573e:	bf88      	it	hi
 8005740:	2300      	movhi	r3, #0
 8005742:	3302      	adds	r3, #2
 8005744:	4403      	add	r3, r0
 8005746:	1a18      	subs	r0, r3, r0
 8005748:	b003      	add	sp, #12
 800574a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800574c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005750:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005754:	e7ed      	b.n	8005732 <__exponent+0x44>
 8005756:	2330      	movs	r3, #48	@ 0x30
 8005758:	3130      	adds	r1, #48	@ 0x30
 800575a:	7083      	strb	r3, [r0, #2]
 800575c:	70c1      	strb	r1, [r0, #3]
 800575e:	1d03      	adds	r3, r0, #4
 8005760:	e7f1      	b.n	8005746 <__exponent+0x58>
	...

08005764 <_printf_float>:
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	b08d      	sub	sp, #52	@ 0x34
 800576a:	460c      	mov	r4, r1
 800576c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005770:	4616      	mov	r6, r2
 8005772:	461f      	mov	r7, r3
 8005774:	4605      	mov	r5, r0
 8005776:	f000 fee9 	bl	800654c <_localeconv_r>
 800577a:	6803      	ldr	r3, [r0, #0]
 800577c:	9304      	str	r3, [sp, #16]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa fd76 	bl	8000270 <strlen>
 8005784:	2300      	movs	r3, #0
 8005786:	930a      	str	r3, [sp, #40]	@ 0x28
 8005788:	f8d8 3000 	ldr.w	r3, [r8]
 800578c:	9005      	str	r0, [sp, #20]
 800578e:	3307      	adds	r3, #7
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	f103 0208 	add.w	r2, r3, #8
 8005798:	f894 a018 	ldrb.w	sl, [r4, #24]
 800579c:	f8d4 b000 	ldr.w	fp, [r4]
 80057a0:	f8c8 2000 	str.w	r2, [r8]
 80057a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80057ac:	9307      	str	r3, [sp, #28]
 80057ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ba:	4b9c      	ldr	r3, [pc, #624]	@ (8005a2c <_printf_float+0x2c8>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057c0:	f7fb f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80057c4:	bb70      	cbnz	r0, 8005824 <_printf_float+0xc0>
 80057c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ca:	4b98      	ldr	r3, [pc, #608]	@ (8005a2c <_printf_float+0x2c8>)
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057d0:	f7fb f98e 	bl	8000af0 <__aeabi_dcmple>
 80057d4:	bb30      	cbnz	r0, 8005824 <_printf_float+0xc0>
 80057d6:	2200      	movs	r2, #0
 80057d8:	2300      	movs	r3, #0
 80057da:	4640      	mov	r0, r8
 80057dc:	4649      	mov	r1, r9
 80057de:	f7fb f97d 	bl	8000adc <__aeabi_dcmplt>
 80057e2:	b110      	cbz	r0, 80057ea <_printf_float+0x86>
 80057e4:	232d      	movs	r3, #45	@ 0x2d
 80057e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ea:	4a91      	ldr	r2, [pc, #580]	@ (8005a30 <_printf_float+0x2cc>)
 80057ec:	4b91      	ldr	r3, [pc, #580]	@ (8005a34 <_printf_float+0x2d0>)
 80057ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057f2:	bf8c      	ite	hi
 80057f4:	4690      	movhi	r8, r2
 80057f6:	4698      	movls	r8, r3
 80057f8:	2303      	movs	r3, #3
 80057fa:	6123      	str	r3, [r4, #16]
 80057fc:	f02b 0304 	bic.w	r3, fp, #4
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	f04f 0900 	mov.w	r9, #0
 8005806:	9700      	str	r7, [sp, #0]
 8005808:	4633      	mov	r3, r6
 800580a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800580c:	4621      	mov	r1, r4
 800580e:	4628      	mov	r0, r5
 8005810:	f000 f9d2 	bl	8005bb8 <_printf_common>
 8005814:	3001      	adds	r0, #1
 8005816:	f040 808d 	bne.w	8005934 <_printf_float+0x1d0>
 800581a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800581e:	b00d      	add	sp, #52	@ 0x34
 8005820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fb f97e 	bl	8000b2c <__aeabi_dcmpun>
 8005830:	b140      	cbz	r0, 8005844 <_printf_float+0xe0>
 8005832:	464b      	mov	r3, r9
 8005834:	2b00      	cmp	r3, #0
 8005836:	bfbc      	itt	lt
 8005838:	232d      	movlt	r3, #45	@ 0x2d
 800583a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800583e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a38 <_printf_float+0x2d4>)
 8005840:	4b7e      	ldr	r3, [pc, #504]	@ (8005a3c <_printf_float+0x2d8>)
 8005842:	e7d4      	b.n	80057ee <_printf_float+0x8a>
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800584a:	9206      	str	r2, [sp, #24]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	d13b      	bne.n	80058c8 <_printf_float+0x164>
 8005850:	2306      	movs	r3, #6
 8005852:	6063      	str	r3, [r4, #4]
 8005854:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005858:	2300      	movs	r3, #0
 800585a:	6022      	str	r2, [r4, #0]
 800585c:	9303      	str	r3, [sp, #12]
 800585e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005860:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005864:	ab09      	add	r3, sp, #36	@ 0x24
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	6861      	ldr	r1, [r4, #4]
 800586a:	ec49 8b10 	vmov	d0, r8, r9
 800586e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005872:	4628      	mov	r0, r5
 8005874:	f7ff fed6 	bl	8005624 <__cvt>
 8005878:	9b06      	ldr	r3, [sp, #24]
 800587a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800587c:	2b47      	cmp	r3, #71	@ 0x47
 800587e:	4680      	mov	r8, r0
 8005880:	d129      	bne.n	80058d6 <_printf_float+0x172>
 8005882:	1cc8      	adds	r0, r1, #3
 8005884:	db02      	blt.n	800588c <_printf_float+0x128>
 8005886:	6863      	ldr	r3, [r4, #4]
 8005888:	4299      	cmp	r1, r3
 800588a:	dd41      	ble.n	8005910 <_printf_float+0x1ac>
 800588c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005890:	fa5f fa8a 	uxtb.w	sl, sl
 8005894:	3901      	subs	r1, #1
 8005896:	4652      	mov	r2, sl
 8005898:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800589c:	9109      	str	r1, [sp, #36]	@ 0x24
 800589e:	f7ff ff26 	bl	80056ee <__exponent>
 80058a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058a4:	1813      	adds	r3, r2, r0
 80058a6:	2a01      	cmp	r2, #1
 80058a8:	4681      	mov	r9, r0
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	dc02      	bgt.n	80058b4 <_printf_float+0x150>
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	07d2      	lsls	r2, r2, #31
 80058b2:	d501      	bpl.n	80058b8 <_printf_float+0x154>
 80058b4:	3301      	adds	r3, #1
 80058b6:	6123      	str	r3, [r4, #16]
 80058b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0a2      	beq.n	8005806 <_printf_float+0xa2>
 80058c0:	232d      	movs	r3, #45	@ 0x2d
 80058c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058c6:	e79e      	b.n	8005806 <_printf_float+0xa2>
 80058c8:	9a06      	ldr	r2, [sp, #24]
 80058ca:	2a47      	cmp	r2, #71	@ 0x47
 80058cc:	d1c2      	bne.n	8005854 <_printf_float+0xf0>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1c0      	bne.n	8005854 <_printf_float+0xf0>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e7bd      	b.n	8005852 <_printf_float+0xee>
 80058d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058da:	d9db      	bls.n	8005894 <_printf_float+0x130>
 80058dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058e0:	d118      	bne.n	8005914 <_printf_float+0x1b0>
 80058e2:	2900      	cmp	r1, #0
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	dd0b      	ble.n	8005900 <_printf_float+0x19c>
 80058e8:	6121      	str	r1, [r4, #16]
 80058ea:	b913      	cbnz	r3, 80058f2 <_printf_float+0x18e>
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	07d0      	lsls	r0, r2, #31
 80058f0:	d502      	bpl.n	80058f8 <_printf_float+0x194>
 80058f2:	3301      	adds	r3, #1
 80058f4:	440b      	add	r3, r1
 80058f6:	6123      	str	r3, [r4, #16]
 80058f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058fa:	f04f 0900 	mov.w	r9, #0
 80058fe:	e7db      	b.n	80058b8 <_printf_float+0x154>
 8005900:	b913      	cbnz	r3, 8005908 <_printf_float+0x1a4>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	07d2      	lsls	r2, r2, #31
 8005906:	d501      	bpl.n	800590c <_printf_float+0x1a8>
 8005908:	3302      	adds	r3, #2
 800590a:	e7f4      	b.n	80058f6 <_printf_float+0x192>
 800590c:	2301      	movs	r3, #1
 800590e:	e7f2      	b.n	80058f6 <_printf_float+0x192>
 8005910:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005916:	4299      	cmp	r1, r3
 8005918:	db05      	blt.n	8005926 <_printf_float+0x1c2>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	6121      	str	r1, [r4, #16]
 800591e:	07d8      	lsls	r0, r3, #31
 8005920:	d5ea      	bpl.n	80058f8 <_printf_float+0x194>
 8005922:	1c4b      	adds	r3, r1, #1
 8005924:	e7e7      	b.n	80058f6 <_printf_float+0x192>
 8005926:	2900      	cmp	r1, #0
 8005928:	bfd4      	ite	le
 800592a:	f1c1 0202 	rsble	r2, r1, #2
 800592e:	2201      	movgt	r2, #1
 8005930:	4413      	add	r3, r2
 8005932:	e7e0      	b.n	80058f6 <_printf_float+0x192>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	055a      	lsls	r2, r3, #21
 8005938:	d407      	bmi.n	800594a <_printf_float+0x1e6>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	4642      	mov	r2, r8
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	d12b      	bne.n	80059a0 <_printf_float+0x23c>
 8005948:	e767      	b.n	800581a <_printf_float+0xb6>
 800594a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800594e:	f240 80dd 	bls.w	8005b0c <_printf_float+0x3a8>
 8005952:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005956:	2200      	movs	r2, #0
 8005958:	2300      	movs	r3, #0
 800595a:	f7fb f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800595e:	2800      	cmp	r0, #0
 8005960:	d033      	beq.n	80059ca <_printf_float+0x266>
 8005962:	4a37      	ldr	r2, [pc, #220]	@ (8005a40 <_printf_float+0x2dc>)
 8005964:	2301      	movs	r3, #1
 8005966:	4631      	mov	r1, r6
 8005968:	4628      	mov	r0, r5
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	f43f af54 	beq.w	800581a <_printf_float+0xb6>
 8005972:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005976:	4543      	cmp	r3, r8
 8005978:	db02      	blt.n	8005980 <_printf_float+0x21c>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	07d8      	lsls	r0, r3, #31
 800597e:	d50f      	bpl.n	80059a0 <_printf_float+0x23c>
 8005980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f af45 	beq.w	800581a <_printf_float+0xb6>
 8005990:	f04f 0900 	mov.w	r9, #0
 8005994:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005998:	f104 0a1a 	add.w	sl, r4, #26
 800599c:	45c8      	cmp	r8, r9
 800599e:	dc09      	bgt.n	80059b4 <_printf_float+0x250>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	079b      	lsls	r3, r3, #30
 80059a4:	f100 8103 	bmi.w	8005bae <_printf_float+0x44a>
 80059a8:	68e0      	ldr	r0, [r4, #12]
 80059aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059ac:	4298      	cmp	r0, r3
 80059ae:	bfb8      	it	lt
 80059b0:	4618      	movlt	r0, r3
 80059b2:	e734      	b.n	800581e <_printf_float+0xba>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4652      	mov	r2, sl
 80059b8:	4631      	mov	r1, r6
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b8      	blx	r7
 80059be:	3001      	adds	r0, #1
 80059c0:	f43f af2b 	beq.w	800581a <_printf_float+0xb6>
 80059c4:	f109 0901 	add.w	r9, r9, #1
 80059c8:	e7e8      	b.n	800599c <_printf_float+0x238>
 80059ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dc39      	bgt.n	8005a44 <_printf_float+0x2e0>
 80059d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a40 <_printf_float+0x2dc>)
 80059d2:	2301      	movs	r3, #1
 80059d4:	4631      	mov	r1, r6
 80059d6:	4628      	mov	r0, r5
 80059d8:	47b8      	blx	r7
 80059da:	3001      	adds	r0, #1
 80059dc:	f43f af1d 	beq.w	800581a <_printf_float+0xb6>
 80059e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80059e4:	ea59 0303 	orrs.w	r3, r9, r3
 80059e8:	d102      	bne.n	80059f0 <_printf_float+0x28c>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	07d9      	lsls	r1, r3, #31
 80059ee:	d5d7      	bpl.n	80059a0 <_printf_float+0x23c>
 80059f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af0d 	beq.w	800581a <_printf_float+0xb6>
 8005a00:	f04f 0a00 	mov.w	sl, #0
 8005a04:	f104 0b1a 	add.w	fp, r4, #26
 8005a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0a:	425b      	negs	r3, r3
 8005a0c:	4553      	cmp	r3, sl
 8005a0e:	dc01      	bgt.n	8005a14 <_printf_float+0x2b0>
 8005a10:	464b      	mov	r3, r9
 8005a12:	e793      	b.n	800593c <_printf_float+0x1d8>
 8005a14:	2301      	movs	r3, #1
 8005a16:	465a      	mov	r2, fp
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	f43f aefb 	beq.w	800581a <_printf_float+0xb6>
 8005a24:	f10a 0a01 	add.w	sl, sl, #1
 8005a28:	e7ee      	b.n	8005a08 <_printf_float+0x2a4>
 8005a2a:	bf00      	nop
 8005a2c:	7fefffff 	.word	0x7fefffff
 8005a30:	08009e44 	.word	0x08009e44
 8005a34:	08009e40 	.word	0x08009e40
 8005a38:	08009e4c 	.word	0x08009e4c
 8005a3c:	08009e48 	.word	0x08009e48
 8005a40:	08009e50 	.word	0x08009e50
 8005a44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a4a:	4553      	cmp	r3, sl
 8005a4c:	bfa8      	it	ge
 8005a4e:	4653      	movge	r3, sl
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	4699      	mov	r9, r3
 8005a54:	dc36      	bgt.n	8005ac4 <_printf_float+0x360>
 8005a56:	f04f 0b00 	mov.w	fp, #0
 8005a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a5e:	f104 021a 	add.w	r2, r4, #26
 8005a62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a64:	9306      	str	r3, [sp, #24]
 8005a66:	eba3 0309 	sub.w	r3, r3, r9
 8005a6a:	455b      	cmp	r3, fp
 8005a6c:	dc31      	bgt.n	8005ad2 <_printf_float+0x36e>
 8005a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a70:	459a      	cmp	sl, r3
 8005a72:	dc3a      	bgt.n	8005aea <_printf_float+0x386>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	07da      	lsls	r2, r3, #31
 8005a78:	d437      	bmi.n	8005aea <_printf_float+0x386>
 8005a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a7c:	ebaa 0903 	sub.w	r9, sl, r3
 8005a80:	9b06      	ldr	r3, [sp, #24]
 8005a82:	ebaa 0303 	sub.w	r3, sl, r3
 8005a86:	4599      	cmp	r9, r3
 8005a88:	bfa8      	it	ge
 8005a8a:	4699      	movge	r9, r3
 8005a8c:	f1b9 0f00 	cmp.w	r9, #0
 8005a90:	dc33      	bgt.n	8005afa <_printf_float+0x396>
 8005a92:	f04f 0800 	mov.w	r8, #0
 8005a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a9a:	f104 0b1a 	add.w	fp, r4, #26
 8005a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8005aa4:	eba3 0309 	sub.w	r3, r3, r9
 8005aa8:	4543      	cmp	r3, r8
 8005aaa:	f77f af79 	ble.w	80059a0 <_printf_float+0x23c>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	465a      	mov	r2, fp
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b8      	blx	r7
 8005ab8:	3001      	adds	r0, #1
 8005aba:	f43f aeae 	beq.w	800581a <_printf_float+0xb6>
 8005abe:	f108 0801 	add.w	r8, r8, #1
 8005ac2:	e7ec      	b.n	8005a9e <_printf_float+0x33a>
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	d1c2      	bne.n	8005a56 <_printf_float+0x2f2>
 8005ad0:	e6a3      	b.n	800581a <_printf_float+0xb6>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	9206      	str	r2, [sp, #24]
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f ae9c 	beq.w	800581a <_printf_float+0xb6>
 8005ae2:	9a06      	ldr	r2, [sp, #24]
 8005ae4:	f10b 0b01 	add.w	fp, fp, #1
 8005ae8:	e7bb      	b.n	8005a62 <_printf_float+0x2fe>
 8005aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	d1c0      	bne.n	8005a7a <_printf_float+0x316>
 8005af8:	e68f      	b.n	800581a <_printf_float+0xb6>
 8005afa:	9a06      	ldr	r2, [sp, #24]
 8005afc:	464b      	mov	r3, r9
 8005afe:	4442      	add	r2, r8
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	d1c3      	bne.n	8005a92 <_printf_float+0x32e>
 8005b0a:	e686      	b.n	800581a <_printf_float+0xb6>
 8005b0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b10:	f1ba 0f01 	cmp.w	sl, #1
 8005b14:	dc01      	bgt.n	8005b1a <_printf_float+0x3b6>
 8005b16:	07db      	lsls	r3, r3, #31
 8005b18:	d536      	bpl.n	8005b88 <_printf_float+0x424>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	f43f ae78 	beq.w	800581a <_printf_float+0xb6>
 8005b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f ae70 	beq.w	800581a <_printf_float+0xb6>
 8005b3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2300      	movs	r3, #0
 8005b42:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005b46:	f7fa ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4a:	b9c0      	cbnz	r0, 8005b7e <_printf_float+0x41a>
 8005b4c:	4653      	mov	r3, sl
 8005b4e:	f108 0201 	add.w	r2, r8, #1
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d10c      	bne.n	8005b76 <_printf_float+0x412>
 8005b5c:	e65d      	b.n	800581a <_printf_float+0xb6>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	465a      	mov	r2, fp
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b8      	blx	r7
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f ae56 	beq.w	800581a <_printf_float+0xb6>
 8005b6e:	f108 0801 	add.w	r8, r8, #1
 8005b72:	45d0      	cmp	r8, sl
 8005b74:	dbf3      	blt.n	8005b5e <_printf_float+0x3fa>
 8005b76:	464b      	mov	r3, r9
 8005b78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b7c:	e6df      	b.n	800593e <_printf_float+0x1da>
 8005b7e:	f04f 0800 	mov.w	r8, #0
 8005b82:	f104 0b1a 	add.w	fp, r4, #26
 8005b86:	e7f4      	b.n	8005b72 <_printf_float+0x40e>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	e7e1      	b.n	8005b52 <_printf_float+0x3ee>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	464a      	mov	r2, r9
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f ae3e 	beq.w	800581a <_printf_float+0xb6>
 8005b9e:	f108 0801 	add.w	r8, r8, #1
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ba6:	1a5b      	subs	r3, r3, r1
 8005ba8:	4543      	cmp	r3, r8
 8005baa:	dcf0      	bgt.n	8005b8e <_printf_float+0x42a>
 8005bac:	e6fc      	b.n	80059a8 <_printf_float+0x244>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	f104 0919 	add.w	r9, r4, #25
 8005bb6:	e7f4      	b.n	8005ba2 <_printf_float+0x43e>

08005bb8 <_printf_common>:
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	4616      	mov	r6, r2
 8005bbe:	4698      	mov	r8, r3
 8005bc0:	688a      	ldr	r2, [r1, #8]
 8005bc2:	690b      	ldr	r3, [r1, #16]
 8005bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	bfb8      	it	lt
 8005bcc:	4613      	movlt	r3, r2
 8005bce:	6033      	str	r3, [r6, #0]
 8005bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	b10a      	cbz	r2, 8005bde <_printf_common+0x26>
 8005bda:	3301      	adds	r3, #1
 8005bdc:	6033      	str	r3, [r6, #0]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	0699      	lsls	r1, r3, #26
 8005be2:	bf42      	ittt	mi
 8005be4:	6833      	ldrmi	r3, [r6, #0]
 8005be6:	3302      	addmi	r3, #2
 8005be8:	6033      	strmi	r3, [r6, #0]
 8005bea:	6825      	ldr	r5, [r4, #0]
 8005bec:	f015 0506 	ands.w	r5, r5, #6
 8005bf0:	d106      	bne.n	8005c00 <_printf_common+0x48>
 8005bf2:	f104 0a19 	add.w	sl, r4, #25
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	6832      	ldr	r2, [r6, #0]
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dc26      	bgt.n	8005c4e <_printf_common+0x96>
 8005c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	3b00      	subs	r3, #0
 8005c08:	bf18      	it	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	0692      	lsls	r2, r2, #26
 8005c0e:	d42b      	bmi.n	8005c68 <_printf_common+0xb0>
 8005c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c14:	4641      	mov	r1, r8
 8005c16:	4638      	mov	r0, r7
 8005c18:	47c8      	blx	r9
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d01e      	beq.n	8005c5c <_printf_common+0xa4>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	f003 0306 	and.w	r3, r3, #6
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	bf02      	ittt	eq
 8005c2a:	68e5      	ldreq	r5, [r4, #12]
 8005c2c:	6833      	ldreq	r3, [r6, #0]
 8005c2e:	1aed      	subeq	r5, r5, r3
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	bf0c      	ite	eq
 8005c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c38:	2500      	movne	r5, #0
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	bfc4      	itt	gt
 8005c3e:	1a9b      	subgt	r3, r3, r2
 8005c40:	18ed      	addgt	r5, r5, r3
 8005c42:	2600      	movs	r6, #0
 8005c44:	341a      	adds	r4, #26
 8005c46:	42b5      	cmp	r5, r6
 8005c48:	d11a      	bne.n	8005c80 <_printf_common+0xc8>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e008      	b.n	8005c60 <_printf_common+0xa8>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4652      	mov	r2, sl
 8005c52:	4641      	mov	r1, r8
 8005c54:	4638      	mov	r0, r7
 8005c56:	47c8      	blx	r9
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d103      	bne.n	8005c64 <_printf_common+0xac>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	3501      	adds	r5, #1
 8005c66:	e7c6      	b.n	8005bf6 <_printf_common+0x3e>
 8005c68:	18e1      	adds	r1, r4, r3
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	2030      	movs	r0, #48	@ 0x30
 8005c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c72:	4422      	add	r2, r4
 8005c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	e7c7      	b.n	8005c10 <_printf_common+0x58>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4622      	mov	r2, r4
 8005c84:	4641      	mov	r1, r8
 8005c86:	4638      	mov	r0, r7
 8005c88:	47c8      	blx	r9
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d0e6      	beq.n	8005c5c <_printf_common+0xa4>
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7d9      	b.n	8005c46 <_printf_common+0x8e>
	...

08005c94 <_printf_i>:
 8005c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	7e0f      	ldrb	r7, [r1, #24]
 8005c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c9c:	2f78      	cmp	r7, #120	@ 0x78
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005caa:	d807      	bhi.n	8005cbc <_printf_i+0x28>
 8005cac:	2f62      	cmp	r7, #98	@ 0x62
 8005cae:	d80a      	bhi.n	8005cc6 <_printf_i+0x32>
 8005cb0:	2f00      	cmp	r7, #0
 8005cb2:	f000 80d1 	beq.w	8005e58 <_printf_i+0x1c4>
 8005cb6:	2f58      	cmp	r7, #88	@ 0x58
 8005cb8:	f000 80b8 	beq.w	8005e2c <_printf_i+0x198>
 8005cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cc4:	e03a      	b.n	8005d3c <_printf_i+0xa8>
 8005cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cca:	2b15      	cmp	r3, #21
 8005ccc:	d8f6      	bhi.n	8005cbc <_printf_i+0x28>
 8005cce:	a101      	add	r1, pc, #4	@ (adr r1, 8005cd4 <_printf_i+0x40>)
 8005cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d41 	.word	0x08005d41
 8005cdc:	08005cbd 	.word	0x08005cbd
 8005ce0:	08005cbd 	.word	0x08005cbd
 8005ce4:	08005cbd 	.word	0x08005cbd
 8005ce8:	08005cbd 	.word	0x08005cbd
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005cbd 	.word	0x08005cbd
 8005cf4:	08005cbd 	.word	0x08005cbd
 8005cf8:	08005cbd 	.word	0x08005cbd
 8005cfc:	08005cbd 	.word	0x08005cbd
 8005d00:	08005e3f 	.word	0x08005e3f
 8005d04:	08005d6b 	.word	0x08005d6b
 8005d08:	08005df9 	.word	0x08005df9
 8005d0c:	08005cbd 	.word	0x08005cbd
 8005d10:	08005cbd 	.word	0x08005cbd
 8005d14:	08005e61 	.word	0x08005e61
 8005d18:	08005cbd 	.word	0x08005cbd
 8005d1c:	08005d6b 	.word	0x08005d6b
 8005d20:	08005cbd 	.word	0x08005cbd
 8005d24:	08005cbd 	.word	0x08005cbd
 8005d28:	08005e01 	.word	0x08005e01
 8005d2c:	6833      	ldr	r3, [r6, #0]
 8005d2e:	1d1a      	adds	r2, r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6032      	str	r2, [r6, #0]
 8005d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e09c      	b.n	8005e7a <_printf_i+0x1e6>
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	1d19      	adds	r1, r3, #4
 8005d46:	6031      	str	r1, [r6, #0]
 8005d48:	0606      	lsls	r6, r0, #24
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0xbc>
 8005d4c:	681d      	ldr	r5, [r3, #0]
 8005d4e:	e003      	b.n	8005d58 <_printf_i+0xc4>
 8005d50:	0645      	lsls	r5, r0, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0xb8>
 8005d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	da03      	bge.n	8005d64 <_printf_i+0xd0>
 8005d5c:	232d      	movs	r3, #45	@ 0x2d
 8005d5e:	426d      	negs	r5, r5
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d64:	4858      	ldr	r0, [pc, #352]	@ (8005ec8 <_printf_i+0x234>)
 8005d66:	230a      	movs	r3, #10
 8005d68:	e011      	b.n	8005d8e <_printf_i+0xfa>
 8005d6a:	6821      	ldr	r1, [r4, #0]
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	0608      	lsls	r0, r1, #24
 8005d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d74:	d402      	bmi.n	8005d7c <_printf_i+0xe8>
 8005d76:	0649      	lsls	r1, r1, #25
 8005d78:	bf48      	it	mi
 8005d7a:	b2ad      	uxthmi	r5, r5
 8005d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d7e:	4852      	ldr	r0, [pc, #328]	@ (8005ec8 <_printf_i+0x234>)
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	bf14      	ite	ne
 8005d84:	230a      	movne	r3, #10
 8005d86:	2308      	moveq	r3, #8
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d8e:	6866      	ldr	r6, [r4, #4]
 8005d90:	60a6      	str	r6, [r4, #8]
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	db05      	blt.n	8005da2 <_printf_i+0x10e>
 8005d96:	6821      	ldr	r1, [r4, #0]
 8005d98:	432e      	orrs	r6, r5
 8005d9a:	f021 0104 	bic.w	r1, r1, #4
 8005d9e:	6021      	str	r1, [r4, #0]
 8005da0:	d04b      	beq.n	8005e3a <_printf_i+0x1a6>
 8005da2:	4616      	mov	r6, r2
 8005da4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005da8:	fb03 5711 	mls	r7, r3, r1, r5
 8005dac:	5dc7      	ldrb	r7, [r0, r7]
 8005dae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005db2:	462f      	mov	r7, r5
 8005db4:	42bb      	cmp	r3, r7
 8005db6:	460d      	mov	r5, r1
 8005db8:	d9f4      	bls.n	8005da4 <_printf_i+0x110>
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d10b      	bne.n	8005dd6 <_printf_i+0x142>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	07df      	lsls	r7, r3, #31
 8005dc2:	d508      	bpl.n	8005dd6 <_printf_i+0x142>
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	6861      	ldr	r1, [r4, #4]
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	bfde      	ittt	le
 8005dcc:	2330      	movle	r3, #48	@ 0x30
 8005dce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dd2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005dd6:	1b92      	subs	r2, r2, r6
 8005dd8:	6122      	str	r2, [r4, #16]
 8005dda:	f8cd a000 	str.w	sl, [sp]
 8005dde:	464b      	mov	r3, r9
 8005de0:	aa03      	add	r2, sp, #12
 8005de2:	4621      	mov	r1, r4
 8005de4:	4640      	mov	r0, r8
 8005de6:	f7ff fee7 	bl	8005bb8 <_printf_common>
 8005dea:	3001      	adds	r0, #1
 8005dec:	d14a      	bne.n	8005e84 <_printf_i+0x1f0>
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005df2:	b004      	add	sp, #16
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	f043 0320 	orr.w	r3, r3, #32
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	4832      	ldr	r0, [pc, #200]	@ (8005ecc <_printf_i+0x238>)
 8005e02:	2778      	movs	r7, #120	@ 0x78
 8005e04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	6831      	ldr	r1, [r6, #0]
 8005e0c:	061f      	lsls	r7, r3, #24
 8005e0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e12:	d402      	bmi.n	8005e1a <_printf_i+0x186>
 8005e14:	065f      	lsls	r7, r3, #25
 8005e16:	bf48      	it	mi
 8005e18:	b2ad      	uxthmi	r5, r5
 8005e1a:	6031      	str	r1, [r6, #0]
 8005e1c:	07d9      	lsls	r1, r3, #31
 8005e1e:	bf44      	itt	mi
 8005e20:	f043 0320 	orrmi.w	r3, r3, #32
 8005e24:	6023      	strmi	r3, [r4, #0]
 8005e26:	b11d      	cbz	r5, 8005e30 <_printf_i+0x19c>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	e7ad      	b.n	8005d88 <_printf_i+0xf4>
 8005e2c:	4826      	ldr	r0, [pc, #152]	@ (8005ec8 <_printf_i+0x234>)
 8005e2e:	e7e9      	b.n	8005e04 <_printf_i+0x170>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	f023 0320 	bic.w	r3, r3, #32
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	e7f6      	b.n	8005e28 <_printf_i+0x194>
 8005e3a:	4616      	mov	r6, r2
 8005e3c:	e7bd      	b.n	8005dba <_printf_i+0x126>
 8005e3e:	6833      	ldr	r3, [r6, #0]
 8005e40:	6825      	ldr	r5, [r4, #0]
 8005e42:	6961      	ldr	r1, [r4, #20]
 8005e44:	1d18      	adds	r0, r3, #4
 8005e46:	6030      	str	r0, [r6, #0]
 8005e48:	062e      	lsls	r6, r5, #24
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	d501      	bpl.n	8005e52 <_printf_i+0x1be>
 8005e4e:	6019      	str	r1, [r3, #0]
 8005e50:	e002      	b.n	8005e58 <_printf_i+0x1c4>
 8005e52:	0668      	lsls	r0, r5, #25
 8005e54:	d5fb      	bpl.n	8005e4e <_printf_i+0x1ba>
 8005e56:	8019      	strh	r1, [r3, #0]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	e7bc      	b.n	8005dda <_printf_i+0x146>
 8005e60:	6833      	ldr	r3, [r6, #0]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	6032      	str	r2, [r6, #0]
 8005e66:	681e      	ldr	r6, [r3, #0]
 8005e68:	6862      	ldr	r2, [r4, #4]
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7fa f9af 	bl	80001d0 <memchr>
 8005e72:	b108      	cbz	r0, 8005e78 <_printf_i+0x1e4>
 8005e74:	1b80      	subs	r0, r0, r6
 8005e76:	6060      	str	r0, [r4, #4]
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e82:	e7aa      	b.n	8005dda <_printf_i+0x146>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	4632      	mov	r2, r6
 8005e88:	4649      	mov	r1, r9
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	47d0      	blx	sl
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d0ad      	beq.n	8005dee <_printf_i+0x15a>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	079b      	lsls	r3, r3, #30
 8005e96:	d413      	bmi.n	8005ec0 <_printf_i+0x22c>
 8005e98:	68e0      	ldr	r0, [r4, #12]
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	bfb8      	it	lt
 8005ea0:	4618      	movlt	r0, r3
 8005ea2:	e7a6      	b.n	8005df2 <_printf_i+0x15e>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4640      	mov	r0, r8
 8005eac:	47d0      	blx	sl
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d09d      	beq.n	8005dee <_printf_i+0x15a>
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	9903      	ldr	r1, [sp, #12]
 8005eb8:	1a5b      	subs	r3, r3, r1
 8005eba:	42ab      	cmp	r3, r5
 8005ebc:	dcf2      	bgt.n	8005ea4 <_printf_i+0x210>
 8005ebe:	e7eb      	b.n	8005e98 <_printf_i+0x204>
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	f104 0619 	add.w	r6, r4, #25
 8005ec6:	e7f5      	b.n	8005eb4 <_printf_i+0x220>
 8005ec8:	08009e52 	.word	0x08009e52
 8005ecc:	08009e63 	.word	0x08009e63

08005ed0 <_scanf_float>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	4691      	mov	r9, r2
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	688b      	ldr	r3, [r1, #8]
 8005edc:	1e5a      	subs	r2, r3, #1
 8005ede:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005ee2:	bf81      	itttt	hi
 8005ee4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005ee8:	eb03 0b05 	addhi.w	fp, r3, r5
 8005eec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005ef0:	608b      	strhi	r3, [r1, #8]
 8005ef2:	680b      	ldr	r3, [r1, #0]
 8005ef4:	460a      	mov	r2, r1
 8005ef6:	f04f 0500 	mov.w	r5, #0
 8005efa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005efe:	f842 3b1c 	str.w	r3, [r2], #28
 8005f02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f06:	4680      	mov	r8, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	bf98      	it	ls
 8005f0c:	f04f 0b00 	movls.w	fp, #0
 8005f10:	9201      	str	r2, [sp, #4]
 8005f12:	4616      	mov	r6, r2
 8005f14:	46aa      	mov	sl, r5
 8005f16:	462f      	mov	r7, r5
 8005f18:	9502      	str	r5, [sp, #8]
 8005f1a:	68a2      	ldr	r2, [r4, #8]
 8005f1c:	b15a      	cbz	r2, 8005f36 <_scanf_float+0x66>
 8005f1e:	f8d9 3000 	ldr.w	r3, [r9]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b4e      	cmp	r3, #78	@ 0x4e
 8005f26:	d863      	bhi.n	8005ff0 <_scanf_float+0x120>
 8005f28:	2b40      	cmp	r3, #64	@ 0x40
 8005f2a:	d83b      	bhi.n	8005fa4 <_scanf_float+0xd4>
 8005f2c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005f30:	b2c8      	uxtb	r0, r1
 8005f32:	280e      	cmp	r0, #14
 8005f34:	d939      	bls.n	8005faa <_scanf_float+0xda>
 8005f36:	b11f      	cbz	r7, 8005f40 <_scanf_float+0x70>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005f44:	f1ba 0f01 	cmp.w	sl, #1
 8005f48:	f200 8114 	bhi.w	8006174 <_scanf_float+0x2a4>
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	429e      	cmp	r6, r3
 8005f50:	f200 8105 	bhi.w	800615e <_scanf_float+0x28e>
 8005f54:	2001      	movs	r0, #1
 8005f56:	b007      	add	sp, #28
 8005f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005f60:	2a0d      	cmp	r2, #13
 8005f62:	d8e8      	bhi.n	8005f36 <_scanf_float+0x66>
 8005f64:	a101      	add	r1, pc, #4	@ (adr r1, 8005f6c <_scanf_float+0x9c>)
 8005f66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	080060b5 	.word	0x080060b5
 8005f70:	08005f37 	.word	0x08005f37
 8005f74:	08005f37 	.word	0x08005f37
 8005f78:	08005f37 	.word	0x08005f37
 8005f7c:	08006111 	.word	0x08006111
 8005f80:	080060eb 	.word	0x080060eb
 8005f84:	08005f37 	.word	0x08005f37
 8005f88:	08005f37 	.word	0x08005f37
 8005f8c:	080060c3 	.word	0x080060c3
 8005f90:	08005f37 	.word	0x08005f37
 8005f94:	08005f37 	.word	0x08005f37
 8005f98:	08005f37 	.word	0x08005f37
 8005f9c:	08005f37 	.word	0x08005f37
 8005fa0:	0800607f 	.word	0x0800607f
 8005fa4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005fa8:	e7da      	b.n	8005f60 <_scanf_float+0x90>
 8005faa:	290e      	cmp	r1, #14
 8005fac:	d8c3      	bhi.n	8005f36 <_scanf_float+0x66>
 8005fae:	a001      	add	r0, pc, #4	@ (adr r0, 8005fb4 <_scanf_float+0xe4>)
 8005fb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005fb4:	0800606f 	.word	0x0800606f
 8005fb8:	08005f37 	.word	0x08005f37
 8005fbc:	0800606f 	.word	0x0800606f
 8005fc0:	080060ff 	.word	0x080060ff
 8005fc4:	08005f37 	.word	0x08005f37
 8005fc8:	08006011 	.word	0x08006011
 8005fcc:	08006055 	.word	0x08006055
 8005fd0:	08006055 	.word	0x08006055
 8005fd4:	08006055 	.word	0x08006055
 8005fd8:	08006055 	.word	0x08006055
 8005fdc:	08006055 	.word	0x08006055
 8005fe0:	08006055 	.word	0x08006055
 8005fe4:	08006055 	.word	0x08006055
 8005fe8:	08006055 	.word	0x08006055
 8005fec:	08006055 	.word	0x08006055
 8005ff0:	2b6e      	cmp	r3, #110	@ 0x6e
 8005ff2:	d809      	bhi.n	8006008 <_scanf_float+0x138>
 8005ff4:	2b60      	cmp	r3, #96	@ 0x60
 8005ff6:	d8b1      	bhi.n	8005f5c <_scanf_float+0x8c>
 8005ff8:	2b54      	cmp	r3, #84	@ 0x54
 8005ffa:	d07b      	beq.n	80060f4 <_scanf_float+0x224>
 8005ffc:	2b59      	cmp	r3, #89	@ 0x59
 8005ffe:	d19a      	bne.n	8005f36 <_scanf_float+0x66>
 8006000:	2d07      	cmp	r5, #7
 8006002:	d198      	bne.n	8005f36 <_scanf_float+0x66>
 8006004:	2508      	movs	r5, #8
 8006006:	e02f      	b.n	8006068 <_scanf_float+0x198>
 8006008:	2b74      	cmp	r3, #116	@ 0x74
 800600a:	d073      	beq.n	80060f4 <_scanf_float+0x224>
 800600c:	2b79      	cmp	r3, #121	@ 0x79
 800600e:	e7f6      	b.n	8005ffe <_scanf_float+0x12e>
 8006010:	6821      	ldr	r1, [r4, #0]
 8006012:	05c8      	lsls	r0, r1, #23
 8006014:	d51e      	bpl.n	8006054 <_scanf_float+0x184>
 8006016:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800601a:	6021      	str	r1, [r4, #0]
 800601c:	3701      	adds	r7, #1
 800601e:	f1bb 0f00 	cmp.w	fp, #0
 8006022:	d003      	beq.n	800602c <_scanf_float+0x15c>
 8006024:	3201      	adds	r2, #1
 8006026:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800602a:	60a2      	str	r2, [r4, #8]
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	3b01      	subs	r3, #1
 8006030:	60a3      	str	r3, [r4, #8]
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800603c:	3b01      	subs	r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	f8c9 3004 	str.w	r3, [r9, #4]
 8006044:	f340 8082 	ble.w	800614c <_scanf_float+0x27c>
 8006048:	f8d9 3000 	ldr.w	r3, [r9]
 800604c:	3301      	adds	r3, #1
 800604e:	f8c9 3000 	str.w	r3, [r9]
 8006052:	e762      	b.n	8005f1a <_scanf_float+0x4a>
 8006054:	eb1a 0105 	adds.w	r1, sl, r5
 8006058:	f47f af6d 	bne.w	8005f36 <_scanf_float+0x66>
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	460d      	mov	r5, r1
 8006066:	468a      	mov	sl, r1
 8006068:	f806 3b01 	strb.w	r3, [r6], #1
 800606c:	e7de      	b.n	800602c <_scanf_float+0x15c>
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	0610      	lsls	r0, r2, #24
 8006072:	f57f af60 	bpl.w	8005f36 <_scanf_float+0x66>
 8006076:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800607a:	6022      	str	r2, [r4, #0]
 800607c:	e7f4      	b.n	8006068 <_scanf_float+0x198>
 800607e:	f1ba 0f00 	cmp.w	sl, #0
 8006082:	d10c      	bne.n	800609e <_scanf_float+0x1ce>
 8006084:	b977      	cbnz	r7, 80060a4 <_scanf_float+0x1d4>
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800608c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006090:	d108      	bne.n	80060a4 <_scanf_float+0x1d4>
 8006092:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006096:	6022      	str	r2, [r4, #0]
 8006098:	f04f 0a01 	mov.w	sl, #1
 800609c:	e7e4      	b.n	8006068 <_scanf_float+0x198>
 800609e:	f1ba 0f02 	cmp.w	sl, #2
 80060a2:	d050      	beq.n	8006146 <_scanf_float+0x276>
 80060a4:	2d01      	cmp	r5, #1
 80060a6:	d002      	beq.n	80060ae <_scanf_float+0x1de>
 80060a8:	2d04      	cmp	r5, #4
 80060aa:	f47f af44 	bne.w	8005f36 <_scanf_float+0x66>
 80060ae:	3501      	adds	r5, #1
 80060b0:	b2ed      	uxtb	r5, r5
 80060b2:	e7d9      	b.n	8006068 <_scanf_float+0x198>
 80060b4:	f1ba 0f01 	cmp.w	sl, #1
 80060b8:	f47f af3d 	bne.w	8005f36 <_scanf_float+0x66>
 80060bc:	f04f 0a02 	mov.w	sl, #2
 80060c0:	e7d2      	b.n	8006068 <_scanf_float+0x198>
 80060c2:	b975      	cbnz	r5, 80060e2 <_scanf_float+0x212>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f47f af37 	bne.w	8005f38 <_scanf_float+0x68>
 80060ca:	6822      	ldr	r2, [r4, #0]
 80060cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80060d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80060d4:	f040 8103 	bne.w	80062de <_scanf_float+0x40e>
 80060d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80060dc:	6022      	str	r2, [r4, #0]
 80060de:	2501      	movs	r5, #1
 80060e0:	e7c2      	b.n	8006068 <_scanf_float+0x198>
 80060e2:	2d03      	cmp	r5, #3
 80060e4:	d0e3      	beq.n	80060ae <_scanf_float+0x1de>
 80060e6:	2d05      	cmp	r5, #5
 80060e8:	e7df      	b.n	80060aa <_scanf_float+0x1da>
 80060ea:	2d02      	cmp	r5, #2
 80060ec:	f47f af23 	bne.w	8005f36 <_scanf_float+0x66>
 80060f0:	2503      	movs	r5, #3
 80060f2:	e7b9      	b.n	8006068 <_scanf_float+0x198>
 80060f4:	2d06      	cmp	r5, #6
 80060f6:	f47f af1e 	bne.w	8005f36 <_scanf_float+0x66>
 80060fa:	2507      	movs	r5, #7
 80060fc:	e7b4      	b.n	8006068 <_scanf_float+0x198>
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	0591      	lsls	r1, r2, #22
 8006102:	f57f af18 	bpl.w	8005f36 <_scanf_float+0x66>
 8006106:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	9702      	str	r7, [sp, #8]
 800610e:	e7ab      	b.n	8006068 <_scanf_float+0x198>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006116:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800611a:	d005      	beq.n	8006128 <_scanf_float+0x258>
 800611c:	0550      	lsls	r0, r2, #21
 800611e:	f57f af0a 	bpl.w	8005f36 <_scanf_float+0x66>
 8006122:	2f00      	cmp	r7, #0
 8006124:	f000 80db 	beq.w	80062de <_scanf_float+0x40e>
 8006128:	0591      	lsls	r1, r2, #22
 800612a:	bf58      	it	pl
 800612c:	9902      	ldrpl	r1, [sp, #8]
 800612e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006132:	bf58      	it	pl
 8006134:	1a79      	subpl	r1, r7, r1
 8006136:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800613a:	bf58      	it	pl
 800613c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006140:	6022      	str	r2, [r4, #0]
 8006142:	2700      	movs	r7, #0
 8006144:	e790      	b.n	8006068 <_scanf_float+0x198>
 8006146:	f04f 0a03 	mov.w	sl, #3
 800614a:	e78d      	b.n	8006068 <_scanf_float+0x198>
 800614c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006150:	4649      	mov	r1, r9
 8006152:	4640      	mov	r0, r8
 8006154:	4798      	blx	r3
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f aedf 	beq.w	8005f1a <_scanf_float+0x4a>
 800615c:	e6eb      	b.n	8005f36 <_scanf_float+0x66>
 800615e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006166:	464a      	mov	r2, r9
 8006168:	4640      	mov	r0, r8
 800616a:	4798      	blx	r3
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	3b01      	subs	r3, #1
 8006170:	6123      	str	r3, [r4, #16]
 8006172:	e6eb      	b.n	8005f4c <_scanf_float+0x7c>
 8006174:	1e6b      	subs	r3, r5, #1
 8006176:	2b06      	cmp	r3, #6
 8006178:	d824      	bhi.n	80061c4 <_scanf_float+0x2f4>
 800617a:	2d02      	cmp	r5, #2
 800617c:	d836      	bhi.n	80061ec <_scanf_float+0x31c>
 800617e:	9b01      	ldr	r3, [sp, #4]
 8006180:	429e      	cmp	r6, r3
 8006182:	f67f aee7 	bls.w	8005f54 <_scanf_float+0x84>
 8006186:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800618a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800618e:	464a      	mov	r2, r9
 8006190:	4640      	mov	r0, r8
 8006192:	4798      	blx	r3
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	3b01      	subs	r3, #1
 8006198:	6123      	str	r3, [r4, #16]
 800619a:	e7f0      	b.n	800617e <_scanf_float+0x2ae>
 800619c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80061a4:	464a      	mov	r2, r9
 80061a6:	4640      	mov	r0, r8
 80061a8:	4798      	blx	r3
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80061b4:	fa5f fa8a 	uxtb.w	sl, sl
 80061b8:	f1ba 0f02 	cmp.w	sl, #2
 80061bc:	d1ee      	bne.n	800619c <_scanf_float+0x2cc>
 80061be:	3d03      	subs	r5, #3
 80061c0:	b2ed      	uxtb	r5, r5
 80061c2:	1b76      	subs	r6, r6, r5
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	05da      	lsls	r2, r3, #23
 80061c8:	d530      	bpl.n	800622c <_scanf_float+0x35c>
 80061ca:	055b      	lsls	r3, r3, #21
 80061cc:	d511      	bpl.n	80061f2 <_scanf_float+0x322>
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	429e      	cmp	r6, r3
 80061d2:	f67f aebf 	bls.w	8005f54 <_scanf_float+0x84>
 80061d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061de:	464a      	mov	r2, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	4798      	blx	r3
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	e7f0      	b.n	80061ce <_scanf_float+0x2fe>
 80061ec:	46aa      	mov	sl, r5
 80061ee:	46b3      	mov	fp, r6
 80061f0:	e7de      	b.n	80061b0 <_scanf_float+0x2e0>
 80061f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	2965      	cmp	r1, #101	@ 0x65
 80061fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80061fe:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	d00c      	beq.n	8006220 <_scanf_float+0x350>
 8006206:	2945      	cmp	r1, #69	@ 0x45
 8006208:	d00a      	beq.n	8006220 <_scanf_float+0x350>
 800620a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800620e:	464a      	mov	r2, r9
 8006210:	4640      	mov	r0, r8
 8006212:	4798      	blx	r3
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800621a:	3b01      	subs	r3, #1
 800621c:	1eb5      	subs	r5, r6, #2
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006224:	464a      	mov	r2, r9
 8006226:	4640      	mov	r0, r8
 8006228:	4798      	blx	r3
 800622a:	462e      	mov	r6, r5
 800622c:	6822      	ldr	r2, [r4, #0]
 800622e:	f012 0210 	ands.w	r2, r2, #16
 8006232:	d001      	beq.n	8006238 <_scanf_float+0x368>
 8006234:	2000      	movs	r0, #0
 8006236:	e68e      	b.n	8005f56 <_scanf_float+0x86>
 8006238:	7032      	strb	r2, [r6, #0]
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	d125      	bne.n	8006292 <_scanf_float+0x3c2>
 8006246:	9b02      	ldr	r3, [sp, #8]
 8006248:	429f      	cmp	r7, r3
 800624a:	d00a      	beq.n	8006262 <_scanf_float+0x392>
 800624c:	1bda      	subs	r2, r3, r7
 800624e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006252:	429e      	cmp	r6, r3
 8006254:	bf28      	it	cs
 8006256:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800625a:	4922      	ldr	r1, [pc, #136]	@ (80062e4 <_scanf_float+0x414>)
 800625c:	4630      	mov	r0, r6
 800625e:	f000 f907 	bl	8006470 <siprintf>
 8006262:	9901      	ldr	r1, [sp, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	4640      	mov	r0, r8
 8006268:	f002 fc5e 	bl	8008b28 <_strtod_r>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f011 0f02 	tst.w	r1, #2
 8006276:	ec57 6b10 	vmov	r6, r7, d0
 800627a:	f103 0204 	add.w	r2, r3, #4
 800627e:	d015      	beq.n	80062ac <_scanf_float+0x3dc>
 8006280:	9903      	ldr	r1, [sp, #12]
 8006282:	600a      	str	r2, [r1, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	e9c3 6700 	strd	r6, r7, [r3]
 800628a:	68e3      	ldr	r3, [r4, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60e3      	str	r3, [r4, #12]
 8006290:	e7d0      	b.n	8006234 <_scanf_float+0x364>
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0e4      	beq.n	8006262 <_scanf_float+0x392>
 8006298:	9905      	ldr	r1, [sp, #20]
 800629a:	230a      	movs	r3, #10
 800629c:	3101      	adds	r1, #1
 800629e:	4640      	mov	r0, r8
 80062a0:	f002 fcc2 	bl	8008c28 <_strtol_r>
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	9e05      	ldr	r6, [sp, #20]
 80062a8:	1ac2      	subs	r2, r0, r3
 80062aa:	e7d0      	b.n	800624e <_scanf_float+0x37e>
 80062ac:	f011 0f04 	tst.w	r1, #4
 80062b0:	9903      	ldr	r1, [sp, #12]
 80062b2:	600a      	str	r2, [r1, #0]
 80062b4:	d1e6      	bne.n	8006284 <_scanf_float+0x3b4>
 80062b6:	681d      	ldr	r5, [r3, #0]
 80062b8:	4632      	mov	r2, r6
 80062ba:	463b      	mov	r3, r7
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f7fa fc34 	bl	8000b2c <__aeabi_dcmpun>
 80062c4:	b128      	cbz	r0, 80062d2 <_scanf_float+0x402>
 80062c6:	4808      	ldr	r0, [pc, #32]	@ (80062e8 <_scanf_float+0x418>)
 80062c8:	f000 fa24 	bl	8006714 <nanf>
 80062cc:	ed85 0a00 	vstr	s0, [r5]
 80062d0:	e7db      	b.n	800628a <_scanf_float+0x3ba>
 80062d2:	4630      	mov	r0, r6
 80062d4:	4639      	mov	r1, r7
 80062d6:	f7fa fc87 	bl	8000be8 <__aeabi_d2f>
 80062da:	6028      	str	r0, [r5, #0]
 80062dc:	e7d5      	b.n	800628a <_scanf_float+0x3ba>
 80062de:	2700      	movs	r7, #0
 80062e0:	e62e      	b.n	8005f40 <_scanf_float+0x70>
 80062e2:	bf00      	nop
 80062e4:	08009e74 	.word	0x08009e74
 80062e8:	08009fb5 	.word	0x08009fb5

080062ec <std>:
 80062ec:	2300      	movs	r3, #0
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	e9c0 3300 	strd	r3, r3, [r0]
 80062f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062fa:	6083      	str	r3, [r0, #8]
 80062fc:	8181      	strh	r1, [r0, #12]
 80062fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006300:	81c2      	strh	r2, [r0, #14]
 8006302:	6183      	str	r3, [r0, #24]
 8006304:	4619      	mov	r1, r3
 8006306:	2208      	movs	r2, #8
 8006308:	305c      	adds	r0, #92	@ 0x5c
 800630a:	f000 f916 	bl	800653a <memset>
 800630e:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <std+0x58>)
 8006310:	6263      	str	r3, [r4, #36]	@ 0x24
 8006312:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <std+0x5c>)
 8006314:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <std+0x60>)
 8006318:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800631a:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <std+0x64>)
 800631c:	6323      	str	r3, [r4, #48]	@ 0x30
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <std+0x68>)
 8006320:	6224      	str	r4, [r4, #32]
 8006322:	429c      	cmp	r4, r3
 8006324:	d006      	beq.n	8006334 <std+0x48>
 8006326:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800632a:	4294      	cmp	r4, r2
 800632c:	d002      	beq.n	8006334 <std+0x48>
 800632e:	33d0      	adds	r3, #208	@ 0xd0
 8006330:	429c      	cmp	r4, r3
 8006332:	d105      	bne.n	8006340 <std+0x54>
 8006334:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f000 b9d8 	b.w	80066f0 <__retarget_lock_init_recursive>
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	080064b5 	.word	0x080064b5
 8006348:	080064d7 	.word	0x080064d7
 800634c:	0800650f 	.word	0x0800650f
 8006350:	08006533 	.word	0x08006533
 8006354:	200042d8 	.word	0x200042d8

08006358 <stdio_exit_handler>:
 8006358:	4a02      	ldr	r2, [pc, #8]	@ (8006364 <stdio_exit_handler+0xc>)
 800635a:	4903      	ldr	r1, [pc, #12]	@ (8006368 <stdio_exit_handler+0x10>)
 800635c:	4803      	ldr	r0, [pc, #12]	@ (800636c <stdio_exit_handler+0x14>)
 800635e:	f000 b869 	b.w	8006434 <_fwalk_sglue>
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010
 8006368:	08008fe5 	.word	0x08008fe5
 800636c:	20000020 	.word	0x20000020

08006370 <cleanup_stdio>:
 8006370:	6841      	ldr	r1, [r0, #4]
 8006372:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <cleanup_stdio+0x34>)
 8006374:	4299      	cmp	r1, r3
 8006376:	b510      	push	{r4, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	d001      	beq.n	8006380 <cleanup_stdio+0x10>
 800637c:	f002 fe32 	bl	8008fe4 <_fflush_r>
 8006380:	68a1      	ldr	r1, [r4, #8]
 8006382:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <cleanup_stdio+0x38>)
 8006384:	4299      	cmp	r1, r3
 8006386:	d002      	beq.n	800638e <cleanup_stdio+0x1e>
 8006388:	4620      	mov	r0, r4
 800638a:	f002 fe2b 	bl	8008fe4 <_fflush_r>
 800638e:	68e1      	ldr	r1, [r4, #12]
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <cleanup_stdio+0x3c>)
 8006392:	4299      	cmp	r1, r3
 8006394:	d004      	beq.n	80063a0 <cleanup_stdio+0x30>
 8006396:	4620      	mov	r0, r4
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f002 be22 	b.w	8008fe4 <_fflush_r>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	200042d8 	.word	0x200042d8
 80063a8:	20004340 	.word	0x20004340
 80063ac:	200043a8 	.word	0x200043a8

080063b0 <global_stdio_init.part.0>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4b0b      	ldr	r3, [pc, #44]	@ (80063e0 <global_stdio_init.part.0+0x30>)
 80063b4:	4c0b      	ldr	r4, [pc, #44]	@ (80063e4 <global_stdio_init.part.0+0x34>)
 80063b6:	4a0c      	ldr	r2, [pc, #48]	@ (80063e8 <global_stdio_init.part.0+0x38>)
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	2200      	movs	r2, #0
 80063be:	2104      	movs	r1, #4
 80063c0:	f7ff ff94 	bl	80062ec <std>
 80063c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063c8:	2201      	movs	r2, #1
 80063ca:	2109      	movs	r1, #9
 80063cc:	f7ff ff8e 	bl	80062ec <std>
 80063d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063d4:	2202      	movs	r2, #2
 80063d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063da:	2112      	movs	r1, #18
 80063dc:	f7ff bf86 	b.w	80062ec <std>
 80063e0:	20004410 	.word	0x20004410
 80063e4:	200042d8 	.word	0x200042d8
 80063e8:	08006359 	.word	0x08006359

080063ec <__sfp_lock_acquire>:
 80063ec:	4801      	ldr	r0, [pc, #4]	@ (80063f4 <__sfp_lock_acquire+0x8>)
 80063ee:	f000 b980 	b.w	80066f2 <__retarget_lock_acquire_recursive>
 80063f2:	bf00      	nop
 80063f4:	20004419 	.word	0x20004419

080063f8 <__sfp_lock_release>:
 80063f8:	4801      	ldr	r0, [pc, #4]	@ (8006400 <__sfp_lock_release+0x8>)
 80063fa:	f000 b97b 	b.w	80066f4 <__retarget_lock_release_recursive>
 80063fe:	bf00      	nop
 8006400:	20004419 	.word	0x20004419

08006404 <__sinit>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4604      	mov	r4, r0
 8006408:	f7ff fff0 	bl	80063ec <__sfp_lock_acquire>
 800640c:	6a23      	ldr	r3, [r4, #32]
 800640e:	b11b      	cbz	r3, 8006418 <__sinit+0x14>
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f7ff bff0 	b.w	80063f8 <__sfp_lock_release>
 8006418:	4b04      	ldr	r3, [pc, #16]	@ (800642c <__sinit+0x28>)
 800641a:	6223      	str	r3, [r4, #32]
 800641c:	4b04      	ldr	r3, [pc, #16]	@ (8006430 <__sinit+0x2c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f5      	bne.n	8006410 <__sinit+0xc>
 8006424:	f7ff ffc4 	bl	80063b0 <global_stdio_init.part.0>
 8006428:	e7f2      	b.n	8006410 <__sinit+0xc>
 800642a:	bf00      	nop
 800642c:	08006371 	.word	0x08006371
 8006430:	20004410 	.word	0x20004410

08006434 <_fwalk_sglue>:
 8006434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006438:	4607      	mov	r7, r0
 800643a:	4688      	mov	r8, r1
 800643c:	4614      	mov	r4, r2
 800643e:	2600      	movs	r6, #0
 8006440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006444:	f1b9 0901 	subs.w	r9, r9, #1
 8006448:	d505      	bpl.n	8006456 <_fwalk_sglue+0x22>
 800644a:	6824      	ldr	r4, [r4, #0]
 800644c:	2c00      	cmp	r4, #0
 800644e:	d1f7      	bne.n	8006440 <_fwalk_sglue+0xc>
 8006450:	4630      	mov	r0, r6
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d907      	bls.n	800646c <_fwalk_sglue+0x38>
 800645c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006460:	3301      	adds	r3, #1
 8006462:	d003      	beq.n	800646c <_fwalk_sglue+0x38>
 8006464:	4629      	mov	r1, r5
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	4306      	orrs	r6, r0
 800646c:	3568      	adds	r5, #104	@ 0x68
 800646e:	e7e9      	b.n	8006444 <_fwalk_sglue+0x10>

08006470 <siprintf>:
 8006470:	b40e      	push	{r1, r2, r3}
 8006472:	b510      	push	{r4, lr}
 8006474:	b09d      	sub	sp, #116	@ 0x74
 8006476:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006478:	9002      	str	r0, [sp, #8]
 800647a:	9006      	str	r0, [sp, #24]
 800647c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006480:	480a      	ldr	r0, [pc, #40]	@ (80064ac <siprintf+0x3c>)
 8006482:	9107      	str	r1, [sp, #28]
 8006484:	9104      	str	r1, [sp, #16]
 8006486:	490a      	ldr	r1, [pc, #40]	@ (80064b0 <siprintf+0x40>)
 8006488:	f853 2b04 	ldr.w	r2, [r3], #4
 800648c:	9105      	str	r1, [sp, #20]
 800648e:	2400      	movs	r4, #0
 8006490:	a902      	add	r1, sp, #8
 8006492:	6800      	ldr	r0, [r0, #0]
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006498:	f002 fc24 	bl	8008ce4 <_svfiprintf_r>
 800649c:	9b02      	ldr	r3, [sp, #8]
 800649e:	701c      	strb	r4, [r3, #0]
 80064a0:	b01d      	add	sp, #116	@ 0x74
 80064a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a6:	b003      	add	sp, #12
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	2000001c 	.word	0x2000001c
 80064b0:	ffff0208 	.word	0xffff0208

080064b4 <__sread>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	460c      	mov	r4, r1
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	f000 f8ca 	bl	8006654 <_read_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	bfab      	itete	ge
 80064c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064c6:	89a3      	ldrhlt	r3, [r4, #12]
 80064c8:	181b      	addge	r3, r3, r0
 80064ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064ce:	bfac      	ite	ge
 80064d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064d2:	81a3      	strhlt	r3, [r4, #12]
 80064d4:	bd10      	pop	{r4, pc}

080064d6 <__swrite>:
 80064d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	461f      	mov	r7, r3
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	05db      	lsls	r3, r3, #23
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	4616      	mov	r6, r2
 80064e6:	d505      	bpl.n	80064f4 <__swrite+0x1e>
 80064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ec:	2302      	movs	r3, #2
 80064ee:	2200      	movs	r2, #0
 80064f0:	f000 f89e 	bl	8006630 <_lseek_r>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	4632      	mov	r2, r6
 8006502:	463b      	mov	r3, r7
 8006504:	4628      	mov	r0, r5
 8006506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650a:	f000 b8b5 	b.w	8006678 <_write_r>

0800650e <__sseek>:
 800650e:	b510      	push	{r4, lr}
 8006510:	460c      	mov	r4, r1
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 f88b 	bl	8006630 <_lseek_r>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	bf15      	itete	ne
 8006520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800652a:	81a3      	strheq	r3, [r4, #12]
 800652c:	bf18      	it	ne
 800652e:	81a3      	strhne	r3, [r4, #12]
 8006530:	bd10      	pop	{r4, pc}

08006532 <__sclose>:
 8006532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006536:	f000 b80d 	b.w	8006554 <_close_r>

0800653a <memset>:
 800653a:	4402      	add	r2, r0
 800653c:	4603      	mov	r3, r0
 800653e:	4293      	cmp	r3, r2
 8006540:	d100      	bne.n	8006544 <memset+0xa>
 8006542:	4770      	bx	lr
 8006544:	f803 1b01 	strb.w	r1, [r3], #1
 8006548:	e7f9      	b.n	800653e <memset+0x4>
	...

0800654c <_localeconv_r>:
 800654c:	4800      	ldr	r0, [pc, #0]	@ (8006550 <_localeconv_r+0x4>)
 800654e:	4770      	bx	lr
 8006550:	2000015c 	.word	0x2000015c

08006554 <_close_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	@ (8006570 <_close_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fb f94a 	bl	80017f8 <_close>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_close_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_close_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20004414 	.word	0x20004414

08006574 <_reclaim_reent>:
 8006574:	4b2d      	ldr	r3, [pc, #180]	@ (800662c <_reclaim_reent+0xb8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4283      	cmp	r3, r0
 800657a:	b570      	push	{r4, r5, r6, lr}
 800657c:	4604      	mov	r4, r0
 800657e:	d053      	beq.n	8006628 <_reclaim_reent+0xb4>
 8006580:	69c3      	ldr	r3, [r0, #28]
 8006582:	b31b      	cbz	r3, 80065cc <_reclaim_reent+0x58>
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	b163      	cbz	r3, 80065a2 <_reclaim_reent+0x2e>
 8006588:	2500      	movs	r5, #0
 800658a:	69e3      	ldr	r3, [r4, #28]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	5959      	ldr	r1, [r3, r5]
 8006590:	b9b1      	cbnz	r1, 80065c0 <_reclaim_reent+0x4c>
 8006592:	3504      	adds	r5, #4
 8006594:	2d80      	cmp	r5, #128	@ 0x80
 8006596:	d1f8      	bne.n	800658a <_reclaim_reent+0x16>
 8006598:	69e3      	ldr	r3, [r4, #28]
 800659a:	4620      	mov	r0, r4
 800659c:	68d9      	ldr	r1, [r3, #12]
 800659e:	f000 ff17 	bl	80073d0 <_free_r>
 80065a2:	69e3      	ldr	r3, [r4, #28]
 80065a4:	6819      	ldr	r1, [r3, #0]
 80065a6:	b111      	cbz	r1, 80065ae <_reclaim_reent+0x3a>
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 ff11 	bl	80073d0 <_free_r>
 80065ae:	69e3      	ldr	r3, [r4, #28]
 80065b0:	689d      	ldr	r5, [r3, #8]
 80065b2:	b15d      	cbz	r5, 80065cc <_reclaim_reent+0x58>
 80065b4:	4629      	mov	r1, r5
 80065b6:	4620      	mov	r0, r4
 80065b8:	682d      	ldr	r5, [r5, #0]
 80065ba:	f000 ff09 	bl	80073d0 <_free_r>
 80065be:	e7f8      	b.n	80065b2 <_reclaim_reent+0x3e>
 80065c0:	680e      	ldr	r6, [r1, #0]
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 ff04 	bl	80073d0 <_free_r>
 80065c8:	4631      	mov	r1, r6
 80065ca:	e7e1      	b.n	8006590 <_reclaim_reent+0x1c>
 80065cc:	6961      	ldr	r1, [r4, #20]
 80065ce:	b111      	cbz	r1, 80065d6 <_reclaim_reent+0x62>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fefd 	bl	80073d0 <_free_r>
 80065d6:	69e1      	ldr	r1, [r4, #28]
 80065d8:	b111      	cbz	r1, 80065e0 <_reclaim_reent+0x6c>
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 fef8 	bl	80073d0 <_free_r>
 80065e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065e2:	b111      	cbz	r1, 80065ea <_reclaim_reent+0x76>
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fef3 	bl	80073d0 <_free_r>
 80065ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065ec:	b111      	cbz	r1, 80065f4 <_reclaim_reent+0x80>
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 feee 	bl	80073d0 <_free_r>
 80065f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80065f6:	b111      	cbz	r1, 80065fe <_reclaim_reent+0x8a>
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fee9 	bl	80073d0 <_free_r>
 80065fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006600:	b111      	cbz	r1, 8006608 <_reclaim_reent+0x94>
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fee4 	bl	80073d0 <_free_r>
 8006608:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800660a:	b111      	cbz	r1, 8006612 <_reclaim_reent+0x9e>
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fedf 	bl	80073d0 <_free_r>
 8006612:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006614:	b111      	cbz	r1, 800661c <_reclaim_reent+0xa8>
 8006616:	4620      	mov	r0, r4
 8006618:	f000 feda 	bl	80073d0 <_free_r>
 800661c:	6a23      	ldr	r3, [r4, #32]
 800661e:	b11b      	cbz	r3, 8006628 <_reclaim_reent+0xb4>
 8006620:	4620      	mov	r0, r4
 8006622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006626:	4718      	bx	r3
 8006628:	bd70      	pop	{r4, r5, r6, pc}
 800662a:	bf00      	nop
 800662c:	2000001c 	.word	0x2000001c

08006630 <_lseek_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	@ (8006650 <_lseek_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fb f901 	bl	8001846 <_lseek>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_lseek_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_lseek_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20004414 	.word	0x20004414

08006654 <_read_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	@ (8006674 <_read_r+0x20>)
 8006658:	4604      	mov	r4, r0
 800665a:	4608      	mov	r0, r1
 800665c:	4611      	mov	r1, r2
 800665e:	2200      	movs	r2, #0
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f7fb f88f 	bl	8001786 <_read>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_read_r+0x1e>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_read_r+0x1e>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	20004414 	.word	0x20004414

08006678 <_write_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d07      	ldr	r5, [pc, #28]	@ (8006698 <_write_r+0x20>)
 800667c:	4604      	mov	r4, r0
 800667e:	4608      	mov	r0, r1
 8006680:	4611      	mov	r1, r2
 8006682:	2200      	movs	r2, #0
 8006684:	602a      	str	r2, [r5, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	f7fb f89a 	bl	80017c0 <_write>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_write_r+0x1e>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	b103      	cbz	r3, 8006696 <_write_r+0x1e>
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	20004414 	.word	0x20004414

0800669c <__errno>:
 800669c:	4b01      	ldr	r3, [pc, #4]	@ (80066a4 <__errno+0x8>)
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000001c 	.word	0x2000001c

080066a8 <__libc_init_array>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4d0d      	ldr	r5, [pc, #52]	@ (80066e0 <__libc_init_array+0x38>)
 80066ac:	4c0d      	ldr	r4, [pc, #52]	@ (80066e4 <__libc_init_array+0x3c>)
 80066ae:	1b64      	subs	r4, r4, r5
 80066b0:	10a4      	asrs	r4, r4, #2
 80066b2:	2600      	movs	r6, #0
 80066b4:	42a6      	cmp	r6, r4
 80066b6:	d109      	bne.n	80066cc <__libc_init_array+0x24>
 80066b8:	4d0b      	ldr	r5, [pc, #44]	@ (80066e8 <__libc_init_array+0x40>)
 80066ba:	4c0c      	ldr	r4, [pc, #48]	@ (80066ec <__libc_init_array+0x44>)
 80066bc:	f003 fb76 	bl	8009dac <_init>
 80066c0:	1b64      	subs	r4, r4, r5
 80066c2:	10a4      	asrs	r4, r4, #2
 80066c4:	2600      	movs	r6, #0
 80066c6:	42a6      	cmp	r6, r4
 80066c8:	d105      	bne.n	80066d6 <__libc_init_array+0x2e>
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d0:	4798      	blx	r3
 80066d2:	3601      	adds	r6, #1
 80066d4:	e7ee      	b.n	80066b4 <__libc_init_array+0xc>
 80066d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066da:	4798      	blx	r3
 80066dc:	3601      	adds	r6, #1
 80066de:	e7f2      	b.n	80066c6 <__libc_init_array+0x1e>
 80066e0:	0800a274 	.word	0x0800a274
 80066e4:	0800a274 	.word	0x0800a274
 80066e8:	0800a274 	.word	0x0800a274
 80066ec:	0800a278 	.word	0x0800a278

080066f0 <__retarget_lock_init_recursive>:
 80066f0:	4770      	bx	lr

080066f2 <__retarget_lock_acquire_recursive>:
 80066f2:	4770      	bx	lr

080066f4 <__retarget_lock_release_recursive>:
 80066f4:	4770      	bx	lr

080066f6 <memcpy>:
 80066f6:	440a      	add	r2, r1
 80066f8:	4291      	cmp	r1, r2
 80066fa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80066fe:	d100      	bne.n	8006702 <memcpy+0xc>
 8006700:	4770      	bx	lr
 8006702:	b510      	push	{r4, lr}
 8006704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800670c:	4291      	cmp	r1, r2
 800670e:	d1f9      	bne.n	8006704 <memcpy+0xe>
 8006710:	bd10      	pop	{r4, pc}
	...

08006714 <nanf>:
 8006714:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800671c <nanf+0x8>
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	7fc00000 	.word	0x7fc00000

08006720 <quorem>:
 8006720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	6903      	ldr	r3, [r0, #16]
 8006726:	690c      	ldr	r4, [r1, #16]
 8006728:	42a3      	cmp	r3, r4
 800672a:	4607      	mov	r7, r0
 800672c:	db7e      	blt.n	800682c <quorem+0x10c>
 800672e:	3c01      	subs	r4, #1
 8006730:	f101 0814 	add.w	r8, r1, #20
 8006734:	00a3      	lsls	r3, r4, #2
 8006736:	f100 0514 	add.w	r5, r0, #20
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800674a:	3301      	adds	r3, #1
 800674c:	429a      	cmp	r2, r3
 800674e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006752:	fbb2 f6f3 	udiv	r6, r2, r3
 8006756:	d32e      	bcc.n	80067b6 <quorem+0x96>
 8006758:	f04f 0a00 	mov.w	sl, #0
 800675c:	46c4      	mov	ip, r8
 800675e:	46ae      	mov	lr, r5
 8006760:	46d3      	mov	fp, sl
 8006762:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006766:	b298      	uxth	r0, r3
 8006768:	fb06 a000 	mla	r0, r6, r0, sl
 800676c:	0c02      	lsrs	r2, r0, #16
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	fb06 2303 	mla	r3, r6, r3, r2
 8006774:	f8de 2000 	ldr.w	r2, [lr]
 8006778:	b280      	uxth	r0, r0
 800677a:	b292      	uxth	r2, r2
 800677c:	1a12      	subs	r2, r2, r0
 800677e:	445a      	add	r2, fp
 8006780:	f8de 0000 	ldr.w	r0, [lr]
 8006784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006788:	b29b      	uxth	r3, r3
 800678a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800678e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006792:	b292      	uxth	r2, r2
 8006794:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006798:	45e1      	cmp	r9, ip
 800679a:	f84e 2b04 	str.w	r2, [lr], #4
 800679e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067a2:	d2de      	bcs.n	8006762 <quorem+0x42>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	58eb      	ldr	r3, [r5, r3]
 80067a8:	b92b      	cbnz	r3, 80067b6 <quorem+0x96>
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	3b04      	subs	r3, #4
 80067ae:	429d      	cmp	r5, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	d32f      	bcc.n	8006814 <quorem+0xf4>
 80067b4:	613c      	str	r4, [r7, #16]
 80067b6:	4638      	mov	r0, r7
 80067b8:	f001 f9c6 	bl	8007b48 <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	db25      	blt.n	800680c <quorem+0xec>
 80067c0:	4629      	mov	r1, r5
 80067c2:	2000      	movs	r0, #0
 80067c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c8:	f8d1 c000 	ldr.w	ip, [r1]
 80067cc:	fa1f fe82 	uxth.w	lr, r2
 80067d0:	fa1f f38c 	uxth.w	r3, ip
 80067d4:	eba3 030e 	sub.w	r3, r3, lr
 80067d8:	4403      	add	r3, r0
 80067da:	0c12      	lsrs	r2, r2, #16
 80067dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067ea:	45c1      	cmp	r9, r8
 80067ec:	f841 3b04 	str.w	r3, [r1], #4
 80067f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067f4:	d2e6      	bcs.n	80067c4 <quorem+0xa4>
 80067f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067fe:	b922      	cbnz	r2, 800680a <quorem+0xea>
 8006800:	3b04      	subs	r3, #4
 8006802:	429d      	cmp	r5, r3
 8006804:	461a      	mov	r2, r3
 8006806:	d30b      	bcc.n	8006820 <quorem+0x100>
 8006808:	613c      	str	r4, [r7, #16]
 800680a:	3601      	adds	r6, #1
 800680c:	4630      	mov	r0, r6
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	3b04      	subs	r3, #4
 8006818:	2a00      	cmp	r2, #0
 800681a:	d1cb      	bne.n	80067b4 <quorem+0x94>
 800681c:	3c01      	subs	r4, #1
 800681e:	e7c6      	b.n	80067ae <quorem+0x8e>
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	3b04      	subs	r3, #4
 8006824:	2a00      	cmp	r2, #0
 8006826:	d1ef      	bne.n	8006808 <quorem+0xe8>
 8006828:	3c01      	subs	r4, #1
 800682a:	e7ea      	b.n	8006802 <quorem+0xe2>
 800682c:	2000      	movs	r0, #0
 800682e:	e7ee      	b.n	800680e <quorem+0xee>

08006830 <_dtoa_r>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	69c7      	ldr	r7, [r0, #28]
 8006836:	b097      	sub	sp, #92	@ 0x5c
 8006838:	ed8d 0b04 	vstr	d0, [sp, #16]
 800683c:	ec55 4b10 	vmov	r4, r5, d0
 8006840:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	4681      	mov	r9, r0
 8006846:	920c      	str	r2, [sp, #48]	@ 0x30
 8006848:	9311      	str	r3, [sp, #68]	@ 0x44
 800684a:	b97f      	cbnz	r7, 800686c <_dtoa_r+0x3c>
 800684c:	2010      	movs	r0, #16
 800684e:	f000 fe09 	bl	8007464 <malloc>
 8006852:	4602      	mov	r2, r0
 8006854:	f8c9 001c 	str.w	r0, [r9, #28]
 8006858:	b920      	cbnz	r0, 8006864 <_dtoa_r+0x34>
 800685a:	4ba9      	ldr	r3, [pc, #676]	@ (8006b00 <_dtoa_r+0x2d0>)
 800685c:	21ef      	movs	r1, #239	@ 0xef
 800685e:	48a9      	ldr	r0, [pc, #676]	@ (8006b04 <_dtoa_r+0x2d4>)
 8006860:	f002 fc2e 	bl	80090c0 <__assert_func>
 8006864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006868:	6007      	str	r7, [r0, #0]
 800686a:	60c7      	str	r7, [r0, #12]
 800686c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006870:	6819      	ldr	r1, [r3, #0]
 8006872:	b159      	cbz	r1, 800688c <_dtoa_r+0x5c>
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	604a      	str	r2, [r1, #4]
 8006878:	2301      	movs	r3, #1
 800687a:	4093      	lsls	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
 800687e:	4648      	mov	r0, r9
 8006880:	f000 fee6 	bl	8007650 <_Bfree>
 8006884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	1e2b      	subs	r3, r5, #0
 800688e:	bfb9      	ittee	lt
 8006890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006894:	9305      	strlt	r3, [sp, #20]
 8006896:	2300      	movge	r3, #0
 8006898:	6033      	strge	r3, [r6, #0]
 800689a:	9f05      	ldr	r7, [sp, #20]
 800689c:	4b9a      	ldr	r3, [pc, #616]	@ (8006b08 <_dtoa_r+0x2d8>)
 800689e:	bfbc      	itt	lt
 80068a0:	2201      	movlt	r2, #1
 80068a2:	6032      	strlt	r2, [r6, #0]
 80068a4:	43bb      	bics	r3, r7
 80068a6:	d112      	bne.n	80068ce <_dtoa_r+0x9e>
 80068a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068b4:	4323      	orrs	r3, r4
 80068b6:	f000 855a 	beq.w	800736e <_dtoa_r+0xb3e>
 80068ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006b1c <_dtoa_r+0x2ec>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 855c 	beq.w	800737e <_dtoa_r+0xb4e>
 80068c6:	f10a 0303 	add.w	r3, sl, #3
 80068ca:	f000 bd56 	b.w	800737a <_dtoa_r+0xb4a>
 80068ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80068d2:	2200      	movs	r2, #0
 80068d4:	ec51 0b17 	vmov	r0, r1, d7
 80068d8:	2300      	movs	r3, #0
 80068da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80068de:	f7fa f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80068e2:	4680      	mov	r8, r0
 80068e4:	b158      	cbz	r0, 80068fe <_dtoa_r+0xce>
 80068e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80068e8:	2301      	movs	r3, #1
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068ee:	b113      	cbz	r3, 80068f6 <_dtoa_r+0xc6>
 80068f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80068f2:	4b86      	ldr	r3, [pc, #536]	@ (8006b0c <_dtoa_r+0x2dc>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006b20 <_dtoa_r+0x2f0>
 80068fa:	f000 bd40 	b.w	800737e <_dtoa_r+0xb4e>
 80068fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006902:	aa14      	add	r2, sp, #80	@ 0x50
 8006904:	a915      	add	r1, sp, #84	@ 0x54
 8006906:	4648      	mov	r0, r9
 8006908:	f001 fa3e 	bl	8007d88 <__d2b>
 800690c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006910:	9002      	str	r0, [sp, #8]
 8006912:	2e00      	cmp	r6, #0
 8006914:	d078      	beq.n	8006a08 <_dtoa_r+0x1d8>
 8006916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006918:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800691c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800692c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006930:	4619      	mov	r1, r3
 8006932:	2200      	movs	r2, #0
 8006934:	4b76      	ldr	r3, [pc, #472]	@ (8006b10 <_dtoa_r+0x2e0>)
 8006936:	f7f9 fca7 	bl	8000288 <__aeabi_dsub>
 800693a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ae8 <_dtoa_r+0x2b8>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fe5a 	bl	80005f8 <__aeabi_dmul>
 8006944:	a36a      	add	r3, pc, #424	@ (adr r3, 8006af0 <_dtoa_r+0x2c0>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f7f9 fc9f 	bl	800028c <__adddf3>
 800694e:	4604      	mov	r4, r0
 8006950:	4630      	mov	r0, r6
 8006952:	460d      	mov	r5, r1
 8006954:	f7f9 fde6 	bl	8000524 <__aeabi_i2d>
 8006958:	a367      	add	r3, pc, #412	@ (adr r3, 8006af8 <_dtoa_r+0x2c8>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fe4b 	bl	80005f8 <__aeabi_dmul>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 fc8f 	bl	800028c <__adddf3>
 800696e:	4604      	mov	r4, r0
 8006970:	460d      	mov	r5, r1
 8006972:	f7fa f8f1 	bl	8000b58 <__aeabi_d2iz>
 8006976:	2200      	movs	r2, #0
 8006978:	4607      	mov	r7, r0
 800697a:	2300      	movs	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f8ac 	bl	8000adc <__aeabi_dcmplt>
 8006984:	b140      	cbz	r0, 8006998 <_dtoa_r+0x168>
 8006986:	4638      	mov	r0, r7
 8006988:	f7f9 fdcc 	bl	8000524 <__aeabi_i2d>
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	f7fa f89a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006994:	b900      	cbnz	r0, 8006998 <_dtoa_r+0x168>
 8006996:	3f01      	subs	r7, #1
 8006998:	2f16      	cmp	r7, #22
 800699a:	d852      	bhi.n	8006a42 <_dtoa_r+0x212>
 800699c:	4b5d      	ldr	r3, [pc, #372]	@ (8006b14 <_dtoa_r+0x2e4>)
 800699e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069aa:	f7fa f897 	bl	8000adc <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d049      	beq.n	8006a46 <_dtoa_r+0x216>
 80069b2:	3f01      	subs	r7, #1
 80069b4:	2300      	movs	r3, #0
 80069b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80069b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069ba:	1b9b      	subs	r3, r3, r6
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	bf45      	ittet	mi
 80069c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80069c4:	9300      	strmi	r3, [sp, #0]
 80069c6:	2300      	movpl	r3, #0
 80069c8:	2300      	movmi	r3, #0
 80069ca:	9206      	str	r2, [sp, #24]
 80069cc:	bf54      	ite	pl
 80069ce:	9300      	strpl	r3, [sp, #0]
 80069d0:	9306      	strmi	r3, [sp, #24]
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	db39      	blt.n	8006a4a <_dtoa_r+0x21a>
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80069da:	443b      	add	r3, r7
 80069dc:	9306      	str	r3, [sp, #24]
 80069de:	2300      	movs	r3, #0
 80069e0:	9308      	str	r3, [sp, #32]
 80069e2:	9b07      	ldr	r3, [sp, #28]
 80069e4:	2b09      	cmp	r3, #9
 80069e6:	d863      	bhi.n	8006ab0 <_dtoa_r+0x280>
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	bfc4      	itt	gt
 80069ec:	3b04      	subgt	r3, #4
 80069ee:	9307      	strgt	r3, [sp, #28]
 80069f0:	9b07      	ldr	r3, [sp, #28]
 80069f2:	f1a3 0302 	sub.w	r3, r3, #2
 80069f6:	bfcc      	ite	gt
 80069f8:	2400      	movgt	r4, #0
 80069fa:	2401      	movle	r4, #1
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d863      	bhi.n	8006ac8 <_dtoa_r+0x298>
 8006a00:	e8df f003 	tbb	[pc, r3]
 8006a04:	2b375452 	.word	0x2b375452
 8006a08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006a0c:	441e      	add	r6, r3
 8006a0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	bfc1      	itttt	gt
 8006a16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a1a:	409f      	lslgt	r7, r3
 8006a1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a24:	bfd6      	itet	le
 8006a26:	f1c3 0320 	rsble	r3, r3, #32
 8006a2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a2e:	fa04 f003 	lslle.w	r0, r4, r3
 8006a32:	f7f9 fd67 	bl	8000504 <__aeabi_ui2d>
 8006a36:	2201      	movs	r2, #1
 8006a38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a3c:	3e01      	subs	r6, #1
 8006a3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006a40:	e776      	b.n	8006930 <_dtoa_r+0x100>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e7b7      	b.n	80069b6 <_dtoa_r+0x186>
 8006a46:	9010      	str	r0, [sp, #64]	@ 0x40
 8006a48:	e7b6      	b.n	80069b8 <_dtoa_r+0x188>
 8006a4a:	9b00      	ldr	r3, [sp, #0]
 8006a4c:	1bdb      	subs	r3, r3, r7
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	427b      	negs	r3, r7
 8006a52:	9308      	str	r3, [sp, #32]
 8006a54:	2300      	movs	r3, #0
 8006a56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a58:	e7c3      	b.n	80069e2 <_dtoa_r+0x1b2>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a60:	eb07 0b03 	add.w	fp, r7, r3
 8006a64:	f10b 0301 	add.w	r3, fp, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	bfb8      	it	lt
 8006a6e:	2301      	movlt	r3, #1
 8006a70:	e006      	b.n	8006a80 <_dtoa_r+0x250>
 8006a72:	2301      	movs	r3, #1
 8006a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dd28      	ble.n	8006ace <_dtoa_r+0x29e>
 8006a7c:	469b      	mov	fp, r3
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006a84:	2100      	movs	r1, #0
 8006a86:	2204      	movs	r2, #4
 8006a88:	f102 0514 	add.w	r5, r2, #20
 8006a8c:	429d      	cmp	r5, r3
 8006a8e:	d926      	bls.n	8006ade <_dtoa_r+0x2ae>
 8006a90:	6041      	str	r1, [r0, #4]
 8006a92:	4648      	mov	r0, r9
 8006a94:	f000 fd9c 	bl	80075d0 <_Balloc>
 8006a98:	4682      	mov	sl, r0
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d142      	bne.n	8006b24 <_dtoa_r+0x2f4>
 8006a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b18 <_dtoa_r+0x2e8>)
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006aa6:	e6da      	b.n	800685e <_dtoa_r+0x2e>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e7e3      	b.n	8006a74 <_dtoa_r+0x244>
 8006aac:	2300      	movs	r3, #0
 8006aae:	e7d5      	b.n	8006a5c <_dtoa_r+0x22c>
 8006ab0:	2401      	movs	r4, #1
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9307      	str	r3, [sp, #28]
 8006ab6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006ab8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ac2:	2312      	movs	r3, #18
 8006ac4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ac6:	e7db      	b.n	8006a80 <_dtoa_r+0x250>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006acc:	e7f4      	b.n	8006ab8 <_dtoa_r+0x288>
 8006ace:	f04f 0b01 	mov.w	fp, #1
 8006ad2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006adc:	e7d0      	b.n	8006a80 <_dtoa_r+0x250>
 8006ade:	3101      	adds	r1, #1
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	e7d1      	b.n	8006a88 <_dtoa_r+0x258>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	636f4361 	.word	0x636f4361
 8006aec:	3fd287a7 	.word	0x3fd287a7
 8006af0:	8b60c8b3 	.word	0x8b60c8b3
 8006af4:	3fc68a28 	.word	0x3fc68a28
 8006af8:	509f79fb 	.word	0x509f79fb
 8006afc:	3fd34413 	.word	0x3fd34413
 8006b00:	08009e86 	.word	0x08009e86
 8006b04:	08009e9d 	.word	0x08009e9d
 8006b08:	7ff00000 	.word	0x7ff00000
 8006b0c:	08009e51 	.word	0x08009e51
 8006b10:	3ff80000 	.word	0x3ff80000
 8006b14:	0800a050 	.word	0x0800a050
 8006b18:	08009ef5 	.word	0x08009ef5
 8006b1c:	08009e82 	.word	0x08009e82
 8006b20:	08009e50 	.word	0x08009e50
 8006b24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b28:	6018      	str	r0, [r3, #0]
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	2b0e      	cmp	r3, #14
 8006b2e:	f200 80a1 	bhi.w	8006c74 <_dtoa_r+0x444>
 8006b32:	2c00      	cmp	r4, #0
 8006b34:	f000 809e 	beq.w	8006c74 <_dtoa_r+0x444>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	dd33      	ble.n	8006ba4 <_dtoa_r+0x374>
 8006b3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006db0 <_dtoa_r+0x580>)
 8006b3e:	f007 020f 	and.w	r2, r7, #15
 8006b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b46:	ed93 7b00 	vldr	d7, [r3]
 8006b4a:	05f8      	lsls	r0, r7, #23
 8006b4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b54:	d516      	bpl.n	8006b84 <_dtoa_r+0x354>
 8006b56:	4b97      	ldr	r3, [pc, #604]	@ (8006db4 <_dtoa_r+0x584>)
 8006b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b60:	f7f9 fe74 	bl	800084c <__aeabi_ddiv>
 8006b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b68:	f004 040f 	and.w	r4, r4, #15
 8006b6c:	2603      	movs	r6, #3
 8006b6e:	4d91      	ldr	r5, [pc, #580]	@ (8006db4 <_dtoa_r+0x584>)
 8006b70:	b954      	cbnz	r4, 8006b88 <_dtoa_r+0x358>
 8006b72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b7a:	f7f9 fe67 	bl	800084c <__aeabi_ddiv>
 8006b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b82:	e028      	b.n	8006bd6 <_dtoa_r+0x3a6>
 8006b84:	2602      	movs	r6, #2
 8006b86:	e7f2      	b.n	8006b6e <_dtoa_r+0x33e>
 8006b88:	07e1      	lsls	r1, r4, #31
 8006b8a:	d508      	bpl.n	8006b9e <_dtoa_r+0x36e>
 8006b8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b94:	f7f9 fd30 	bl	80005f8 <__aeabi_dmul>
 8006b98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	1064      	asrs	r4, r4, #1
 8006ba0:	3508      	adds	r5, #8
 8006ba2:	e7e5      	b.n	8006b70 <_dtoa_r+0x340>
 8006ba4:	f000 80af 	beq.w	8006d06 <_dtoa_r+0x4d6>
 8006ba8:	427c      	negs	r4, r7
 8006baa:	4b81      	ldr	r3, [pc, #516]	@ (8006db0 <_dtoa_r+0x580>)
 8006bac:	4d81      	ldr	r5, [pc, #516]	@ (8006db4 <_dtoa_r+0x584>)
 8006bae:	f004 020f 	and.w	r2, r4, #15
 8006bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bbe:	f7f9 fd1b 	bl	80005f8 <__aeabi_dmul>
 8006bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc6:	1124      	asrs	r4, r4, #4
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2602      	movs	r6, #2
 8006bcc:	2c00      	cmp	r4, #0
 8006bce:	f040 808f 	bne.w	8006cf0 <_dtoa_r+0x4c0>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1d3      	bne.n	8006b7e <_dtoa_r+0x34e>
 8006bd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8094 	beq.w	8006d0a <_dtoa_r+0x4da>
 8006be2:	4b75      	ldr	r3, [pc, #468]	@ (8006db8 <_dtoa_r+0x588>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 ff77 	bl	8000adc <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f000 808b 	beq.w	8006d0a <_dtoa_r+0x4da>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8087 	beq.w	8006d0a <_dtoa_r+0x4da>
 8006bfc:	f1bb 0f00 	cmp.w	fp, #0
 8006c00:	dd34      	ble.n	8006c6c <_dtoa_r+0x43c>
 8006c02:	4620      	mov	r0, r4
 8006c04:	4b6d      	ldr	r3, [pc, #436]	@ (8006dbc <_dtoa_r+0x58c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 fcf5 	bl	80005f8 <__aeabi_dmul>
 8006c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c12:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006c16:	3601      	adds	r6, #1
 8006c18:	465c      	mov	r4, fp
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7f9 fc82 	bl	8000524 <__aeabi_i2d>
 8006c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c24:	f7f9 fce8 	bl	80005f8 <__aeabi_dmul>
 8006c28:	4b65      	ldr	r3, [pc, #404]	@ (8006dc0 <_dtoa_r+0x590>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f7f9 fb2e 	bl	800028c <__adddf3>
 8006c30:	4605      	mov	r5, r0
 8006c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c36:	2c00      	cmp	r4, #0
 8006c38:	d16a      	bne.n	8006d10 <_dtoa_r+0x4e0>
 8006c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3e:	4b61      	ldr	r3, [pc, #388]	@ (8006dc4 <_dtoa_r+0x594>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	f7f9 fb21 	bl	8000288 <__aeabi_dsub>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c4e:	462a      	mov	r2, r5
 8006c50:	4633      	mov	r3, r6
 8006c52:	f7f9 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f040 8298 	bne.w	800718c <_dtoa_r+0x95c>
 8006c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c60:	462a      	mov	r2, r5
 8006c62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c66:	f7f9 ff39 	bl	8000adc <__aeabi_dcmplt>
 8006c6a:	bb38      	cbnz	r0, 8006cbc <_dtoa_r+0x48c>
 8006c6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006c70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f2c0 8157 	blt.w	8006f2a <_dtoa_r+0x6fa>
 8006c7c:	2f0e      	cmp	r7, #14
 8006c7e:	f300 8154 	bgt.w	8006f2a <_dtoa_r+0x6fa>
 8006c82:	4b4b      	ldr	r3, [pc, #300]	@ (8006db0 <_dtoa_r+0x580>)
 8006c84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c88:	ed93 7b00 	vldr	d7, [r3]
 8006c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	ed8d 7b00 	vstr	d7, [sp]
 8006c94:	f280 80e5 	bge.w	8006e62 <_dtoa_r+0x632>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f300 80e1 	bgt.w	8006e62 <_dtoa_r+0x632>
 8006ca0:	d10c      	bne.n	8006cbc <_dtoa_r+0x48c>
 8006ca2:	4b48      	ldr	r3, [pc, #288]	@ (8006dc4 <_dtoa_r+0x594>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	ec51 0b17 	vmov	r0, r1, d7
 8006caa:	f7f9 fca5 	bl	80005f8 <__aeabi_dmul>
 8006cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cb2:	f7f9 ff27 	bl	8000b04 <__aeabi_dcmpge>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f000 8266 	beq.w	8007188 <_dtoa_r+0x958>
 8006cbc:	2400      	movs	r4, #0
 8006cbe:	4625      	mov	r5, r4
 8006cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cc2:	4656      	mov	r6, sl
 8006cc4:	ea6f 0803 	mvn.w	r8, r3
 8006cc8:	2700      	movs	r7, #0
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4648      	mov	r0, r9
 8006cce:	f000 fcbf 	bl	8007650 <_Bfree>
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	f000 80bd 	beq.w	8006e52 <_dtoa_r+0x622>
 8006cd8:	b12f      	cbz	r7, 8006ce6 <_dtoa_r+0x4b6>
 8006cda:	42af      	cmp	r7, r5
 8006cdc:	d003      	beq.n	8006ce6 <_dtoa_r+0x4b6>
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4648      	mov	r0, r9
 8006ce2:	f000 fcb5 	bl	8007650 <_Bfree>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4648      	mov	r0, r9
 8006cea:	f000 fcb1 	bl	8007650 <_Bfree>
 8006cee:	e0b0      	b.n	8006e52 <_dtoa_r+0x622>
 8006cf0:	07e2      	lsls	r2, r4, #31
 8006cf2:	d505      	bpl.n	8006d00 <_dtoa_r+0x4d0>
 8006cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cf8:	f7f9 fc7e 	bl	80005f8 <__aeabi_dmul>
 8006cfc:	3601      	adds	r6, #1
 8006cfe:	2301      	movs	r3, #1
 8006d00:	1064      	asrs	r4, r4, #1
 8006d02:	3508      	adds	r5, #8
 8006d04:	e762      	b.n	8006bcc <_dtoa_r+0x39c>
 8006d06:	2602      	movs	r6, #2
 8006d08:	e765      	b.n	8006bd6 <_dtoa_r+0x3a6>
 8006d0a:	9c03      	ldr	r4, [sp, #12]
 8006d0c:	46b8      	mov	r8, r7
 8006d0e:	e784      	b.n	8006c1a <_dtoa_r+0x3ea>
 8006d10:	4b27      	ldr	r3, [pc, #156]	@ (8006db0 <_dtoa_r+0x580>)
 8006d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d1c:	4454      	add	r4, sl
 8006d1e:	2900      	cmp	r1, #0
 8006d20:	d054      	beq.n	8006dcc <_dtoa_r+0x59c>
 8006d22:	4929      	ldr	r1, [pc, #164]	@ (8006dc8 <_dtoa_r+0x598>)
 8006d24:	2000      	movs	r0, #0
 8006d26:	f7f9 fd91 	bl	800084c <__aeabi_ddiv>
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d36:	4656      	mov	r6, sl
 8006d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d3c:	f7f9 ff0c 	bl	8000b58 <__aeabi_d2iz>
 8006d40:	4605      	mov	r5, r0
 8006d42:	f7f9 fbef 	bl	8000524 <__aeabi_i2d>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d4e:	f7f9 fa9b 	bl	8000288 <__aeabi_dsub>
 8006d52:	3530      	adds	r5, #48	@ 0x30
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d64:	f7f9 feba 	bl	8000adc <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d172      	bne.n	8006e52 <_dtoa_r+0x622>
 8006d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d70:	4911      	ldr	r1, [pc, #68]	@ (8006db8 <_dtoa_r+0x588>)
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7f9 fa88 	bl	8000288 <__aeabi_dsub>
 8006d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d7c:	f7f9 feae 	bl	8000adc <__aeabi_dcmplt>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f040 80b4 	bne.w	8006eee <_dtoa_r+0x6be>
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	f43f af70 	beq.w	8006c6c <_dtoa_r+0x43c>
 8006d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d90:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <_dtoa_r+0x58c>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <_dtoa_r+0x58c>)
 8006d9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d9e:	2200      	movs	r2, #0
 8006da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dac:	e7c4      	b.n	8006d38 <_dtoa_r+0x508>
 8006dae:	bf00      	nop
 8006db0:	0800a050 	.word	0x0800a050
 8006db4:	0800a028 	.word	0x0800a028
 8006db8:	3ff00000 	.word	0x3ff00000
 8006dbc:	40240000 	.word	0x40240000
 8006dc0:	401c0000 	.word	0x401c0000
 8006dc4:	40140000 	.word	0x40140000
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006dd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006dda:	4656      	mov	r6, sl
 8006ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006de0:	f7f9 feba 	bl	8000b58 <__aeabi_d2iz>
 8006de4:	4605      	mov	r5, r0
 8006de6:	f7f9 fb9d 	bl	8000524 <__aeabi_i2d>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df2:	f7f9 fa49 	bl	8000288 <__aeabi_dsub>
 8006df6:	3530      	adds	r5, #48	@ 0x30
 8006df8:	f806 5b01 	strb.w	r5, [r6], #1
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	d124      	bne.n	8006e56 <_dtoa_r+0x626>
 8006e0c:	4baf      	ldr	r3, [pc, #700]	@ (80070cc <_dtoa_r+0x89c>)
 8006e0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e12:	f7f9 fa3b 	bl	800028c <__adddf3>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e1e:	f7f9 fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d163      	bne.n	8006eee <_dtoa_r+0x6be>
 8006e26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e2a:	49a8      	ldr	r1, [pc, #672]	@ (80070cc <_dtoa_r+0x89c>)
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3a:	f7f9 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f43f af14 	beq.w	8006c6c <_dtoa_r+0x43c>
 8006e44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006e46:	1e73      	subs	r3, r6, #1
 8006e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e4e:	2b30      	cmp	r3, #48	@ 0x30
 8006e50:	d0f8      	beq.n	8006e44 <_dtoa_r+0x614>
 8006e52:	4647      	mov	r7, r8
 8006e54:	e03b      	b.n	8006ece <_dtoa_r+0x69e>
 8006e56:	4b9e      	ldr	r3, [pc, #632]	@ (80070d0 <_dtoa_r+0x8a0>)
 8006e58:	f7f9 fbce 	bl	80005f8 <__aeabi_dmul>
 8006e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e60:	e7bc      	b.n	8006ddc <_dtoa_r+0x5ac>
 8006e62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006e66:	4656      	mov	r6, sl
 8006e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fcec 	bl	800084c <__aeabi_ddiv>
 8006e74:	f7f9 fe70 	bl	8000b58 <__aeabi_d2iz>
 8006e78:	4680      	mov	r8, r0
 8006e7a:	f7f9 fb53 	bl	8000524 <__aeabi_i2d>
 8006e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e82:	f7f9 fbb9 	bl	80005f8 <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e92:	f7f9 f9f9 	bl	8000288 <__aeabi_dsub>
 8006e96:	f806 4b01 	strb.w	r4, [r6], #1
 8006e9a:	9d03      	ldr	r5, [sp, #12]
 8006e9c:	eba6 040a 	sub.w	r4, r6, sl
 8006ea0:	42a5      	cmp	r5, r4
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	d133      	bne.n	8006f10 <_dtoa_r+0x6e0>
 8006ea8:	f7f9 f9f0 	bl	800028c <__adddf3>
 8006eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	f7f9 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 8006eb8:	b9c0      	cbnz	r0, 8006eec <_dtoa_r+0x6bc>
 8006eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ec6:	b110      	cbz	r0, 8006ece <_dtoa_r+0x69e>
 8006ec8:	f018 0f01 	tst.w	r8, #1
 8006ecc:	d10e      	bne.n	8006eec <_dtoa_r+0x6bc>
 8006ece:	9902      	ldr	r1, [sp, #8]
 8006ed0:	4648      	mov	r0, r9
 8006ed2:	f000 fbbd 	bl	8007650 <_Bfree>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	7033      	strb	r3, [r6, #0]
 8006eda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006edc:	3701      	adds	r7, #1
 8006ede:	601f      	str	r7, [r3, #0]
 8006ee0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 824b 	beq.w	800737e <_dtoa_r+0xb4e>
 8006ee8:	601e      	str	r6, [r3, #0]
 8006eea:	e248      	b.n	800737e <_dtoa_r+0xb4e>
 8006eec:	46b8      	mov	r8, r7
 8006eee:	4633      	mov	r3, r6
 8006ef0:	461e      	mov	r6, r3
 8006ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef6:	2a39      	cmp	r2, #57	@ 0x39
 8006ef8:	d106      	bne.n	8006f08 <_dtoa_r+0x6d8>
 8006efa:	459a      	cmp	sl, r3
 8006efc:	d1f8      	bne.n	8006ef0 <_dtoa_r+0x6c0>
 8006efe:	2230      	movs	r2, #48	@ 0x30
 8006f00:	f108 0801 	add.w	r8, r8, #1
 8006f04:	f88a 2000 	strb.w	r2, [sl]
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e7a0      	b.n	8006e52 <_dtoa_r+0x622>
 8006f10:	4b6f      	ldr	r3, [pc, #444]	@ (80070d0 <_dtoa_r+0x8a0>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	f7f9 fb70 	bl	80005f8 <__aeabi_dmul>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	460d      	mov	r5, r1
 8006f20:	f7f9 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d09f      	beq.n	8006e68 <_dtoa_r+0x638>
 8006f28:	e7d1      	b.n	8006ece <_dtoa_r+0x69e>
 8006f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	f000 80ea 	beq.w	8007106 <_dtoa_r+0x8d6>
 8006f32:	9a07      	ldr	r2, [sp, #28]
 8006f34:	2a01      	cmp	r2, #1
 8006f36:	f300 80cd 	bgt.w	80070d4 <_dtoa_r+0x8a4>
 8006f3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	f000 80c1 	beq.w	80070c4 <_dtoa_r+0x894>
 8006f42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f46:	9c08      	ldr	r4, [sp, #32]
 8006f48:	9e00      	ldr	r6, [sp, #0]
 8006f4a:	9a00      	ldr	r2, [sp, #0]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	9200      	str	r2, [sp, #0]
 8006f50:	9a06      	ldr	r2, [sp, #24]
 8006f52:	2101      	movs	r1, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	4648      	mov	r0, r9
 8006f58:	9206      	str	r2, [sp, #24]
 8006f5a:	f000 fc77 	bl	800784c <__i2b>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	b166      	cbz	r6, 8006f7c <_dtoa_r+0x74c>
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dd09      	ble.n	8006f7c <_dtoa_r+0x74c>
 8006f68:	42b3      	cmp	r3, r6
 8006f6a:	9a00      	ldr	r2, [sp, #0]
 8006f6c:	bfa8      	it	ge
 8006f6e:	4633      	movge	r3, r6
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	9200      	str	r2, [sp, #0]
 8006f74:	9a06      	ldr	r2, [sp, #24]
 8006f76:	1af6      	subs	r6, r6, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	9306      	str	r3, [sp, #24]
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	b30b      	cbz	r3, 8006fc4 <_dtoa_r+0x794>
 8006f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80c6 	beq.w	8007114 <_dtoa_r+0x8e4>
 8006f88:	2c00      	cmp	r4, #0
 8006f8a:	f000 80c0 	beq.w	800710e <_dtoa_r+0x8de>
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4622      	mov	r2, r4
 8006f92:	4648      	mov	r0, r9
 8006f94:	f000 fd12 	bl	80079bc <__pow5mult>
 8006f98:	9a02      	ldr	r2, [sp, #8]
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f000 fc6a 	bl	8007878 <__multiply>
 8006fa4:	9902      	ldr	r1, [sp, #8]
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f000 fb51 	bl	8007650 <_Bfree>
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	1b1b      	subs	r3, r3, r4
 8006fb2:	9308      	str	r3, [sp, #32]
 8006fb4:	f000 80b1 	beq.w	800711a <_dtoa_r+0x8ea>
 8006fb8:	9a08      	ldr	r2, [sp, #32]
 8006fba:	4641      	mov	r1, r8
 8006fbc:	4648      	mov	r0, r9
 8006fbe:	f000 fcfd 	bl	80079bc <__pow5mult>
 8006fc2:	9002      	str	r0, [sp, #8]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4648      	mov	r0, r9
 8006fc8:	f000 fc40 	bl	800784c <__i2b>
 8006fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fce:	4604      	mov	r4, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 81d8 	beq.w	8007386 <_dtoa_r+0xb56>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4601      	mov	r1, r0
 8006fda:	4648      	mov	r0, r9
 8006fdc:	f000 fcee 	bl	80079bc <__pow5mult>
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	f300 809f 	bgt.w	8007128 <_dtoa_r+0x8f8>
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8097 	bne.w	8007120 <_dtoa_r+0x8f0>
 8006ff2:	9b05      	ldr	r3, [sp, #20]
 8006ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 8093 	bne.w	8007124 <_dtoa_r+0x8f4>
 8006ffe:	9b05      	ldr	r3, [sp, #20]
 8007000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007004:	0d1b      	lsrs	r3, r3, #20
 8007006:	051b      	lsls	r3, r3, #20
 8007008:	b133      	cbz	r3, 8007018 <_dtoa_r+0x7e8>
 800700a:	9b00      	ldr	r3, [sp, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	3301      	adds	r3, #1
 8007014:	9306      	str	r3, [sp, #24]
 8007016:	2301      	movs	r3, #1
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 81b8 	beq.w	8007392 <_dtoa_r+0xb62>
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007028:	6918      	ldr	r0, [r3, #16]
 800702a:	f000 fbc3 	bl	80077b4 <__hi0bits>
 800702e:	f1c0 0020 	rsb	r0, r0, #32
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	4418      	add	r0, r3
 8007036:	f010 001f 	ands.w	r0, r0, #31
 800703a:	f000 8082 	beq.w	8007142 <_dtoa_r+0x912>
 800703e:	f1c0 0320 	rsb	r3, r0, #32
 8007042:	2b04      	cmp	r3, #4
 8007044:	dd73      	ble.n	800712e <_dtoa_r+0x8fe>
 8007046:	9b00      	ldr	r3, [sp, #0]
 8007048:	f1c0 001c 	rsb	r0, r0, #28
 800704c:	4403      	add	r3, r0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	9b06      	ldr	r3, [sp, #24]
 8007052:	4403      	add	r3, r0
 8007054:	4406      	add	r6, r0
 8007056:	9306      	str	r3, [sp, #24]
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	dd05      	ble.n	800706a <_dtoa_r+0x83a>
 800705e:	9902      	ldr	r1, [sp, #8]
 8007060:	461a      	mov	r2, r3
 8007062:	4648      	mov	r0, r9
 8007064:	f000 fd04 	bl	8007a70 <__lshift>
 8007068:	9002      	str	r0, [sp, #8]
 800706a:	9b06      	ldr	r3, [sp, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd05      	ble.n	800707c <_dtoa_r+0x84c>
 8007070:	4621      	mov	r1, r4
 8007072:	461a      	mov	r2, r3
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fcfb 	bl	8007a70 <__lshift>
 800707a:	4604      	mov	r4, r0
 800707c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d061      	beq.n	8007146 <_dtoa_r+0x916>
 8007082:	9802      	ldr	r0, [sp, #8]
 8007084:	4621      	mov	r1, r4
 8007086:	f000 fd5f 	bl	8007b48 <__mcmp>
 800708a:	2800      	cmp	r0, #0
 800708c:	da5b      	bge.n	8007146 <_dtoa_r+0x916>
 800708e:	2300      	movs	r3, #0
 8007090:	9902      	ldr	r1, [sp, #8]
 8007092:	220a      	movs	r2, #10
 8007094:	4648      	mov	r0, r9
 8007096:	f000 fafd 	bl	8007694 <__multadd>
 800709a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709c:	9002      	str	r0, [sp, #8]
 800709e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8177 	beq.w	8007396 <_dtoa_r+0xb66>
 80070a8:	4629      	mov	r1, r5
 80070aa:	2300      	movs	r3, #0
 80070ac:	220a      	movs	r2, #10
 80070ae:	4648      	mov	r0, r9
 80070b0:	f000 faf0 	bl	8007694 <__multadd>
 80070b4:	f1bb 0f00 	cmp.w	fp, #0
 80070b8:	4605      	mov	r5, r0
 80070ba:	dc6f      	bgt.n	800719c <_dtoa_r+0x96c>
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	dc49      	bgt.n	8007156 <_dtoa_r+0x926>
 80070c2:	e06b      	b.n	800719c <_dtoa_r+0x96c>
 80070c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070ca:	e73c      	b.n	8006f46 <_dtoa_r+0x716>
 80070cc:	3fe00000 	.word	0x3fe00000
 80070d0:	40240000 	.word	0x40240000
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	1e5c      	subs	r4, r3, #1
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	42a3      	cmp	r3, r4
 80070dc:	db09      	blt.n	80070f2 <_dtoa_r+0x8c2>
 80070de:	1b1c      	subs	r4, r3, r4
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f6bf af30 	bge.w	8006f48 <_dtoa_r+0x718>
 80070e8:	9b00      	ldr	r3, [sp, #0]
 80070ea:	9a03      	ldr	r2, [sp, #12]
 80070ec:	1a9e      	subs	r6, r3, r2
 80070ee:	2300      	movs	r3, #0
 80070f0:	e72b      	b.n	8006f4a <_dtoa_r+0x71a>
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070f6:	9408      	str	r4, [sp, #32]
 80070f8:	1ae3      	subs	r3, r4, r3
 80070fa:	441a      	add	r2, r3
 80070fc:	9e00      	ldr	r6, [sp, #0]
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	920d      	str	r2, [sp, #52]	@ 0x34
 8007102:	2400      	movs	r4, #0
 8007104:	e721      	b.n	8006f4a <_dtoa_r+0x71a>
 8007106:	9c08      	ldr	r4, [sp, #32]
 8007108:	9e00      	ldr	r6, [sp, #0]
 800710a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800710c:	e728      	b.n	8006f60 <_dtoa_r+0x730>
 800710e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007112:	e751      	b.n	8006fb8 <_dtoa_r+0x788>
 8007114:	9a08      	ldr	r2, [sp, #32]
 8007116:	9902      	ldr	r1, [sp, #8]
 8007118:	e750      	b.n	8006fbc <_dtoa_r+0x78c>
 800711a:	f8cd 8008 	str.w	r8, [sp, #8]
 800711e:	e751      	b.n	8006fc4 <_dtoa_r+0x794>
 8007120:	2300      	movs	r3, #0
 8007122:	e779      	b.n	8007018 <_dtoa_r+0x7e8>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	e777      	b.n	8007018 <_dtoa_r+0x7e8>
 8007128:	2300      	movs	r3, #0
 800712a:	9308      	str	r3, [sp, #32]
 800712c:	e779      	b.n	8007022 <_dtoa_r+0x7f2>
 800712e:	d093      	beq.n	8007058 <_dtoa_r+0x828>
 8007130:	9a00      	ldr	r2, [sp, #0]
 8007132:	331c      	adds	r3, #28
 8007134:	441a      	add	r2, r3
 8007136:	9200      	str	r2, [sp, #0]
 8007138:	9a06      	ldr	r2, [sp, #24]
 800713a:	441a      	add	r2, r3
 800713c:	441e      	add	r6, r3
 800713e:	9206      	str	r2, [sp, #24]
 8007140:	e78a      	b.n	8007058 <_dtoa_r+0x828>
 8007142:	4603      	mov	r3, r0
 8007144:	e7f4      	b.n	8007130 <_dtoa_r+0x900>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	46b8      	mov	r8, r7
 800714c:	dc20      	bgt.n	8007190 <_dtoa_r+0x960>
 800714e:	469b      	mov	fp, r3
 8007150:	9b07      	ldr	r3, [sp, #28]
 8007152:	2b02      	cmp	r3, #2
 8007154:	dd1e      	ble.n	8007194 <_dtoa_r+0x964>
 8007156:	f1bb 0f00 	cmp.w	fp, #0
 800715a:	f47f adb1 	bne.w	8006cc0 <_dtoa_r+0x490>
 800715e:	4621      	mov	r1, r4
 8007160:	465b      	mov	r3, fp
 8007162:	2205      	movs	r2, #5
 8007164:	4648      	mov	r0, r9
 8007166:	f000 fa95 	bl	8007694 <__multadd>
 800716a:	4601      	mov	r1, r0
 800716c:	4604      	mov	r4, r0
 800716e:	9802      	ldr	r0, [sp, #8]
 8007170:	f000 fcea 	bl	8007b48 <__mcmp>
 8007174:	2800      	cmp	r0, #0
 8007176:	f77f ada3 	ble.w	8006cc0 <_dtoa_r+0x490>
 800717a:	4656      	mov	r6, sl
 800717c:	2331      	movs	r3, #49	@ 0x31
 800717e:	f806 3b01 	strb.w	r3, [r6], #1
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	e59f      	b.n	8006cc8 <_dtoa_r+0x498>
 8007188:	9c03      	ldr	r4, [sp, #12]
 800718a:	46b8      	mov	r8, r7
 800718c:	4625      	mov	r5, r4
 800718e:	e7f4      	b.n	800717a <_dtoa_r+0x94a>
 8007190:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 8101 	beq.w	800739e <_dtoa_r+0xb6e>
 800719c:	2e00      	cmp	r6, #0
 800719e:	dd05      	ble.n	80071ac <_dtoa_r+0x97c>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4632      	mov	r2, r6
 80071a4:	4648      	mov	r0, r9
 80071a6:	f000 fc63 	bl	8007a70 <__lshift>
 80071aa:	4605      	mov	r5, r0
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d05c      	beq.n	800726c <_dtoa_r+0xa3c>
 80071b2:	6869      	ldr	r1, [r5, #4]
 80071b4:	4648      	mov	r0, r9
 80071b6:	f000 fa0b 	bl	80075d0 <_Balloc>
 80071ba:	4606      	mov	r6, r0
 80071bc:	b928      	cbnz	r0, 80071ca <_dtoa_r+0x99a>
 80071be:	4b82      	ldr	r3, [pc, #520]	@ (80073c8 <_dtoa_r+0xb98>)
 80071c0:	4602      	mov	r2, r0
 80071c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80071c6:	f7ff bb4a 	b.w	800685e <_dtoa_r+0x2e>
 80071ca:	692a      	ldr	r2, [r5, #16]
 80071cc:	3202      	adds	r2, #2
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	f105 010c 	add.w	r1, r5, #12
 80071d4:	300c      	adds	r0, #12
 80071d6:	f7ff fa8e 	bl	80066f6 <memcpy>
 80071da:	2201      	movs	r2, #1
 80071dc:	4631      	mov	r1, r6
 80071de:	4648      	mov	r0, r9
 80071e0:	f000 fc46 	bl	8007a70 <__lshift>
 80071e4:	f10a 0301 	add.w	r3, sl, #1
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	eb0a 030b 	add.w	r3, sl, fp
 80071ee:	9308      	str	r3, [sp, #32]
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	462f      	mov	r7, r5
 80071f8:	9306      	str	r3, [sp, #24]
 80071fa:	4605      	mov	r5, r0
 80071fc:	9b00      	ldr	r3, [sp, #0]
 80071fe:	9802      	ldr	r0, [sp, #8]
 8007200:	4621      	mov	r1, r4
 8007202:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007206:	f7ff fa8b 	bl	8006720 <quorem>
 800720a:	4603      	mov	r3, r0
 800720c:	3330      	adds	r3, #48	@ 0x30
 800720e:	9003      	str	r0, [sp, #12]
 8007210:	4639      	mov	r1, r7
 8007212:	9802      	ldr	r0, [sp, #8]
 8007214:	9309      	str	r3, [sp, #36]	@ 0x24
 8007216:	f000 fc97 	bl	8007b48 <__mcmp>
 800721a:	462a      	mov	r2, r5
 800721c:	9004      	str	r0, [sp, #16]
 800721e:	4621      	mov	r1, r4
 8007220:	4648      	mov	r0, r9
 8007222:	f000 fcad 	bl	8007b80 <__mdiff>
 8007226:	68c2      	ldr	r2, [r0, #12]
 8007228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722a:	4606      	mov	r6, r0
 800722c:	bb02      	cbnz	r2, 8007270 <_dtoa_r+0xa40>
 800722e:	4601      	mov	r1, r0
 8007230:	9802      	ldr	r0, [sp, #8]
 8007232:	f000 fc89 	bl	8007b48 <__mcmp>
 8007236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007238:	4602      	mov	r2, r0
 800723a:	4631      	mov	r1, r6
 800723c:	4648      	mov	r0, r9
 800723e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	f000 fa05 	bl	8007650 <_Bfree>
 8007246:	9b07      	ldr	r3, [sp, #28]
 8007248:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800724a:	9e00      	ldr	r6, [sp, #0]
 800724c:	ea42 0103 	orr.w	r1, r2, r3
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	4319      	orrs	r1, r3
 8007254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007256:	d10d      	bne.n	8007274 <_dtoa_r+0xa44>
 8007258:	2b39      	cmp	r3, #57	@ 0x39
 800725a:	d027      	beq.n	80072ac <_dtoa_r+0xa7c>
 800725c:	9a04      	ldr	r2, [sp, #16]
 800725e:	2a00      	cmp	r2, #0
 8007260:	dd01      	ble.n	8007266 <_dtoa_r+0xa36>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	3331      	adds	r3, #49	@ 0x31
 8007266:	f88b 3000 	strb.w	r3, [fp]
 800726a:	e52e      	b.n	8006cca <_dtoa_r+0x49a>
 800726c:	4628      	mov	r0, r5
 800726e:	e7b9      	b.n	80071e4 <_dtoa_r+0x9b4>
 8007270:	2201      	movs	r2, #1
 8007272:	e7e2      	b.n	800723a <_dtoa_r+0xa0a>
 8007274:	9904      	ldr	r1, [sp, #16]
 8007276:	2900      	cmp	r1, #0
 8007278:	db04      	blt.n	8007284 <_dtoa_r+0xa54>
 800727a:	9807      	ldr	r0, [sp, #28]
 800727c:	4301      	orrs	r1, r0
 800727e:	9806      	ldr	r0, [sp, #24]
 8007280:	4301      	orrs	r1, r0
 8007282:	d120      	bne.n	80072c6 <_dtoa_r+0xa96>
 8007284:	2a00      	cmp	r2, #0
 8007286:	ddee      	ble.n	8007266 <_dtoa_r+0xa36>
 8007288:	9902      	ldr	r1, [sp, #8]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	4648      	mov	r0, r9
 8007290:	f000 fbee 	bl	8007a70 <__lshift>
 8007294:	4621      	mov	r1, r4
 8007296:	9002      	str	r0, [sp, #8]
 8007298:	f000 fc56 	bl	8007b48 <__mcmp>
 800729c:	2800      	cmp	r0, #0
 800729e:	9b00      	ldr	r3, [sp, #0]
 80072a0:	dc02      	bgt.n	80072a8 <_dtoa_r+0xa78>
 80072a2:	d1e0      	bne.n	8007266 <_dtoa_r+0xa36>
 80072a4:	07da      	lsls	r2, r3, #31
 80072a6:	d5de      	bpl.n	8007266 <_dtoa_r+0xa36>
 80072a8:	2b39      	cmp	r3, #57	@ 0x39
 80072aa:	d1da      	bne.n	8007262 <_dtoa_r+0xa32>
 80072ac:	2339      	movs	r3, #57	@ 0x39
 80072ae:	f88b 3000 	strb.w	r3, [fp]
 80072b2:	4633      	mov	r3, r6
 80072b4:	461e      	mov	r6, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80072bc:	2a39      	cmp	r2, #57	@ 0x39
 80072be:	d04e      	beq.n	800735e <_dtoa_r+0xb2e>
 80072c0:	3201      	adds	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	e501      	b.n	8006cca <_dtoa_r+0x49a>
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	dd03      	ble.n	80072d2 <_dtoa_r+0xaa2>
 80072ca:	2b39      	cmp	r3, #57	@ 0x39
 80072cc:	d0ee      	beq.n	80072ac <_dtoa_r+0xa7c>
 80072ce:	3301      	adds	r3, #1
 80072d0:	e7c9      	b.n	8007266 <_dtoa_r+0xa36>
 80072d2:	9a00      	ldr	r2, [sp, #0]
 80072d4:	9908      	ldr	r1, [sp, #32]
 80072d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072da:	428a      	cmp	r2, r1
 80072dc:	d028      	beq.n	8007330 <_dtoa_r+0xb00>
 80072de:	9902      	ldr	r1, [sp, #8]
 80072e0:	2300      	movs	r3, #0
 80072e2:	220a      	movs	r2, #10
 80072e4:	4648      	mov	r0, r9
 80072e6:	f000 f9d5 	bl	8007694 <__multadd>
 80072ea:	42af      	cmp	r7, r5
 80072ec:	9002      	str	r0, [sp, #8]
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	f04f 020a 	mov.w	r2, #10
 80072f6:	4639      	mov	r1, r7
 80072f8:	4648      	mov	r0, r9
 80072fa:	d107      	bne.n	800730c <_dtoa_r+0xadc>
 80072fc:	f000 f9ca 	bl	8007694 <__multadd>
 8007300:	4607      	mov	r7, r0
 8007302:	4605      	mov	r5, r0
 8007304:	9b00      	ldr	r3, [sp, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	e777      	b.n	80071fc <_dtoa_r+0x9cc>
 800730c:	f000 f9c2 	bl	8007694 <__multadd>
 8007310:	4629      	mov	r1, r5
 8007312:	4607      	mov	r7, r0
 8007314:	2300      	movs	r3, #0
 8007316:	220a      	movs	r2, #10
 8007318:	4648      	mov	r0, r9
 800731a:	f000 f9bb 	bl	8007694 <__multadd>
 800731e:	4605      	mov	r5, r0
 8007320:	e7f0      	b.n	8007304 <_dtoa_r+0xad4>
 8007322:	f1bb 0f00 	cmp.w	fp, #0
 8007326:	bfcc      	ite	gt
 8007328:	465e      	movgt	r6, fp
 800732a:	2601      	movle	r6, #1
 800732c:	4456      	add	r6, sl
 800732e:	2700      	movs	r7, #0
 8007330:	9902      	ldr	r1, [sp, #8]
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2201      	movs	r2, #1
 8007336:	4648      	mov	r0, r9
 8007338:	f000 fb9a 	bl	8007a70 <__lshift>
 800733c:	4621      	mov	r1, r4
 800733e:	9002      	str	r0, [sp, #8]
 8007340:	f000 fc02 	bl	8007b48 <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	dcb4      	bgt.n	80072b2 <_dtoa_r+0xa82>
 8007348:	d102      	bne.n	8007350 <_dtoa_r+0xb20>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	07db      	lsls	r3, r3, #31
 800734e:	d4b0      	bmi.n	80072b2 <_dtoa_r+0xa82>
 8007350:	4633      	mov	r3, r6
 8007352:	461e      	mov	r6, r3
 8007354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007358:	2a30      	cmp	r2, #48	@ 0x30
 800735a:	d0fa      	beq.n	8007352 <_dtoa_r+0xb22>
 800735c:	e4b5      	b.n	8006cca <_dtoa_r+0x49a>
 800735e:	459a      	cmp	sl, r3
 8007360:	d1a8      	bne.n	80072b4 <_dtoa_r+0xa84>
 8007362:	2331      	movs	r3, #49	@ 0x31
 8007364:	f108 0801 	add.w	r8, r8, #1
 8007368:	f88a 3000 	strb.w	r3, [sl]
 800736c:	e4ad      	b.n	8006cca <_dtoa_r+0x49a>
 800736e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007370:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80073cc <_dtoa_r+0xb9c>
 8007374:	b11b      	cbz	r3, 800737e <_dtoa_r+0xb4e>
 8007376:	f10a 0308 	add.w	r3, sl, #8
 800737a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4650      	mov	r0, sl
 8007380:	b017      	add	sp, #92	@ 0x5c
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	2b01      	cmp	r3, #1
 800738a:	f77f ae2e 	ble.w	8006fea <_dtoa_r+0x7ba>
 800738e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	2001      	movs	r0, #1
 8007394:	e64d      	b.n	8007032 <_dtoa_r+0x802>
 8007396:	f1bb 0f00 	cmp.w	fp, #0
 800739a:	f77f aed9 	ble.w	8007150 <_dtoa_r+0x920>
 800739e:	4656      	mov	r6, sl
 80073a0:	9802      	ldr	r0, [sp, #8]
 80073a2:	4621      	mov	r1, r4
 80073a4:	f7ff f9bc 	bl	8006720 <quorem>
 80073a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80073ac:	f806 3b01 	strb.w	r3, [r6], #1
 80073b0:	eba6 020a 	sub.w	r2, r6, sl
 80073b4:	4593      	cmp	fp, r2
 80073b6:	ddb4      	ble.n	8007322 <_dtoa_r+0xaf2>
 80073b8:	9902      	ldr	r1, [sp, #8]
 80073ba:	2300      	movs	r3, #0
 80073bc:	220a      	movs	r2, #10
 80073be:	4648      	mov	r0, r9
 80073c0:	f000 f968 	bl	8007694 <__multadd>
 80073c4:	9002      	str	r0, [sp, #8]
 80073c6:	e7eb      	b.n	80073a0 <_dtoa_r+0xb70>
 80073c8:	08009ef5 	.word	0x08009ef5
 80073cc:	08009e79 	.word	0x08009e79

080073d0 <_free_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d041      	beq.n	800745c <_free_r+0x8c>
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f0c      	subs	r4, r1, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	18e4      	addlt	r4, r4, r3
 80073e4:	f000 f8e8 	bl	80075b8 <__malloc_lock>
 80073e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007460 <_free_r+0x90>)
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	b933      	cbnz	r3, 80073fc <_free_r+0x2c>
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	4628      	mov	r0, r5
 80073f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f8:	f000 b8e4 	b.w	80075c4 <__malloc_unlock>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d908      	bls.n	8007412 <_free_r+0x42>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	1821      	adds	r1, r4, r0
 8007404:	428b      	cmp	r3, r1
 8007406:	bf01      	itttt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	e7ed      	b.n	80073ee <_free_r+0x1e>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x4c>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x42>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1850      	adds	r0, r2, r1
 8007420:	42a0      	cmp	r0, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x6c>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	4401      	add	r1, r0
 8007428:	1850      	adds	r0, r2, r1
 800742a:	4283      	cmp	r3, r0
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1e0      	bne.n	80073f2 <_free_r+0x22>
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6053      	str	r3, [r2, #4]
 8007436:	4408      	add	r0, r1
 8007438:	6010      	str	r0, [r2, #0]
 800743a:	e7da      	b.n	80073f2 <_free_r+0x22>
 800743c:	d902      	bls.n	8007444 <_free_r+0x74>
 800743e:	230c      	movs	r3, #12
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	e7d6      	b.n	80073f2 <_free_r+0x22>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	1821      	adds	r1, r4, r0
 8007448:	428b      	cmp	r3, r1
 800744a:	bf04      	itt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	bf04      	itt	eq
 8007454:	1809      	addeq	r1, r1, r0
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	6054      	str	r4, [r2, #4]
 800745a:	e7ca      	b.n	80073f2 <_free_r+0x22>
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	20004420 	.word	0x20004420

08007464 <malloc>:
 8007464:	4b02      	ldr	r3, [pc, #8]	@ (8007470 <malloc+0xc>)
 8007466:	4601      	mov	r1, r0
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	f000 b825 	b.w	80074b8 <_malloc_r>
 800746e:	bf00      	nop
 8007470:	2000001c 	.word	0x2000001c

08007474 <sbrk_aligned>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4e0f      	ldr	r6, [pc, #60]	@ (80074b4 <sbrk_aligned+0x40>)
 8007478:	460c      	mov	r4, r1
 800747a:	6831      	ldr	r1, [r6, #0]
 800747c:	4605      	mov	r5, r0
 800747e:	b911      	cbnz	r1, 8007486 <sbrk_aligned+0x12>
 8007480:	f001 fe04 	bl	800908c <_sbrk_r>
 8007484:	6030      	str	r0, [r6, #0]
 8007486:	4621      	mov	r1, r4
 8007488:	4628      	mov	r0, r5
 800748a:	f001 fdff 	bl	800908c <_sbrk_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d103      	bne.n	800749a <sbrk_aligned+0x26>
 8007492:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007496:	4620      	mov	r0, r4
 8007498:	bd70      	pop	{r4, r5, r6, pc}
 800749a:	1cc4      	adds	r4, r0, #3
 800749c:	f024 0403 	bic.w	r4, r4, #3
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	d0f8      	beq.n	8007496 <sbrk_aligned+0x22>
 80074a4:	1a21      	subs	r1, r4, r0
 80074a6:	4628      	mov	r0, r5
 80074a8:	f001 fdf0 	bl	800908c <_sbrk_r>
 80074ac:	3001      	adds	r0, #1
 80074ae:	d1f2      	bne.n	8007496 <sbrk_aligned+0x22>
 80074b0:	e7ef      	b.n	8007492 <sbrk_aligned+0x1e>
 80074b2:	bf00      	nop
 80074b4:	2000441c 	.word	0x2000441c

080074b8 <_malloc_r>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	1ccd      	adds	r5, r1, #3
 80074be:	f025 0503 	bic.w	r5, r5, #3
 80074c2:	3508      	adds	r5, #8
 80074c4:	2d0c      	cmp	r5, #12
 80074c6:	bf38      	it	cc
 80074c8:	250c      	movcc	r5, #12
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	4606      	mov	r6, r0
 80074ce:	db01      	blt.n	80074d4 <_malloc_r+0x1c>
 80074d0:	42a9      	cmp	r1, r5
 80074d2:	d904      	bls.n	80074de <_malloc_r+0x26>
 80074d4:	230c      	movs	r3, #12
 80074d6:	6033      	str	r3, [r6, #0]
 80074d8:	2000      	movs	r0, #0
 80074da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075b4 <_malloc_r+0xfc>
 80074e2:	f000 f869 	bl	80075b8 <__malloc_lock>
 80074e6:	f8d8 3000 	ldr.w	r3, [r8]
 80074ea:	461c      	mov	r4, r3
 80074ec:	bb44      	cbnz	r4, 8007540 <_malloc_r+0x88>
 80074ee:	4629      	mov	r1, r5
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff ffbf 	bl	8007474 <sbrk_aligned>
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	4604      	mov	r4, r0
 80074fa:	d158      	bne.n	80075ae <_malloc_r+0xf6>
 80074fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007500:	4627      	mov	r7, r4
 8007502:	2f00      	cmp	r7, #0
 8007504:	d143      	bne.n	800758e <_malloc_r+0xd6>
 8007506:	2c00      	cmp	r4, #0
 8007508:	d04b      	beq.n	80075a2 <_malloc_r+0xea>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	4639      	mov	r1, r7
 800750e:	4630      	mov	r0, r6
 8007510:	eb04 0903 	add.w	r9, r4, r3
 8007514:	f001 fdba 	bl	800908c <_sbrk_r>
 8007518:	4581      	cmp	r9, r0
 800751a:	d142      	bne.n	80075a2 <_malloc_r+0xea>
 800751c:	6821      	ldr	r1, [r4, #0]
 800751e:	1a6d      	subs	r5, r5, r1
 8007520:	4629      	mov	r1, r5
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff ffa6 	bl	8007474 <sbrk_aligned>
 8007528:	3001      	adds	r0, #1
 800752a:	d03a      	beq.n	80075a2 <_malloc_r+0xea>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	442b      	add	r3, r5
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	f8d8 3000 	ldr.w	r3, [r8]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	bb62      	cbnz	r2, 8007594 <_malloc_r+0xdc>
 800753a:	f8c8 7000 	str.w	r7, [r8]
 800753e:	e00f      	b.n	8007560 <_malloc_r+0xa8>
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	1b52      	subs	r2, r2, r5
 8007544:	d420      	bmi.n	8007588 <_malloc_r+0xd0>
 8007546:	2a0b      	cmp	r2, #11
 8007548:	d917      	bls.n	800757a <_malloc_r+0xc2>
 800754a:	1961      	adds	r1, r4, r5
 800754c:	42a3      	cmp	r3, r4
 800754e:	6025      	str	r5, [r4, #0]
 8007550:	bf18      	it	ne
 8007552:	6059      	strne	r1, [r3, #4]
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	bf08      	it	eq
 8007558:	f8c8 1000 	streq.w	r1, [r8]
 800755c:	5162      	str	r2, [r4, r5]
 800755e:	604b      	str	r3, [r1, #4]
 8007560:	4630      	mov	r0, r6
 8007562:	f000 f82f 	bl	80075c4 <__malloc_unlock>
 8007566:	f104 000b 	add.w	r0, r4, #11
 800756a:	1d23      	adds	r3, r4, #4
 800756c:	f020 0007 	bic.w	r0, r0, #7
 8007570:	1ac2      	subs	r2, r0, r3
 8007572:	bf1c      	itt	ne
 8007574:	1a1b      	subne	r3, r3, r0
 8007576:	50a3      	strne	r3, [r4, r2]
 8007578:	e7af      	b.n	80074da <_malloc_r+0x22>
 800757a:	6862      	ldr	r2, [r4, #4]
 800757c:	42a3      	cmp	r3, r4
 800757e:	bf0c      	ite	eq
 8007580:	f8c8 2000 	streq.w	r2, [r8]
 8007584:	605a      	strne	r2, [r3, #4]
 8007586:	e7eb      	b.n	8007560 <_malloc_r+0xa8>
 8007588:	4623      	mov	r3, r4
 800758a:	6864      	ldr	r4, [r4, #4]
 800758c:	e7ae      	b.n	80074ec <_malloc_r+0x34>
 800758e:	463c      	mov	r4, r7
 8007590:	687f      	ldr	r7, [r7, #4]
 8007592:	e7b6      	b.n	8007502 <_malloc_r+0x4a>
 8007594:	461a      	mov	r2, r3
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	42a3      	cmp	r3, r4
 800759a:	d1fb      	bne.n	8007594 <_malloc_r+0xdc>
 800759c:	2300      	movs	r3, #0
 800759e:	6053      	str	r3, [r2, #4]
 80075a0:	e7de      	b.n	8007560 <_malloc_r+0xa8>
 80075a2:	230c      	movs	r3, #12
 80075a4:	6033      	str	r3, [r6, #0]
 80075a6:	4630      	mov	r0, r6
 80075a8:	f000 f80c 	bl	80075c4 <__malloc_unlock>
 80075ac:	e794      	b.n	80074d8 <_malloc_r+0x20>
 80075ae:	6005      	str	r5, [r0, #0]
 80075b0:	e7d6      	b.n	8007560 <_malloc_r+0xa8>
 80075b2:	bf00      	nop
 80075b4:	20004420 	.word	0x20004420

080075b8 <__malloc_lock>:
 80075b8:	4801      	ldr	r0, [pc, #4]	@ (80075c0 <__malloc_lock+0x8>)
 80075ba:	f7ff b89a 	b.w	80066f2 <__retarget_lock_acquire_recursive>
 80075be:	bf00      	nop
 80075c0:	20004418 	.word	0x20004418

080075c4 <__malloc_unlock>:
 80075c4:	4801      	ldr	r0, [pc, #4]	@ (80075cc <__malloc_unlock+0x8>)
 80075c6:	f7ff b895 	b.w	80066f4 <__retarget_lock_release_recursive>
 80075ca:	bf00      	nop
 80075cc:	20004418 	.word	0x20004418

080075d0 <_Balloc>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	69c6      	ldr	r6, [r0, #28]
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	b976      	cbnz	r6, 80075f8 <_Balloc+0x28>
 80075da:	2010      	movs	r0, #16
 80075dc:	f7ff ff42 	bl	8007464 <malloc>
 80075e0:	4602      	mov	r2, r0
 80075e2:	61e0      	str	r0, [r4, #28]
 80075e4:	b920      	cbnz	r0, 80075f0 <_Balloc+0x20>
 80075e6:	4b18      	ldr	r3, [pc, #96]	@ (8007648 <_Balloc+0x78>)
 80075e8:	4818      	ldr	r0, [pc, #96]	@ (800764c <_Balloc+0x7c>)
 80075ea:	216b      	movs	r1, #107	@ 0x6b
 80075ec:	f001 fd68 	bl	80090c0 <__assert_func>
 80075f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075f4:	6006      	str	r6, [r0, #0]
 80075f6:	60c6      	str	r6, [r0, #12]
 80075f8:	69e6      	ldr	r6, [r4, #28]
 80075fa:	68f3      	ldr	r3, [r6, #12]
 80075fc:	b183      	cbz	r3, 8007620 <_Balloc+0x50>
 80075fe:	69e3      	ldr	r3, [r4, #28]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007606:	b9b8      	cbnz	r0, 8007638 <_Balloc+0x68>
 8007608:	2101      	movs	r1, #1
 800760a:	fa01 f605 	lsl.w	r6, r1, r5
 800760e:	1d72      	adds	r2, r6, #5
 8007610:	0092      	lsls	r2, r2, #2
 8007612:	4620      	mov	r0, r4
 8007614:	f001 fd72 	bl	80090fc <_calloc_r>
 8007618:	b160      	cbz	r0, 8007634 <_Balloc+0x64>
 800761a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800761e:	e00e      	b.n	800763e <_Balloc+0x6e>
 8007620:	2221      	movs	r2, #33	@ 0x21
 8007622:	2104      	movs	r1, #4
 8007624:	4620      	mov	r0, r4
 8007626:	f001 fd69 	bl	80090fc <_calloc_r>
 800762a:	69e3      	ldr	r3, [r4, #28]
 800762c:	60f0      	str	r0, [r6, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e4      	bne.n	80075fe <_Balloc+0x2e>
 8007634:	2000      	movs	r0, #0
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	6802      	ldr	r2, [r0, #0]
 800763a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800763e:	2300      	movs	r3, #0
 8007640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007644:	e7f7      	b.n	8007636 <_Balloc+0x66>
 8007646:	bf00      	nop
 8007648:	08009e86 	.word	0x08009e86
 800764c:	08009f06 	.word	0x08009f06

08007650 <_Bfree>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	69c6      	ldr	r6, [r0, #28]
 8007654:	4605      	mov	r5, r0
 8007656:	460c      	mov	r4, r1
 8007658:	b976      	cbnz	r6, 8007678 <_Bfree+0x28>
 800765a:	2010      	movs	r0, #16
 800765c:	f7ff ff02 	bl	8007464 <malloc>
 8007660:	4602      	mov	r2, r0
 8007662:	61e8      	str	r0, [r5, #28]
 8007664:	b920      	cbnz	r0, 8007670 <_Bfree+0x20>
 8007666:	4b09      	ldr	r3, [pc, #36]	@ (800768c <_Bfree+0x3c>)
 8007668:	4809      	ldr	r0, [pc, #36]	@ (8007690 <_Bfree+0x40>)
 800766a:	218f      	movs	r1, #143	@ 0x8f
 800766c:	f001 fd28 	bl	80090c0 <__assert_func>
 8007670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007674:	6006      	str	r6, [r0, #0]
 8007676:	60c6      	str	r6, [r0, #12]
 8007678:	b13c      	cbz	r4, 800768a <_Bfree+0x3a>
 800767a:	69eb      	ldr	r3, [r5, #28]
 800767c:	6862      	ldr	r2, [r4, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007684:	6021      	str	r1, [r4, #0]
 8007686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	08009e86 	.word	0x08009e86
 8007690:	08009f06 	.word	0x08009f06

08007694 <__multadd>:
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	690d      	ldr	r5, [r1, #16]
 800769a:	4607      	mov	r7, r0
 800769c:	460c      	mov	r4, r1
 800769e:	461e      	mov	r6, r3
 80076a0:	f101 0c14 	add.w	ip, r1, #20
 80076a4:	2000      	movs	r0, #0
 80076a6:	f8dc 3000 	ldr.w	r3, [ip]
 80076aa:	b299      	uxth	r1, r3
 80076ac:	fb02 6101 	mla	r1, r2, r1, r6
 80076b0:	0c1e      	lsrs	r6, r3, #16
 80076b2:	0c0b      	lsrs	r3, r1, #16
 80076b4:	fb02 3306 	mla	r3, r2, r6, r3
 80076b8:	b289      	uxth	r1, r1
 80076ba:	3001      	adds	r0, #1
 80076bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076c0:	4285      	cmp	r5, r0
 80076c2:	f84c 1b04 	str.w	r1, [ip], #4
 80076c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076ca:	dcec      	bgt.n	80076a6 <__multadd+0x12>
 80076cc:	b30e      	cbz	r6, 8007712 <__multadd+0x7e>
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	dc19      	bgt.n	8007708 <__multadd+0x74>
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	4638      	mov	r0, r7
 80076d8:	3101      	adds	r1, #1
 80076da:	f7ff ff79 	bl	80075d0 <_Balloc>
 80076de:	4680      	mov	r8, r0
 80076e0:	b928      	cbnz	r0, 80076ee <__multadd+0x5a>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <__multadd+0x84>)
 80076e6:	480d      	ldr	r0, [pc, #52]	@ (800771c <__multadd+0x88>)
 80076e8:	21ba      	movs	r1, #186	@ 0xba
 80076ea:	f001 fce9 	bl	80090c0 <__assert_func>
 80076ee:	6922      	ldr	r2, [r4, #16]
 80076f0:	3202      	adds	r2, #2
 80076f2:	f104 010c 	add.w	r1, r4, #12
 80076f6:	0092      	lsls	r2, r2, #2
 80076f8:	300c      	adds	r0, #12
 80076fa:	f7fe fffc 	bl	80066f6 <memcpy>
 80076fe:	4621      	mov	r1, r4
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ffa5 	bl	8007650 <_Bfree>
 8007706:	4644      	mov	r4, r8
 8007708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800770c:	3501      	adds	r5, #1
 800770e:	615e      	str	r6, [r3, #20]
 8007710:	6125      	str	r5, [r4, #16]
 8007712:	4620      	mov	r0, r4
 8007714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007718:	08009ef5 	.word	0x08009ef5
 800771c:	08009f06 	.word	0x08009f06

08007720 <__s2b>:
 8007720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007724:	460c      	mov	r4, r1
 8007726:	4615      	mov	r5, r2
 8007728:	461f      	mov	r7, r3
 800772a:	2209      	movs	r2, #9
 800772c:	3308      	adds	r3, #8
 800772e:	4606      	mov	r6, r0
 8007730:	fb93 f3f2 	sdiv	r3, r3, r2
 8007734:	2100      	movs	r1, #0
 8007736:	2201      	movs	r2, #1
 8007738:	429a      	cmp	r2, r3
 800773a:	db09      	blt.n	8007750 <__s2b+0x30>
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff ff47 	bl	80075d0 <_Balloc>
 8007742:	b940      	cbnz	r0, 8007756 <__s2b+0x36>
 8007744:	4602      	mov	r2, r0
 8007746:	4b19      	ldr	r3, [pc, #100]	@ (80077ac <__s2b+0x8c>)
 8007748:	4819      	ldr	r0, [pc, #100]	@ (80077b0 <__s2b+0x90>)
 800774a:	21d3      	movs	r1, #211	@ 0xd3
 800774c:	f001 fcb8 	bl	80090c0 <__assert_func>
 8007750:	0052      	lsls	r2, r2, #1
 8007752:	3101      	adds	r1, #1
 8007754:	e7f0      	b.n	8007738 <__s2b+0x18>
 8007756:	9b08      	ldr	r3, [sp, #32]
 8007758:	6143      	str	r3, [r0, #20]
 800775a:	2d09      	cmp	r5, #9
 800775c:	f04f 0301 	mov.w	r3, #1
 8007760:	6103      	str	r3, [r0, #16]
 8007762:	dd16      	ble.n	8007792 <__s2b+0x72>
 8007764:	f104 0909 	add.w	r9, r4, #9
 8007768:	46c8      	mov	r8, r9
 800776a:	442c      	add	r4, r5
 800776c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007770:	4601      	mov	r1, r0
 8007772:	3b30      	subs	r3, #48	@ 0x30
 8007774:	220a      	movs	r2, #10
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff ff8c 	bl	8007694 <__multadd>
 800777c:	45a0      	cmp	r8, r4
 800777e:	d1f5      	bne.n	800776c <__s2b+0x4c>
 8007780:	f1a5 0408 	sub.w	r4, r5, #8
 8007784:	444c      	add	r4, r9
 8007786:	1b2d      	subs	r5, r5, r4
 8007788:	1963      	adds	r3, r4, r5
 800778a:	42bb      	cmp	r3, r7
 800778c:	db04      	blt.n	8007798 <__s2b+0x78>
 800778e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007792:	340a      	adds	r4, #10
 8007794:	2509      	movs	r5, #9
 8007796:	e7f6      	b.n	8007786 <__s2b+0x66>
 8007798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800779c:	4601      	mov	r1, r0
 800779e:	3b30      	subs	r3, #48	@ 0x30
 80077a0:	220a      	movs	r2, #10
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7ff ff76 	bl	8007694 <__multadd>
 80077a8:	e7ee      	b.n	8007788 <__s2b+0x68>
 80077aa:	bf00      	nop
 80077ac:	08009ef5 	.word	0x08009ef5
 80077b0:	08009f06 	.word	0x08009f06

080077b4 <__hi0bits>:
 80077b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077b8:	4603      	mov	r3, r0
 80077ba:	bf36      	itet	cc
 80077bc:	0403      	lslcc	r3, r0, #16
 80077be:	2000      	movcs	r0, #0
 80077c0:	2010      	movcc	r0, #16
 80077c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c6:	bf3c      	itt	cc
 80077c8:	021b      	lslcc	r3, r3, #8
 80077ca:	3008      	addcc	r0, #8
 80077cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d0:	bf3c      	itt	cc
 80077d2:	011b      	lslcc	r3, r3, #4
 80077d4:	3004      	addcc	r0, #4
 80077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077da:	bf3c      	itt	cc
 80077dc:	009b      	lslcc	r3, r3, #2
 80077de:	3002      	addcc	r0, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	db05      	blt.n	80077f0 <__hi0bits+0x3c>
 80077e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077e8:	f100 0001 	add.w	r0, r0, #1
 80077ec:	bf08      	it	eq
 80077ee:	2020      	moveq	r0, #32
 80077f0:	4770      	bx	lr

080077f2 <__lo0bits>:
 80077f2:	6803      	ldr	r3, [r0, #0]
 80077f4:	4602      	mov	r2, r0
 80077f6:	f013 0007 	ands.w	r0, r3, #7
 80077fa:	d00b      	beq.n	8007814 <__lo0bits+0x22>
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	d421      	bmi.n	8007844 <__lo0bits+0x52>
 8007800:	0798      	lsls	r0, r3, #30
 8007802:	bf49      	itett	mi
 8007804:	085b      	lsrmi	r3, r3, #1
 8007806:	089b      	lsrpl	r3, r3, #2
 8007808:	2001      	movmi	r0, #1
 800780a:	6013      	strmi	r3, [r2, #0]
 800780c:	bf5c      	itt	pl
 800780e:	6013      	strpl	r3, [r2, #0]
 8007810:	2002      	movpl	r0, #2
 8007812:	4770      	bx	lr
 8007814:	b299      	uxth	r1, r3
 8007816:	b909      	cbnz	r1, 800781c <__lo0bits+0x2a>
 8007818:	0c1b      	lsrs	r3, r3, #16
 800781a:	2010      	movs	r0, #16
 800781c:	b2d9      	uxtb	r1, r3
 800781e:	b909      	cbnz	r1, 8007824 <__lo0bits+0x32>
 8007820:	3008      	adds	r0, #8
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	0719      	lsls	r1, r3, #28
 8007826:	bf04      	itt	eq
 8007828:	091b      	lsreq	r3, r3, #4
 800782a:	3004      	addeq	r0, #4
 800782c:	0799      	lsls	r1, r3, #30
 800782e:	bf04      	itt	eq
 8007830:	089b      	lsreq	r3, r3, #2
 8007832:	3002      	addeq	r0, #2
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d403      	bmi.n	8007840 <__lo0bits+0x4e>
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	f100 0001 	add.w	r0, r0, #1
 800783e:	d003      	beq.n	8007848 <__lo0bits+0x56>
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	4770      	bx	lr
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr
 8007848:	2020      	movs	r0, #32
 800784a:	4770      	bx	lr

0800784c <__i2b>:
 800784c:	b510      	push	{r4, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	2101      	movs	r1, #1
 8007852:	f7ff febd 	bl	80075d0 <_Balloc>
 8007856:	4602      	mov	r2, r0
 8007858:	b928      	cbnz	r0, 8007866 <__i2b+0x1a>
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <__i2b+0x24>)
 800785c:	4805      	ldr	r0, [pc, #20]	@ (8007874 <__i2b+0x28>)
 800785e:	f240 1145 	movw	r1, #325	@ 0x145
 8007862:	f001 fc2d 	bl	80090c0 <__assert_func>
 8007866:	2301      	movs	r3, #1
 8007868:	6144      	str	r4, [r0, #20]
 800786a:	6103      	str	r3, [r0, #16]
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	08009ef5 	.word	0x08009ef5
 8007874:	08009f06 	.word	0x08009f06

08007878 <__multiply>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	4617      	mov	r7, r2
 800787e:	690a      	ldr	r2, [r1, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	429a      	cmp	r2, r3
 8007884:	bfa8      	it	ge
 8007886:	463b      	movge	r3, r7
 8007888:	4689      	mov	r9, r1
 800788a:	bfa4      	itt	ge
 800788c:	460f      	movge	r7, r1
 800788e:	4699      	movge	r9, r3
 8007890:	693d      	ldr	r5, [r7, #16]
 8007892:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	eb05 060a 	add.w	r6, r5, sl
 800789e:	42b3      	cmp	r3, r6
 80078a0:	b085      	sub	sp, #20
 80078a2:	bfb8      	it	lt
 80078a4:	3101      	addlt	r1, #1
 80078a6:	f7ff fe93 	bl	80075d0 <_Balloc>
 80078aa:	b930      	cbnz	r0, 80078ba <__multiply+0x42>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b41      	ldr	r3, [pc, #260]	@ (80079b4 <__multiply+0x13c>)
 80078b0:	4841      	ldr	r0, [pc, #260]	@ (80079b8 <__multiply+0x140>)
 80078b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078b6:	f001 fc03 	bl	80090c0 <__assert_func>
 80078ba:	f100 0414 	add.w	r4, r0, #20
 80078be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80078c2:	4623      	mov	r3, r4
 80078c4:	2200      	movs	r2, #0
 80078c6:	4573      	cmp	r3, lr
 80078c8:	d320      	bcc.n	800790c <__multiply+0x94>
 80078ca:	f107 0814 	add.w	r8, r7, #20
 80078ce:	f109 0114 	add.w	r1, r9, #20
 80078d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80078d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80078da:	9302      	str	r3, [sp, #8]
 80078dc:	1beb      	subs	r3, r5, r7
 80078de:	3b15      	subs	r3, #21
 80078e0:	f023 0303 	bic.w	r3, r3, #3
 80078e4:	3304      	adds	r3, #4
 80078e6:	3715      	adds	r7, #21
 80078e8:	42bd      	cmp	r5, r7
 80078ea:	bf38      	it	cc
 80078ec:	2304      	movcc	r3, #4
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	9b02      	ldr	r3, [sp, #8]
 80078f2:	9103      	str	r1, [sp, #12]
 80078f4:	428b      	cmp	r3, r1
 80078f6:	d80c      	bhi.n	8007912 <__multiply+0x9a>
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	dd03      	ble.n	8007904 <__multiply+0x8c>
 80078fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007900:	2b00      	cmp	r3, #0
 8007902:	d055      	beq.n	80079b0 <__multiply+0x138>
 8007904:	6106      	str	r6, [r0, #16]
 8007906:	b005      	add	sp, #20
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	f843 2b04 	str.w	r2, [r3], #4
 8007910:	e7d9      	b.n	80078c6 <__multiply+0x4e>
 8007912:	f8b1 a000 	ldrh.w	sl, [r1]
 8007916:	f1ba 0f00 	cmp.w	sl, #0
 800791a:	d01f      	beq.n	800795c <__multiply+0xe4>
 800791c:	46c4      	mov	ip, r8
 800791e:	46a1      	mov	r9, r4
 8007920:	2700      	movs	r7, #0
 8007922:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007926:	f8d9 3000 	ldr.w	r3, [r9]
 800792a:	fa1f fb82 	uxth.w	fp, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	fb0a 330b 	mla	r3, sl, fp, r3
 8007934:	443b      	add	r3, r7
 8007936:	f8d9 7000 	ldr.w	r7, [r9]
 800793a:	0c12      	lsrs	r2, r2, #16
 800793c:	0c3f      	lsrs	r7, r7, #16
 800793e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007942:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794c:	4565      	cmp	r5, ip
 800794e:	f849 3b04 	str.w	r3, [r9], #4
 8007952:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007956:	d8e4      	bhi.n	8007922 <__multiply+0xaa>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	50e7      	str	r7, [r4, r3]
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007962:	3104      	adds	r1, #4
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	d020      	beq.n	80079ac <__multiply+0x134>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	4647      	mov	r7, r8
 800796e:	46a4      	mov	ip, r4
 8007970:	f04f 0a00 	mov.w	sl, #0
 8007974:	f8b7 b000 	ldrh.w	fp, [r7]
 8007978:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800797c:	fb09 220b 	mla	r2, r9, fp, r2
 8007980:	4452      	add	r2, sl
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007988:	f84c 3b04 	str.w	r3, [ip], #4
 800798c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007990:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007994:	f8bc 3000 	ldrh.w	r3, [ip]
 8007998:	fb09 330a 	mla	r3, r9, sl, r3
 800799c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80079a0:	42bd      	cmp	r5, r7
 80079a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a6:	d8e5      	bhi.n	8007974 <__multiply+0xfc>
 80079a8:	9a01      	ldr	r2, [sp, #4]
 80079aa:	50a3      	str	r3, [r4, r2]
 80079ac:	3404      	adds	r4, #4
 80079ae:	e79f      	b.n	80078f0 <__multiply+0x78>
 80079b0:	3e01      	subs	r6, #1
 80079b2:	e7a1      	b.n	80078f8 <__multiply+0x80>
 80079b4:	08009ef5 	.word	0x08009ef5
 80079b8:	08009f06 	.word	0x08009f06

080079bc <__pow5mult>:
 80079bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c0:	4615      	mov	r5, r2
 80079c2:	f012 0203 	ands.w	r2, r2, #3
 80079c6:	4607      	mov	r7, r0
 80079c8:	460e      	mov	r6, r1
 80079ca:	d007      	beq.n	80079dc <__pow5mult+0x20>
 80079cc:	4c25      	ldr	r4, [pc, #148]	@ (8007a64 <__pow5mult+0xa8>)
 80079ce:	3a01      	subs	r2, #1
 80079d0:	2300      	movs	r3, #0
 80079d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079d6:	f7ff fe5d 	bl	8007694 <__multadd>
 80079da:	4606      	mov	r6, r0
 80079dc:	10ad      	asrs	r5, r5, #2
 80079de:	d03d      	beq.n	8007a5c <__pow5mult+0xa0>
 80079e0:	69fc      	ldr	r4, [r7, #28]
 80079e2:	b97c      	cbnz	r4, 8007a04 <__pow5mult+0x48>
 80079e4:	2010      	movs	r0, #16
 80079e6:	f7ff fd3d 	bl	8007464 <malloc>
 80079ea:	4602      	mov	r2, r0
 80079ec:	61f8      	str	r0, [r7, #28]
 80079ee:	b928      	cbnz	r0, 80079fc <__pow5mult+0x40>
 80079f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a68 <__pow5mult+0xac>)
 80079f2:	481e      	ldr	r0, [pc, #120]	@ (8007a6c <__pow5mult+0xb0>)
 80079f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079f8:	f001 fb62 	bl	80090c0 <__assert_func>
 80079fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a00:	6004      	str	r4, [r0, #0]
 8007a02:	60c4      	str	r4, [r0, #12]
 8007a04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a0c:	b94c      	cbnz	r4, 8007a22 <__pow5mult+0x66>
 8007a0e:	f240 2171 	movw	r1, #625	@ 0x271
 8007a12:	4638      	mov	r0, r7
 8007a14:	f7ff ff1a 	bl	800784c <__i2b>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a1e:	4604      	mov	r4, r0
 8007a20:	6003      	str	r3, [r0, #0]
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	07eb      	lsls	r3, r5, #31
 8007a28:	d50a      	bpl.n	8007a40 <__pow5mult+0x84>
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f7ff ff22 	bl	8007878 <__multiply>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4680      	mov	r8, r0
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff fe09 	bl	8007650 <_Bfree>
 8007a3e:	4646      	mov	r6, r8
 8007a40:	106d      	asrs	r5, r5, #1
 8007a42:	d00b      	beq.n	8007a5c <__pow5mult+0xa0>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	b938      	cbnz	r0, 8007a58 <__pow5mult+0x9c>
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff ff13 	bl	8007878 <__multiply>
 8007a52:	6020      	str	r0, [r4, #0]
 8007a54:	f8c0 9000 	str.w	r9, [r0]
 8007a58:	4604      	mov	r4, r0
 8007a5a:	e7e4      	b.n	8007a26 <__pow5mult+0x6a>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a62:	bf00      	nop
 8007a64:	0800a018 	.word	0x0800a018
 8007a68:	08009e86 	.word	0x08009e86
 8007a6c:	08009f06 	.word	0x08009f06

08007a70 <__lshift>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	460c      	mov	r4, r1
 8007a76:	6849      	ldr	r1, [r1, #4]
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	4607      	mov	r7, r0
 8007a82:	4691      	mov	r9, r2
 8007a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a88:	f108 0601 	add.w	r6, r8, #1
 8007a8c:	42b3      	cmp	r3, r6
 8007a8e:	db0b      	blt.n	8007aa8 <__lshift+0x38>
 8007a90:	4638      	mov	r0, r7
 8007a92:	f7ff fd9d 	bl	80075d0 <_Balloc>
 8007a96:	4605      	mov	r5, r0
 8007a98:	b948      	cbnz	r0, 8007aae <__lshift+0x3e>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	4b28      	ldr	r3, [pc, #160]	@ (8007b40 <__lshift+0xd0>)
 8007a9e:	4829      	ldr	r0, [pc, #164]	@ (8007b44 <__lshift+0xd4>)
 8007aa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007aa4:	f001 fb0c 	bl	80090c0 <__assert_func>
 8007aa8:	3101      	adds	r1, #1
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	e7ee      	b.n	8007a8c <__lshift+0x1c>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f100 0114 	add.w	r1, r0, #20
 8007ab4:	f100 0210 	add.w	r2, r0, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	4553      	cmp	r3, sl
 8007abc:	db33      	blt.n	8007b26 <__lshift+0xb6>
 8007abe:	6920      	ldr	r0, [r4, #16]
 8007ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ac4:	f104 0314 	add.w	r3, r4, #20
 8007ac8:	f019 091f 	ands.w	r9, r9, #31
 8007acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ad4:	d02b      	beq.n	8007b2e <__lshift+0xbe>
 8007ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8007ada:	468a      	mov	sl, r1
 8007adc:	2200      	movs	r2, #0
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ae4:	4310      	orrs	r0, r2
 8007ae6:	f84a 0b04 	str.w	r0, [sl], #4
 8007aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aee:	459c      	cmp	ip, r3
 8007af0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af4:	d8f3      	bhi.n	8007ade <__lshift+0x6e>
 8007af6:	ebac 0304 	sub.w	r3, ip, r4
 8007afa:	3b15      	subs	r3, #21
 8007afc:	f023 0303 	bic.w	r3, r3, #3
 8007b00:	3304      	adds	r3, #4
 8007b02:	f104 0015 	add.w	r0, r4, #21
 8007b06:	4560      	cmp	r0, ip
 8007b08:	bf88      	it	hi
 8007b0a:	2304      	movhi	r3, #4
 8007b0c:	50ca      	str	r2, [r1, r3]
 8007b0e:	b10a      	cbz	r2, 8007b14 <__lshift+0xa4>
 8007b10:	f108 0602 	add.w	r6, r8, #2
 8007b14:	3e01      	subs	r6, #1
 8007b16:	4638      	mov	r0, r7
 8007b18:	612e      	str	r6, [r5, #16]
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	f7ff fd98 	bl	8007650 <_Bfree>
 8007b20:	4628      	mov	r0, r5
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	e7c5      	b.n	8007aba <__lshift+0x4a>
 8007b2e:	3904      	subs	r1, #4
 8007b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b34:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b38:	459c      	cmp	ip, r3
 8007b3a:	d8f9      	bhi.n	8007b30 <__lshift+0xc0>
 8007b3c:	e7ea      	b.n	8007b14 <__lshift+0xa4>
 8007b3e:	bf00      	nop
 8007b40:	08009ef5 	.word	0x08009ef5
 8007b44:	08009f06 	.word	0x08009f06

08007b48 <__mcmp>:
 8007b48:	690a      	ldr	r2, [r1, #16]
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6900      	ldr	r0, [r0, #16]
 8007b4e:	1a80      	subs	r0, r0, r2
 8007b50:	b530      	push	{r4, r5, lr}
 8007b52:	d10e      	bne.n	8007b72 <__mcmp+0x2a>
 8007b54:	3314      	adds	r3, #20
 8007b56:	3114      	adds	r1, #20
 8007b58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b68:	4295      	cmp	r5, r2
 8007b6a:	d003      	beq.n	8007b74 <__mcmp+0x2c>
 8007b6c:	d205      	bcs.n	8007b7a <__mcmp+0x32>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b72:	bd30      	pop	{r4, r5, pc}
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d3f3      	bcc.n	8007b60 <__mcmp+0x18>
 8007b78:	e7fb      	b.n	8007b72 <__mcmp+0x2a>
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	e7f9      	b.n	8007b72 <__mcmp+0x2a>
	...

08007b80 <__mdiff>:
 8007b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4689      	mov	r9, r1
 8007b86:	4606      	mov	r6, r0
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4648      	mov	r0, r9
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	f7ff ffdb 	bl	8007b48 <__mcmp>
 8007b92:	1e05      	subs	r5, r0, #0
 8007b94:	d112      	bne.n	8007bbc <__mdiff+0x3c>
 8007b96:	4629      	mov	r1, r5
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff fd19 	bl	80075d0 <_Balloc>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <__mdiff+0x2e>
 8007ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ca0 <__mdiff+0x120>)
 8007ba4:	f240 2137 	movw	r1, #567	@ 0x237
 8007ba8:	483e      	ldr	r0, [pc, #248]	@ (8007ca4 <__mdiff+0x124>)
 8007baa:	f001 fa89 	bl	80090c0 <__assert_func>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	b003      	add	sp, #12
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	bfbc      	itt	lt
 8007bbe:	464b      	movlt	r3, r9
 8007bc0:	46a1      	movlt	r9, r4
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bc8:	bfba      	itte	lt
 8007bca:	461c      	movlt	r4, r3
 8007bcc:	2501      	movlt	r5, #1
 8007bce:	2500      	movge	r5, #0
 8007bd0:	f7ff fcfe 	bl	80075d0 <_Balloc>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	b918      	cbnz	r0, 8007be0 <__mdiff+0x60>
 8007bd8:	4b31      	ldr	r3, [pc, #196]	@ (8007ca0 <__mdiff+0x120>)
 8007bda:	f240 2145 	movw	r1, #581	@ 0x245
 8007bde:	e7e3      	b.n	8007ba8 <__mdiff+0x28>
 8007be0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007be4:	6926      	ldr	r6, [r4, #16]
 8007be6:	60c5      	str	r5, [r0, #12]
 8007be8:	f109 0310 	add.w	r3, r9, #16
 8007bec:	f109 0514 	add.w	r5, r9, #20
 8007bf0:	f104 0e14 	add.w	lr, r4, #20
 8007bf4:	f100 0b14 	add.w	fp, r0, #20
 8007bf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007bfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	46d9      	mov	r9, fp
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	9b01      	ldr	r3, [sp, #4]
 8007c0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	fa1f f38a 	uxth.w	r3, sl
 8007c18:	4619      	mov	r1, r3
 8007c1a:	b283      	uxth	r3, r0
 8007c1c:	1acb      	subs	r3, r1, r3
 8007c1e:	0c00      	lsrs	r0, r0, #16
 8007c20:	4463      	add	r3, ip
 8007c22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c30:	4576      	cmp	r6, lr
 8007c32:	f849 3b04 	str.w	r3, [r9], #4
 8007c36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c3a:	d8e5      	bhi.n	8007c08 <__mdiff+0x88>
 8007c3c:	1b33      	subs	r3, r6, r4
 8007c3e:	3b15      	subs	r3, #21
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	3415      	adds	r4, #21
 8007c46:	3304      	adds	r3, #4
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	bf38      	it	cc
 8007c4c:	2304      	movcc	r3, #4
 8007c4e:	441d      	add	r5, r3
 8007c50:	445b      	add	r3, fp
 8007c52:	461e      	mov	r6, r3
 8007c54:	462c      	mov	r4, r5
 8007c56:	4544      	cmp	r4, r8
 8007c58:	d30e      	bcc.n	8007c78 <__mdiff+0xf8>
 8007c5a:	f108 0103 	add.w	r1, r8, #3
 8007c5e:	1b49      	subs	r1, r1, r5
 8007c60:	f021 0103 	bic.w	r1, r1, #3
 8007c64:	3d03      	subs	r5, #3
 8007c66:	45a8      	cmp	r8, r5
 8007c68:	bf38      	it	cc
 8007c6a:	2100      	movcc	r1, #0
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c72:	b191      	cbz	r1, 8007c9a <__mdiff+0x11a>
 8007c74:	6117      	str	r7, [r2, #16]
 8007c76:	e79d      	b.n	8007bb4 <__mdiff+0x34>
 8007c78:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c7c:	46e6      	mov	lr, ip
 8007c7e:	0c08      	lsrs	r0, r1, #16
 8007c80:	fa1c fc81 	uxtah	ip, ip, r1
 8007c84:	4471      	add	r1, lr
 8007c86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c8a:	b289      	uxth	r1, r1
 8007c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c90:	f846 1b04 	str.w	r1, [r6], #4
 8007c94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c98:	e7dd      	b.n	8007c56 <__mdiff+0xd6>
 8007c9a:	3f01      	subs	r7, #1
 8007c9c:	e7e7      	b.n	8007c6e <__mdiff+0xee>
 8007c9e:	bf00      	nop
 8007ca0:	08009ef5 	.word	0x08009ef5
 8007ca4:	08009f06 	.word	0x08009f06

08007ca8 <__ulp>:
 8007ca8:	b082      	sub	sp, #8
 8007caa:	ed8d 0b00 	vstr	d0, [sp]
 8007cae:	9a01      	ldr	r2, [sp, #4]
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <__ulp+0x48>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc08      	bgt.n	8007cce <__ulp+0x26>
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007cc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007cc6:	da04      	bge.n	8007cd2 <__ulp+0x2a>
 8007cc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ccc:	4113      	asrs	r3, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	e008      	b.n	8007ce4 <__ulp+0x3c>
 8007cd2:	f1a2 0314 	sub.w	r3, r2, #20
 8007cd6:	2b1e      	cmp	r3, #30
 8007cd8:	bfda      	itte	le
 8007cda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007cde:	40da      	lsrle	r2, r3
 8007ce0:	2201      	movgt	r2, #1
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	ec41 0b10 	vmov	d0, r0, r1
 8007cec:	b002      	add	sp, #8
 8007cee:	4770      	bx	lr
 8007cf0:	7ff00000 	.word	0x7ff00000

08007cf4 <__b2d>:
 8007cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	6906      	ldr	r6, [r0, #16]
 8007cfa:	f100 0814 	add.w	r8, r0, #20
 8007cfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007d02:	1f37      	subs	r7, r6, #4
 8007d04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f7ff fd53 	bl	80077b4 <__hi0bits>
 8007d0e:	f1c0 0320 	rsb	r3, r0, #32
 8007d12:	280a      	cmp	r0, #10
 8007d14:	600b      	str	r3, [r1, #0]
 8007d16:	491b      	ldr	r1, [pc, #108]	@ (8007d84 <__b2d+0x90>)
 8007d18:	dc15      	bgt.n	8007d46 <__b2d+0x52>
 8007d1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007d1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007d22:	45b8      	cmp	r8, r7
 8007d24:	ea43 0501 	orr.w	r5, r3, r1
 8007d28:	bf34      	ite	cc
 8007d2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d2e:	2300      	movcs	r3, #0
 8007d30:	3015      	adds	r0, #21
 8007d32:	fa02 f000 	lsl.w	r0, r2, r0
 8007d36:	fa23 f30c 	lsr.w	r3, r3, ip
 8007d3a:	4303      	orrs	r3, r0
 8007d3c:	461c      	mov	r4, r3
 8007d3e:	ec45 4b10 	vmov	d0, r4, r5
 8007d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d46:	45b8      	cmp	r8, r7
 8007d48:	bf3a      	itte	cc
 8007d4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007d52:	2300      	movcs	r3, #0
 8007d54:	380b      	subs	r0, #11
 8007d56:	d012      	beq.n	8007d7e <__b2d+0x8a>
 8007d58:	f1c0 0120 	rsb	r1, r0, #32
 8007d5c:	fa23 f401 	lsr.w	r4, r3, r1
 8007d60:	4082      	lsls	r2, r0
 8007d62:	4322      	orrs	r2, r4
 8007d64:	4547      	cmp	r7, r8
 8007d66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007d6a:	bf8c      	ite	hi
 8007d6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007d70:	2200      	movls	r2, #0
 8007d72:	4083      	lsls	r3, r0
 8007d74:	40ca      	lsrs	r2, r1
 8007d76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	e7de      	b.n	8007d3c <__b2d+0x48>
 8007d7e:	ea42 0501 	orr.w	r5, r2, r1
 8007d82:	e7db      	b.n	8007d3c <__b2d+0x48>
 8007d84:	3ff00000 	.word	0x3ff00000

08007d88 <__d2b>:
 8007d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	2101      	movs	r1, #1
 8007d90:	ec59 8b10 	vmov	r8, r9, d0
 8007d94:	4616      	mov	r6, r2
 8007d96:	f7ff fc1b 	bl	80075d0 <_Balloc>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	b930      	cbnz	r0, 8007dac <__d2b+0x24>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b23      	ldr	r3, [pc, #140]	@ (8007e30 <__d2b+0xa8>)
 8007da2:	4824      	ldr	r0, [pc, #144]	@ (8007e34 <__d2b+0xac>)
 8007da4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007da8:	f001 f98a 	bl	80090c0 <__assert_func>
 8007dac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007db4:	b10d      	cbz	r5, 8007dba <__d2b+0x32>
 8007db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8007dc0:	d023      	beq.n	8007e0a <__d2b+0x82>
 8007dc2:	4668      	mov	r0, sp
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	f7ff fd14 	bl	80077f2 <__lo0bits>
 8007dca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dce:	b1d0      	cbz	r0, 8007e06 <__d2b+0x7e>
 8007dd0:	f1c0 0320 	rsb	r3, r0, #32
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	40c2      	lsrs	r2, r0
 8007ddc:	6163      	str	r3, [r4, #20]
 8007dde:	9201      	str	r2, [sp, #4]
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2201      	moveq	r2, #1
 8007dea:	2202      	movne	r2, #2
 8007dec:	6122      	str	r2, [r4, #16]
 8007dee:	b1a5      	cbz	r5, 8007e1a <__d2b+0x92>
 8007df0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007df4:	4405      	add	r5, r0
 8007df6:	603d      	str	r5, [r7, #0]
 8007df8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007dfc:	6030      	str	r0, [r6, #0]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	b003      	add	sp, #12
 8007e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e06:	6161      	str	r1, [r4, #20]
 8007e08:	e7ea      	b.n	8007de0 <__d2b+0x58>
 8007e0a:	a801      	add	r0, sp, #4
 8007e0c:	f7ff fcf1 	bl	80077f2 <__lo0bits>
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	6163      	str	r3, [r4, #20]
 8007e14:	3020      	adds	r0, #32
 8007e16:	2201      	movs	r2, #1
 8007e18:	e7e8      	b.n	8007dec <__d2b+0x64>
 8007e1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e22:	6038      	str	r0, [r7, #0]
 8007e24:	6918      	ldr	r0, [r3, #16]
 8007e26:	f7ff fcc5 	bl	80077b4 <__hi0bits>
 8007e2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e2e:	e7e5      	b.n	8007dfc <__d2b+0x74>
 8007e30:	08009ef5 	.word	0x08009ef5
 8007e34:	08009f06 	.word	0x08009f06

08007e38 <__ratio>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	e9cd 1000 	strd	r1, r0, [sp]
 8007e42:	a902      	add	r1, sp, #8
 8007e44:	f7ff ff56 	bl	8007cf4 <__b2d>
 8007e48:	9800      	ldr	r0, [sp, #0]
 8007e4a:	a903      	add	r1, sp, #12
 8007e4c:	ec55 4b10 	vmov	r4, r5, d0
 8007e50:	f7ff ff50 	bl	8007cf4 <__b2d>
 8007e54:	9b01      	ldr	r3, [sp, #4]
 8007e56:	6919      	ldr	r1, [r3, #16]
 8007e58:	9b00      	ldr	r3, [sp, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	1ac9      	subs	r1, r1, r3
 8007e5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	ec5b ab10 	vmov	sl, fp, d0
 8007e68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfce      	itee	gt
 8007e70:	462a      	movgt	r2, r5
 8007e72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e76:	465a      	movle	r2, fp
 8007e78:	462f      	mov	r7, r5
 8007e7a:	46d9      	mov	r9, fp
 8007e7c:	bfcc      	ite	gt
 8007e7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007e86:	464b      	mov	r3, r9
 8007e88:	4652      	mov	r2, sl
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	f7f8 fcdd 	bl	800084c <__aeabi_ddiv>
 8007e92:	ec41 0b10 	vmov	d0, r0, r1
 8007e96:	b005      	add	sp, #20
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e9c <__copybits>:
 8007e9c:	3901      	subs	r1, #1
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	1149      	asrs	r1, r1, #5
 8007ea2:	6914      	ldr	r4, [r2, #16]
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	f102 0314 	add.w	r3, r2, #20
 8007eaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007eb2:	1f05      	subs	r5, r0, #4
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d30c      	bcc.n	8007ed2 <__copybits+0x36>
 8007eb8:	1aa3      	subs	r3, r4, r2
 8007eba:	3b11      	subs	r3, #17
 8007ebc:	f023 0303 	bic.w	r3, r3, #3
 8007ec0:	3211      	adds	r2, #17
 8007ec2:	42a2      	cmp	r2, r4
 8007ec4:	bf88      	it	hi
 8007ec6:	2300      	movhi	r3, #0
 8007ec8:	4418      	add	r0, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4288      	cmp	r0, r1
 8007ece:	d305      	bcc.n	8007edc <__copybits+0x40>
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ed6:	f845 6f04 	str.w	r6, [r5, #4]!
 8007eda:	e7eb      	b.n	8007eb4 <__copybits+0x18>
 8007edc:	f840 3b04 	str.w	r3, [r0], #4
 8007ee0:	e7f4      	b.n	8007ecc <__copybits+0x30>

08007ee2 <__any_on>:
 8007ee2:	f100 0214 	add.w	r2, r0, #20
 8007ee6:	6900      	ldr	r0, [r0, #16]
 8007ee8:	114b      	asrs	r3, r1, #5
 8007eea:	4298      	cmp	r0, r3
 8007eec:	b510      	push	{r4, lr}
 8007eee:	db11      	blt.n	8007f14 <__any_on+0x32>
 8007ef0:	dd0a      	ble.n	8007f08 <__any_on+0x26>
 8007ef2:	f011 011f 	ands.w	r1, r1, #31
 8007ef6:	d007      	beq.n	8007f08 <__any_on+0x26>
 8007ef8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007efc:	fa24 f001 	lsr.w	r0, r4, r1
 8007f00:	fa00 f101 	lsl.w	r1, r0, r1
 8007f04:	428c      	cmp	r4, r1
 8007f06:	d10b      	bne.n	8007f20 <__any_on+0x3e>
 8007f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d803      	bhi.n	8007f18 <__any_on+0x36>
 8007f10:	2000      	movs	r0, #0
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	4603      	mov	r3, r0
 8007f16:	e7f7      	b.n	8007f08 <__any_on+0x26>
 8007f18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d0f5      	beq.n	8007f0c <__any_on+0x2a>
 8007f20:	2001      	movs	r0, #1
 8007f22:	e7f6      	b.n	8007f12 <__any_on+0x30>

08007f24 <sulp>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	ec45 4b10 	vmov	d0, r4, r5
 8007f2e:	4616      	mov	r6, r2
 8007f30:	f7ff feba 	bl	8007ca8 <__ulp>
 8007f34:	ec51 0b10 	vmov	r0, r1, d0
 8007f38:	b17e      	cbz	r6, 8007f5a <sulp+0x36>
 8007f3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd09      	ble.n	8007f5a <sulp+0x36>
 8007f46:	051b      	lsls	r3, r3, #20
 8007f48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007f4c:	2400      	movs	r4, #0
 8007f4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	ec41 0b10 	vmov	d0, r0, r1
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}

08007f60 <_strtod_l>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	b09f      	sub	sp, #124	@ 0x7c
 8007f66:	460c      	mov	r4, r1
 8007f68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007f6e:	9005      	str	r0, [sp, #20]
 8007f70:	f04f 0a00 	mov.w	sl, #0
 8007f74:	f04f 0b00 	mov.w	fp, #0
 8007f78:	460a      	mov	r2, r1
 8007f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f7c:	7811      	ldrb	r1, [r2, #0]
 8007f7e:	292b      	cmp	r1, #43	@ 0x2b
 8007f80:	d04a      	beq.n	8008018 <_strtod_l+0xb8>
 8007f82:	d838      	bhi.n	8007ff6 <_strtod_l+0x96>
 8007f84:	290d      	cmp	r1, #13
 8007f86:	d832      	bhi.n	8007fee <_strtod_l+0x8e>
 8007f88:	2908      	cmp	r1, #8
 8007f8a:	d832      	bhi.n	8007ff2 <_strtod_l+0x92>
 8007f8c:	2900      	cmp	r1, #0
 8007f8e:	d03b      	beq.n	8008008 <_strtod_l+0xa8>
 8007f90:	2200      	movs	r2, #0
 8007f92:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007f96:	782a      	ldrb	r2, [r5, #0]
 8007f98:	2a30      	cmp	r2, #48	@ 0x30
 8007f9a:	f040 80b2 	bne.w	8008102 <_strtod_l+0x1a2>
 8007f9e:	786a      	ldrb	r2, [r5, #1]
 8007fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007fa4:	2a58      	cmp	r2, #88	@ 0x58
 8007fa6:	d16e      	bne.n	8008086 <_strtod_l+0x126>
 8007fa8:	9302      	str	r3, [sp, #8]
 8007faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	ab1a      	add	r3, sp, #104	@ 0x68
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80081f0 <_strtod_l+0x290>)
 8007fb4:	9805      	ldr	r0, [sp, #20]
 8007fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007fb8:	a919      	add	r1, sp, #100	@ 0x64
 8007fba:	f001 f91b 	bl	80091f4 <__gethex>
 8007fbe:	f010 060f 	ands.w	r6, r0, #15
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	d005      	beq.n	8007fd2 <_strtod_l+0x72>
 8007fc6:	2e06      	cmp	r6, #6
 8007fc8:	d128      	bne.n	800801c <_strtod_l+0xbc>
 8007fca:	3501      	adds	r5, #1
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8007fd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 858e 	bne.w	8008af6 <_strtod_l+0xb96>
 8007fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fdc:	b1cb      	cbz	r3, 8008012 <_strtod_l+0xb2>
 8007fde:	4652      	mov	r2, sl
 8007fe0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007fe4:	ec43 2b10 	vmov	d0, r2, r3
 8007fe8:	b01f      	add	sp, #124	@ 0x7c
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	2920      	cmp	r1, #32
 8007ff0:	d1ce      	bne.n	8007f90 <_strtod_l+0x30>
 8007ff2:	3201      	adds	r2, #1
 8007ff4:	e7c1      	b.n	8007f7a <_strtod_l+0x1a>
 8007ff6:	292d      	cmp	r1, #45	@ 0x2d
 8007ff8:	d1ca      	bne.n	8007f90 <_strtod_l+0x30>
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	910e      	str	r1, [sp, #56]	@ 0x38
 8007ffe:	1c51      	adds	r1, r2, #1
 8008000:	9119      	str	r1, [sp, #100]	@ 0x64
 8008002:	7852      	ldrb	r2, [r2, #1]
 8008004:	2a00      	cmp	r2, #0
 8008006:	d1c5      	bne.n	8007f94 <_strtod_l+0x34>
 8008008:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800800a:	9419      	str	r4, [sp, #100]	@ 0x64
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8570 	bne.w	8008af2 <_strtod_l+0xb92>
 8008012:	4652      	mov	r2, sl
 8008014:	465b      	mov	r3, fp
 8008016:	e7e5      	b.n	8007fe4 <_strtod_l+0x84>
 8008018:	2100      	movs	r1, #0
 800801a:	e7ef      	b.n	8007ffc <_strtod_l+0x9c>
 800801c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800801e:	b13a      	cbz	r2, 8008030 <_strtod_l+0xd0>
 8008020:	2135      	movs	r1, #53	@ 0x35
 8008022:	a81c      	add	r0, sp, #112	@ 0x70
 8008024:	f7ff ff3a 	bl	8007e9c <__copybits>
 8008028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800802a:	9805      	ldr	r0, [sp, #20]
 800802c:	f7ff fb10 	bl	8007650 <_Bfree>
 8008030:	3e01      	subs	r6, #1
 8008032:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008034:	2e04      	cmp	r6, #4
 8008036:	d806      	bhi.n	8008046 <_strtod_l+0xe6>
 8008038:	e8df f006 	tbb	[pc, r6]
 800803c:	201d0314 	.word	0x201d0314
 8008040:	14          	.byte	0x14
 8008041:	00          	.byte	0x00
 8008042:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008046:	05e1      	lsls	r1, r4, #23
 8008048:	bf48      	it	mi
 800804a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800804e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008052:	0d1b      	lsrs	r3, r3, #20
 8008054:	051b      	lsls	r3, r3, #20
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1bb      	bne.n	8007fd2 <_strtod_l+0x72>
 800805a:	f7fe fb1f 	bl	800669c <__errno>
 800805e:	2322      	movs	r3, #34	@ 0x22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	e7b6      	b.n	8007fd2 <_strtod_l+0x72>
 8008064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008068:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800806c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008070:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008074:	e7e7      	b.n	8008046 <_strtod_l+0xe6>
 8008076:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80081f8 <_strtod_l+0x298>
 800807a:	e7e4      	b.n	8008046 <_strtod_l+0xe6>
 800807c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008080:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008084:	e7df      	b.n	8008046 <_strtod_l+0xe6>
 8008086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	9219      	str	r2, [sp, #100]	@ 0x64
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b30      	cmp	r3, #48	@ 0x30
 8008090:	d0f9      	beq.n	8008086 <_strtod_l+0x126>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d09d      	beq.n	8007fd2 <_strtod_l+0x72>
 8008096:	2301      	movs	r3, #1
 8008098:	2700      	movs	r7, #0
 800809a:	9308      	str	r3, [sp, #32]
 800809c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800809e:	930c      	str	r3, [sp, #48]	@ 0x30
 80080a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80080a2:	46b9      	mov	r9, r7
 80080a4:	220a      	movs	r2, #10
 80080a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80080a8:	7805      	ldrb	r5, [r0, #0]
 80080aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80080ae:	b2d9      	uxtb	r1, r3
 80080b0:	2909      	cmp	r1, #9
 80080b2:	d928      	bls.n	8008106 <_strtod_l+0x1a6>
 80080b4:	494f      	ldr	r1, [pc, #316]	@ (80081f4 <_strtod_l+0x294>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	f000 ffd6 	bl	8009068 <strncmp>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d032      	beq.n	8008126 <_strtod_l+0x1c6>
 80080c0:	2000      	movs	r0, #0
 80080c2:	462a      	mov	r2, r5
 80080c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80080c6:	464d      	mov	r5, r9
 80080c8:	4603      	mov	r3, r0
 80080ca:	2a65      	cmp	r2, #101	@ 0x65
 80080cc:	d001      	beq.n	80080d2 <_strtod_l+0x172>
 80080ce:	2a45      	cmp	r2, #69	@ 0x45
 80080d0:	d114      	bne.n	80080fc <_strtod_l+0x19c>
 80080d2:	b91d      	cbnz	r5, 80080dc <_strtod_l+0x17c>
 80080d4:	9a08      	ldr	r2, [sp, #32]
 80080d6:	4302      	orrs	r2, r0
 80080d8:	d096      	beq.n	8008008 <_strtod_l+0xa8>
 80080da:	2500      	movs	r5, #0
 80080dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80080de:	1c62      	adds	r2, r4, #1
 80080e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80080e2:	7862      	ldrb	r2, [r4, #1]
 80080e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80080e6:	d07a      	beq.n	80081de <_strtod_l+0x27e>
 80080e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80080ea:	d07e      	beq.n	80081ea <_strtod_l+0x28a>
 80080ec:	f04f 0c00 	mov.w	ip, #0
 80080f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80080f4:	2909      	cmp	r1, #9
 80080f6:	f240 8085 	bls.w	8008204 <_strtod_l+0x2a4>
 80080fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80080fc:	f04f 0800 	mov.w	r8, #0
 8008100:	e0a5      	b.n	800824e <_strtod_l+0x2ee>
 8008102:	2300      	movs	r3, #0
 8008104:	e7c8      	b.n	8008098 <_strtod_l+0x138>
 8008106:	f1b9 0f08 	cmp.w	r9, #8
 800810a:	bfd8      	it	le
 800810c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800810e:	f100 0001 	add.w	r0, r0, #1
 8008112:	bfda      	itte	le
 8008114:	fb02 3301 	mlale	r3, r2, r1, r3
 8008118:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800811a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800811e:	f109 0901 	add.w	r9, r9, #1
 8008122:	9019      	str	r0, [sp, #100]	@ 0x64
 8008124:	e7bf      	b.n	80080a6 <_strtod_l+0x146>
 8008126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	9219      	str	r2, [sp, #100]	@ 0x64
 800812c:	785a      	ldrb	r2, [r3, #1]
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d03b      	beq.n	80081ac <_strtod_l+0x24c>
 8008134:	900a      	str	r0, [sp, #40]	@ 0x28
 8008136:	464d      	mov	r5, r9
 8008138:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800813c:	2b09      	cmp	r3, #9
 800813e:	d912      	bls.n	8008166 <_strtod_l+0x206>
 8008140:	2301      	movs	r3, #1
 8008142:	e7c2      	b.n	80080ca <_strtod_l+0x16a>
 8008144:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	9219      	str	r2, [sp, #100]	@ 0x64
 800814a:	785a      	ldrb	r2, [r3, #1]
 800814c:	3001      	adds	r0, #1
 800814e:	2a30      	cmp	r2, #48	@ 0x30
 8008150:	d0f8      	beq.n	8008144 <_strtod_l+0x1e4>
 8008152:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008156:	2b08      	cmp	r3, #8
 8008158:	f200 84d2 	bhi.w	8008b00 <_strtod_l+0xba0>
 800815c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800815e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008160:	2000      	movs	r0, #0
 8008162:	930c      	str	r3, [sp, #48]	@ 0x30
 8008164:	4605      	mov	r5, r0
 8008166:	3a30      	subs	r2, #48	@ 0x30
 8008168:	f100 0301 	add.w	r3, r0, #1
 800816c:	d018      	beq.n	80081a0 <_strtod_l+0x240>
 800816e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008170:	4419      	add	r1, r3
 8008172:	910a      	str	r1, [sp, #40]	@ 0x28
 8008174:	462e      	mov	r6, r5
 8008176:	f04f 0e0a 	mov.w	lr, #10
 800817a:	1c71      	adds	r1, r6, #1
 800817c:	eba1 0c05 	sub.w	ip, r1, r5
 8008180:	4563      	cmp	r3, ip
 8008182:	dc15      	bgt.n	80081b0 <_strtod_l+0x250>
 8008184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008188:	182b      	adds	r3, r5, r0
 800818a:	2b08      	cmp	r3, #8
 800818c:	f105 0501 	add.w	r5, r5, #1
 8008190:	4405      	add	r5, r0
 8008192:	dc1a      	bgt.n	80081ca <_strtod_l+0x26a>
 8008194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008196:	230a      	movs	r3, #10
 8008198:	fb03 2301 	mla	r3, r3, r1, r2
 800819c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800819e:	2300      	movs	r3, #0
 80081a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081a2:	1c51      	adds	r1, r2, #1
 80081a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80081a6:	7852      	ldrb	r2, [r2, #1]
 80081a8:	4618      	mov	r0, r3
 80081aa:	e7c5      	b.n	8008138 <_strtod_l+0x1d8>
 80081ac:	4648      	mov	r0, r9
 80081ae:	e7ce      	b.n	800814e <_strtod_l+0x1ee>
 80081b0:	2e08      	cmp	r6, #8
 80081b2:	dc05      	bgt.n	80081c0 <_strtod_l+0x260>
 80081b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80081b6:	fb0e f606 	mul.w	r6, lr, r6
 80081ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80081bc:	460e      	mov	r6, r1
 80081be:	e7dc      	b.n	800817a <_strtod_l+0x21a>
 80081c0:	2910      	cmp	r1, #16
 80081c2:	bfd8      	it	le
 80081c4:	fb0e f707 	mulle.w	r7, lr, r7
 80081c8:	e7f8      	b.n	80081bc <_strtod_l+0x25c>
 80081ca:	2b0f      	cmp	r3, #15
 80081cc:	bfdc      	itt	le
 80081ce:	230a      	movle	r3, #10
 80081d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80081d4:	e7e3      	b.n	800819e <_strtod_l+0x23e>
 80081d6:	2300      	movs	r3, #0
 80081d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80081da:	2301      	movs	r3, #1
 80081dc:	e77a      	b.n	80080d4 <_strtod_l+0x174>
 80081de:	f04f 0c00 	mov.w	ip, #0
 80081e2:	1ca2      	adds	r2, r4, #2
 80081e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80081e6:	78a2      	ldrb	r2, [r4, #2]
 80081e8:	e782      	b.n	80080f0 <_strtod_l+0x190>
 80081ea:	f04f 0c01 	mov.w	ip, #1
 80081ee:	e7f8      	b.n	80081e2 <_strtod_l+0x282>
 80081f0:	0800a12c 	.word	0x0800a12c
 80081f4:	08009f5f 	.word	0x08009f5f
 80081f8:	7ff00000 	.word	0x7ff00000
 80081fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081fe:	1c51      	adds	r1, r2, #1
 8008200:	9119      	str	r1, [sp, #100]	@ 0x64
 8008202:	7852      	ldrb	r2, [r2, #1]
 8008204:	2a30      	cmp	r2, #48	@ 0x30
 8008206:	d0f9      	beq.n	80081fc <_strtod_l+0x29c>
 8008208:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800820c:	2908      	cmp	r1, #8
 800820e:	f63f af75 	bhi.w	80080fc <_strtod_l+0x19c>
 8008212:	3a30      	subs	r2, #48	@ 0x30
 8008214:	9209      	str	r2, [sp, #36]	@ 0x24
 8008216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008218:	920f      	str	r2, [sp, #60]	@ 0x3c
 800821a:	f04f 080a 	mov.w	r8, #10
 800821e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008220:	1c56      	adds	r6, r2, #1
 8008222:	9619      	str	r6, [sp, #100]	@ 0x64
 8008224:	7852      	ldrb	r2, [r2, #1]
 8008226:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800822a:	f1be 0f09 	cmp.w	lr, #9
 800822e:	d939      	bls.n	80082a4 <_strtod_l+0x344>
 8008230:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008232:	1a76      	subs	r6, r6, r1
 8008234:	2e08      	cmp	r6, #8
 8008236:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800823a:	dc03      	bgt.n	8008244 <_strtod_l+0x2e4>
 800823c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800823e:	4588      	cmp	r8, r1
 8008240:	bfa8      	it	ge
 8008242:	4688      	movge	r8, r1
 8008244:	f1bc 0f00 	cmp.w	ip, #0
 8008248:	d001      	beq.n	800824e <_strtod_l+0x2ee>
 800824a:	f1c8 0800 	rsb	r8, r8, #0
 800824e:	2d00      	cmp	r5, #0
 8008250:	d14e      	bne.n	80082f0 <_strtod_l+0x390>
 8008252:	9908      	ldr	r1, [sp, #32]
 8008254:	4308      	orrs	r0, r1
 8008256:	f47f aebc 	bne.w	8007fd2 <_strtod_l+0x72>
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f aed4 	bne.w	8008008 <_strtod_l+0xa8>
 8008260:	2a69      	cmp	r2, #105	@ 0x69
 8008262:	d028      	beq.n	80082b6 <_strtod_l+0x356>
 8008264:	dc25      	bgt.n	80082b2 <_strtod_l+0x352>
 8008266:	2a49      	cmp	r2, #73	@ 0x49
 8008268:	d025      	beq.n	80082b6 <_strtod_l+0x356>
 800826a:	2a4e      	cmp	r2, #78	@ 0x4e
 800826c:	f47f aecc 	bne.w	8008008 <_strtod_l+0xa8>
 8008270:	499a      	ldr	r1, [pc, #616]	@ (80084dc <_strtod_l+0x57c>)
 8008272:	a819      	add	r0, sp, #100	@ 0x64
 8008274:	f001 f9e0 	bl	8009638 <__match>
 8008278:	2800      	cmp	r0, #0
 800827a:	f43f aec5 	beq.w	8008008 <_strtod_l+0xa8>
 800827e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b28      	cmp	r3, #40	@ 0x28
 8008284:	d12e      	bne.n	80082e4 <_strtod_l+0x384>
 8008286:	4996      	ldr	r1, [pc, #600]	@ (80084e0 <_strtod_l+0x580>)
 8008288:	aa1c      	add	r2, sp, #112	@ 0x70
 800828a:	a819      	add	r0, sp, #100	@ 0x64
 800828c:	f001 f9e8 	bl	8009660 <__hexnan>
 8008290:	2805      	cmp	r0, #5
 8008292:	d127      	bne.n	80082e4 <_strtod_l+0x384>
 8008294:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008296:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800829a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800829e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80082a2:	e696      	b.n	8007fd2 <_strtod_l+0x72>
 80082a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082a6:	fb08 2101 	mla	r1, r8, r1, r2
 80082aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80082ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80082b0:	e7b5      	b.n	800821e <_strtod_l+0x2be>
 80082b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80082b4:	e7da      	b.n	800826c <_strtod_l+0x30c>
 80082b6:	498b      	ldr	r1, [pc, #556]	@ (80084e4 <_strtod_l+0x584>)
 80082b8:	a819      	add	r0, sp, #100	@ 0x64
 80082ba:	f001 f9bd 	bl	8009638 <__match>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f43f aea2 	beq.w	8008008 <_strtod_l+0xa8>
 80082c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082c6:	4988      	ldr	r1, [pc, #544]	@ (80084e8 <_strtod_l+0x588>)
 80082c8:	3b01      	subs	r3, #1
 80082ca:	a819      	add	r0, sp, #100	@ 0x64
 80082cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80082ce:	f001 f9b3 	bl	8009638 <__match>
 80082d2:	b910      	cbnz	r0, 80082da <_strtod_l+0x37a>
 80082d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082d6:	3301      	adds	r3, #1
 80082d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80082da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80084f8 <_strtod_l+0x598>
 80082de:	f04f 0a00 	mov.w	sl, #0
 80082e2:	e676      	b.n	8007fd2 <_strtod_l+0x72>
 80082e4:	4881      	ldr	r0, [pc, #516]	@ (80084ec <_strtod_l+0x58c>)
 80082e6:	f000 fee3 	bl	80090b0 <nan>
 80082ea:	ec5b ab10 	vmov	sl, fp, d0
 80082ee:	e670      	b.n	8007fd2 <_strtod_l+0x72>
 80082f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80082f4:	eba8 0303 	sub.w	r3, r8, r3
 80082f8:	f1b9 0f00 	cmp.w	r9, #0
 80082fc:	bf08      	it	eq
 80082fe:	46a9      	moveq	r9, r5
 8008300:	2d10      	cmp	r5, #16
 8008302:	9309      	str	r3, [sp, #36]	@ 0x24
 8008304:	462c      	mov	r4, r5
 8008306:	bfa8      	it	ge
 8008308:	2410      	movge	r4, #16
 800830a:	f7f8 f8fb 	bl	8000504 <__aeabi_ui2d>
 800830e:	2d09      	cmp	r5, #9
 8008310:	4682      	mov	sl, r0
 8008312:	468b      	mov	fp, r1
 8008314:	dc13      	bgt.n	800833e <_strtod_l+0x3de>
 8008316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	f43f ae5a 	beq.w	8007fd2 <_strtod_l+0x72>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	dd78      	ble.n	8008414 <_strtod_l+0x4b4>
 8008322:	2b16      	cmp	r3, #22
 8008324:	dc5f      	bgt.n	80083e6 <_strtod_l+0x486>
 8008326:	4972      	ldr	r1, [pc, #456]	@ (80084f0 <_strtod_l+0x590>)
 8008328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	4652      	mov	r2, sl
 8008332:	465b      	mov	r3, fp
 8008334:	f7f8 f960 	bl	80005f8 <__aeabi_dmul>
 8008338:	4682      	mov	sl, r0
 800833a:	468b      	mov	fp, r1
 800833c:	e649      	b.n	8007fd2 <_strtod_l+0x72>
 800833e:	4b6c      	ldr	r3, [pc, #432]	@ (80084f0 <_strtod_l+0x590>)
 8008340:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008344:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008348:	f7f8 f956 	bl	80005f8 <__aeabi_dmul>
 800834c:	4682      	mov	sl, r0
 800834e:	4638      	mov	r0, r7
 8008350:	468b      	mov	fp, r1
 8008352:	f7f8 f8d7 	bl	8000504 <__aeabi_ui2d>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4650      	mov	r0, sl
 800835c:	4659      	mov	r1, fp
 800835e:	f7f7 ff95 	bl	800028c <__adddf3>
 8008362:	2d0f      	cmp	r5, #15
 8008364:	4682      	mov	sl, r0
 8008366:	468b      	mov	fp, r1
 8008368:	ddd5      	ble.n	8008316 <_strtod_l+0x3b6>
 800836a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836c:	1b2c      	subs	r4, r5, r4
 800836e:	441c      	add	r4, r3
 8008370:	2c00      	cmp	r4, #0
 8008372:	f340 8093 	ble.w	800849c <_strtod_l+0x53c>
 8008376:	f014 030f 	ands.w	r3, r4, #15
 800837a:	d00a      	beq.n	8008392 <_strtod_l+0x432>
 800837c:	495c      	ldr	r1, [pc, #368]	@ (80084f0 <_strtod_l+0x590>)
 800837e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008382:	4652      	mov	r2, sl
 8008384:	465b      	mov	r3, fp
 8008386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800838a:	f7f8 f935 	bl	80005f8 <__aeabi_dmul>
 800838e:	4682      	mov	sl, r0
 8008390:	468b      	mov	fp, r1
 8008392:	f034 040f 	bics.w	r4, r4, #15
 8008396:	d073      	beq.n	8008480 <_strtod_l+0x520>
 8008398:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800839c:	dd49      	ble.n	8008432 <_strtod_l+0x4d2>
 800839e:	2400      	movs	r4, #0
 80083a0:	46a0      	mov	r8, r4
 80083a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083a4:	46a1      	mov	r9, r4
 80083a6:	9a05      	ldr	r2, [sp, #20]
 80083a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80084f8 <_strtod_l+0x598>
 80083ac:	2322      	movs	r3, #34	@ 0x22
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	f04f 0a00 	mov.w	sl, #0
 80083b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f43f ae0b 	beq.w	8007fd2 <_strtod_l+0x72>
 80083bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083be:	9805      	ldr	r0, [sp, #20]
 80083c0:	f7ff f946 	bl	8007650 <_Bfree>
 80083c4:	9805      	ldr	r0, [sp, #20]
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7ff f942 	bl	8007650 <_Bfree>
 80083cc:	9805      	ldr	r0, [sp, #20]
 80083ce:	4641      	mov	r1, r8
 80083d0:	f7ff f93e 	bl	8007650 <_Bfree>
 80083d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083d6:	9805      	ldr	r0, [sp, #20]
 80083d8:	f7ff f93a 	bl	8007650 <_Bfree>
 80083dc:	9805      	ldr	r0, [sp, #20]
 80083de:	4621      	mov	r1, r4
 80083e0:	f7ff f936 	bl	8007650 <_Bfree>
 80083e4:	e5f5      	b.n	8007fd2 <_strtod_l+0x72>
 80083e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80083ec:	4293      	cmp	r3, r2
 80083ee:	dbbc      	blt.n	800836a <_strtod_l+0x40a>
 80083f0:	4c3f      	ldr	r4, [pc, #252]	@ (80084f0 <_strtod_l+0x590>)
 80083f2:	f1c5 050f 	rsb	r5, r5, #15
 80083f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083fa:	4652      	mov	r2, sl
 80083fc:	465b      	mov	r3, fp
 80083fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008402:	f7f8 f8f9 	bl	80005f8 <__aeabi_dmul>
 8008406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008408:	1b5d      	subs	r5, r3, r5
 800840a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800840e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008412:	e78f      	b.n	8008334 <_strtod_l+0x3d4>
 8008414:	3316      	adds	r3, #22
 8008416:	dba8      	blt.n	800836a <_strtod_l+0x40a>
 8008418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841a:	eba3 0808 	sub.w	r8, r3, r8
 800841e:	4b34      	ldr	r3, [pc, #208]	@ (80084f0 <_strtod_l+0x590>)
 8008420:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008424:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008428:	4650      	mov	r0, sl
 800842a:	4659      	mov	r1, fp
 800842c:	f7f8 fa0e 	bl	800084c <__aeabi_ddiv>
 8008430:	e782      	b.n	8008338 <_strtod_l+0x3d8>
 8008432:	2300      	movs	r3, #0
 8008434:	4f2f      	ldr	r7, [pc, #188]	@ (80084f4 <_strtod_l+0x594>)
 8008436:	1124      	asrs	r4, r4, #4
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	461e      	mov	r6, r3
 800843e:	2c01      	cmp	r4, #1
 8008440:	dc21      	bgt.n	8008486 <_strtod_l+0x526>
 8008442:	b10b      	cbz	r3, 8008448 <_strtod_l+0x4e8>
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	492a      	ldr	r1, [pc, #168]	@ (80084f4 <_strtod_l+0x594>)
 800844a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800844e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845a:	f7f8 f8cd 	bl	80005f8 <__aeabi_dmul>
 800845e:	4b26      	ldr	r3, [pc, #152]	@ (80084f8 <_strtod_l+0x598>)
 8008460:	460a      	mov	r2, r1
 8008462:	400b      	ands	r3, r1
 8008464:	4925      	ldr	r1, [pc, #148]	@ (80084fc <_strtod_l+0x59c>)
 8008466:	428b      	cmp	r3, r1
 8008468:	4682      	mov	sl, r0
 800846a:	d898      	bhi.n	800839e <_strtod_l+0x43e>
 800846c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008470:	428b      	cmp	r3, r1
 8008472:	bf86      	itte	hi
 8008474:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008500 <_strtod_l+0x5a0>
 8008478:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800847c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008480:	2300      	movs	r3, #0
 8008482:	9308      	str	r3, [sp, #32]
 8008484:	e076      	b.n	8008574 <_strtod_l+0x614>
 8008486:	07e2      	lsls	r2, r4, #31
 8008488:	d504      	bpl.n	8008494 <_strtod_l+0x534>
 800848a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800848e:	f7f8 f8b3 	bl	80005f8 <__aeabi_dmul>
 8008492:	2301      	movs	r3, #1
 8008494:	3601      	adds	r6, #1
 8008496:	1064      	asrs	r4, r4, #1
 8008498:	3708      	adds	r7, #8
 800849a:	e7d0      	b.n	800843e <_strtod_l+0x4de>
 800849c:	d0f0      	beq.n	8008480 <_strtod_l+0x520>
 800849e:	4264      	negs	r4, r4
 80084a0:	f014 020f 	ands.w	r2, r4, #15
 80084a4:	d00a      	beq.n	80084bc <_strtod_l+0x55c>
 80084a6:	4b12      	ldr	r3, [pc, #72]	@ (80084f0 <_strtod_l+0x590>)
 80084a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ac:	4650      	mov	r0, sl
 80084ae:	4659      	mov	r1, fp
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f8 f9ca 	bl	800084c <__aeabi_ddiv>
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	1124      	asrs	r4, r4, #4
 80084be:	d0df      	beq.n	8008480 <_strtod_l+0x520>
 80084c0:	2c1f      	cmp	r4, #31
 80084c2:	dd1f      	ble.n	8008504 <_strtod_l+0x5a4>
 80084c4:	2400      	movs	r4, #0
 80084c6:	46a0      	mov	r8, r4
 80084c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084ca:	46a1      	mov	r9, r4
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	2322      	movs	r3, #34	@ 0x22
 80084d0:	f04f 0a00 	mov.w	sl, #0
 80084d4:	f04f 0b00 	mov.w	fp, #0
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	e76b      	b.n	80083b4 <_strtod_l+0x454>
 80084dc:	08009e4d 	.word	0x08009e4d
 80084e0:	0800a118 	.word	0x0800a118
 80084e4:	08009e45 	.word	0x08009e45
 80084e8:	08009e7c 	.word	0x08009e7c
 80084ec:	08009fb5 	.word	0x08009fb5
 80084f0:	0800a050 	.word	0x0800a050
 80084f4:	0800a028 	.word	0x0800a028
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	7ca00000 	.word	0x7ca00000
 8008500:	7fefffff 	.word	0x7fefffff
 8008504:	f014 0310 	ands.w	r3, r4, #16
 8008508:	bf18      	it	ne
 800850a:	236a      	movne	r3, #106	@ 0x6a
 800850c:	4ea9      	ldr	r6, [pc, #676]	@ (80087b4 <_strtod_l+0x854>)
 800850e:	9308      	str	r3, [sp, #32]
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	2300      	movs	r3, #0
 8008516:	07e7      	lsls	r7, r4, #31
 8008518:	d504      	bpl.n	8008524 <_strtod_l+0x5c4>
 800851a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800851e:	f7f8 f86b 	bl	80005f8 <__aeabi_dmul>
 8008522:	2301      	movs	r3, #1
 8008524:	1064      	asrs	r4, r4, #1
 8008526:	f106 0608 	add.w	r6, r6, #8
 800852a:	d1f4      	bne.n	8008516 <_strtod_l+0x5b6>
 800852c:	b10b      	cbz	r3, 8008532 <_strtod_l+0x5d2>
 800852e:	4682      	mov	sl, r0
 8008530:	468b      	mov	fp, r1
 8008532:	9b08      	ldr	r3, [sp, #32]
 8008534:	b1b3      	cbz	r3, 8008564 <_strtod_l+0x604>
 8008536:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800853a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800853e:	2b00      	cmp	r3, #0
 8008540:	4659      	mov	r1, fp
 8008542:	dd0f      	ble.n	8008564 <_strtod_l+0x604>
 8008544:	2b1f      	cmp	r3, #31
 8008546:	dd56      	ble.n	80085f6 <_strtod_l+0x696>
 8008548:	2b34      	cmp	r3, #52	@ 0x34
 800854a:	bfde      	ittt	le
 800854c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008550:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008554:	4093      	lslle	r3, r2
 8008556:	f04f 0a00 	mov.w	sl, #0
 800855a:	bfcc      	ite	gt
 800855c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008560:	ea03 0b01 	andle.w	fp, r3, r1
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	4650      	mov	r0, sl
 800856a:	4659      	mov	r1, fp
 800856c:	f7f8 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1a7      	bne.n	80084c4 <_strtod_l+0x564>
 8008574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800857a:	9805      	ldr	r0, [sp, #20]
 800857c:	462b      	mov	r3, r5
 800857e:	464a      	mov	r2, r9
 8008580:	f7ff f8ce 	bl	8007720 <__s2b>
 8008584:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f af09 	beq.w	800839e <_strtod_l+0x43e>
 800858c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800858e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008590:	2a00      	cmp	r2, #0
 8008592:	eba3 0308 	sub.w	r3, r3, r8
 8008596:	bfa8      	it	ge
 8008598:	2300      	movge	r3, #0
 800859a:	9312      	str	r3, [sp, #72]	@ 0x48
 800859c:	2400      	movs	r4, #0
 800859e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80085a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80085a4:	46a0      	mov	r8, r4
 80085a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	6859      	ldr	r1, [r3, #4]
 80085ac:	f7ff f810 	bl	80075d0 <_Balloc>
 80085b0:	4681      	mov	r9, r0
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f43f aef7 	beq.w	80083a6 <_strtod_l+0x446>
 80085b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	3202      	adds	r2, #2
 80085be:	f103 010c 	add.w	r1, r3, #12
 80085c2:	0092      	lsls	r2, r2, #2
 80085c4:	300c      	adds	r0, #12
 80085c6:	f7fe f896 	bl	80066f6 <memcpy>
 80085ca:	ec4b ab10 	vmov	d0, sl, fp
 80085ce:	9805      	ldr	r0, [sp, #20]
 80085d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80085d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80085d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80085d8:	f7ff fbd6 	bl	8007d88 <__d2b>
 80085dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80085de:	2800      	cmp	r0, #0
 80085e0:	f43f aee1 	beq.w	80083a6 <_strtod_l+0x446>
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	2101      	movs	r1, #1
 80085e8:	f7ff f930 	bl	800784c <__i2b>
 80085ec:	4680      	mov	r8, r0
 80085ee:	b948      	cbnz	r0, 8008604 <_strtod_l+0x6a4>
 80085f0:	f04f 0800 	mov.w	r8, #0
 80085f4:	e6d7      	b.n	80083a6 <_strtod_l+0x446>
 80085f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085fa:	fa02 f303 	lsl.w	r3, r2, r3
 80085fe:	ea03 0a0a 	and.w	sl, r3, sl
 8008602:	e7af      	b.n	8008564 <_strtod_l+0x604>
 8008604:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008606:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008608:	2d00      	cmp	r5, #0
 800860a:	bfab      	itete	ge
 800860c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800860e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008610:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008612:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008614:	bfac      	ite	ge
 8008616:	18ef      	addge	r7, r5, r3
 8008618:	1b5e      	sublt	r6, r3, r5
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	1aed      	subs	r5, r5, r3
 800861e:	4415      	add	r5, r2
 8008620:	4b65      	ldr	r3, [pc, #404]	@ (80087b8 <_strtod_l+0x858>)
 8008622:	3d01      	subs	r5, #1
 8008624:	429d      	cmp	r5, r3
 8008626:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800862a:	da50      	bge.n	80086ce <_strtod_l+0x76e>
 800862c:	1b5b      	subs	r3, r3, r5
 800862e:	2b1f      	cmp	r3, #31
 8008630:	eba2 0203 	sub.w	r2, r2, r3
 8008634:	f04f 0101 	mov.w	r1, #1
 8008638:	dc3d      	bgt.n	80086b6 <_strtod_l+0x756>
 800863a:	fa01 f303 	lsl.w	r3, r1, r3
 800863e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008640:	2300      	movs	r3, #0
 8008642:	9310      	str	r3, [sp, #64]	@ 0x40
 8008644:	18bd      	adds	r5, r7, r2
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	42af      	cmp	r7, r5
 800864a:	4416      	add	r6, r2
 800864c:	441e      	add	r6, r3
 800864e:	463b      	mov	r3, r7
 8008650:	bfa8      	it	ge
 8008652:	462b      	movge	r3, r5
 8008654:	42b3      	cmp	r3, r6
 8008656:	bfa8      	it	ge
 8008658:	4633      	movge	r3, r6
 800865a:	2b00      	cmp	r3, #0
 800865c:	bfc2      	ittt	gt
 800865e:	1aed      	subgt	r5, r5, r3
 8008660:	1af6      	subgt	r6, r6, r3
 8008662:	1aff      	subgt	r7, r7, r3
 8008664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd16      	ble.n	8008698 <_strtod_l+0x738>
 800866a:	4641      	mov	r1, r8
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	461a      	mov	r2, r3
 8008670:	f7ff f9a4 	bl	80079bc <__pow5mult>
 8008674:	4680      	mov	r8, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	d0ba      	beq.n	80085f0 <_strtod_l+0x690>
 800867a:	4601      	mov	r1, r0
 800867c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800867e:	9805      	ldr	r0, [sp, #20]
 8008680:	f7ff f8fa 	bl	8007878 <__multiply>
 8008684:	900a      	str	r0, [sp, #40]	@ 0x28
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f ae8d 	beq.w	80083a6 <_strtod_l+0x446>
 800868c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800868e:	9805      	ldr	r0, [sp, #20]
 8008690:	f7fe ffde 	bl	8007650 <_Bfree>
 8008694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008696:	931a      	str	r3, [sp, #104]	@ 0x68
 8008698:	2d00      	cmp	r5, #0
 800869a:	dc1d      	bgt.n	80086d8 <_strtod_l+0x778>
 800869c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dd23      	ble.n	80086ea <_strtod_l+0x78a>
 80086a2:	4649      	mov	r1, r9
 80086a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80086a6:	9805      	ldr	r0, [sp, #20]
 80086a8:	f7ff f988 	bl	80079bc <__pow5mult>
 80086ac:	4681      	mov	r9, r0
 80086ae:	b9e0      	cbnz	r0, 80086ea <_strtod_l+0x78a>
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	e677      	b.n	80083a6 <_strtod_l+0x446>
 80086b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80086ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80086be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80086c2:	35e2      	adds	r5, #226	@ 0xe2
 80086c4:	fa01 f305 	lsl.w	r3, r1, r5
 80086c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80086ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80086cc:	e7ba      	b.n	8008644 <_strtod_l+0x6e4>
 80086ce:	2300      	movs	r3, #0
 80086d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80086d2:	2301      	movs	r3, #1
 80086d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086d6:	e7b5      	b.n	8008644 <_strtod_l+0x6e4>
 80086d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086da:	9805      	ldr	r0, [sp, #20]
 80086dc:	462a      	mov	r2, r5
 80086de:	f7ff f9c7 	bl	8007a70 <__lshift>
 80086e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d1d9      	bne.n	800869c <_strtod_l+0x73c>
 80086e8:	e65d      	b.n	80083a6 <_strtod_l+0x446>
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	dd07      	ble.n	80086fe <_strtod_l+0x79e>
 80086ee:	4649      	mov	r1, r9
 80086f0:	9805      	ldr	r0, [sp, #20]
 80086f2:	4632      	mov	r2, r6
 80086f4:	f7ff f9bc 	bl	8007a70 <__lshift>
 80086f8:	4681      	mov	r9, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0d8      	beq.n	80086b0 <_strtod_l+0x750>
 80086fe:	2f00      	cmp	r7, #0
 8008700:	dd08      	ble.n	8008714 <_strtod_l+0x7b4>
 8008702:	4641      	mov	r1, r8
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	463a      	mov	r2, r7
 8008708:	f7ff f9b2 	bl	8007a70 <__lshift>
 800870c:	4680      	mov	r8, r0
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f ae49 	beq.w	80083a6 <_strtod_l+0x446>
 8008714:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008716:	9805      	ldr	r0, [sp, #20]
 8008718:	464a      	mov	r2, r9
 800871a:	f7ff fa31 	bl	8007b80 <__mdiff>
 800871e:	4604      	mov	r4, r0
 8008720:	2800      	cmp	r0, #0
 8008722:	f43f ae40 	beq.w	80083a6 <_strtod_l+0x446>
 8008726:	68c3      	ldr	r3, [r0, #12]
 8008728:	930f      	str	r3, [sp, #60]	@ 0x3c
 800872a:	2300      	movs	r3, #0
 800872c:	60c3      	str	r3, [r0, #12]
 800872e:	4641      	mov	r1, r8
 8008730:	f7ff fa0a 	bl	8007b48 <__mcmp>
 8008734:	2800      	cmp	r0, #0
 8008736:	da45      	bge.n	80087c4 <_strtod_l+0x864>
 8008738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800873a:	ea53 030a 	orrs.w	r3, r3, sl
 800873e:	d16b      	bne.n	8008818 <_strtod_l+0x8b8>
 8008740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008744:	2b00      	cmp	r3, #0
 8008746:	d167      	bne.n	8008818 <_strtod_l+0x8b8>
 8008748:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800874c:	0d1b      	lsrs	r3, r3, #20
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008754:	d960      	bls.n	8008818 <_strtod_l+0x8b8>
 8008756:	6963      	ldr	r3, [r4, #20]
 8008758:	b913      	cbnz	r3, 8008760 <_strtod_l+0x800>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	2b01      	cmp	r3, #1
 800875e:	dd5b      	ble.n	8008818 <_strtod_l+0x8b8>
 8008760:	4621      	mov	r1, r4
 8008762:	2201      	movs	r2, #1
 8008764:	9805      	ldr	r0, [sp, #20]
 8008766:	f7ff f983 	bl	8007a70 <__lshift>
 800876a:	4641      	mov	r1, r8
 800876c:	4604      	mov	r4, r0
 800876e:	f7ff f9eb 	bl	8007b48 <__mcmp>
 8008772:	2800      	cmp	r0, #0
 8008774:	dd50      	ble.n	8008818 <_strtod_l+0x8b8>
 8008776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800877a:	9a08      	ldr	r2, [sp, #32]
 800877c:	0d1b      	lsrs	r3, r3, #20
 800877e:	051b      	lsls	r3, r3, #20
 8008780:	2a00      	cmp	r2, #0
 8008782:	d06a      	beq.n	800885a <_strtod_l+0x8fa>
 8008784:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008788:	d867      	bhi.n	800885a <_strtod_l+0x8fa>
 800878a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800878e:	f67f ae9d 	bls.w	80084cc <_strtod_l+0x56c>
 8008792:	4b0a      	ldr	r3, [pc, #40]	@ (80087bc <_strtod_l+0x85c>)
 8008794:	4650      	mov	r0, sl
 8008796:	4659      	mov	r1, fp
 8008798:	2200      	movs	r2, #0
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	4b08      	ldr	r3, [pc, #32]	@ (80087c0 <_strtod_l+0x860>)
 80087a0:	400b      	ands	r3, r1
 80087a2:	4682      	mov	sl, r0
 80087a4:	468b      	mov	fp, r1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f47f ae08 	bne.w	80083bc <_strtod_l+0x45c>
 80087ac:	9a05      	ldr	r2, [sp, #20]
 80087ae:	2322      	movs	r3, #34	@ 0x22
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e603      	b.n	80083bc <_strtod_l+0x45c>
 80087b4:	0800a140 	.word	0x0800a140
 80087b8:	fffffc02 	.word	0xfffffc02
 80087bc:	39500000 	.word	0x39500000
 80087c0:	7ff00000 	.word	0x7ff00000
 80087c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80087c8:	d165      	bne.n	8008896 <_strtod_l+0x936>
 80087ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80087cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087d0:	b35a      	cbz	r2, 800882a <_strtod_l+0x8ca>
 80087d2:	4a9f      	ldr	r2, [pc, #636]	@ (8008a50 <_strtod_l+0xaf0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d12b      	bne.n	8008830 <_strtod_l+0x8d0>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	4651      	mov	r1, sl
 80087dc:	b303      	cbz	r3, 8008820 <_strtod_l+0x8c0>
 80087de:	4b9d      	ldr	r3, [pc, #628]	@ (8008a54 <_strtod_l+0xaf4>)
 80087e0:	465a      	mov	r2, fp
 80087e2:	4013      	ands	r3, r2
 80087e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80087e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087ec:	d81b      	bhi.n	8008826 <_strtod_l+0x8c6>
 80087ee:	0d1b      	lsrs	r3, r3, #20
 80087f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	4299      	cmp	r1, r3
 80087fa:	d119      	bne.n	8008830 <_strtod_l+0x8d0>
 80087fc:	4b96      	ldr	r3, [pc, #600]	@ (8008a58 <_strtod_l+0xaf8>)
 80087fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008800:	429a      	cmp	r2, r3
 8008802:	d102      	bne.n	800880a <_strtod_l+0x8aa>
 8008804:	3101      	adds	r1, #1
 8008806:	f43f adce 	beq.w	80083a6 <_strtod_l+0x446>
 800880a:	4b92      	ldr	r3, [pc, #584]	@ (8008a54 <_strtod_l+0xaf4>)
 800880c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800880e:	401a      	ands	r2, r3
 8008810:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008814:	f04f 0a00 	mov.w	sl, #0
 8008818:	9b08      	ldr	r3, [sp, #32]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1b9      	bne.n	8008792 <_strtod_l+0x832>
 800881e:	e5cd      	b.n	80083bc <_strtod_l+0x45c>
 8008820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008824:	e7e8      	b.n	80087f8 <_strtod_l+0x898>
 8008826:	4613      	mov	r3, r2
 8008828:	e7e6      	b.n	80087f8 <_strtod_l+0x898>
 800882a:	ea53 030a 	orrs.w	r3, r3, sl
 800882e:	d0a2      	beq.n	8008776 <_strtod_l+0x816>
 8008830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008832:	b1db      	cbz	r3, 800886c <_strtod_l+0x90c>
 8008834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008836:	4213      	tst	r3, r2
 8008838:	d0ee      	beq.n	8008818 <_strtod_l+0x8b8>
 800883a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800883c:	9a08      	ldr	r2, [sp, #32]
 800883e:	4650      	mov	r0, sl
 8008840:	4659      	mov	r1, fp
 8008842:	b1bb      	cbz	r3, 8008874 <_strtod_l+0x914>
 8008844:	f7ff fb6e 	bl	8007f24 <sulp>
 8008848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800884c:	ec53 2b10 	vmov	r2, r3, d0
 8008850:	f7f7 fd1c 	bl	800028c <__adddf3>
 8008854:	4682      	mov	sl, r0
 8008856:	468b      	mov	fp, r1
 8008858:	e7de      	b.n	8008818 <_strtod_l+0x8b8>
 800885a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800885e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008862:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008866:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800886a:	e7d5      	b.n	8008818 <_strtod_l+0x8b8>
 800886c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800886e:	ea13 0f0a 	tst.w	r3, sl
 8008872:	e7e1      	b.n	8008838 <_strtod_l+0x8d8>
 8008874:	f7ff fb56 	bl	8007f24 <sulp>
 8008878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800887c:	ec53 2b10 	vmov	r2, r3, d0
 8008880:	f7f7 fd02 	bl	8000288 <__aeabi_dsub>
 8008884:	2200      	movs	r2, #0
 8008886:	2300      	movs	r3, #0
 8008888:	4682      	mov	sl, r0
 800888a:	468b      	mov	fp, r1
 800888c:	f7f8 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008890:	2800      	cmp	r0, #0
 8008892:	d0c1      	beq.n	8008818 <_strtod_l+0x8b8>
 8008894:	e61a      	b.n	80084cc <_strtod_l+0x56c>
 8008896:	4641      	mov	r1, r8
 8008898:	4620      	mov	r0, r4
 800889a:	f7ff facd 	bl	8007e38 <__ratio>
 800889e:	ec57 6b10 	vmov	r6, r7, d0
 80088a2:	2200      	movs	r2, #0
 80088a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f920 	bl	8000af0 <__aeabi_dcmple>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d06f      	beq.n	8008994 <_strtod_l+0xa34>
 80088b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d17a      	bne.n	80089b0 <_strtod_l+0xa50>
 80088ba:	f1ba 0f00 	cmp.w	sl, #0
 80088be:	d158      	bne.n	8008972 <_strtod_l+0xa12>
 80088c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d15a      	bne.n	8008980 <_strtod_l+0xa20>
 80088ca:	4b64      	ldr	r3, [pc, #400]	@ (8008a5c <_strtod_l+0xafc>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	4630      	mov	r0, r6
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f8 f903 	bl	8000adc <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d159      	bne.n	800898e <_strtod_l+0xa2e>
 80088da:	4630      	mov	r0, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	4b60      	ldr	r3, [pc, #384]	@ (8008a60 <_strtod_l+0xb00>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	f7f7 fe89 	bl	80005f8 <__aeabi_dmul>
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80088ee:	9606      	str	r6, [sp, #24]
 80088f0:	9307      	str	r3, [sp, #28]
 80088f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088f6:	4d57      	ldr	r5, [pc, #348]	@ (8008a54 <_strtod_l+0xaf4>)
 80088f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80088fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088fe:	401d      	ands	r5, r3
 8008900:	4b58      	ldr	r3, [pc, #352]	@ (8008a64 <_strtod_l+0xb04>)
 8008902:	429d      	cmp	r5, r3
 8008904:	f040 80b2 	bne.w	8008a6c <_strtod_l+0xb0c>
 8008908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800890e:	ec4b ab10 	vmov	d0, sl, fp
 8008912:	f7ff f9c9 	bl	8007ca8 <__ulp>
 8008916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800891a:	ec51 0b10 	vmov	r0, r1, d0
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	f7f7 fcb1 	bl	800028c <__adddf3>
 800892a:	460b      	mov	r3, r1
 800892c:	4949      	ldr	r1, [pc, #292]	@ (8008a54 <_strtod_l+0xaf4>)
 800892e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a68 <_strtod_l+0xb08>)
 8008930:	4019      	ands	r1, r3
 8008932:	4291      	cmp	r1, r2
 8008934:	4682      	mov	sl, r0
 8008936:	d942      	bls.n	80089be <_strtod_l+0xa5e>
 8008938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800893a:	4b47      	ldr	r3, [pc, #284]	@ (8008a58 <_strtod_l+0xaf8>)
 800893c:	429a      	cmp	r2, r3
 800893e:	d103      	bne.n	8008948 <_strtod_l+0x9e8>
 8008940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008942:	3301      	adds	r3, #1
 8008944:	f43f ad2f 	beq.w	80083a6 <_strtod_l+0x446>
 8008948:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008a58 <_strtod_l+0xaf8>
 800894c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008952:	9805      	ldr	r0, [sp, #20]
 8008954:	f7fe fe7c 	bl	8007650 <_Bfree>
 8008958:	9805      	ldr	r0, [sp, #20]
 800895a:	4649      	mov	r1, r9
 800895c:	f7fe fe78 	bl	8007650 <_Bfree>
 8008960:	9805      	ldr	r0, [sp, #20]
 8008962:	4641      	mov	r1, r8
 8008964:	f7fe fe74 	bl	8007650 <_Bfree>
 8008968:	9805      	ldr	r0, [sp, #20]
 800896a:	4621      	mov	r1, r4
 800896c:	f7fe fe70 	bl	8007650 <_Bfree>
 8008970:	e619      	b.n	80085a6 <_strtod_l+0x646>
 8008972:	f1ba 0f01 	cmp.w	sl, #1
 8008976:	d103      	bne.n	8008980 <_strtod_l+0xa20>
 8008978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	f43f ada6 	beq.w	80084cc <_strtod_l+0x56c>
 8008980:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008a30 <_strtod_l+0xad0>
 8008984:	4f35      	ldr	r7, [pc, #212]	@ (8008a5c <_strtod_l+0xafc>)
 8008986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800898a:	2600      	movs	r6, #0
 800898c:	e7b1      	b.n	80088f2 <_strtod_l+0x992>
 800898e:	4f34      	ldr	r7, [pc, #208]	@ (8008a60 <_strtod_l+0xb00>)
 8008990:	2600      	movs	r6, #0
 8008992:	e7aa      	b.n	80088ea <_strtod_l+0x98a>
 8008994:	4b32      	ldr	r3, [pc, #200]	@ (8008a60 <_strtod_l+0xb00>)
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe2c 	bl	80005f8 <__aeabi_dmul>
 80089a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a2:	4606      	mov	r6, r0
 80089a4:	460f      	mov	r7, r1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d09f      	beq.n	80088ea <_strtod_l+0x98a>
 80089aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80089ae:	e7a0      	b.n	80088f2 <_strtod_l+0x992>
 80089b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008a38 <_strtod_l+0xad8>
 80089b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089b8:	ec57 6b17 	vmov	r6, r7, d7
 80089bc:	e799      	b.n	80088f2 <_strtod_l+0x992>
 80089be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1c1      	bne.n	8008950 <_strtod_l+0x9f0>
 80089cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	051b      	lsls	r3, r3, #20
 80089d4:	429d      	cmp	r5, r3
 80089d6:	d1bb      	bne.n	8008950 <_strtod_l+0x9f0>
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f8 f96c 	bl	8000cb8 <__aeabi_d2lz>
 80089e0:	f7f7 fddc 	bl	800059c <__aeabi_l2d>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 fc4c 	bl	8000288 <__aeabi_dsub>
 80089f0:	460b      	mov	r3, r1
 80089f2:	4602      	mov	r2, r0
 80089f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80089fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fe:	ea46 060a 	orr.w	r6, r6, sl
 8008a02:	431e      	orrs	r6, r3
 8008a04:	d06f      	beq.n	8008ae6 <_strtod_l+0xb86>
 8008a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a40 <_strtod_l+0xae0>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f8 f866 	bl	8000adc <__aeabi_dcmplt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f47f acd3 	bne.w	80083bc <_strtod_l+0x45c>
 8008a16:	a30c      	add	r3, pc, #48	@ (adr r3, 8008a48 <_strtod_l+0xae8>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a20:	f7f8 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d093      	beq.n	8008950 <_strtod_l+0x9f0>
 8008a28:	e4c8      	b.n	80083bc <_strtod_l+0x45c>
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w
 8008a30:	00000000 	.word	0x00000000
 8008a34:	bff00000 	.word	0xbff00000
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	94a03595 	.word	0x94a03595
 8008a44:	3fdfffff 	.word	0x3fdfffff
 8008a48:	35afe535 	.word	0x35afe535
 8008a4c:	3fe00000 	.word	0x3fe00000
 8008a50:	000fffff 	.word	0x000fffff
 8008a54:	7ff00000 	.word	0x7ff00000
 8008a58:	7fefffff 	.word	0x7fefffff
 8008a5c:	3ff00000 	.word	0x3ff00000
 8008a60:	3fe00000 	.word	0x3fe00000
 8008a64:	7fe00000 	.word	0x7fe00000
 8008a68:	7c9fffff 	.word	0x7c9fffff
 8008a6c:	9b08      	ldr	r3, [sp, #32]
 8008a6e:	b323      	cbz	r3, 8008aba <_strtod_l+0xb5a>
 8008a70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008a74:	d821      	bhi.n	8008aba <_strtod_l+0xb5a>
 8008a76:	a328      	add	r3, pc, #160	@ (adr r3, 8008b18 <_strtod_l+0xbb8>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f8 f836 	bl	8000af0 <__aeabi_dcmple>
 8008a84:	b1a0      	cbz	r0, 8008ab0 <_strtod_l+0xb50>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7f8 f88d 	bl	8000ba8 <__aeabi_d2uiz>
 8008a8e:	2801      	cmp	r0, #1
 8008a90:	bf38      	it	cc
 8008a92:	2001      	movcc	r0, #1
 8008a94:	f7f7 fd36 	bl	8000504 <__aeabi_ui2d>
 8008a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	b9fb      	cbnz	r3, 8008ae0 <_strtod_l+0xb80>
 8008aa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008aa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008aa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008aa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008aac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ab2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008ab6:	1b5b      	subs	r3, r3, r5
 8008ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008abe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008ac2:	f7ff f8f1 	bl	8007ca8 <__ulp>
 8008ac6:	4650      	mov	r0, sl
 8008ac8:	ec53 2b10 	vmov	r2, r3, d0
 8008acc:	4659      	mov	r1, fp
 8008ace:	f7f7 fd93 	bl	80005f8 <__aeabi_dmul>
 8008ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008ad6:	f7f7 fbd9 	bl	800028c <__adddf3>
 8008ada:	4682      	mov	sl, r0
 8008adc:	468b      	mov	fp, r1
 8008ade:	e770      	b.n	80089c2 <_strtod_l+0xa62>
 8008ae0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ae4:	e7e0      	b.n	8008aa8 <_strtod_l+0xb48>
 8008ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b20 <_strtod_l+0xbc0>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fff6 	bl	8000adc <__aeabi_dcmplt>
 8008af0:	e798      	b.n	8008a24 <_strtod_l+0xac4>
 8008af2:	2300      	movs	r3, #0
 8008af4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008af6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	f7ff ba6d 	b.w	8007fda <_strtod_l+0x7a>
 8008b00:	2a65      	cmp	r2, #101	@ 0x65
 8008b02:	f43f ab68 	beq.w	80081d6 <_strtod_l+0x276>
 8008b06:	2a45      	cmp	r2, #69	@ 0x45
 8008b08:	f43f ab65 	beq.w	80081d6 <_strtod_l+0x276>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f7ff bba0 	b.w	8008252 <_strtod_l+0x2f2>
 8008b12:	bf00      	nop
 8008b14:	f3af 8000 	nop.w
 8008b18:	ffc00000 	.word	0xffc00000
 8008b1c:	41dfffff 	.word	0x41dfffff
 8008b20:	94a03595 	.word	0x94a03595
 8008b24:	3fcfffff 	.word	0x3fcfffff

08008b28 <_strtod_r>:
 8008b28:	4b01      	ldr	r3, [pc, #4]	@ (8008b30 <_strtod_r+0x8>)
 8008b2a:	f7ff ba19 	b.w	8007f60 <_strtod_l>
 8008b2e:	bf00      	nop
 8008b30:	2000006c 	.word	0x2000006c

08008b34 <_strtol_l.isra.0>:
 8008b34:	2b24      	cmp	r3, #36	@ 0x24
 8008b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3a:	4686      	mov	lr, r0
 8008b3c:	4690      	mov	r8, r2
 8008b3e:	d801      	bhi.n	8008b44 <_strtol_l.isra.0+0x10>
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d106      	bne.n	8008b52 <_strtol_l.isra.0+0x1e>
 8008b44:	f7fd fdaa 	bl	800669c <__errno>
 8008b48:	2316      	movs	r3, #22
 8008b4a:	6003      	str	r3, [r0, #0]
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b52:	4834      	ldr	r0, [pc, #208]	@ (8008c24 <_strtol_l.isra.0+0xf0>)
 8008b54:	460d      	mov	r5, r1
 8008b56:	462a      	mov	r2, r5
 8008b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b5c:	5d06      	ldrb	r6, [r0, r4]
 8008b5e:	f016 0608 	ands.w	r6, r6, #8
 8008b62:	d1f8      	bne.n	8008b56 <_strtol_l.isra.0+0x22>
 8008b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b66:	d110      	bne.n	8008b8a <_strtol_l.isra.0+0x56>
 8008b68:	782c      	ldrb	r4, [r5, #0]
 8008b6a:	2601      	movs	r6, #1
 8008b6c:	1c95      	adds	r5, r2, #2
 8008b6e:	f033 0210 	bics.w	r2, r3, #16
 8008b72:	d115      	bne.n	8008ba0 <_strtol_l.isra.0+0x6c>
 8008b74:	2c30      	cmp	r4, #48	@ 0x30
 8008b76:	d10d      	bne.n	8008b94 <_strtol_l.isra.0+0x60>
 8008b78:	782a      	ldrb	r2, [r5, #0]
 8008b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b7e:	2a58      	cmp	r2, #88	@ 0x58
 8008b80:	d108      	bne.n	8008b94 <_strtol_l.isra.0+0x60>
 8008b82:	786c      	ldrb	r4, [r5, #1]
 8008b84:	3502      	adds	r5, #2
 8008b86:	2310      	movs	r3, #16
 8008b88:	e00a      	b.n	8008ba0 <_strtol_l.isra.0+0x6c>
 8008b8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b8c:	bf04      	itt	eq
 8008b8e:	782c      	ldrbeq	r4, [r5, #0]
 8008b90:	1c95      	addeq	r5, r2, #2
 8008b92:	e7ec      	b.n	8008b6e <_strtol_l.isra.0+0x3a>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1f6      	bne.n	8008b86 <_strtol_l.isra.0+0x52>
 8008b98:	2c30      	cmp	r4, #48	@ 0x30
 8008b9a:	bf14      	ite	ne
 8008b9c:	230a      	movne	r3, #10
 8008b9e:	2308      	moveq	r3, #8
 8008ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ba4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008ba8:	2200      	movs	r2, #0
 8008baa:	fbbc f9f3 	udiv	r9, ip, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bb8:	2f09      	cmp	r7, #9
 8008bba:	d80f      	bhi.n	8008bdc <_strtol_l.isra.0+0xa8>
 8008bbc:	463c      	mov	r4, r7
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	dd1b      	ble.n	8008bfa <_strtol_l.isra.0+0xc6>
 8008bc2:	1c57      	adds	r7, r2, #1
 8008bc4:	d007      	beq.n	8008bd6 <_strtol_l.isra.0+0xa2>
 8008bc6:	4581      	cmp	r9, r0
 8008bc8:	d314      	bcc.n	8008bf4 <_strtol_l.isra.0+0xc0>
 8008bca:	d101      	bne.n	8008bd0 <_strtol_l.isra.0+0x9c>
 8008bcc:	45a2      	cmp	sl, r4
 8008bce:	db11      	blt.n	8008bf4 <_strtol_l.isra.0+0xc0>
 8008bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bda:	e7eb      	b.n	8008bb4 <_strtol_l.isra.0+0x80>
 8008bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008be0:	2f19      	cmp	r7, #25
 8008be2:	d801      	bhi.n	8008be8 <_strtol_l.isra.0+0xb4>
 8008be4:	3c37      	subs	r4, #55	@ 0x37
 8008be6:	e7ea      	b.n	8008bbe <_strtol_l.isra.0+0x8a>
 8008be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008bec:	2f19      	cmp	r7, #25
 8008bee:	d804      	bhi.n	8008bfa <_strtol_l.isra.0+0xc6>
 8008bf0:	3c57      	subs	r4, #87	@ 0x57
 8008bf2:	e7e4      	b.n	8008bbe <_strtol_l.isra.0+0x8a>
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bf8:	e7ed      	b.n	8008bd6 <_strtol_l.isra.0+0xa2>
 8008bfa:	1c53      	adds	r3, r2, #1
 8008bfc:	d108      	bne.n	8008c10 <_strtol_l.isra.0+0xdc>
 8008bfe:	2322      	movs	r3, #34	@ 0x22
 8008c00:	f8ce 3000 	str.w	r3, [lr]
 8008c04:	4660      	mov	r0, ip
 8008c06:	f1b8 0f00 	cmp.w	r8, #0
 8008c0a:	d0a0      	beq.n	8008b4e <_strtol_l.isra.0+0x1a>
 8008c0c:	1e69      	subs	r1, r5, #1
 8008c0e:	e006      	b.n	8008c1e <_strtol_l.isra.0+0xea>
 8008c10:	b106      	cbz	r6, 8008c14 <_strtol_l.isra.0+0xe0>
 8008c12:	4240      	negs	r0, r0
 8008c14:	f1b8 0f00 	cmp.w	r8, #0
 8008c18:	d099      	beq.n	8008b4e <_strtol_l.isra.0+0x1a>
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d1f6      	bne.n	8008c0c <_strtol_l.isra.0+0xd8>
 8008c1e:	f8c8 1000 	str.w	r1, [r8]
 8008c22:	e794      	b.n	8008b4e <_strtol_l.isra.0+0x1a>
 8008c24:	0800a169 	.word	0x0800a169

08008c28 <_strtol_r>:
 8008c28:	f7ff bf84 	b.w	8008b34 <_strtol_l.isra.0>

08008c2c <__ssputs_r>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	688e      	ldr	r6, [r1, #8]
 8008c32:	461f      	mov	r7, r3
 8008c34:	42be      	cmp	r6, r7
 8008c36:	680b      	ldr	r3, [r1, #0]
 8008c38:	4682      	mov	sl, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	4690      	mov	r8, r2
 8008c3e:	d82d      	bhi.n	8008c9c <__ssputs_r+0x70>
 8008c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c48:	d026      	beq.n	8008c98 <__ssputs_r+0x6c>
 8008c4a:	6965      	ldr	r5, [r4, #20]
 8008c4c:	6909      	ldr	r1, [r1, #16]
 8008c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c52:	eba3 0901 	sub.w	r9, r3, r1
 8008c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c5a:	1c7b      	adds	r3, r7, #1
 8008c5c:	444b      	add	r3, r9
 8008c5e:	106d      	asrs	r5, r5, #1
 8008c60:	429d      	cmp	r5, r3
 8008c62:	bf38      	it	cc
 8008c64:	461d      	movcc	r5, r3
 8008c66:	0553      	lsls	r3, r2, #21
 8008c68:	d527      	bpl.n	8008cba <__ssputs_r+0x8e>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7fe fc24 	bl	80074b8 <_malloc_r>
 8008c70:	4606      	mov	r6, r0
 8008c72:	b360      	cbz	r0, 8008cce <__ssputs_r+0xa2>
 8008c74:	6921      	ldr	r1, [r4, #16]
 8008c76:	464a      	mov	r2, r9
 8008c78:	f7fd fd3d 	bl	80066f6 <memcpy>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	6126      	str	r6, [r4, #16]
 8008c8a:	6165      	str	r5, [r4, #20]
 8008c8c:	444e      	add	r6, r9
 8008c8e:	eba5 0509 	sub.w	r5, r5, r9
 8008c92:	6026      	str	r6, [r4, #0]
 8008c94:	60a5      	str	r5, [r4, #8]
 8008c96:	463e      	mov	r6, r7
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	d900      	bls.n	8008c9e <__ssputs_r+0x72>
 8008c9c:	463e      	mov	r6, r7
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4641      	mov	r1, r8
 8008ca4:	f000 f9c6 	bl	8009034 <memmove>
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	1b9b      	subs	r3, r3, r6
 8008cac:	60a3      	str	r3, [r4, #8]
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	4433      	add	r3, r6
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cba:	462a      	mov	r2, r5
 8008cbc:	f000 fd7d 	bl	80097ba <_realloc_r>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1e0      	bne.n	8008c88 <__ssputs_r+0x5c>
 8008cc6:	6921      	ldr	r1, [r4, #16]
 8008cc8:	4650      	mov	r0, sl
 8008cca:	f7fe fb81 	bl	80073d0 <_free_r>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	f8ca 3000 	str.w	r3, [sl]
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ce0:	e7e9      	b.n	8008cb6 <__ssputs_r+0x8a>
	...

08008ce4 <_svfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4698      	mov	r8, r3
 8008cea:	898b      	ldrh	r3, [r1, #12]
 8008cec:	061b      	lsls	r3, r3, #24
 8008cee:	b09d      	sub	sp, #116	@ 0x74
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	d510      	bpl.n	8008d1a <_svfiprintf_r+0x36>
 8008cf8:	690b      	ldr	r3, [r1, #16]
 8008cfa:	b973      	cbnz	r3, 8008d1a <_svfiprintf_r+0x36>
 8008cfc:	2140      	movs	r1, #64	@ 0x40
 8008cfe:	f7fe fbdb 	bl	80074b8 <_malloc_r>
 8008d02:	6028      	str	r0, [r5, #0]
 8008d04:	6128      	str	r0, [r5, #16]
 8008d06:	b930      	cbnz	r0, 8008d16 <_svfiprintf_r+0x32>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d10:	b01d      	add	sp, #116	@ 0x74
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d16:	2340      	movs	r3, #64	@ 0x40
 8008d18:	616b      	str	r3, [r5, #20]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1e:	2320      	movs	r3, #32
 8008d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d28:	2330      	movs	r3, #48	@ 0x30
 8008d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ec8 <_svfiprintf_r+0x1e4>
 8008d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d32:	f04f 0901 	mov.w	r9, #1
 8008d36:	4623      	mov	r3, r4
 8008d38:	469a      	mov	sl, r3
 8008d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3e:	b10a      	cbz	r2, 8008d44 <_svfiprintf_r+0x60>
 8008d40:	2a25      	cmp	r2, #37	@ 0x25
 8008d42:	d1f9      	bne.n	8008d38 <_svfiprintf_r+0x54>
 8008d44:	ebba 0b04 	subs.w	fp, sl, r4
 8008d48:	d00b      	beq.n	8008d62 <_svfiprintf_r+0x7e>
 8008d4a:	465b      	mov	r3, fp
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7ff ff6b 	bl	8008c2c <__ssputs_r>
 8008d56:	3001      	adds	r0, #1
 8008d58:	f000 80a7 	beq.w	8008eaa <_svfiprintf_r+0x1c6>
 8008d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d5e:	445a      	add	r2, fp
 8008d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d62:	f89a 3000 	ldrb.w	r3, [sl]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 809f 	beq.w	8008eaa <_svfiprintf_r+0x1c6>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d76:	f10a 0a01 	add.w	sl, sl, #1
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	9307      	str	r3, [sp, #28]
 8008d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d84:	4654      	mov	r4, sl
 8008d86:	2205      	movs	r2, #5
 8008d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8c:	484e      	ldr	r0, [pc, #312]	@ (8008ec8 <_svfiprintf_r+0x1e4>)
 8008d8e:	f7f7 fa1f 	bl	80001d0 <memchr>
 8008d92:	9a04      	ldr	r2, [sp, #16]
 8008d94:	b9d8      	cbnz	r0, 8008dce <_svfiprintf_r+0xea>
 8008d96:	06d0      	lsls	r0, r2, #27
 8008d98:	bf44      	itt	mi
 8008d9a:	2320      	movmi	r3, #32
 8008d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da0:	0711      	lsls	r1, r2, #28
 8008da2:	bf44      	itt	mi
 8008da4:	232b      	movmi	r3, #43	@ 0x2b
 8008da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008daa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db0:	d015      	beq.n	8008dde <_svfiprintf_r+0xfa>
 8008db2:	9a07      	ldr	r2, [sp, #28]
 8008db4:	4654      	mov	r4, sl
 8008db6:	2000      	movs	r0, #0
 8008db8:	f04f 0c0a 	mov.w	ip, #10
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc2:	3b30      	subs	r3, #48	@ 0x30
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	d94b      	bls.n	8008e60 <_svfiprintf_r+0x17c>
 8008dc8:	b1b0      	cbz	r0, 8008df8 <_svfiprintf_r+0x114>
 8008dca:	9207      	str	r2, [sp, #28]
 8008dcc:	e014      	b.n	8008df8 <_svfiprintf_r+0x114>
 8008dce:	eba0 0308 	sub.w	r3, r0, r8
 8008dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	46a2      	mov	sl, r4
 8008ddc:	e7d2      	b.n	8008d84 <_svfiprintf_r+0xa0>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	1d19      	adds	r1, r3, #4
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	9103      	str	r1, [sp, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bfbb      	ittet	lt
 8008dea:	425b      	neglt	r3, r3
 8008dec:	f042 0202 	orrlt.w	r2, r2, #2
 8008df0:	9307      	strge	r3, [sp, #28]
 8008df2:	9307      	strlt	r3, [sp, #28]
 8008df4:	bfb8      	it	lt
 8008df6:	9204      	strlt	r2, [sp, #16]
 8008df8:	7823      	ldrb	r3, [r4, #0]
 8008dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dfc:	d10a      	bne.n	8008e14 <_svfiprintf_r+0x130>
 8008dfe:	7863      	ldrb	r3, [r4, #1]
 8008e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e02:	d132      	bne.n	8008e6a <_svfiprintf_r+0x186>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	9203      	str	r2, [sp, #12]
 8008e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e10:	3402      	adds	r4, #2
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ed8 <_svfiprintf_r+0x1f4>
 8008e18:	7821      	ldrb	r1, [r4, #0]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	f7f7 f9d7 	bl	80001d0 <memchr>
 8008e22:	b138      	cbz	r0, 8008e34 <_svfiprintf_r+0x150>
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	eba0 000a 	sub.w	r0, r0, sl
 8008e2a:	2240      	movs	r2, #64	@ 0x40
 8008e2c:	4082      	lsls	r2, r0
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	3401      	adds	r4, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e38:	4824      	ldr	r0, [pc, #144]	@ (8008ecc <_svfiprintf_r+0x1e8>)
 8008e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e3e:	2206      	movs	r2, #6
 8008e40:	f7f7 f9c6 	bl	80001d0 <memchr>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d036      	beq.n	8008eb6 <_svfiprintf_r+0x1d2>
 8008e48:	4b21      	ldr	r3, [pc, #132]	@ (8008ed0 <_svfiprintf_r+0x1ec>)
 8008e4a:	bb1b      	cbnz	r3, 8008e94 <_svfiprintf_r+0x1b0>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	3307      	adds	r3, #7
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	3308      	adds	r3, #8
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5a:	4433      	add	r3, r6
 8008e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e5e:	e76a      	b.n	8008d36 <_svfiprintf_r+0x52>
 8008e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e64:	460c      	mov	r4, r1
 8008e66:	2001      	movs	r0, #1
 8008e68:	e7a8      	b.n	8008dbc <_svfiprintf_r+0xd8>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	3401      	adds	r4, #1
 8008e6e:	9305      	str	r3, [sp, #20]
 8008e70:	4619      	mov	r1, r3
 8008e72:	f04f 0c0a 	mov.w	ip, #10
 8008e76:	4620      	mov	r0, r4
 8008e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7c:	3a30      	subs	r2, #48	@ 0x30
 8008e7e:	2a09      	cmp	r2, #9
 8008e80:	d903      	bls.n	8008e8a <_svfiprintf_r+0x1a6>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0c6      	beq.n	8008e14 <_svfiprintf_r+0x130>
 8008e86:	9105      	str	r1, [sp, #20]
 8008e88:	e7c4      	b.n	8008e14 <_svfiprintf_r+0x130>
 8008e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8e:	4604      	mov	r4, r0
 8008e90:	2301      	movs	r3, #1
 8008e92:	e7f0      	b.n	8008e76 <_svfiprintf_r+0x192>
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <_svfiprintf_r+0x1f0>)
 8008e9c:	a904      	add	r1, sp, #16
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7fc fc60 	bl	8005764 <_printf_float>
 8008ea4:	1c42      	adds	r2, r0, #1
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	d1d6      	bne.n	8008e58 <_svfiprintf_r+0x174>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	065b      	lsls	r3, r3, #25
 8008eae:	f53f af2d 	bmi.w	8008d0c <_svfiprintf_r+0x28>
 8008eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eb4:	e72c      	b.n	8008d10 <_svfiprintf_r+0x2c>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <_svfiprintf_r+0x1f0>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7fc fee7 	bl	8005c94 <_printf_i>
 8008ec6:	e7ed      	b.n	8008ea4 <_svfiprintf_r+0x1c0>
 8008ec8:	08009f61 	.word	0x08009f61
 8008ecc:	08009f6b 	.word	0x08009f6b
 8008ed0:	08005765 	.word	0x08005765
 8008ed4:	08008c2d 	.word	0x08008c2d
 8008ed8:	08009f67 	.word	0x08009f67

08008edc <__sflush_r>:
 8008edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	0716      	lsls	r6, r2, #28
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	d454      	bmi.n	8008f96 <__sflush_r+0xba>
 8008eec:	684b      	ldr	r3, [r1, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc02      	bgt.n	8008ef8 <__sflush_r+0x1c>
 8008ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dd48      	ble.n	8008f8a <__sflush_r+0xae>
 8008ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d045      	beq.n	8008f8a <__sflush_r+0xae>
 8008efe:	2300      	movs	r3, #0
 8008f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f04:	682f      	ldr	r7, [r5, #0]
 8008f06:	6a21      	ldr	r1, [r4, #32]
 8008f08:	602b      	str	r3, [r5, #0]
 8008f0a:	d030      	beq.n	8008f6e <__sflush_r+0x92>
 8008f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	0759      	lsls	r1, r3, #29
 8008f12:	d505      	bpl.n	8008f20 <__sflush_r+0x44>
 8008f14:	6863      	ldr	r3, [r4, #4]
 8008f16:	1ad2      	subs	r2, r2, r3
 8008f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f1a:	b10b      	cbz	r3, 8008f20 <__sflush_r+0x44>
 8008f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	2300      	movs	r3, #0
 8008f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f24:	6a21      	ldr	r1, [r4, #32]
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b0      	blx	r6
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	d106      	bne.n	8008f3e <__sflush_r+0x62>
 8008f30:	6829      	ldr	r1, [r5, #0]
 8008f32:	291d      	cmp	r1, #29
 8008f34:	d82b      	bhi.n	8008f8e <__sflush_r+0xb2>
 8008f36:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe0 <__sflush_r+0x104>)
 8008f38:	40ca      	lsrs	r2, r1
 8008f3a:	07d6      	lsls	r6, r2, #31
 8008f3c:	d527      	bpl.n	8008f8e <__sflush_r+0xb2>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	6062      	str	r2, [r4, #4]
 8008f42:	04d9      	lsls	r1, r3, #19
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	6022      	str	r2, [r4, #0]
 8008f48:	d504      	bpl.n	8008f54 <__sflush_r+0x78>
 8008f4a:	1c42      	adds	r2, r0, #1
 8008f4c:	d101      	bne.n	8008f52 <__sflush_r+0x76>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	b903      	cbnz	r3, 8008f54 <__sflush_r+0x78>
 8008f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f56:	602f      	str	r7, [r5, #0]
 8008f58:	b1b9      	cbz	r1, 8008f8a <__sflush_r+0xae>
 8008f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d002      	beq.n	8008f68 <__sflush_r+0x8c>
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7fe fa34 	bl	80073d0 <_free_r>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f6c:	e00d      	b.n	8008f8a <__sflush_r+0xae>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	4602      	mov	r2, r0
 8008f76:	1c50      	adds	r0, r2, #1
 8008f78:	d1c9      	bne.n	8008f0e <__sflush_r+0x32>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0c6      	beq.n	8008f0e <__sflush_r+0x32>
 8008f80:	2b1d      	cmp	r3, #29
 8008f82:	d001      	beq.n	8008f88 <__sflush_r+0xac>
 8008f84:	2b16      	cmp	r3, #22
 8008f86:	d11e      	bne.n	8008fc6 <__sflush_r+0xea>
 8008f88:	602f      	str	r7, [r5, #0]
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e022      	b.n	8008fd4 <__sflush_r+0xf8>
 8008f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f92:	b21b      	sxth	r3, r3
 8008f94:	e01b      	b.n	8008fce <__sflush_r+0xf2>
 8008f96:	690f      	ldr	r7, [r1, #16]
 8008f98:	2f00      	cmp	r7, #0
 8008f9a:	d0f6      	beq.n	8008f8a <__sflush_r+0xae>
 8008f9c:	0793      	lsls	r3, r2, #30
 8008f9e:	680e      	ldr	r6, [r1, #0]
 8008fa0:	bf08      	it	eq
 8008fa2:	694b      	ldreq	r3, [r1, #20]
 8008fa4:	600f      	str	r7, [r1, #0]
 8008fa6:	bf18      	it	ne
 8008fa8:	2300      	movne	r3, #0
 8008faa:	eba6 0807 	sub.w	r8, r6, r7
 8008fae:	608b      	str	r3, [r1, #8]
 8008fb0:	f1b8 0f00 	cmp.w	r8, #0
 8008fb4:	dde9      	ble.n	8008f8a <__sflush_r+0xae>
 8008fb6:	6a21      	ldr	r1, [r4, #32]
 8008fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fba:	4643      	mov	r3, r8
 8008fbc:	463a      	mov	r2, r7
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	47b0      	blx	r6
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	dc08      	bgt.n	8008fd8 <__sflush_r+0xfc>
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd8:	4407      	add	r7, r0
 8008fda:	eba8 0800 	sub.w	r8, r8, r0
 8008fde:	e7e7      	b.n	8008fb0 <__sflush_r+0xd4>
 8008fe0:	20400001 	.word	0x20400001

08008fe4 <_fflush_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	690b      	ldr	r3, [r1, #16]
 8008fe8:	4605      	mov	r5, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	b913      	cbnz	r3, 8008ff4 <_fflush_r+0x10>
 8008fee:	2500      	movs	r5, #0
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	b118      	cbz	r0, 8008ffe <_fflush_r+0x1a>
 8008ff6:	6a03      	ldr	r3, [r0, #32]
 8008ff8:	b90b      	cbnz	r3, 8008ffe <_fflush_r+0x1a>
 8008ffa:	f7fd fa03 	bl	8006404 <__sinit>
 8008ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0f3      	beq.n	8008fee <_fflush_r+0xa>
 8009006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009008:	07d0      	lsls	r0, r2, #31
 800900a:	d404      	bmi.n	8009016 <_fflush_r+0x32>
 800900c:	0599      	lsls	r1, r3, #22
 800900e:	d402      	bmi.n	8009016 <_fflush_r+0x32>
 8009010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009012:	f7fd fb6e 	bl	80066f2 <__retarget_lock_acquire_recursive>
 8009016:	4628      	mov	r0, r5
 8009018:	4621      	mov	r1, r4
 800901a:	f7ff ff5f 	bl	8008edc <__sflush_r>
 800901e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009020:	07da      	lsls	r2, r3, #31
 8009022:	4605      	mov	r5, r0
 8009024:	d4e4      	bmi.n	8008ff0 <_fflush_r+0xc>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	059b      	lsls	r3, r3, #22
 800902a:	d4e1      	bmi.n	8008ff0 <_fflush_r+0xc>
 800902c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800902e:	f7fd fb61 	bl	80066f4 <__retarget_lock_release_recursive>
 8009032:	e7dd      	b.n	8008ff0 <_fflush_r+0xc>

08009034 <memmove>:
 8009034:	4288      	cmp	r0, r1
 8009036:	b510      	push	{r4, lr}
 8009038:	eb01 0402 	add.w	r4, r1, r2
 800903c:	d902      	bls.n	8009044 <memmove+0x10>
 800903e:	4284      	cmp	r4, r0
 8009040:	4623      	mov	r3, r4
 8009042:	d807      	bhi.n	8009054 <memmove+0x20>
 8009044:	1e43      	subs	r3, r0, #1
 8009046:	42a1      	cmp	r1, r4
 8009048:	d008      	beq.n	800905c <memmove+0x28>
 800904a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800904e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009052:	e7f8      	b.n	8009046 <memmove+0x12>
 8009054:	4402      	add	r2, r0
 8009056:	4601      	mov	r1, r0
 8009058:	428a      	cmp	r2, r1
 800905a:	d100      	bne.n	800905e <memmove+0x2a>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009066:	e7f7      	b.n	8009058 <memmove+0x24>

08009068 <strncmp>:
 8009068:	b510      	push	{r4, lr}
 800906a:	b16a      	cbz	r2, 8009088 <strncmp+0x20>
 800906c:	3901      	subs	r1, #1
 800906e:	1884      	adds	r4, r0, r2
 8009070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009074:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009078:	429a      	cmp	r2, r3
 800907a:	d103      	bne.n	8009084 <strncmp+0x1c>
 800907c:	42a0      	cmp	r0, r4
 800907e:	d001      	beq.n	8009084 <strncmp+0x1c>
 8009080:	2a00      	cmp	r2, #0
 8009082:	d1f5      	bne.n	8009070 <strncmp+0x8>
 8009084:	1ad0      	subs	r0, r2, r3
 8009086:	bd10      	pop	{r4, pc}
 8009088:	4610      	mov	r0, r2
 800908a:	e7fc      	b.n	8009086 <strncmp+0x1e>

0800908c <_sbrk_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d06      	ldr	r5, [pc, #24]	@ (80090a8 <_sbrk_r+0x1c>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	602b      	str	r3, [r5, #0]
 8009098:	f7f8 fbe2 	bl	8001860 <_sbrk>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_sbrk_r+0x1a>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_sbrk_r+0x1a>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	20004414 	.word	0x20004414
 80090ac:	00000000 	.word	0x00000000

080090b0 <nan>:
 80090b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80090b8 <nan+0x8>
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	00000000 	.word	0x00000000
 80090bc:	7ff80000 	.word	0x7ff80000

080090c0 <__assert_func>:
 80090c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c2:	4614      	mov	r4, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b09      	ldr	r3, [pc, #36]	@ (80090ec <__assert_func+0x2c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4605      	mov	r5, r0
 80090cc:	68d8      	ldr	r0, [r3, #12]
 80090ce:	b14c      	cbz	r4, 80090e4 <__assert_func+0x24>
 80090d0:	4b07      	ldr	r3, [pc, #28]	@ (80090f0 <__assert_func+0x30>)
 80090d2:	9100      	str	r1, [sp, #0]
 80090d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090d8:	4906      	ldr	r1, [pc, #24]	@ (80090f4 <__assert_func+0x34>)
 80090da:	462b      	mov	r3, r5
 80090dc:	f000 fba8 	bl	8009830 <fiprintf>
 80090e0:	f000 fbb8 	bl	8009854 <abort>
 80090e4:	4b04      	ldr	r3, [pc, #16]	@ (80090f8 <__assert_func+0x38>)
 80090e6:	461c      	mov	r4, r3
 80090e8:	e7f3      	b.n	80090d2 <__assert_func+0x12>
 80090ea:	bf00      	nop
 80090ec:	2000001c 	.word	0x2000001c
 80090f0:	08009f7a 	.word	0x08009f7a
 80090f4:	08009f87 	.word	0x08009f87
 80090f8:	08009fb5 	.word	0x08009fb5

080090fc <_calloc_r>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009102:	b934      	cbnz	r4, 8009112 <_calloc_r+0x16>
 8009104:	4629      	mov	r1, r5
 8009106:	f7fe f9d7 	bl	80074b8 <_malloc_r>
 800910a:	4606      	mov	r6, r0
 800910c:	b928      	cbnz	r0, 800911a <_calloc_r+0x1e>
 800910e:	4630      	mov	r0, r6
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	220c      	movs	r2, #12
 8009114:	6002      	str	r2, [r0, #0]
 8009116:	2600      	movs	r6, #0
 8009118:	e7f9      	b.n	800910e <_calloc_r+0x12>
 800911a:	462a      	mov	r2, r5
 800911c:	4621      	mov	r1, r4
 800911e:	f7fd fa0c 	bl	800653a <memset>
 8009122:	e7f4      	b.n	800910e <_calloc_r+0x12>

08009124 <rshift>:
 8009124:	6903      	ldr	r3, [r0, #16]
 8009126:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800912a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800912e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009132:	f100 0414 	add.w	r4, r0, #20
 8009136:	dd45      	ble.n	80091c4 <rshift+0xa0>
 8009138:	f011 011f 	ands.w	r1, r1, #31
 800913c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009140:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009144:	d10c      	bne.n	8009160 <rshift+0x3c>
 8009146:	f100 0710 	add.w	r7, r0, #16
 800914a:	4629      	mov	r1, r5
 800914c:	42b1      	cmp	r1, r6
 800914e:	d334      	bcc.n	80091ba <rshift+0x96>
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	1eea      	subs	r2, r5, #3
 8009156:	4296      	cmp	r6, r2
 8009158:	bf38      	it	cc
 800915a:	2300      	movcc	r3, #0
 800915c:	4423      	add	r3, r4
 800915e:	e015      	b.n	800918c <rshift+0x68>
 8009160:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009164:	f1c1 0820 	rsb	r8, r1, #32
 8009168:	40cf      	lsrs	r7, r1
 800916a:	f105 0e04 	add.w	lr, r5, #4
 800916e:	46a1      	mov	r9, r4
 8009170:	4576      	cmp	r6, lr
 8009172:	46f4      	mov	ip, lr
 8009174:	d815      	bhi.n	80091a2 <rshift+0x7e>
 8009176:	1a9a      	subs	r2, r3, r2
 8009178:	0092      	lsls	r2, r2, #2
 800917a:	3a04      	subs	r2, #4
 800917c:	3501      	adds	r5, #1
 800917e:	42ae      	cmp	r6, r5
 8009180:	bf38      	it	cc
 8009182:	2200      	movcc	r2, #0
 8009184:	18a3      	adds	r3, r4, r2
 8009186:	50a7      	str	r7, [r4, r2]
 8009188:	b107      	cbz	r7, 800918c <rshift+0x68>
 800918a:	3304      	adds	r3, #4
 800918c:	1b1a      	subs	r2, r3, r4
 800918e:	42a3      	cmp	r3, r4
 8009190:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009194:	bf08      	it	eq
 8009196:	2300      	moveq	r3, #0
 8009198:	6102      	str	r2, [r0, #16]
 800919a:	bf08      	it	eq
 800919c:	6143      	streq	r3, [r0, #20]
 800919e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091a2:	f8dc c000 	ldr.w	ip, [ip]
 80091a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80091aa:	ea4c 0707 	orr.w	r7, ip, r7
 80091ae:	f849 7b04 	str.w	r7, [r9], #4
 80091b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091b6:	40cf      	lsrs	r7, r1
 80091b8:	e7da      	b.n	8009170 <rshift+0x4c>
 80091ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80091be:	f847 cf04 	str.w	ip, [r7, #4]!
 80091c2:	e7c3      	b.n	800914c <rshift+0x28>
 80091c4:	4623      	mov	r3, r4
 80091c6:	e7e1      	b.n	800918c <rshift+0x68>

080091c8 <__hexdig_fun>:
 80091c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091cc:	2b09      	cmp	r3, #9
 80091ce:	d802      	bhi.n	80091d6 <__hexdig_fun+0xe>
 80091d0:	3820      	subs	r0, #32
 80091d2:	b2c0      	uxtb	r0, r0
 80091d4:	4770      	bx	lr
 80091d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d801      	bhi.n	80091e2 <__hexdig_fun+0x1a>
 80091de:	3847      	subs	r0, #71	@ 0x47
 80091e0:	e7f7      	b.n	80091d2 <__hexdig_fun+0xa>
 80091e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d801      	bhi.n	80091ee <__hexdig_fun+0x26>
 80091ea:	3827      	subs	r0, #39	@ 0x27
 80091ec:	e7f1      	b.n	80091d2 <__hexdig_fun+0xa>
 80091ee:	2000      	movs	r0, #0
 80091f0:	4770      	bx	lr
	...

080091f4 <__gethex>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	b085      	sub	sp, #20
 80091fa:	468a      	mov	sl, r1
 80091fc:	9302      	str	r3, [sp, #8]
 80091fe:	680b      	ldr	r3, [r1, #0]
 8009200:	9001      	str	r0, [sp, #4]
 8009202:	4690      	mov	r8, r2
 8009204:	1c9c      	adds	r4, r3, #2
 8009206:	46a1      	mov	r9, r4
 8009208:	f814 0b01 	ldrb.w	r0, [r4], #1
 800920c:	2830      	cmp	r0, #48	@ 0x30
 800920e:	d0fa      	beq.n	8009206 <__gethex+0x12>
 8009210:	eba9 0303 	sub.w	r3, r9, r3
 8009214:	f1a3 0b02 	sub.w	fp, r3, #2
 8009218:	f7ff ffd6 	bl	80091c8 <__hexdig_fun>
 800921c:	4605      	mov	r5, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d168      	bne.n	80092f4 <__gethex+0x100>
 8009222:	49a0      	ldr	r1, [pc, #640]	@ (80094a4 <__gethex+0x2b0>)
 8009224:	2201      	movs	r2, #1
 8009226:	4648      	mov	r0, r9
 8009228:	f7ff ff1e 	bl	8009068 <strncmp>
 800922c:	4607      	mov	r7, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d167      	bne.n	8009302 <__gethex+0x10e>
 8009232:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009236:	4626      	mov	r6, r4
 8009238:	f7ff ffc6 	bl	80091c8 <__hexdig_fun>
 800923c:	2800      	cmp	r0, #0
 800923e:	d062      	beq.n	8009306 <__gethex+0x112>
 8009240:	4623      	mov	r3, r4
 8009242:	7818      	ldrb	r0, [r3, #0]
 8009244:	2830      	cmp	r0, #48	@ 0x30
 8009246:	4699      	mov	r9, r3
 8009248:	f103 0301 	add.w	r3, r3, #1
 800924c:	d0f9      	beq.n	8009242 <__gethex+0x4e>
 800924e:	f7ff ffbb 	bl	80091c8 <__hexdig_fun>
 8009252:	fab0 f580 	clz	r5, r0
 8009256:	096d      	lsrs	r5, r5, #5
 8009258:	f04f 0b01 	mov.w	fp, #1
 800925c:	464a      	mov	r2, r9
 800925e:	4616      	mov	r6, r2
 8009260:	3201      	adds	r2, #1
 8009262:	7830      	ldrb	r0, [r6, #0]
 8009264:	f7ff ffb0 	bl	80091c8 <__hexdig_fun>
 8009268:	2800      	cmp	r0, #0
 800926a:	d1f8      	bne.n	800925e <__gethex+0x6a>
 800926c:	498d      	ldr	r1, [pc, #564]	@ (80094a4 <__gethex+0x2b0>)
 800926e:	2201      	movs	r2, #1
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff fef9 	bl	8009068 <strncmp>
 8009276:	2800      	cmp	r0, #0
 8009278:	d13f      	bne.n	80092fa <__gethex+0x106>
 800927a:	b944      	cbnz	r4, 800928e <__gethex+0x9a>
 800927c:	1c74      	adds	r4, r6, #1
 800927e:	4622      	mov	r2, r4
 8009280:	4616      	mov	r6, r2
 8009282:	3201      	adds	r2, #1
 8009284:	7830      	ldrb	r0, [r6, #0]
 8009286:	f7ff ff9f 	bl	80091c8 <__hexdig_fun>
 800928a:	2800      	cmp	r0, #0
 800928c:	d1f8      	bne.n	8009280 <__gethex+0x8c>
 800928e:	1ba4      	subs	r4, r4, r6
 8009290:	00a7      	lsls	r7, r4, #2
 8009292:	7833      	ldrb	r3, [r6, #0]
 8009294:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009298:	2b50      	cmp	r3, #80	@ 0x50
 800929a:	d13e      	bne.n	800931a <__gethex+0x126>
 800929c:	7873      	ldrb	r3, [r6, #1]
 800929e:	2b2b      	cmp	r3, #43	@ 0x2b
 80092a0:	d033      	beq.n	800930a <__gethex+0x116>
 80092a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80092a4:	d034      	beq.n	8009310 <__gethex+0x11c>
 80092a6:	1c71      	adds	r1, r6, #1
 80092a8:	2400      	movs	r4, #0
 80092aa:	7808      	ldrb	r0, [r1, #0]
 80092ac:	f7ff ff8c 	bl	80091c8 <__hexdig_fun>
 80092b0:	1e43      	subs	r3, r0, #1
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b18      	cmp	r3, #24
 80092b6:	d830      	bhi.n	800931a <__gethex+0x126>
 80092b8:	f1a0 0210 	sub.w	r2, r0, #16
 80092bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092c0:	f7ff ff82 	bl	80091c8 <__hexdig_fun>
 80092c4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80092c8:	fa5f fc8c 	uxtb.w	ip, ip
 80092cc:	f1bc 0f18 	cmp.w	ip, #24
 80092d0:	f04f 030a 	mov.w	r3, #10
 80092d4:	d91e      	bls.n	8009314 <__gethex+0x120>
 80092d6:	b104      	cbz	r4, 80092da <__gethex+0xe6>
 80092d8:	4252      	negs	r2, r2
 80092da:	4417      	add	r7, r2
 80092dc:	f8ca 1000 	str.w	r1, [sl]
 80092e0:	b1ed      	cbz	r5, 800931e <__gethex+0x12a>
 80092e2:	f1bb 0f00 	cmp.w	fp, #0
 80092e6:	bf0c      	ite	eq
 80092e8:	2506      	moveq	r5, #6
 80092ea:	2500      	movne	r5, #0
 80092ec:	4628      	mov	r0, r5
 80092ee:	b005      	add	sp, #20
 80092f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f4:	2500      	movs	r5, #0
 80092f6:	462c      	mov	r4, r5
 80092f8:	e7b0      	b.n	800925c <__gethex+0x68>
 80092fa:	2c00      	cmp	r4, #0
 80092fc:	d1c7      	bne.n	800928e <__gethex+0x9a>
 80092fe:	4627      	mov	r7, r4
 8009300:	e7c7      	b.n	8009292 <__gethex+0x9e>
 8009302:	464e      	mov	r6, r9
 8009304:	462f      	mov	r7, r5
 8009306:	2501      	movs	r5, #1
 8009308:	e7c3      	b.n	8009292 <__gethex+0x9e>
 800930a:	2400      	movs	r4, #0
 800930c:	1cb1      	adds	r1, r6, #2
 800930e:	e7cc      	b.n	80092aa <__gethex+0xb6>
 8009310:	2401      	movs	r4, #1
 8009312:	e7fb      	b.n	800930c <__gethex+0x118>
 8009314:	fb03 0002 	mla	r0, r3, r2, r0
 8009318:	e7ce      	b.n	80092b8 <__gethex+0xc4>
 800931a:	4631      	mov	r1, r6
 800931c:	e7de      	b.n	80092dc <__gethex+0xe8>
 800931e:	eba6 0309 	sub.w	r3, r6, r9
 8009322:	3b01      	subs	r3, #1
 8009324:	4629      	mov	r1, r5
 8009326:	2b07      	cmp	r3, #7
 8009328:	dc0a      	bgt.n	8009340 <__gethex+0x14c>
 800932a:	9801      	ldr	r0, [sp, #4]
 800932c:	f7fe f950 	bl	80075d0 <_Balloc>
 8009330:	4604      	mov	r4, r0
 8009332:	b940      	cbnz	r0, 8009346 <__gethex+0x152>
 8009334:	4b5c      	ldr	r3, [pc, #368]	@ (80094a8 <__gethex+0x2b4>)
 8009336:	4602      	mov	r2, r0
 8009338:	21e4      	movs	r1, #228	@ 0xe4
 800933a:	485c      	ldr	r0, [pc, #368]	@ (80094ac <__gethex+0x2b8>)
 800933c:	f7ff fec0 	bl	80090c0 <__assert_func>
 8009340:	3101      	adds	r1, #1
 8009342:	105b      	asrs	r3, r3, #1
 8009344:	e7ef      	b.n	8009326 <__gethex+0x132>
 8009346:	f100 0a14 	add.w	sl, r0, #20
 800934a:	2300      	movs	r3, #0
 800934c:	4655      	mov	r5, sl
 800934e:	469b      	mov	fp, r3
 8009350:	45b1      	cmp	r9, r6
 8009352:	d337      	bcc.n	80093c4 <__gethex+0x1d0>
 8009354:	f845 bb04 	str.w	fp, [r5], #4
 8009358:	eba5 050a 	sub.w	r5, r5, sl
 800935c:	10ad      	asrs	r5, r5, #2
 800935e:	6125      	str	r5, [r4, #16]
 8009360:	4658      	mov	r0, fp
 8009362:	f7fe fa27 	bl	80077b4 <__hi0bits>
 8009366:	016d      	lsls	r5, r5, #5
 8009368:	f8d8 6000 	ldr.w	r6, [r8]
 800936c:	1a2d      	subs	r5, r5, r0
 800936e:	42b5      	cmp	r5, r6
 8009370:	dd54      	ble.n	800941c <__gethex+0x228>
 8009372:	1bad      	subs	r5, r5, r6
 8009374:	4629      	mov	r1, r5
 8009376:	4620      	mov	r0, r4
 8009378:	f7fe fdb3 	bl	8007ee2 <__any_on>
 800937c:	4681      	mov	r9, r0
 800937e:	b178      	cbz	r0, 80093a0 <__gethex+0x1ac>
 8009380:	1e6b      	subs	r3, r5, #1
 8009382:	1159      	asrs	r1, r3, #5
 8009384:	f003 021f 	and.w	r2, r3, #31
 8009388:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800938c:	f04f 0901 	mov.w	r9, #1
 8009390:	fa09 f202 	lsl.w	r2, r9, r2
 8009394:	420a      	tst	r2, r1
 8009396:	d003      	beq.n	80093a0 <__gethex+0x1ac>
 8009398:	454b      	cmp	r3, r9
 800939a:	dc36      	bgt.n	800940a <__gethex+0x216>
 800939c:	f04f 0902 	mov.w	r9, #2
 80093a0:	4629      	mov	r1, r5
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7ff febe 	bl	8009124 <rshift>
 80093a8:	442f      	add	r7, r5
 80093aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093ae:	42bb      	cmp	r3, r7
 80093b0:	da42      	bge.n	8009438 <__gethex+0x244>
 80093b2:	9801      	ldr	r0, [sp, #4]
 80093b4:	4621      	mov	r1, r4
 80093b6:	f7fe f94b 	bl	8007650 <_Bfree>
 80093ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093bc:	2300      	movs	r3, #0
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	25a3      	movs	r5, #163	@ 0xa3
 80093c2:	e793      	b.n	80092ec <__gethex+0xf8>
 80093c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80093ca:	d012      	beq.n	80093f2 <__gethex+0x1fe>
 80093cc:	2b20      	cmp	r3, #32
 80093ce:	d104      	bne.n	80093da <__gethex+0x1e6>
 80093d0:	f845 bb04 	str.w	fp, [r5], #4
 80093d4:	f04f 0b00 	mov.w	fp, #0
 80093d8:	465b      	mov	r3, fp
 80093da:	7830      	ldrb	r0, [r6, #0]
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	f7ff fef3 	bl	80091c8 <__hexdig_fun>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	f000 000f 	and.w	r0, r0, #15
 80093e8:	4098      	lsls	r0, r3
 80093ea:	ea4b 0b00 	orr.w	fp, fp, r0
 80093ee:	3304      	adds	r3, #4
 80093f0:	e7ae      	b.n	8009350 <__gethex+0x15c>
 80093f2:	45b1      	cmp	r9, r6
 80093f4:	d8ea      	bhi.n	80093cc <__gethex+0x1d8>
 80093f6:	492b      	ldr	r1, [pc, #172]	@ (80094a4 <__gethex+0x2b0>)
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff fe33 	bl	8009068 <strncmp>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	2800      	cmp	r0, #0
 8009406:	d1e1      	bne.n	80093cc <__gethex+0x1d8>
 8009408:	e7a2      	b.n	8009350 <__gethex+0x15c>
 800940a:	1ea9      	subs	r1, r5, #2
 800940c:	4620      	mov	r0, r4
 800940e:	f7fe fd68 	bl	8007ee2 <__any_on>
 8009412:	2800      	cmp	r0, #0
 8009414:	d0c2      	beq.n	800939c <__gethex+0x1a8>
 8009416:	f04f 0903 	mov.w	r9, #3
 800941a:	e7c1      	b.n	80093a0 <__gethex+0x1ac>
 800941c:	da09      	bge.n	8009432 <__gethex+0x23e>
 800941e:	1b75      	subs	r5, r6, r5
 8009420:	4621      	mov	r1, r4
 8009422:	9801      	ldr	r0, [sp, #4]
 8009424:	462a      	mov	r2, r5
 8009426:	f7fe fb23 	bl	8007a70 <__lshift>
 800942a:	1b7f      	subs	r7, r7, r5
 800942c:	4604      	mov	r4, r0
 800942e:	f100 0a14 	add.w	sl, r0, #20
 8009432:	f04f 0900 	mov.w	r9, #0
 8009436:	e7b8      	b.n	80093aa <__gethex+0x1b6>
 8009438:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800943c:	42bd      	cmp	r5, r7
 800943e:	dd6f      	ble.n	8009520 <__gethex+0x32c>
 8009440:	1bed      	subs	r5, r5, r7
 8009442:	42ae      	cmp	r6, r5
 8009444:	dc34      	bgt.n	80094b0 <__gethex+0x2bc>
 8009446:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d022      	beq.n	8009494 <__gethex+0x2a0>
 800944e:	2b03      	cmp	r3, #3
 8009450:	d024      	beq.n	800949c <__gethex+0x2a8>
 8009452:	2b01      	cmp	r3, #1
 8009454:	d115      	bne.n	8009482 <__gethex+0x28e>
 8009456:	42ae      	cmp	r6, r5
 8009458:	d113      	bne.n	8009482 <__gethex+0x28e>
 800945a:	2e01      	cmp	r6, #1
 800945c:	d10b      	bne.n	8009476 <__gethex+0x282>
 800945e:	9a02      	ldr	r2, [sp, #8]
 8009460:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	2301      	movs	r3, #1
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	f8ca 3000 	str.w	r3, [sl]
 800946e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009470:	2562      	movs	r5, #98	@ 0x62
 8009472:	601c      	str	r4, [r3, #0]
 8009474:	e73a      	b.n	80092ec <__gethex+0xf8>
 8009476:	1e71      	subs	r1, r6, #1
 8009478:	4620      	mov	r0, r4
 800947a:	f7fe fd32 	bl	8007ee2 <__any_on>
 800947e:	2800      	cmp	r0, #0
 8009480:	d1ed      	bne.n	800945e <__gethex+0x26a>
 8009482:	9801      	ldr	r0, [sp, #4]
 8009484:	4621      	mov	r1, r4
 8009486:	f7fe f8e3 	bl	8007650 <_Bfree>
 800948a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800948c:	2300      	movs	r3, #0
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	2550      	movs	r5, #80	@ 0x50
 8009492:	e72b      	b.n	80092ec <__gethex+0xf8>
 8009494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f3      	bne.n	8009482 <__gethex+0x28e>
 800949a:	e7e0      	b.n	800945e <__gethex+0x26a>
 800949c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1dd      	bne.n	800945e <__gethex+0x26a>
 80094a2:	e7ee      	b.n	8009482 <__gethex+0x28e>
 80094a4:	08009f5f 	.word	0x08009f5f
 80094a8:	08009ef5 	.word	0x08009ef5
 80094ac:	08009fb6 	.word	0x08009fb6
 80094b0:	1e6f      	subs	r7, r5, #1
 80094b2:	f1b9 0f00 	cmp.w	r9, #0
 80094b6:	d130      	bne.n	800951a <__gethex+0x326>
 80094b8:	b127      	cbz	r7, 80094c4 <__gethex+0x2d0>
 80094ba:	4639      	mov	r1, r7
 80094bc:	4620      	mov	r0, r4
 80094be:	f7fe fd10 	bl	8007ee2 <__any_on>
 80094c2:	4681      	mov	r9, r0
 80094c4:	117a      	asrs	r2, r7, #5
 80094c6:	2301      	movs	r3, #1
 80094c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80094cc:	f007 071f 	and.w	r7, r7, #31
 80094d0:	40bb      	lsls	r3, r7
 80094d2:	4213      	tst	r3, r2
 80094d4:	4629      	mov	r1, r5
 80094d6:	4620      	mov	r0, r4
 80094d8:	bf18      	it	ne
 80094da:	f049 0902 	orrne.w	r9, r9, #2
 80094de:	f7ff fe21 	bl	8009124 <rshift>
 80094e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80094e6:	1b76      	subs	r6, r6, r5
 80094e8:	2502      	movs	r5, #2
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	d047      	beq.n	8009580 <__gethex+0x38c>
 80094f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d015      	beq.n	8009524 <__gethex+0x330>
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d017      	beq.n	800952c <__gethex+0x338>
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d109      	bne.n	8009514 <__gethex+0x320>
 8009500:	f019 0f02 	tst.w	r9, #2
 8009504:	d006      	beq.n	8009514 <__gethex+0x320>
 8009506:	f8da 3000 	ldr.w	r3, [sl]
 800950a:	ea49 0903 	orr.w	r9, r9, r3
 800950e:	f019 0f01 	tst.w	r9, #1
 8009512:	d10e      	bne.n	8009532 <__gethex+0x33e>
 8009514:	f045 0510 	orr.w	r5, r5, #16
 8009518:	e032      	b.n	8009580 <__gethex+0x38c>
 800951a:	f04f 0901 	mov.w	r9, #1
 800951e:	e7d1      	b.n	80094c4 <__gethex+0x2d0>
 8009520:	2501      	movs	r5, #1
 8009522:	e7e2      	b.n	80094ea <__gethex+0x2f6>
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	f1c3 0301 	rsb	r3, r3, #1
 800952a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800952c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <__gethex+0x320>
 8009532:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009536:	f104 0314 	add.w	r3, r4, #20
 800953a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800953e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009542:	f04f 0c00 	mov.w	ip, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f853 2b04 	ldr.w	r2, [r3], #4
 800954c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009550:	d01b      	beq.n	800958a <__gethex+0x396>
 8009552:	3201      	adds	r2, #1
 8009554:	6002      	str	r2, [r0, #0]
 8009556:	2d02      	cmp	r5, #2
 8009558:	f104 0314 	add.w	r3, r4, #20
 800955c:	d13c      	bne.n	80095d8 <__gethex+0x3e4>
 800955e:	f8d8 2000 	ldr.w	r2, [r8]
 8009562:	3a01      	subs	r2, #1
 8009564:	42b2      	cmp	r2, r6
 8009566:	d109      	bne.n	800957c <__gethex+0x388>
 8009568:	1171      	asrs	r1, r6, #5
 800956a:	2201      	movs	r2, #1
 800956c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009570:	f006 061f 	and.w	r6, r6, #31
 8009574:	fa02 f606 	lsl.w	r6, r2, r6
 8009578:	421e      	tst	r6, r3
 800957a:	d13a      	bne.n	80095f2 <__gethex+0x3fe>
 800957c:	f045 0520 	orr.w	r5, r5, #32
 8009580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009582:	601c      	str	r4, [r3, #0]
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	601f      	str	r7, [r3, #0]
 8009588:	e6b0      	b.n	80092ec <__gethex+0xf8>
 800958a:	4299      	cmp	r1, r3
 800958c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009590:	d8d9      	bhi.n	8009546 <__gethex+0x352>
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	459b      	cmp	fp, r3
 8009596:	db17      	blt.n	80095c8 <__gethex+0x3d4>
 8009598:	6861      	ldr	r1, [r4, #4]
 800959a:	9801      	ldr	r0, [sp, #4]
 800959c:	3101      	adds	r1, #1
 800959e:	f7fe f817 	bl	80075d0 <_Balloc>
 80095a2:	4681      	mov	r9, r0
 80095a4:	b918      	cbnz	r0, 80095ae <__gethex+0x3ba>
 80095a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009610 <__gethex+0x41c>)
 80095a8:	4602      	mov	r2, r0
 80095aa:	2184      	movs	r1, #132	@ 0x84
 80095ac:	e6c5      	b.n	800933a <__gethex+0x146>
 80095ae:	6922      	ldr	r2, [r4, #16]
 80095b0:	3202      	adds	r2, #2
 80095b2:	f104 010c 	add.w	r1, r4, #12
 80095b6:	0092      	lsls	r2, r2, #2
 80095b8:	300c      	adds	r0, #12
 80095ba:	f7fd f89c 	bl	80066f6 <memcpy>
 80095be:	4621      	mov	r1, r4
 80095c0:	9801      	ldr	r0, [sp, #4]
 80095c2:	f7fe f845 	bl	8007650 <_Bfree>
 80095c6:	464c      	mov	r4, r9
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095d0:	6122      	str	r2, [r4, #16]
 80095d2:	2201      	movs	r2, #1
 80095d4:	615a      	str	r2, [r3, #20]
 80095d6:	e7be      	b.n	8009556 <__gethex+0x362>
 80095d8:	6922      	ldr	r2, [r4, #16]
 80095da:	455a      	cmp	r2, fp
 80095dc:	dd0b      	ble.n	80095f6 <__gethex+0x402>
 80095de:	2101      	movs	r1, #1
 80095e0:	4620      	mov	r0, r4
 80095e2:	f7ff fd9f 	bl	8009124 <rshift>
 80095e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ea:	3701      	adds	r7, #1
 80095ec:	42bb      	cmp	r3, r7
 80095ee:	f6ff aee0 	blt.w	80093b2 <__gethex+0x1be>
 80095f2:	2501      	movs	r5, #1
 80095f4:	e7c2      	b.n	800957c <__gethex+0x388>
 80095f6:	f016 061f 	ands.w	r6, r6, #31
 80095fa:	d0fa      	beq.n	80095f2 <__gethex+0x3fe>
 80095fc:	4453      	add	r3, sl
 80095fe:	f1c6 0620 	rsb	r6, r6, #32
 8009602:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009606:	f7fe f8d5 	bl	80077b4 <__hi0bits>
 800960a:	42b0      	cmp	r0, r6
 800960c:	dbe7      	blt.n	80095de <__gethex+0x3ea>
 800960e:	e7f0      	b.n	80095f2 <__gethex+0x3fe>
 8009610:	08009ef5 	.word	0x08009ef5

08009614 <L_shift>:
 8009614:	f1c2 0208 	rsb	r2, r2, #8
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	b570      	push	{r4, r5, r6, lr}
 800961c:	f1c2 0620 	rsb	r6, r2, #32
 8009620:	6843      	ldr	r3, [r0, #4]
 8009622:	6804      	ldr	r4, [r0, #0]
 8009624:	fa03 f506 	lsl.w	r5, r3, r6
 8009628:	432c      	orrs	r4, r5
 800962a:	40d3      	lsrs	r3, r2
 800962c:	6004      	str	r4, [r0, #0]
 800962e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009632:	4288      	cmp	r0, r1
 8009634:	d3f4      	bcc.n	8009620 <L_shift+0xc>
 8009636:	bd70      	pop	{r4, r5, r6, pc}

08009638 <__match>:
 8009638:	b530      	push	{r4, r5, lr}
 800963a:	6803      	ldr	r3, [r0, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009642:	b914      	cbnz	r4, 800964a <__match+0x12>
 8009644:	6003      	str	r3, [r0, #0]
 8009646:	2001      	movs	r0, #1
 8009648:	bd30      	pop	{r4, r5, pc}
 800964a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009652:	2d19      	cmp	r5, #25
 8009654:	bf98      	it	ls
 8009656:	3220      	addls	r2, #32
 8009658:	42a2      	cmp	r2, r4
 800965a:	d0f0      	beq.n	800963e <__match+0x6>
 800965c:	2000      	movs	r0, #0
 800965e:	e7f3      	b.n	8009648 <__match+0x10>

08009660 <__hexnan>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	680b      	ldr	r3, [r1, #0]
 8009666:	6801      	ldr	r1, [r0, #0]
 8009668:	115e      	asrs	r6, r3, #5
 800966a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800966e:	f013 031f 	ands.w	r3, r3, #31
 8009672:	b087      	sub	sp, #28
 8009674:	bf18      	it	ne
 8009676:	3604      	addne	r6, #4
 8009678:	2500      	movs	r5, #0
 800967a:	1f37      	subs	r7, r6, #4
 800967c:	4682      	mov	sl, r0
 800967e:	4690      	mov	r8, r2
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	f846 5c04 	str.w	r5, [r6, #-4]
 8009686:	46b9      	mov	r9, r7
 8009688:	463c      	mov	r4, r7
 800968a:	9502      	str	r5, [sp, #8]
 800968c:	46ab      	mov	fp, r5
 800968e:	784a      	ldrb	r2, [r1, #1]
 8009690:	1c4b      	adds	r3, r1, #1
 8009692:	9303      	str	r3, [sp, #12]
 8009694:	b342      	cbz	r2, 80096e8 <__hexnan+0x88>
 8009696:	4610      	mov	r0, r2
 8009698:	9105      	str	r1, [sp, #20]
 800969a:	9204      	str	r2, [sp, #16]
 800969c:	f7ff fd94 	bl	80091c8 <__hexdig_fun>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d151      	bne.n	8009748 <__hexnan+0xe8>
 80096a4:	9a04      	ldr	r2, [sp, #16]
 80096a6:	9905      	ldr	r1, [sp, #20]
 80096a8:	2a20      	cmp	r2, #32
 80096aa:	d818      	bhi.n	80096de <__hexnan+0x7e>
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	459b      	cmp	fp, r3
 80096b0:	dd13      	ble.n	80096da <__hexnan+0x7a>
 80096b2:	454c      	cmp	r4, r9
 80096b4:	d206      	bcs.n	80096c4 <__hexnan+0x64>
 80096b6:	2d07      	cmp	r5, #7
 80096b8:	dc04      	bgt.n	80096c4 <__hexnan+0x64>
 80096ba:	462a      	mov	r2, r5
 80096bc:	4649      	mov	r1, r9
 80096be:	4620      	mov	r0, r4
 80096c0:	f7ff ffa8 	bl	8009614 <L_shift>
 80096c4:	4544      	cmp	r4, r8
 80096c6:	d952      	bls.n	800976e <__hexnan+0x10e>
 80096c8:	2300      	movs	r3, #0
 80096ca:	f1a4 0904 	sub.w	r9, r4, #4
 80096ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80096d2:	f8cd b008 	str.w	fp, [sp, #8]
 80096d6:	464c      	mov	r4, r9
 80096d8:	461d      	mov	r5, r3
 80096da:	9903      	ldr	r1, [sp, #12]
 80096dc:	e7d7      	b.n	800968e <__hexnan+0x2e>
 80096de:	2a29      	cmp	r2, #41	@ 0x29
 80096e0:	d157      	bne.n	8009792 <__hexnan+0x132>
 80096e2:	3102      	adds	r1, #2
 80096e4:	f8ca 1000 	str.w	r1, [sl]
 80096e8:	f1bb 0f00 	cmp.w	fp, #0
 80096ec:	d051      	beq.n	8009792 <__hexnan+0x132>
 80096ee:	454c      	cmp	r4, r9
 80096f0:	d206      	bcs.n	8009700 <__hexnan+0xa0>
 80096f2:	2d07      	cmp	r5, #7
 80096f4:	dc04      	bgt.n	8009700 <__hexnan+0xa0>
 80096f6:	462a      	mov	r2, r5
 80096f8:	4649      	mov	r1, r9
 80096fa:	4620      	mov	r0, r4
 80096fc:	f7ff ff8a 	bl	8009614 <L_shift>
 8009700:	4544      	cmp	r4, r8
 8009702:	d936      	bls.n	8009772 <__hexnan+0x112>
 8009704:	f1a8 0204 	sub.w	r2, r8, #4
 8009708:	4623      	mov	r3, r4
 800970a:	f853 1b04 	ldr.w	r1, [r3], #4
 800970e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009712:	429f      	cmp	r7, r3
 8009714:	d2f9      	bcs.n	800970a <__hexnan+0xaa>
 8009716:	1b3b      	subs	r3, r7, r4
 8009718:	f023 0303 	bic.w	r3, r3, #3
 800971c:	3304      	adds	r3, #4
 800971e:	3401      	adds	r4, #1
 8009720:	3e03      	subs	r6, #3
 8009722:	42b4      	cmp	r4, r6
 8009724:	bf88      	it	hi
 8009726:	2304      	movhi	r3, #4
 8009728:	4443      	add	r3, r8
 800972a:	2200      	movs	r2, #0
 800972c:	f843 2b04 	str.w	r2, [r3], #4
 8009730:	429f      	cmp	r7, r3
 8009732:	d2fb      	bcs.n	800972c <__hexnan+0xcc>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	b91b      	cbnz	r3, 8009740 <__hexnan+0xe0>
 8009738:	4547      	cmp	r7, r8
 800973a:	d128      	bne.n	800978e <__hexnan+0x12e>
 800973c:	2301      	movs	r3, #1
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	2005      	movs	r0, #5
 8009742:	b007      	add	sp, #28
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	3501      	adds	r5, #1
 800974a:	2d08      	cmp	r5, #8
 800974c:	f10b 0b01 	add.w	fp, fp, #1
 8009750:	dd06      	ble.n	8009760 <__hexnan+0x100>
 8009752:	4544      	cmp	r4, r8
 8009754:	d9c1      	bls.n	80096da <__hexnan+0x7a>
 8009756:	2300      	movs	r3, #0
 8009758:	f844 3c04 	str.w	r3, [r4, #-4]
 800975c:	2501      	movs	r5, #1
 800975e:	3c04      	subs	r4, #4
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	f000 000f 	and.w	r0, r0, #15
 8009766:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800976a:	6020      	str	r0, [r4, #0]
 800976c:	e7b5      	b.n	80096da <__hexnan+0x7a>
 800976e:	2508      	movs	r5, #8
 8009770:	e7b3      	b.n	80096da <__hexnan+0x7a>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0dd      	beq.n	8009734 <__hexnan+0xd4>
 8009778:	f1c3 0320 	rsb	r3, r3, #32
 800977c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009780:	40da      	lsrs	r2, r3
 8009782:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009786:	4013      	ands	r3, r2
 8009788:	f846 3c04 	str.w	r3, [r6, #-4]
 800978c:	e7d2      	b.n	8009734 <__hexnan+0xd4>
 800978e:	3f04      	subs	r7, #4
 8009790:	e7d0      	b.n	8009734 <__hexnan+0xd4>
 8009792:	2004      	movs	r0, #4
 8009794:	e7d5      	b.n	8009742 <__hexnan+0xe2>

08009796 <__ascii_mbtowc>:
 8009796:	b082      	sub	sp, #8
 8009798:	b901      	cbnz	r1, 800979c <__ascii_mbtowc+0x6>
 800979a:	a901      	add	r1, sp, #4
 800979c:	b142      	cbz	r2, 80097b0 <__ascii_mbtowc+0x1a>
 800979e:	b14b      	cbz	r3, 80097b4 <__ascii_mbtowc+0x1e>
 80097a0:	7813      	ldrb	r3, [r2, #0]
 80097a2:	600b      	str	r3, [r1, #0]
 80097a4:	7812      	ldrb	r2, [r2, #0]
 80097a6:	1e10      	subs	r0, r2, #0
 80097a8:	bf18      	it	ne
 80097aa:	2001      	movne	r0, #1
 80097ac:	b002      	add	sp, #8
 80097ae:	4770      	bx	lr
 80097b0:	4610      	mov	r0, r2
 80097b2:	e7fb      	b.n	80097ac <__ascii_mbtowc+0x16>
 80097b4:	f06f 0001 	mvn.w	r0, #1
 80097b8:	e7f8      	b.n	80097ac <__ascii_mbtowc+0x16>

080097ba <_realloc_r>:
 80097ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097be:	4607      	mov	r7, r0
 80097c0:	4614      	mov	r4, r2
 80097c2:	460d      	mov	r5, r1
 80097c4:	b921      	cbnz	r1, 80097d0 <_realloc_r+0x16>
 80097c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	4611      	mov	r1, r2
 80097cc:	f7fd be74 	b.w	80074b8 <_malloc_r>
 80097d0:	b92a      	cbnz	r2, 80097de <_realloc_r+0x24>
 80097d2:	f7fd fdfd 	bl	80073d0 <_free_r>
 80097d6:	4625      	mov	r5, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097de:	f000 f840 	bl	8009862 <_malloc_usable_size_r>
 80097e2:	4284      	cmp	r4, r0
 80097e4:	4606      	mov	r6, r0
 80097e6:	d802      	bhi.n	80097ee <_realloc_r+0x34>
 80097e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097ec:	d8f4      	bhi.n	80097d8 <_realloc_r+0x1e>
 80097ee:	4621      	mov	r1, r4
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7fd fe61 	bl	80074b8 <_malloc_r>
 80097f6:	4680      	mov	r8, r0
 80097f8:	b908      	cbnz	r0, 80097fe <_realloc_r+0x44>
 80097fa:	4645      	mov	r5, r8
 80097fc:	e7ec      	b.n	80097d8 <_realloc_r+0x1e>
 80097fe:	42b4      	cmp	r4, r6
 8009800:	4622      	mov	r2, r4
 8009802:	4629      	mov	r1, r5
 8009804:	bf28      	it	cs
 8009806:	4632      	movcs	r2, r6
 8009808:	f7fc ff75 	bl	80066f6 <memcpy>
 800980c:	4629      	mov	r1, r5
 800980e:	4638      	mov	r0, r7
 8009810:	f7fd fdde 	bl	80073d0 <_free_r>
 8009814:	e7f1      	b.n	80097fa <_realloc_r+0x40>

08009816 <__ascii_wctomb>:
 8009816:	4603      	mov	r3, r0
 8009818:	4608      	mov	r0, r1
 800981a:	b141      	cbz	r1, 800982e <__ascii_wctomb+0x18>
 800981c:	2aff      	cmp	r2, #255	@ 0xff
 800981e:	d904      	bls.n	800982a <__ascii_wctomb+0x14>
 8009820:	228a      	movs	r2, #138	@ 0x8a
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009828:	4770      	bx	lr
 800982a:	700a      	strb	r2, [r1, #0]
 800982c:	2001      	movs	r0, #1
 800982e:	4770      	bx	lr

08009830 <fiprintf>:
 8009830:	b40e      	push	{r1, r2, r3}
 8009832:	b503      	push	{r0, r1, lr}
 8009834:	4601      	mov	r1, r0
 8009836:	ab03      	add	r3, sp, #12
 8009838:	4805      	ldr	r0, [pc, #20]	@ (8009850 <fiprintf+0x20>)
 800983a:	f853 2b04 	ldr.w	r2, [r3], #4
 800983e:	6800      	ldr	r0, [r0, #0]
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	f000 f83f 	bl	80098c4 <_vfiprintf_r>
 8009846:	b002      	add	sp, #8
 8009848:	f85d eb04 	ldr.w	lr, [sp], #4
 800984c:	b003      	add	sp, #12
 800984e:	4770      	bx	lr
 8009850:	2000001c 	.word	0x2000001c

08009854 <abort>:
 8009854:	b508      	push	{r3, lr}
 8009856:	2006      	movs	r0, #6
 8009858:	f000 fa08 	bl	8009c6c <raise>
 800985c:	2001      	movs	r0, #1
 800985e:	f7f7 ff87 	bl	8001770 <_exit>

08009862 <_malloc_usable_size_r>:
 8009862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009866:	1f18      	subs	r0, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	bfbc      	itt	lt
 800986c:	580b      	ldrlt	r3, [r1, r0]
 800986e:	18c0      	addlt	r0, r0, r3
 8009870:	4770      	bx	lr

08009872 <__sfputc_r>:
 8009872:	6893      	ldr	r3, [r2, #8]
 8009874:	3b01      	subs	r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	b410      	push	{r4}
 800987a:	6093      	str	r3, [r2, #8]
 800987c:	da08      	bge.n	8009890 <__sfputc_r+0x1e>
 800987e:	6994      	ldr	r4, [r2, #24]
 8009880:	42a3      	cmp	r3, r4
 8009882:	db01      	blt.n	8009888 <__sfputc_r+0x16>
 8009884:	290a      	cmp	r1, #10
 8009886:	d103      	bne.n	8009890 <__sfputc_r+0x1e>
 8009888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800988c:	f000 b932 	b.w	8009af4 <__swbuf_r>
 8009890:	6813      	ldr	r3, [r2, #0]
 8009892:	1c58      	adds	r0, r3, #1
 8009894:	6010      	str	r0, [r2, #0]
 8009896:	7019      	strb	r1, [r3, #0]
 8009898:	4608      	mov	r0, r1
 800989a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <__sfputs_r>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	4614      	mov	r4, r2
 80098a8:	18d5      	adds	r5, r2, r3
 80098aa:	42ac      	cmp	r4, r5
 80098ac:	d101      	bne.n	80098b2 <__sfputs_r+0x12>
 80098ae:	2000      	movs	r0, #0
 80098b0:	e007      	b.n	80098c2 <__sfputs_r+0x22>
 80098b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b6:	463a      	mov	r2, r7
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff ffda 	bl	8009872 <__sfputc_r>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	d1f3      	bne.n	80098aa <__sfputs_r+0xa>
 80098c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098c4 <_vfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	460d      	mov	r5, r1
 80098ca:	b09d      	sub	sp, #116	@ 0x74
 80098cc:	4614      	mov	r4, r2
 80098ce:	4698      	mov	r8, r3
 80098d0:	4606      	mov	r6, r0
 80098d2:	b118      	cbz	r0, 80098dc <_vfiprintf_r+0x18>
 80098d4:	6a03      	ldr	r3, [r0, #32]
 80098d6:	b90b      	cbnz	r3, 80098dc <_vfiprintf_r+0x18>
 80098d8:	f7fc fd94 	bl	8006404 <__sinit>
 80098dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098de:	07d9      	lsls	r1, r3, #31
 80098e0:	d405      	bmi.n	80098ee <_vfiprintf_r+0x2a>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	059a      	lsls	r2, r3, #22
 80098e6:	d402      	bmi.n	80098ee <_vfiprintf_r+0x2a>
 80098e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098ea:	f7fc ff02 	bl	80066f2 <__retarget_lock_acquire_recursive>
 80098ee:	89ab      	ldrh	r3, [r5, #12]
 80098f0:	071b      	lsls	r3, r3, #28
 80098f2:	d501      	bpl.n	80098f8 <_vfiprintf_r+0x34>
 80098f4:	692b      	ldr	r3, [r5, #16]
 80098f6:	b99b      	cbnz	r3, 8009920 <_vfiprintf_r+0x5c>
 80098f8:	4629      	mov	r1, r5
 80098fa:	4630      	mov	r0, r6
 80098fc:	f000 f938 	bl	8009b70 <__swsetup_r>
 8009900:	b170      	cbz	r0, 8009920 <_vfiprintf_r+0x5c>
 8009902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009904:	07dc      	lsls	r4, r3, #31
 8009906:	d504      	bpl.n	8009912 <_vfiprintf_r+0x4e>
 8009908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800990c:	b01d      	add	sp, #116	@ 0x74
 800990e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	0598      	lsls	r0, r3, #22
 8009916:	d4f7      	bmi.n	8009908 <_vfiprintf_r+0x44>
 8009918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800991a:	f7fc feeb 	bl	80066f4 <__retarget_lock_release_recursive>
 800991e:	e7f3      	b.n	8009908 <_vfiprintf_r+0x44>
 8009920:	2300      	movs	r3, #0
 8009922:	9309      	str	r3, [sp, #36]	@ 0x24
 8009924:	2320      	movs	r3, #32
 8009926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800992a:	f8cd 800c 	str.w	r8, [sp, #12]
 800992e:	2330      	movs	r3, #48	@ 0x30
 8009930:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ae0 <_vfiprintf_r+0x21c>
 8009934:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009938:	f04f 0901 	mov.w	r9, #1
 800993c:	4623      	mov	r3, r4
 800993e:	469a      	mov	sl, r3
 8009940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009944:	b10a      	cbz	r2, 800994a <_vfiprintf_r+0x86>
 8009946:	2a25      	cmp	r2, #37	@ 0x25
 8009948:	d1f9      	bne.n	800993e <_vfiprintf_r+0x7a>
 800994a:	ebba 0b04 	subs.w	fp, sl, r4
 800994e:	d00b      	beq.n	8009968 <_vfiprintf_r+0xa4>
 8009950:	465b      	mov	r3, fp
 8009952:	4622      	mov	r2, r4
 8009954:	4629      	mov	r1, r5
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ffa2 	bl	80098a0 <__sfputs_r>
 800995c:	3001      	adds	r0, #1
 800995e:	f000 80a7 	beq.w	8009ab0 <_vfiprintf_r+0x1ec>
 8009962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009964:	445a      	add	r2, fp
 8009966:	9209      	str	r2, [sp, #36]	@ 0x24
 8009968:	f89a 3000 	ldrb.w	r3, [sl]
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 809f 	beq.w	8009ab0 <_vfiprintf_r+0x1ec>
 8009972:	2300      	movs	r3, #0
 8009974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997c:	f10a 0a01 	add.w	sl, sl, #1
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	9307      	str	r3, [sp, #28]
 8009984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009988:	931a      	str	r3, [sp, #104]	@ 0x68
 800998a:	4654      	mov	r4, sl
 800998c:	2205      	movs	r2, #5
 800998e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009992:	4853      	ldr	r0, [pc, #332]	@ (8009ae0 <_vfiprintf_r+0x21c>)
 8009994:	f7f6 fc1c 	bl	80001d0 <memchr>
 8009998:	9a04      	ldr	r2, [sp, #16]
 800999a:	b9d8      	cbnz	r0, 80099d4 <_vfiprintf_r+0x110>
 800999c:	06d1      	lsls	r1, r2, #27
 800999e:	bf44      	itt	mi
 80099a0:	2320      	movmi	r3, #32
 80099a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099a6:	0713      	lsls	r3, r2, #28
 80099a8:	bf44      	itt	mi
 80099aa:	232b      	movmi	r3, #43	@ 0x2b
 80099ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099b0:	f89a 3000 	ldrb.w	r3, [sl]
 80099b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b6:	d015      	beq.n	80099e4 <_vfiprintf_r+0x120>
 80099b8:	9a07      	ldr	r2, [sp, #28]
 80099ba:	4654      	mov	r4, sl
 80099bc:	2000      	movs	r0, #0
 80099be:	f04f 0c0a 	mov.w	ip, #10
 80099c2:	4621      	mov	r1, r4
 80099c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c8:	3b30      	subs	r3, #48	@ 0x30
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d94b      	bls.n	8009a66 <_vfiprintf_r+0x1a2>
 80099ce:	b1b0      	cbz	r0, 80099fe <_vfiprintf_r+0x13a>
 80099d0:	9207      	str	r2, [sp, #28]
 80099d2:	e014      	b.n	80099fe <_vfiprintf_r+0x13a>
 80099d4:	eba0 0308 	sub.w	r3, r0, r8
 80099d8:	fa09 f303 	lsl.w	r3, r9, r3
 80099dc:	4313      	orrs	r3, r2
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	46a2      	mov	sl, r4
 80099e2:	e7d2      	b.n	800998a <_vfiprintf_r+0xc6>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	1d19      	adds	r1, r3, #4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	9103      	str	r1, [sp, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bfbb      	ittet	lt
 80099f0:	425b      	neglt	r3, r3
 80099f2:	f042 0202 	orrlt.w	r2, r2, #2
 80099f6:	9307      	strge	r3, [sp, #28]
 80099f8:	9307      	strlt	r3, [sp, #28]
 80099fa:	bfb8      	it	lt
 80099fc:	9204      	strlt	r2, [sp, #16]
 80099fe:	7823      	ldrb	r3, [r4, #0]
 8009a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a02:	d10a      	bne.n	8009a1a <_vfiprintf_r+0x156>
 8009a04:	7863      	ldrb	r3, [r4, #1]
 8009a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a08:	d132      	bne.n	8009a70 <_vfiprintf_r+0x1ac>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	1d1a      	adds	r2, r3, #4
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	9203      	str	r2, [sp, #12]
 8009a12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a16:	3402      	adds	r4, #2
 8009a18:	9305      	str	r3, [sp, #20]
 8009a1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009af0 <_vfiprintf_r+0x22c>
 8009a1e:	7821      	ldrb	r1, [r4, #0]
 8009a20:	2203      	movs	r2, #3
 8009a22:	4650      	mov	r0, sl
 8009a24:	f7f6 fbd4 	bl	80001d0 <memchr>
 8009a28:	b138      	cbz	r0, 8009a3a <_vfiprintf_r+0x176>
 8009a2a:	9b04      	ldr	r3, [sp, #16]
 8009a2c:	eba0 000a 	sub.w	r0, r0, sl
 8009a30:	2240      	movs	r2, #64	@ 0x40
 8009a32:	4082      	lsls	r2, r0
 8009a34:	4313      	orrs	r3, r2
 8009a36:	3401      	adds	r4, #1
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3e:	4829      	ldr	r0, [pc, #164]	@ (8009ae4 <_vfiprintf_r+0x220>)
 8009a40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a44:	2206      	movs	r2, #6
 8009a46:	f7f6 fbc3 	bl	80001d0 <memchr>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d03f      	beq.n	8009ace <_vfiprintf_r+0x20a>
 8009a4e:	4b26      	ldr	r3, [pc, #152]	@ (8009ae8 <_vfiprintf_r+0x224>)
 8009a50:	bb1b      	cbnz	r3, 8009a9a <_vfiprintf_r+0x1d6>
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	3307      	adds	r3, #7
 8009a56:	f023 0307 	bic.w	r3, r3, #7
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	9303      	str	r3, [sp, #12]
 8009a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a60:	443b      	add	r3, r7
 8009a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a64:	e76a      	b.n	800993c <_vfiprintf_r+0x78>
 8009a66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	e7a8      	b.n	80099c2 <_vfiprintf_r+0xfe>
 8009a70:	2300      	movs	r3, #0
 8009a72:	3401      	adds	r4, #1
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	4619      	mov	r1, r3
 8009a78:	f04f 0c0a 	mov.w	ip, #10
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a82:	3a30      	subs	r2, #48	@ 0x30
 8009a84:	2a09      	cmp	r2, #9
 8009a86:	d903      	bls.n	8009a90 <_vfiprintf_r+0x1cc>
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0c6      	beq.n	8009a1a <_vfiprintf_r+0x156>
 8009a8c:	9105      	str	r1, [sp, #20]
 8009a8e:	e7c4      	b.n	8009a1a <_vfiprintf_r+0x156>
 8009a90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a94:	4604      	mov	r4, r0
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7f0      	b.n	8009a7c <_vfiprintf_r+0x1b8>
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <_vfiprintf_r+0x228>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7fb fe5d 	bl	8005764 <_printf_float>
 8009aaa:	4607      	mov	r7, r0
 8009aac:	1c78      	adds	r0, r7, #1
 8009aae:	d1d6      	bne.n	8009a5e <_vfiprintf_r+0x19a>
 8009ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ab2:	07d9      	lsls	r1, r3, #31
 8009ab4:	d405      	bmi.n	8009ac2 <_vfiprintf_r+0x1fe>
 8009ab6:	89ab      	ldrh	r3, [r5, #12]
 8009ab8:	059a      	lsls	r2, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_vfiprintf_r+0x1fe>
 8009abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009abe:	f7fc fe19 	bl	80066f4 <__retarget_lock_release_recursive>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	065b      	lsls	r3, r3, #25
 8009ac6:	f53f af1f 	bmi.w	8009908 <_vfiprintf_r+0x44>
 8009aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009acc:	e71e      	b.n	800990c <_vfiprintf_r+0x48>
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4b05      	ldr	r3, [pc, #20]	@ (8009aec <_vfiprintf_r+0x228>)
 8009ad6:	a904      	add	r1, sp, #16
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7fc f8db 	bl	8005c94 <_printf_i>
 8009ade:	e7e4      	b.n	8009aaa <_vfiprintf_r+0x1e6>
 8009ae0:	08009f61 	.word	0x08009f61
 8009ae4:	08009f6b 	.word	0x08009f6b
 8009ae8:	08005765 	.word	0x08005765
 8009aec:	080098a1 	.word	0x080098a1
 8009af0:	08009f67 	.word	0x08009f67

08009af4 <__swbuf_r>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	460e      	mov	r6, r1
 8009af8:	4614      	mov	r4, r2
 8009afa:	4605      	mov	r5, r0
 8009afc:	b118      	cbz	r0, 8009b06 <__swbuf_r+0x12>
 8009afe:	6a03      	ldr	r3, [r0, #32]
 8009b00:	b90b      	cbnz	r3, 8009b06 <__swbuf_r+0x12>
 8009b02:	f7fc fc7f 	bl	8006404 <__sinit>
 8009b06:	69a3      	ldr	r3, [r4, #24]
 8009b08:	60a3      	str	r3, [r4, #8]
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	071a      	lsls	r2, r3, #28
 8009b0e:	d501      	bpl.n	8009b14 <__swbuf_r+0x20>
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	b943      	cbnz	r3, 8009b26 <__swbuf_r+0x32>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 f82a 	bl	8009b70 <__swsetup_r>
 8009b1c:	b118      	cbz	r0, 8009b26 <__swbuf_r+0x32>
 8009b1e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009b22:	4638      	mov	r0, r7
 8009b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	1a98      	subs	r0, r3, r2
 8009b2c:	6963      	ldr	r3, [r4, #20]
 8009b2e:	b2f6      	uxtb	r6, r6
 8009b30:	4283      	cmp	r3, r0
 8009b32:	4637      	mov	r7, r6
 8009b34:	dc05      	bgt.n	8009b42 <__swbuf_r+0x4e>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7ff fa53 	bl	8008fe4 <_fflush_r>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d1ed      	bne.n	8009b1e <__swbuf_r+0x2a>
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	6022      	str	r2, [r4, #0]
 8009b4e:	701e      	strb	r6, [r3, #0]
 8009b50:	6962      	ldr	r2, [r4, #20]
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d004      	beq.n	8009b62 <__swbuf_r+0x6e>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	07db      	lsls	r3, r3, #31
 8009b5c:	d5e1      	bpl.n	8009b22 <__swbuf_r+0x2e>
 8009b5e:	2e0a      	cmp	r6, #10
 8009b60:	d1df      	bne.n	8009b22 <__swbuf_r+0x2e>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f7ff fa3d 	bl	8008fe4 <_fflush_r>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d0d9      	beq.n	8009b22 <__swbuf_r+0x2e>
 8009b6e:	e7d6      	b.n	8009b1e <__swbuf_r+0x2a>

08009b70 <__swsetup_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4b29      	ldr	r3, [pc, #164]	@ (8009c18 <__swsetup_r+0xa8>)
 8009b74:	4605      	mov	r5, r0
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	460c      	mov	r4, r1
 8009b7a:	b118      	cbz	r0, 8009b84 <__swsetup_r+0x14>
 8009b7c:	6a03      	ldr	r3, [r0, #32]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <__swsetup_r+0x14>
 8009b80:	f7fc fc40 	bl	8006404 <__sinit>
 8009b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b88:	0719      	lsls	r1, r3, #28
 8009b8a:	d422      	bmi.n	8009bd2 <__swsetup_r+0x62>
 8009b8c:	06da      	lsls	r2, r3, #27
 8009b8e:	d407      	bmi.n	8009ba0 <__swsetup_r+0x30>
 8009b90:	2209      	movs	r2, #9
 8009b92:	602a      	str	r2, [r5, #0]
 8009b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b9e:	e033      	b.n	8009c08 <__swsetup_r+0x98>
 8009ba0:	0758      	lsls	r0, r3, #29
 8009ba2:	d512      	bpl.n	8009bca <__swsetup_r+0x5a>
 8009ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ba6:	b141      	cbz	r1, 8009bba <__swsetup_r+0x4a>
 8009ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bac:	4299      	cmp	r1, r3
 8009bae:	d002      	beq.n	8009bb6 <__swsetup_r+0x46>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7fd fc0d 	bl	80073d0 <_free_r>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6063      	str	r3, [r4, #4]
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	f043 0308 	orr.w	r3, r3, #8
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	b94b      	cbnz	r3, 8009bea <__swsetup_r+0x7a>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be0:	d003      	beq.n	8009bea <__swsetup_r+0x7a>
 8009be2:	4621      	mov	r1, r4
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f883 	bl	8009cf0 <__smakebuf_r>
 8009bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bee:	f013 0201 	ands.w	r2, r3, #1
 8009bf2:	d00a      	beq.n	8009c0a <__swsetup_r+0x9a>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	60a2      	str	r2, [r4, #8]
 8009bf8:	6962      	ldr	r2, [r4, #20]
 8009bfa:	4252      	negs	r2, r2
 8009bfc:	61a2      	str	r2, [r4, #24]
 8009bfe:	6922      	ldr	r2, [r4, #16]
 8009c00:	b942      	cbnz	r2, 8009c14 <__swsetup_r+0xa4>
 8009c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c06:	d1c5      	bne.n	8009b94 <__swsetup_r+0x24>
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	0799      	lsls	r1, r3, #30
 8009c0c:	bf58      	it	pl
 8009c0e:	6962      	ldrpl	r2, [r4, #20]
 8009c10:	60a2      	str	r2, [r4, #8]
 8009c12:	e7f4      	b.n	8009bfe <__swsetup_r+0x8e>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e7f7      	b.n	8009c08 <__swsetup_r+0x98>
 8009c18:	2000001c 	.word	0x2000001c

08009c1c <_raise_r>:
 8009c1c:	291f      	cmp	r1, #31
 8009c1e:	b538      	push	{r3, r4, r5, lr}
 8009c20:	4605      	mov	r5, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	d904      	bls.n	8009c30 <_raise_r+0x14>
 8009c26:	2316      	movs	r3, #22
 8009c28:	6003      	str	r3, [r0, #0]
 8009c2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c32:	b112      	cbz	r2, 8009c3a <_raise_r+0x1e>
 8009c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c38:	b94b      	cbnz	r3, 8009c4e <_raise_r+0x32>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 f830 	bl	8009ca0 <_getpid_r>
 8009c40:	4622      	mov	r2, r4
 8009c42:	4601      	mov	r1, r0
 8009c44:	4628      	mov	r0, r5
 8009c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4a:	f000 b817 	b.w	8009c7c <_kill_r>
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d00a      	beq.n	8009c68 <_raise_r+0x4c>
 8009c52:	1c59      	adds	r1, r3, #1
 8009c54:	d103      	bne.n	8009c5e <_raise_r+0x42>
 8009c56:	2316      	movs	r3, #22
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	e7e7      	b.n	8009c2e <_raise_r+0x12>
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c64:	4620      	mov	r0, r4
 8009c66:	4798      	blx	r3
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e7e0      	b.n	8009c2e <_raise_r+0x12>

08009c6c <raise>:
 8009c6c:	4b02      	ldr	r3, [pc, #8]	@ (8009c78 <raise+0xc>)
 8009c6e:	4601      	mov	r1, r0
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	f7ff bfd3 	b.w	8009c1c <_raise_r>
 8009c76:	bf00      	nop
 8009c78:	2000001c 	.word	0x2000001c

08009c7c <_kill_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d07      	ldr	r5, [pc, #28]	@ (8009c9c <_kill_r+0x20>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	4611      	mov	r1, r2
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f7f7 fd61 	bl	8001750 <_kill>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d102      	bne.n	8009c98 <_kill_r+0x1c>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	b103      	cbz	r3, 8009c98 <_kill_r+0x1c>
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	bd38      	pop	{r3, r4, r5, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20004414 	.word	0x20004414

08009ca0 <_getpid_r>:
 8009ca0:	f7f7 bd4e 	b.w	8001740 <_getpid>

08009ca4 <__swhatbuf_r>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cac:	2900      	cmp	r1, #0
 8009cae:	b096      	sub	sp, #88	@ 0x58
 8009cb0:	4615      	mov	r5, r2
 8009cb2:	461e      	mov	r6, r3
 8009cb4:	da0d      	bge.n	8009cd2 <__swhatbuf_r+0x2e>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cbc:	f04f 0100 	mov.w	r1, #0
 8009cc0:	bf14      	ite	ne
 8009cc2:	2340      	movne	r3, #64	@ 0x40
 8009cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cc8:	2000      	movs	r0, #0
 8009cca:	6031      	str	r1, [r6, #0]
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	b016      	add	sp, #88	@ 0x58
 8009cd0:	bd70      	pop	{r4, r5, r6, pc}
 8009cd2:	466a      	mov	r2, sp
 8009cd4:	f000 f848 	bl	8009d68 <_fstat_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	dbec      	blt.n	8009cb6 <__swhatbuf_r+0x12>
 8009cdc:	9901      	ldr	r1, [sp, #4]
 8009cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ce6:	4259      	negs	r1, r3
 8009ce8:	4159      	adcs	r1, r3
 8009cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cee:	e7eb      	b.n	8009cc8 <__swhatbuf_r+0x24>

08009cf0 <__smakebuf_r>:
 8009cf0:	898b      	ldrh	r3, [r1, #12]
 8009cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cf4:	079d      	lsls	r5, r3, #30
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	d507      	bpl.n	8009d0c <__smakebuf_r+0x1c>
 8009cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	2301      	movs	r3, #1
 8009d06:	6163      	str	r3, [r4, #20]
 8009d08:	b003      	add	sp, #12
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0c:	ab01      	add	r3, sp, #4
 8009d0e:	466a      	mov	r2, sp
 8009d10:	f7ff ffc8 	bl	8009ca4 <__swhatbuf_r>
 8009d14:	9f00      	ldr	r7, [sp, #0]
 8009d16:	4605      	mov	r5, r0
 8009d18:	4639      	mov	r1, r7
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7fd fbcc 	bl	80074b8 <_malloc_r>
 8009d20:	b948      	cbnz	r0, 8009d36 <__smakebuf_r+0x46>
 8009d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d26:	059a      	lsls	r2, r3, #22
 8009d28:	d4ee      	bmi.n	8009d08 <__smakebuf_r+0x18>
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	f043 0302 	orr.w	r3, r3, #2
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	e7e2      	b.n	8009cfc <__smakebuf_r+0xc>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	6020      	str	r0, [r4, #0]
 8009d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d3e:	81a3      	strh	r3, [r4, #12]
 8009d40:	9b01      	ldr	r3, [sp, #4]
 8009d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d46:	b15b      	cbz	r3, 8009d60 <__smakebuf_r+0x70>
 8009d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f000 f81d 	bl	8009d8c <_isatty_r>
 8009d52:	b128      	cbz	r0, 8009d60 <__smakebuf_r+0x70>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f023 0303 	bic.w	r3, r3, #3
 8009d5a:	f043 0301 	orr.w	r3, r3, #1
 8009d5e:	81a3      	strh	r3, [r4, #12]
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	431d      	orrs	r5, r3
 8009d64:	81a5      	strh	r5, [r4, #12]
 8009d66:	e7cf      	b.n	8009d08 <__smakebuf_r+0x18>

08009d68 <_fstat_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	@ (8009d88 <_fstat_r+0x20>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	f7f7 fd4b 	bl	8001810 <_fstat>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d102      	bne.n	8009d84 <_fstat_r+0x1c>
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	b103      	cbz	r3, 8009d84 <_fstat_r+0x1c>
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	bf00      	nop
 8009d88:	20004414 	.word	0x20004414

08009d8c <_isatty_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d06      	ldr	r5, [pc, #24]	@ (8009da8 <_isatty_r+0x1c>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f7 fd4a 	bl	8001830 <_isatty>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_isatty_r+0x1a>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_isatty_r+0x1a>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	20004414 	.word	0x20004414

08009dac <_init>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr

08009db8 <_fini>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr
