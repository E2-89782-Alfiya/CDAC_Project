
PREV_QUE_LAB_EXAM_RTOS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800688c  0800688c  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800688c  0800688c  0000788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006894  08006894  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006898  08006898  00007898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800689c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00004200  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000426c  2000426c  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015245  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e5  00000000  00000000  0001d2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  000203c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e37  00000000  00000000  00021620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c3b  00000000  00000000  00022457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013772  00000000  00000000  00046092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d609a  00000000  00000000  00059804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f89e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005744  00000000  00000000  0012f8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00135028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066fc 	.word	0x080066fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080066fc 	.word	0x080066fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	20000128 	.word	0x20000128

080005e0 <LEDBlinkingTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

	void LEDBlinkingTask(void *pvParam)
	{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
		uint32_t DelayTime  = (uint32_t) pvParam;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
		portTickType LastWaakeUp = xTaskGetTickCount();
 80005ec:	f003 fcf0 	bl	8003fd0 <xTaskGetTickCount>
 80005f0:	4603      	mov	r3, r0
 80005f2:	60bb      	str	r3, [r7, #8]
		while(1)
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fa:	480a      	ldr	r0, [pc, #40]	@ (8000624 <LEDBlinkingTask+0x44>)
 80005fc:	f000 ff24 	bl	8001448 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000604:	f000 fc7e 	bl	8000f04 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <LEDBlinkingTask+0x44>)
 8000610:	f000 ff1a 	bl	8001448 <HAL_GPIO_WritePin>
			vTaskDelayUntil(&LastWaakeUp, DelayTime/portTICK_RATE_MS);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fb0c 	bl	8003c38 <vTaskDelayUntil>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000620:	bf00      	nop
 8000622:	e7e7      	b.n	80005f4 <LEDBlinkingTask+0x14>
 8000624:	40020c00 	.word	0x40020c00

08000628 <EXTINTRHandler>:
		}
		vTaskDelete(NULL);
	}

	void EXTINTRHandler(void *pvParam)
	{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
		uint32_t data[5];
		xSemaphoreTake(xSemaphore, 0);
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <EXTINTRHandler+0x70>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 ff16 	bl	8003468 <xQueueSemaphoreTake>
		while(1)
		{
			xSemaphoreTake(xSemaphore , portMAX_DELAY);
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <EXTINTRHandler+0x70>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000644:	4618      	mov	r0, r3
 8000646:	f002 ff0f 	bl	8003468 <xQueueSemaphoreTake>
			for(int i = 0; i < 5; i ++)
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
 800064e:	e016      	b.n	800067e <EXTINTRHandler+0x56>
			{
				data[i] = rand()%1000;
 8000650:	f004 fe42 	bl	80052d8 <rand>
 8000654:	4603      	mov	r3, r0
 8000656:	4a11      	ldr	r2, [pc, #68]	@ (800069c <EXTINTRHandler+0x74>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	1191      	asrs	r1, r2, #6
 800065e:	17da      	asrs	r2, r3, #31
 8000660:	1a8a      	subs	r2, r1, r2
 8000662:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000666:	fb01 f202 	mul.w	r2, r1, r2
 800066a:	1a9a      	subs	r2, r3, r2
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	3320      	adds	r3, #32
 8000672:	443b      	add	r3, r7
 8000674:	f843 2c18 	str.w	r2, [r3, #-24]
			for(int i = 0; i < 5; i ++)
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	3301      	adds	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	2b04      	cmp	r3, #4
 8000682:	dde5      	ble.n	8000650 <EXTINTRHandler+0x28>
			}
			xQueueSendToBack(xQueue , &data , portMAX_DELAY);
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <EXTINTRHandler+0x78>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 0108 	add.w	r1, r7, #8
 800068c:	2300      	movs	r3, #0
 800068e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000692:	f002 fc75 	bl	8002f80 <xQueueGenericSend>
			xSemaphoreTake(xSemaphore , portMAX_DELAY);
 8000696:	e7d1      	b.n	800063c <EXTINTRHandler+0x14>
 8000698:	20000378 	.word	0x20000378
 800069c:	10624dd3 	.word	0x10624dd3
 80006a0:	20000374 	.word	0x20000374

080006a4 <HAL_GPIO_EXTI_Callback>:
		}
		vTaskDelete(NULL);
	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
	  portBASE_TYPE token = pdFALSE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
	  if (GPIO_Pin == GPIO_PIN_0)
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d112      	bne.n	80006de <HAL_GPIO_EXTI_Callback+0x3a>
	  {
		  xSemaphoreGiveFromISR(xSemaphore , &token);
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f107 020c 	add.w	r2, r7, #12
 80006c0:	4611      	mov	r1, r2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fd5e 	bl	8003184 <xQueueGiveFromISR>
		  portEND_SWITCHING_ISR(token);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <HAL_GPIO_EXTI_Callback+0x3a>
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x48>)
 80006d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	f3bf 8f6f 	isb	sy
	  }
	}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000378 	.word	0x20000378
 80006ec:	e000ed04 	.word	0xe000ed04

080006f0 <UARTSendingTask>:

	void UARTSendingTask(void *pvParam)
	{
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b0a4      	sub	sp, #144	@ 0x90
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	6078      	str	r0, [r7, #4]
	    uint32_t arr[5];
	    char str[100];

	    while(1)
	    {
	        if (xQueueReceive(xQueue, &arr, portMAX_DELAY) == pdTRUE)
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <UARTSendingTask+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fdcd 	bl	80032a4 <xQueueReceive>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d1f3      	bne.n	80006f8 <UARTSendingTask+0x8>
	        {
	            sprintf(str, "Value: %ld %ld %ld %ld %ld\r\n", arr[0], arr[1], arr[2], arr[3], arr[4]);
 8000710:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8000712:	6f3d      	ldr	r5, [r7, #112]	@ 0x70
 8000714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000716:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000718:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800071a:	f107 0008 	add.w	r0, r7, #8
 800071e:	9102      	str	r1, [sp, #8]
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	462b      	mov	r3, r5
 8000726:	4622      	mov	r2, r4
 8000728:	4909      	ldr	r1, [pc, #36]	@ (8000750 <UARTSendingTask+0x60>)
 800072a:	f004 fed5 	bl	80054d8 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd4c 	bl	80001d0 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <UARTSendingTask+0x64>)
 8000746:	f001 fe67 	bl	8002418 <HAL_UART_Transmit>
	        if (xQueueReceive(xQueue, &arr, portMAX_DELAY) == pdTRUE)
 800074a:	e7d5      	b.n	80006f8 <UARTSendingTask+0x8>
 800074c:	20000374 	.word	0x20000374
 8000750:	08006714 	.word	0x08006714
 8000754:	20000328 	.word	0x20000328

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fb8f 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f867 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f8f9 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076a:	f000 f8cd 	bl	8000908 <MX_USART2_UART_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  vSemaphoreCreateBinary( xSemaphore );  //----------------------semaphore ----------------------------//
 800076e:	2203      	movs	r2, #3
 8000770:	2100      	movs	r1, #0
 8000772:	2001      	movs	r0, #1
 8000774:	f002 fbaa 	bl	8002ecc <xQueueGenericCreate>
 8000778:	4603      	mov	r3, r0
 800077a:	4a24      	ldr	r2, [pc, #144]	@ (800080c <main+0xb4>)
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b23      	ldr	r3, [pc, #140]	@ (800080c <main+0xb4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <main+0x3c>
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <main+0xb4>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	f002 fbf6 	bl	8002f80 <xQueueGenericSend>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  xQueue = xQueueCreate(5, sizeof(uint32_t)*5);
 8000794:	2200      	movs	r2, #0
 8000796:	2114      	movs	r1, #20
 8000798:	2005      	movs	r0, #5
 800079a:	f002 fb97 	bl	8002ecc <xQueueGenericCreate>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <main+0xb8>)
 80007a2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <main+0xbc>)
 80007a6:	1d3c      	adds	r4, r7, #4
 80007a8:	461d      	mov	r5, r3
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fa07 	bl	8002bce <osThreadCreate>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <main+0xc0>)
 80007c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(LEDBlinkingTask , "LED_Blinking", configMINIMAL_STACK_SIZE,(void *)750, 3, NULL);
 80007c6:	2300      	movs	r3, #0
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2303      	movs	r3, #3
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	4911      	ldr	r1, [pc, #68]	@ (800081c <main+0xc4>)
 80007d6:	4812      	ldr	r0, [pc, #72]	@ (8000820 <main+0xc8>)
 80007d8:	f003 f8de 	bl	8003998 <xTaskCreate>
  xTaskCreate(EXTINTRHandler, "EXTR_Interrupt", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 80007dc:	2300      	movs	r3, #0
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2305      	movs	r3, #5
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2300      	movs	r3, #0
 80007e6:	2280      	movs	r2, #128	@ 0x80
 80007e8:	490e      	ldr	r1, [pc, #56]	@ (8000824 <main+0xcc>)
 80007ea:	480f      	ldr	r0, [pc, #60]	@ (8000828 <main+0xd0>)
 80007ec:	f003 f8d4 	bl	8003998 <xTaskCreate>
  xTaskCreate(UARTSendingTask, "UART_Sending", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 80007f0:	2300      	movs	r3, #0
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	2304      	movs	r3, #4
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	490b      	ldr	r1, [pc, #44]	@ (800082c <main+0xd4>)
 80007fe:	480c      	ldr	r0, [pc, #48]	@ (8000830 <main+0xd8>)
 8000800:	f003 f8ca 	bl	8003998 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000804:	f002 f9dc 	bl	8002bc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <main+0xb0>
 800080c:	20000378 	.word	0x20000378
 8000810:	20000374 	.word	0x20000374
 8000814:	08006770 	.word	0x08006770
 8000818:	20000370 	.word	0x20000370
 800081c:	08006734 	.word	0x08006734
 8000820:	080005e1 	.word	0x080005e1
 8000824:	08006744 	.word	0x08006744
 8000828:	08000629 	.word	0x08000629
 800082c:	08006754 	.word	0x08006754
 8000830:	080006f1 	.word	0x080006f1

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	@ 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	@ 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fead 	bl	80055a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	4a27      	ldr	r2, [pc, #156]	@ (8000900 <SystemClock_Config+0xcc>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	@ 0x40
 8000868:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b22      	ldr	r3, [pc, #136]	@ (8000904 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a21      	ldr	r2, [pc, #132]	@ (8000904 <SystemClock_Config+0xd0>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2310      	movs	r3, #16
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008a8:	23a8      	movs	r3, #168	@ 0xa8
 80008aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b0:	2307      	movs	r3, #7
 80008b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fdf7 	bl	80014ac <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c4:	f000 f8c0 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2105      	movs	r1, #5
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f858 	bl	800199c <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008f2:	f000 f8a9 	bl	8000a48 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <MX_USART2_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000940:	f001 fd1a 	bl	8002378 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 f87d 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000328 	.word	0x20000328
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_GPIO_Init+0xac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a23      	ldr	r2, [pc, #140]	@ (8000a08 <MX_GPIO_Init+0xac>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_GPIO_Init+0xac>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_GPIO_Init+0xac>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_GPIO_Init+0xac>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_GPIO_Init+0xac>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80009b0:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <MX_GPIO_Init+0xb0>)
 80009b2:	f000 fd49 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_GPIO_Init+0xb4>)
 80009cc:	f000 fba0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009d0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80009d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4808      	ldr	r0, [pc, #32]	@ (8000a0c <MX_GPIO_Init+0xb0>)
 80009ea:	f000 fb91 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2105      	movs	r1, #5
 80009f2:	2006      	movs	r0, #6
 80009f4:	f000 fb62 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f000 fb7b 	bl	80010f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020000 	.word	0x40020000

08000a14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f002 f922 	bl	8002c66 <osDelay>
 8000a22:	e7fb      	b.n	8000a1c <StartDefaultTask+0x8>

08000a24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a36:	f000 fa45 	bl	8000ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40010000 	.word	0x40010000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fb0f 	bl	80010bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_UART_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12b      	bne.n	8000b26 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b06:	2360      	movs	r3, #96	@ 0x60
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <HAL_UART_MspInit+0x8c>)
 8000b22:	f000 faf5 	bl	8001110 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	@ 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <HAL_InitTick+0xd4>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b54:	4a2e      	ldr	r2, [pc, #184]	@ (8000c10 <HAL_InitTick+0xd4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <HAL_InitTick+0xd4>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b68:	f107 020c 	add.w	r2, r7, #12
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 f932 	bl	8001ddc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b78:	f001 f91c 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b84:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <HAL_InitTick+0xd8>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9b      	lsrs	r3, r3, #18
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000b92:	4a22      	ldr	r2, [pc, #136]	@ (8000c1c <HAL_InitTick+0xe0>)
 8000b94:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000b98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bb6:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000bb8:	f001 f942 	bl	8001e40 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d11b      	bne.n	8000c02 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bca:	4813      	ldr	r0, [pc, #76]	@ (8000c18 <HAL_InitTick+0xdc>)
 8000bcc:	f001 f992 	bl	8001ef4 <HAL_TIM_Base_Start_IT>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d111      	bne.n	8000c02 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bde:	2019      	movs	r0, #25
 8000be0:	f000 fa88 	bl	80010f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d808      	bhi.n	8000bfc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	2019      	movs	r0, #25
 8000bf0:	f000 fa64 	bl	80010bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0xe4>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e002      	b.n	8000c02 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3730      	adds	r7, #48	@ 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	2000037c 	.word	0x2000037c
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	20000004 	.word	0x20000004

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 fc0c 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c6e:	f001 f9b1 	bl	8001fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000037c 	.word	0x2000037c

08000c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_kill>:

int _kill(int pid, int sig)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c96:	f004 fd31 	bl	80056fc <__errno>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2216      	movs	r2, #22
 8000c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_exit>:

void _exit (int status)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ffe7 	bl	8000c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cbe:	bf00      	nop
 8000cc0:	e7fd      	b.n	8000cbe <_exit+0x12>

08000cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e00a      	b.n	8000cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd4:	f3af 8000 	nop.w
 8000cd8:	4601      	mov	r1, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	b2ca      	uxtb	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbf0      	blt.n	8000cd4 <_read+0x12>
  }

  return len;
 8000cf2:	687b      	ldr	r3, [r7, #4]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e009      	b.n	8000d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	60ba      	str	r2, [r7, #8]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dbf1      	blt.n	8000d0e <_write+0x12>
  }
  return len;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_close>:

int _close(int file)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_isatty>:

int _isatty(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f004 fc96 	bl	80056fc <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200003c4 	.word	0x200003c4
 8000e04:	20004270 	.word	0x20004270

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 fc55 	bl	8005708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fc7b 	bl	8000758 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e70:	0800689c 	.word	0x0800689c
  ldr r2, =_sbss
 8000e74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e78:	2000426c 	.word	0x2000426c

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f8fc 	bl	80010a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f7ff fe44 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fdce 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	200003c8 	.word	0x200003c8

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200003c8 	.word	0x200003c8

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff4c 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff61 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb1 	bl	8001040 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff80 	bl	8000fec <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff54 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e16b      	b.n	8001404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 815a 	bne.w	80013fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80b4 	beq.w	80013fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b60      	ldr	r3, [pc, #384]	@ (800141c <HAL_GPIO_Init+0x30c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a5f      	ldr	r2, [pc, #380]	@ (800141c <HAL_GPIO_Init+0x30c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b5d      	ldr	r3, [pc, #372]	@ (800141c <HAL_GPIO_Init+0x30c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001420 <HAL_GPIO_Init+0x310>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a51      	ldr	r2, [pc, #324]	@ (8001428 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a50      	ldr	r2, [pc, #320]	@ (800142c <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001430 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x21a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <HAL_GPIO_Init+0x324>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x216>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4d      	ldr	r2, [pc, #308]	@ (8001438 <HAL_GPIO_Init+0x328>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x212>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <HAL_GPIO_Init+0x32c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	@ (8001440 <HAL_GPIO_Init+0x330>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x20a>
 8001316:	2307      	movs	r3, #7
 8001318:	e00e      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131a:	2308      	movs	r3, #8
 800131c:	e00c      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800131e:	2306      	movs	r3, #6
 8001320:	e00a      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x228>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x228>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	@ (8001420 <HAL_GPIO_Init+0x310>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <HAL_GPIO_Init+0x334>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <HAL_GPIO_Init+0x334>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <HAL_GPIO_Init+0x334>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a27      	ldr	r2, [pc, #156]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <HAL_GPIO_Init+0x334>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f ae90 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40021c00 	.word	0x40021c00
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f902 	bl	80006a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e267      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d075      	beq.n	80015b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ca:	4b88      	ldr	r3, [pc, #544]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d00c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b85      	ldr	r3, [pc, #532]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d112      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4b82      	ldr	r3, [pc, #520]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ee:	d10b      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	4b7e      	ldr	r3, [pc, #504]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d05b      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d157      	bne.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e242      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x74>
 8001512:	4b76      	ldr	r3, [pc, #472]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a75      	ldr	r2, [pc, #468]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b70      	ldr	r3, [pc, #448]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6f      	ldr	r2, [pc, #444]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6d      	ldr	r3, [pc, #436]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6c      	ldr	r2, [pc, #432]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001544:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a68      	ldr	r2, [pc, #416]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b66      	ldr	r3, [pc, #408]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a65      	ldr	r2, [pc, #404]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fcc2 	bl	8000eec <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fcbe 	bl	8000eec <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e207      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0xc0>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fcae 	bl	8000eec <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fcaa 	bl	8000eec <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1f3      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d063      	beq.n	800168a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015c2:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d11c      	bne.n	8001614 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b44      	ldr	r3, [pc, #272]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d116      	bne.n	8001614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_RCC_OscConfig+0x152>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e1c7      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4937      	ldr	r1, [pc, #220]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	e03a      	b.n	800168a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0x244>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fc63 	bl	8000eec <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fc5f 	bl	8000eec <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1a8      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4925      	ldr	r1, [pc, #148]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0x244>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fc42 	bl	8000eec <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fc3e 	bl	8000eec <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e187      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d036      	beq.n	8001704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d016      	beq.n	80016cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_RCC_OscConfig+0x248>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fc22 	bl	8000eec <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc1e 	bl	8000eec <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e167      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80016c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x200>
 80016ca:	e01b      	b.n	8001704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_RCC_OscConfig+0x248>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fc0b 	bl	8000eec <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	e00e      	b.n	80016f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fc07 	bl	8000eec <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d907      	bls.n	80016f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e150      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470000 	.word	0x42470000
 80016f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b88      	ldr	r3, [pc, #544]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ea      	bne.n	80016da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8097 	beq.w	8001840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b81      	ldr	r3, [pc, #516]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b7d      	ldr	r3, [pc, #500]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a7c      	ldr	r2, [pc, #496]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b7a      	ldr	r3, [pc, #488]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b77      	ldr	r3, [pc, #476]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d118      	bne.n	8001780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174e:	4b74      	ldr	r3, [pc, #464]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175a:	f7ff fbc7 	bl	8000eec <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001762:	f7ff fbc3 	bl	8000eec <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e10c      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x2ea>
 8001788:	4b64      	ldr	r3, [pc, #400]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a63      	ldr	r2, [pc, #396]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
 8001794:	e01c      	b.n	80017d0 <HAL_RCC_OscConfig+0x324>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x30c>
 800179e:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a5e      	ldr	r2, [pc, #376]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017aa:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ae:	4a5b      	ldr	r2, [pc, #364]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0x324>
 80017b8:	4b58      	ldr	r3, [pc, #352]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a57      	ldr	r2, [pc, #348]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c4:	4b55      	ldr	r3, [pc, #340]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a54      	ldr	r2, [pc, #336]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d015      	beq.n	8001804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb88 	bl	8000eec <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb84 	bl	8000eec <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0cb      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	4b49      	ldr	r3, [pc, #292]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ee      	beq.n	80017e0 <HAL_RCC_OscConfig+0x334>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fb72 	bl	8000eec <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fb6e 	bl	8000eec <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0b5      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ee      	bne.n	800180c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b39      	ldr	r3, [pc, #228]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	4a38      	ldr	r2, [pc, #224]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a1 	beq.w	800198c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184a:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b08      	cmp	r3, #8
 8001854:	d05c      	beq.n	8001910 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d141      	bne.n	80018e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fb42 	bl	8000eec <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fb3e 	bl	8000eec <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e087      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b27      	ldr	r3, [pc, #156]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	3b01      	subs	r3, #1
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	491b      	ldr	r1, [pc, #108]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_RCC_OscConfig+0x478>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb17 	bl	8000eec <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fb13 	bl	8000eec <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e05c      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x416>
 80018e0:	e054      	b.n	800198c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <HAL_RCC_OscConfig+0x478>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fb00 	bl	8000eec <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff fafc 	bl	8000eec <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e045      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
 800190e:	e03d      	b.n	800198c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e038      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000
 8001924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x4ec>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d028      	beq.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d121      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11a      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800195e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	4293      	cmp	r3, r2
 8001962:	d111      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0cc      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d90c      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b65      	ldr	r3, [pc, #404]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a58      	ldr	r2, [pc, #352]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d044      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d119      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e067      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4934      	ldr	r1, [pc, #208]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fa2e 	bl	8000eec <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff fa2a 	bl	8000eec <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e04f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d20c      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fffa 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08006794 	.word	0x08006794
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b6c:	b094      	sub	sp, #80	@ 0x50
 8001b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b80:	4b79      	ldr	r3, [pc, #484]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	f200 80e1 	bhi.w	8001d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9a:	e0db      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b73      	ldr	r3, [pc, #460]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba0:	e0db      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba2:	4b73      	ldr	r3, [pc, #460]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba6:	e0d8      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	099b      	lsrs	r3, r3, #6
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	6139      	str	r1, [r7, #16]
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4651      	mov	r1, sl
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4651      	mov	r1, sl
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c20:	4659      	mov	r1, fp
 8001c22:	eb63 0901 	sbc.w	r9, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb18 0303 	adds.w	r3, r8, r3
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	462b      	mov	r3, r5
 8001c48:	eb49 0303 	adc.w	r3, r9, r3
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	024b      	lsls	r3, r1, #9
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c64:	4621      	mov	r1, r4
 8001c66:	024a      	lsls	r2, r1, #9
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c6e:	2200      	movs	r2, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c78:	f7fe fb02 	bl	8000280 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c84:	e058      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c86:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	4611      	mov	r1, r2
 8001c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0159      	lsls	r1, r3, #5
 8001cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb2:	0150      	lsls	r0, r2, #5
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4641      	mov	r1, r8
 8001cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	00eb      	lsls	r3, r5, #3
 8001cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cee:	00e2      	lsls	r2, r4, #3
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	18e3      	adds	r3, r4, r3
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	464b      	mov	r3, r9
 8001cfc:	eb45 0303 	adc.w	r3, r5, r3
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0e:	4629      	mov	r1, r5
 8001d10:	028b      	lsls	r3, r1, #10
 8001d12:	4621      	mov	r1, r4
 8001d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d18:	4621      	mov	r1, r4
 8001d1a:	028a      	lsls	r2, r1, #10
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d22:	2200      	movs	r2, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	61fa      	str	r2, [r7, #28]
 8001d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2c:	f7fe faa8 	bl	8000280 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4613      	mov	r3, r2
 8001d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3750      	adds	r7, #80	@ 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000000 	.word	0x20000000

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4903      	ldr	r1, [pc, #12]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	080067a4 	.word	0x080067a4

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffdc 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0b5b      	lsrs	r3, r3, #13
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	080067a4 	.word	0x080067a4

08001ddc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	220f      	movs	r2, #15
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <HAL_RCC_GetClockConfig+0x60>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0207 	and.w	r2, r3, #7
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	601a      	str	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e041      	b.n	8001ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f839 	bl	8001ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 f9c0 	bl	8002204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d001      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e04e      	b.n	8001faa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a23      	ldr	r2, [pc, #140]	@ (8001fb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d022      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f36:	d01d      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fbc <HAL_TIM_Base_Start_IT+0xc8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d018      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0x80>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a18      	ldr	r2, [pc, #96]	@ (8001fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d010      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	e007      	b.n	8001fa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40010400 	.word	0x40010400
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	40001800 	.word	0x40001800

08001fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0202 	mvn.w	r2, #2
 8002008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8d2 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8c4 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8d5 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d020      	beq.n	8002084 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0204 	mvn.w	r2, #4
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8ac 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f89e 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8af 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d020      	beq.n	80020d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0208 	mvn.w	r2, #8
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f886 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f878 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f889 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0210 	mvn.w	r2, #16
 80020ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2208      	movs	r2, #8
 80020f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f860 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f852 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f863 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00c      	beq.n	8002140 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0201 	mvn.w	r2, #1
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fc72 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f900 	bl	8002364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f834 	bl	80021f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0220 	mvn.w	r2, #32
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8d2 	bl	8002350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a43      	ldr	r2, [pc, #268]	@ (8002324 <TIM_Base_SetConfig+0x120>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002222:	d00f      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	@ (8002328 <TIM_Base_SetConfig+0x124>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00b      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3f      	ldr	r2, [pc, #252]	@ (800232c <TIM_Base_SetConfig+0x128>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3e      	ldr	r2, [pc, #248]	@ (8002330 <TIM_Base_SetConfig+0x12c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3d      	ldr	r2, [pc, #244]	@ (8002334 <TIM_Base_SetConfig+0x130>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a32      	ldr	r2, [pc, #200]	@ (8002324 <TIM_Base_SetConfig+0x120>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d027      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2f      	ldr	r2, [pc, #188]	@ (8002328 <TIM_Base_SetConfig+0x124>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d023      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2e      	ldr	r2, [pc, #184]	@ (800232c <TIM_Base_SetConfig+0x128>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2d      	ldr	r2, [pc, #180]	@ (8002330 <TIM_Base_SetConfig+0x12c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2c      	ldr	r2, [pc, #176]	@ (8002334 <TIM_Base_SetConfig+0x130>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d017      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a2b      	ldr	r2, [pc, #172]	@ (8002338 <TIM_Base_SetConfig+0x134>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a2a      	ldr	r2, [pc, #168]	@ (800233c <TIM_Base_SetConfig+0x138>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00f      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a29      	ldr	r2, [pc, #164]	@ (8002340 <TIM_Base_SetConfig+0x13c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a28      	ldr	r2, [pc, #160]	@ (8002344 <TIM_Base_SetConfig+0x140>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a27      	ldr	r2, [pc, #156]	@ (8002348 <TIM_Base_SetConfig+0x144>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a26      	ldr	r2, [pc, #152]	@ (800234c <TIM_Base_SetConfig+0x148>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002324 <TIM_Base_SetConfig+0x120>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d003      	beq.n	80022f6 <TIM_Base_SetConfig+0xf2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <TIM_Base_SetConfig+0x130>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d103      	bne.n	80022fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40010000 	.word	0x40010000
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800
 8002330:	40000c00 	.word	0x40000c00
 8002334:	40010400 	.word	0x40010400
 8002338:	40014000 	.word	0x40014000
 800233c:	40014400 	.word	0x40014400
 8002340:	40014800 	.word	0x40014800
 8002344:	40001800 	.word	0x40001800
 8002348:	40001c00 	.word	0x40001c00
 800234c:	40002000 	.word	0x40002000

08002350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e042      	b.n	8002410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fb84 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	@ 0x24
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f973 	bl	80026a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af02      	add	r7, sp, #8
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b20      	cmp	r3, #32
 8002436:	d175      	bne.n	8002524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_UART_Transmit+0x2c>
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e06e      	b.n	8002526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	@ 0x21
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002456:	f7fe fd49 	bl	8000eec <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002470:	d108      	bne.n	8002484 <HAL_UART_Transmit+0x6c>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d104      	bne.n	8002484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	e003      	b.n	800248c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800248c:	e02e      	b.n	80024ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f848 	bl	800252e <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e03a      	b.n	8002526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	3302      	adds	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	e007      	b.n	80024de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	3301      	adds	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1cb      	bne.n	800248e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	@ 0x40
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f814 	bl	800252e <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e006      	b.n	8002526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	4613      	mov	r3, r2
 800253c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253e:	e03b      	b.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002546:	d037      	beq.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002548:	f7fe fcd0 	bl	8000eec <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	429a      	cmp	r2, r3
 8002556:	d302      	bcc.n	800255e <UART_WaitOnFlagUntilTimeout+0x30>
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03a      	b.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b80      	cmp	r3, #128	@ 0x80
 8002574:	d020      	beq.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b40      	cmp	r3, #64	@ 0x40
 800257a:	d01d      	beq.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d116      	bne.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f81d 	bl	80025e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2208      	movs	r2, #8
 80025aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e00f      	b.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4013      	ands	r3, r2
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d0b4      	beq.n	8002540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b095      	sub	sp, #84	@ 0x54
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f2:	e853 3f00 	ldrex	r3, [r3]
 80025f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002608:	643a      	str	r2, [r7, #64]	@ 0x40
 800260a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800260e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002610:	e841 2300 	strex	r3, r2, [r1]
 8002614:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e5      	bne.n	80025e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	e853 3f00 	ldrex	r3, [r3]
 800262a:	61fb      	str	r3, [r7, #28]
   return(result);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3314      	adds	r3, #20
 800263a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800263c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002644:	e841 2300 	strex	r3, r2, [r1]
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e5      	bne.n	800261c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	2b01      	cmp	r3, #1
 8002656:	d119      	bne.n	800268c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	60bb      	str	r3, [r7, #8]
   return(result);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f023 0310 	bic.w	r3, r3, #16
 800266e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002678:	61ba      	str	r2, [r7, #24]
 800267a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	6979      	ldr	r1, [r7, #20]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	613b      	str	r3, [r7, #16]
   return(result);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800269a:	bf00      	nop
 800269c:	3754      	adds	r7, #84	@ 0x54
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ac:	b0c0      	sub	sp, #256	@ 0x100
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c4:	68d9      	ldr	r1, [r3, #12]
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	ea40 0301 	orr.w	r3, r0, r1
 80026d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	431a      	orrs	r2, r3
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002700:	f021 010c 	bic.w	r1, r1, #12
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800270e:	430b      	orrs	r3, r1
 8002710:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	6999      	ldr	r1, [r3, #24]
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	ea40 0301 	orr.w	r3, r0, r1
 800272e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b8f      	ldr	r3, [pc, #572]	@ (8002974 <UART_SetConfig+0x2cc>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d005      	beq.n	8002748 <UART_SetConfig+0xa0>
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b8d      	ldr	r3, [pc, #564]	@ (8002978 <UART_SetConfig+0x2d0>)
 8002744:	429a      	cmp	r2, r3
 8002746:	d104      	bne.n	8002752 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002748:	f7ff fb34 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 800274c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002750:	e003      	b.n	800275a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002752:	f7ff fb1b 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 8002756:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002764:	f040 810c 	bne.w	8002980 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002772:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002776:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800277a:	4622      	mov	r2, r4
 800277c:	462b      	mov	r3, r5
 800277e:	1891      	adds	r1, r2, r2
 8002780:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002782:	415b      	adcs	r3, r3
 8002784:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800278a:	4621      	mov	r1, r4
 800278c:	eb12 0801 	adds.w	r8, r2, r1
 8002790:	4629      	mov	r1, r5
 8002792:	eb43 0901 	adc.w	r9, r3, r1
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027aa:	4690      	mov	r8, r2
 80027ac:	4699      	mov	r9, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	eb18 0303 	adds.w	r3, r8, r3
 80027b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027b8:	462b      	mov	r3, r5
 80027ba:	eb49 0303 	adc.w	r3, r9, r3
 80027be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027d6:	460b      	mov	r3, r1
 80027d8:	18db      	adds	r3, r3, r3
 80027da:	653b      	str	r3, [r7, #80]	@ 0x50
 80027dc:	4613      	mov	r3, r2
 80027de:	eb42 0303 	adc.w	r3, r2, r3
 80027e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027ec:	f7fd fd48 	bl	8000280 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4b61      	ldr	r3, [pc, #388]	@ (800297c <UART_SetConfig+0x2d4>)
 80027f6:	fba3 2302 	umull	r2, r3, r3, r2
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	011c      	lsls	r4, r3, #4
 80027fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002808:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800280c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002810:	4642      	mov	r2, r8
 8002812:	464b      	mov	r3, r9
 8002814:	1891      	adds	r1, r2, r2
 8002816:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002818:	415b      	adcs	r3, r3
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002820:	4641      	mov	r1, r8
 8002822:	eb12 0a01 	adds.w	sl, r2, r1
 8002826:	4649      	mov	r1, r9
 8002828:	eb43 0b01 	adc.w	fp, r3, r1
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002838:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800283c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002840:	4692      	mov	sl, r2
 8002842:	469b      	mov	fp, r3
 8002844:	4643      	mov	r3, r8
 8002846:	eb1a 0303 	adds.w	r3, sl, r3
 800284a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800284e:	464b      	mov	r3, r9
 8002850:	eb4b 0303 	adc.w	r3, fp, r3
 8002854:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002864:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800286c:	460b      	mov	r3, r1
 800286e:	18db      	adds	r3, r3, r3
 8002870:	643b      	str	r3, [r7, #64]	@ 0x40
 8002872:	4613      	mov	r3, r2
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	647b      	str	r3, [r7, #68]	@ 0x44
 800287a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800287e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002882:	f7fd fcfd 	bl	8000280 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4611      	mov	r1, r2
 800288c:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <UART_SetConfig+0x2d4>)
 800288e:	fba3 2301 	umull	r2, r3, r3, r1
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2264      	movs	r2, #100	@ 0x64
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	1acb      	subs	r3, r1, r3
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028a2:	4b36      	ldr	r3, [pc, #216]	@ (800297c <UART_SetConfig+0x2d4>)
 80028a4:	fba3 2302 	umull	r2, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028b0:	441c      	add	r4, r3
 80028b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	1891      	adds	r1, r2, r2
 80028ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028cc:	415b      	adcs	r3, r3
 80028ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028d4:	4641      	mov	r1, r8
 80028d6:	1851      	adds	r1, r2, r1
 80028d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028da:	4649      	mov	r1, r9
 80028dc:	414b      	adcs	r3, r1
 80028de:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028ec:	4659      	mov	r1, fp
 80028ee:	00cb      	lsls	r3, r1, #3
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f6:	4651      	mov	r1, sl
 80028f8:	00ca      	lsls	r2, r1, #3
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	4642      	mov	r2, r8
 8002902:	189b      	adds	r3, r3, r2
 8002904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002908:	464b      	mov	r3, r9
 800290a:	460a      	mov	r2, r1
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002920:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002924:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002928:	460b      	mov	r3, r1
 800292a:	18db      	adds	r3, r3, r3
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800292e:	4613      	mov	r3, r2
 8002930:	eb42 0303 	adc.w	r3, r2, r3
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002936:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800293a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800293e:	f7fd fc9f 	bl	8000280 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <UART_SetConfig+0x2d4>)
 8002948:	fba3 1302 	umull	r1, r3, r3, r2
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	2164      	movs	r1, #100	@ 0x64
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	3332      	adds	r3, #50	@ 0x32
 800295a:	4a08      	ldr	r2, [pc, #32]	@ (800297c <UART_SetConfig+0x2d4>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	f003 0207 	and.w	r2, r3, #7
 8002966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4422      	add	r2, r4
 800296e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002970:	e106      	b.n	8002b80 <UART_SetConfig+0x4d8>
 8002972:	bf00      	nop
 8002974:	40011000 	.word	0x40011000
 8002978:	40011400 	.word	0x40011400
 800297c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800298a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800298e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002992:	4642      	mov	r2, r8
 8002994:	464b      	mov	r3, r9
 8002996:	1891      	adds	r1, r2, r2
 8002998:	6239      	str	r1, [r7, #32]
 800299a:	415b      	adcs	r3, r3
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
 800299e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a2:	4641      	mov	r1, r8
 80029a4:	1854      	adds	r4, r2, r1
 80029a6:	4649      	mov	r1, r9
 80029a8:	eb43 0501 	adc.w	r5, r3, r1
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	00eb      	lsls	r3, r5, #3
 80029b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ba:	00e2      	lsls	r2, r4, #3
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	4643      	mov	r3, r8
 80029c2:	18e3      	adds	r3, r4, r3
 80029c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029c8:	464b      	mov	r3, r9
 80029ca:	eb45 0303 	adc.w	r3, r5, r3
 80029ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029ee:	4629      	mov	r1, r5
 80029f0:	008b      	lsls	r3, r1, #2
 80029f2:	4621      	mov	r1, r4
 80029f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029f8:	4621      	mov	r1, r4
 80029fa:	008a      	lsls	r2, r1, #2
 80029fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a00:	f7fd fc3e 	bl	8000280 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4b60      	ldr	r3, [pc, #384]	@ (8002b8c <UART_SetConfig+0x4e4>)
 8002a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	011c      	lsls	r4, r3, #4
 8002a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	1891      	adds	r1, r2, r2
 8002a2a:	61b9      	str	r1, [r7, #24]
 8002a2c:	415b      	adcs	r3, r3
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a34:	4641      	mov	r1, r8
 8002a36:	1851      	adds	r1, r2, r1
 8002a38:	6139      	str	r1, [r7, #16]
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	414b      	adcs	r3, r1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	00cb      	lsls	r3, r1, #3
 8002a50:	4651      	mov	r1, sl
 8002a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a56:	4651      	mov	r1, sl
 8002a58:	00ca      	lsls	r2, r1, #3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4642      	mov	r2, r8
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a68:	464b      	mov	r3, r9
 8002a6a:	460a      	mov	r2, r1
 8002a6c:	eb42 0303 	adc.w	r3, r2, r3
 8002a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	008b      	lsls	r3, r1, #2
 8002a90:	4641      	mov	r1, r8
 8002a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a96:	4641      	mov	r1, r8
 8002a98:	008a      	lsls	r2, r1, #2
 8002a9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a9e:	f7fd fbef 	bl	8000280 <__aeabi_uldivmod>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4b38      	ldr	r3, [pc, #224]	@ (8002b8c <UART_SetConfig+0x4e4>)
 8002aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2264      	movs	r2, #100	@ 0x64
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	1acb      	subs	r3, r1, r3
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	3332      	adds	r3, #50	@ 0x32
 8002abc:	4a33      	ldr	r2, [pc, #204]	@ (8002b8c <UART_SetConfig+0x4e4>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ac8:	441c      	add	r4, r3
 8002aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ad2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ad4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	1891      	adds	r1, r2, r2
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	415b      	adcs	r3, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ae8:	4641      	mov	r1, r8
 8002aea:	1851      	adds	r1, r2, r1
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	4649      	mov	r1, r9
 8002af0:	414b      	adcs	r3, r1
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b00:	4659      	mov	r1, fp
 8002b02:	00cb      	lsls	r3, r1, #3
 8002b04:	4651      	mov	r1, sl
 8002b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	00ca      	lsls	r2, r1, #3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	4642      	mov	r2, r8
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	eb42 0303 	adc.w	r3, r2, r3
 8002b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	008b      	lsls	r3, r1, #2
 8002b40:	4641      	mov	r1, r8
 8002b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b46:	4641      	mov	r1, r8
 8002b48:	008a      	lsls	r2, r1, #2
 8002b4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b4e:	f7fd fb97 	bl	8000280 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <UART_SetConfig+0x4e4>)
 8002b58:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	2164      	movs	r1, #100	@ 0x64
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	3332      	adds	r3, #50	@ 0x32
 8002b6a:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <UART_SetConfig+0x4e4>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4422      	add	r2, r4
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b86:	46bd      	mov	sp, r7
 8002b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8c:	51eb851f 	.word	0x51eb851f

08002b90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba2:	2b84      	cmp	r3, #132	@ 0x84
 8002ba4:	d005      	beq.n	8002bb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ba6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	3303      	adds	r3, #3
 8002bb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bc4:	f001 f8ee 	bl	8003da4 <vTaskStartScheduler>
  
  return osOK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd0:	b089      	sub	sp, #36	@ 0x24
 8002bd2:	af04      	add	r7, sp, #16
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <osThreadCreate+0x54>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01c      	beq.n	8002c22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685c      	ldr	r4, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691e      	ldr	r6, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ffc8 	bl	8002b90 <makeFreeRtosPriority>
 8002c00:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c0a:	9202      	str	r2, [sp, #8]
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	9100      	str	r1, [sp, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4632      	mov	r2, r6
 8002c14:	4629      	mov	r1, r5
 8002c16:	4620      	mov	r0, r4
 8002c18:	f000 fe5e 	bl	80038d8 <xTaskCreateStatic>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e01c      	b.n	8002c5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685c      	ldr	r4, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c2e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff ffaa 	bl	8002b90 <makeFreeRtosPriority>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	9200      	str	r2, [sp, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4632      	mov	r2, r6
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f000 fea3 	bl	8003998 <xTaskCreate>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d001      	beq.n	8002c5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <osDelay+0x16>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	e000      	b.n	8002c7e <osDelay+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f85a 	bl	8003d38 <vTaskDelay>
  
  return osOK;
 8002c84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 0208 	add.w	r2, r3, #8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ca6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0208 	add.w	r2, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f103 0208 	add.w	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d46:	d103      	bne.n	8002d50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e00c      	b.n	8002d6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3308      	adds	r3, #8
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e002      	b.n	8002d5e <vListInsert+0x2e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d2f6      	bcs.n	8002d58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6852      	ldr	r2, [r2, #4]
 8002dc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d103      	bne.n	8002dd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e24:	f001 ff48 	bl	8004cb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	441a      	add	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	3b01      	subs	r3, #1
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	441a      	add	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	22ff      	movs	r2, #255	@ 0xff
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	22ff      	movs	r2, #255	@ 0xff
 8002e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d114      	bne.n	8002ea4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01a      	beq.n	8002eb8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3310      	adds	r3, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 f9f6 	bl	8004278 <xTaskRemoveFromEventList>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d012      	beq.n	8002eb8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <xQueueGenericReset+0xd0>)
 8002e94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	e009      	b.n	8002eb8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fef0 	bl	8002c8e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3324      	adds	r3, #36	@ 0x24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff feeb 	bl	8002c8e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002eb8:	f001 ff30 	bl	8004d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	613b      	str	r3, [r7, #16]
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3348      	adds	r3, #72	@ 0x48
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 fff8 	bl	8004efc <pvPortMalloc>
 8002f0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3348      	adds	r3, #72	@ 0x48
 8002f1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f805 	bl	8002f42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f38:	69bb      	ldr	r3, [r7, #24]
	}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e002      	b.n	8002f64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f70:	2101      	movs	r1, #1
 8002f72:	69b8      	ldr	r0, [r7, #24]
 8002f74:	f7ff ff40 	bl	8002df8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	@ 0x38
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <xQueueGenericSend+0x34>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <xQueueGenericSend+0x42>
 8002fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <xQueueGenericSend+0x46>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xQueueGenericSend+0x48>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <xQueueGenericSend+0x64>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d103      	bne.n	8002ff2 <xQueueGenericSend+0x72>
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <xQueueGenericSend+0x76>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <xQueueGenericSend+0x78>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <xQueueGenericSend+0x94>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	623b      	str	r3, [r7, #32]
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003014:	f001 faf6 	bl	8004604 <xTaskGetSchedulerState>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <xQueueGenericSend+0xa4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <xQueueGenericSend+0xa8>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <xQueueGenericSend+0xaa>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <xQueueGenericSend+0xc6>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	61fb      	str	r3, [r7, #28]
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	e7fd      	b.n	8003042 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003046:	f001 fe37 	bl	8004cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <xQueueGenericSend+0xdc>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d129      	bne.n	80030b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003062:	f000 fb29 	bl	80036b8 <prvCopyDataToQueue>
 8003066:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d010      	beq.n	8003092 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	3324      	adds	r3, #36	@ 0x24
 8003074:	4618      	mov	r0, r3
 8003076:	f001 f8ff 	bl	8004278 <xTaskRemoveFromEventList>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003080:	4b3f      	ldr	r3, [pc, #252]	@ (8003180 <xQueueGenericSend+0x200>)
 8003082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	e00a      	b.n	80030a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003098:	4b39      	ldr	r3, [pc, #228]	@ (8003180 <xQueueGenericSend+0x200>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030a8:	f001 fe38 	bl	8004d1c <vPortExitCritical>
				return pdPASS;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e063      	b.n	8003178 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030b6:	f001 fe31 	bl	8004d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e05c      	b.n	8003178 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 f939 	bl	8004340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d2:	f001 fe23 	bl	8004d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030d6:	f000 fecf 	bl	8003e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030da:	f001 fded 	bl	8004cb8 <vPortEnterCritical>
 80030de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ea:	d103      	bne.n	80030f4 <xQueueGenericSend+0x174>
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003100:	d103      	bne.n	800310a <xQueueGenericSend+0x18a>
 8003102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800310a:	f001 fe07 	bl	8004d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800310e:	1d3a      	adds	r2, r7, #4
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f928 	bl	800436c <xTaskCheckForTimeOut>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d124      	bne.n	800316c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003122:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003124:	f000 fbc0 	bl	80038a8 <prvIsQueueFull>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800312e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003130:	3310      	adds	r3, #16
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f001 f878 	bl	800422c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800313c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800313e:	f000 fb4b 	bl	80037d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003142:	f000 fea7 	bl	8003e94 <xTaskResumeAll>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f af7c 	bne.w	8003046 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800314e:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <xQueueGenericSend+0x200>)
 8003150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	e772      	b.n	8003046 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003162:	f000 fb39 	bl	80037d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003166:	f000 fe95 	bl	8003e94 <xTaskResumeAll>
 800316a:	e76c      	b.n	8003046 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800316c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800316e:	f000 fb33 	bl	80037d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003172:	f000 fe8f 	bl	8003e94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003176:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003178:	4618      	mov	r0, r3
 800317a:	3738      	adds	r7, #56	@ 0x38
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	e000ed04 	.word	0xe000ed04

08003184 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	@ 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	623b      	str	r3, [r7, #32]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61fb      	str	r3, [r7, #28]
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80031d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <xQueueGiveFromISR+0x5c>
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <xQueueGiveFromISR+0x60>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <xQueueGiveFromISR+0x62>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	61bb      	str	r3, [r7, #24]
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	e7fd      	b.n	80031fe <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003202:	f001 fe39 	bl	8004e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003206:	f3ef 8211 	mrs	r2, BASEPRI
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	617a      	str	r2, [r7, #20]
 800321c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800321e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800322e:	429a      	cmp	r2, r3
 8003230:	d22b      	bcs.n	800328a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003244:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800324c:	d112      	bne.n	8003274 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	3324      	adds	r3, #36	@ 0x24
 800325a:	4618      	mov	r0, r3
 800325c:	f001 f80c 	bl	8004278 <xTaskRemoveFromEventList>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e007      	b.n	8003284 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003278:	3301      	adds	r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	b25a      	sxtb	r2, r3
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003284:	2301      	movs	r3, #1
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
 8003288:	e001      	b.n	800328e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800328a:	2300      	movs	r3, #0
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
 800328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003290:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003298:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800329c:	4618      	mov	r0, r3
 800329e:	3738      	adds	r7, #56	@ 0x38
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	@ 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <xQueueReceive+0x32>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	623b      	str	r3, [r7, #32]
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	e7fd      	b.n	80032d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <xQueueReceive+0x40>
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <xQueueReceive+0x44>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <xQueueReceive+0x46>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <xQueueReceive+0x62>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	61fb      	str	r3, [r7, #28]
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003306:	f001 f97d 	bl	8004604 <xTaskGetSchedulerState>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <xQueueReceive+0x72>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <xQueueReceive+0x76>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <xQueueReceive+0x78>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <xQueueReceive+0x94>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61bb      	str	r3, [r7, #24]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003338:	f001 fcbe 	bl	8004cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01f      	beq.n	8003388 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800334c:	f000 fa1e 	bl	800378c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	3310      	adds	r3, #16
 8003364:	4618      	mov	r0, r3
 8003366:	f000 ff87 	bl	8004278 <xTaskRemoveFromEventList>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003370:	4b3c      	ldr	r3, [pc, #240]	@ (8003464 <xQueueReceive+0x1c0>)
 8003372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003380:	f001 fccc 	bl	8004d1c <vPortExitCritical>
				return pdPASS;
 8003384:	2301      	movs	r3, #1
 8003386:	e069      	b.n	800345c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800338e:	f001 fcc5 	bl	8004d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003392:	2300      	movs	r3, #0
 8003394:	e062      	b.n	800345c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 ffcd 	bl	8004340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033aa:	f001 fcb7 	bl	8004d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033ae:	f000 fd63 	bl	8003e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033b2:	f001 fc81 	bl	8004cb8 <vPortEnterCritical>
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033bc:	b25b      	sxtb	r3, r3
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c2:	d103      	bne.n	80033cc <xQueueReceive+0x128>
 80033c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033d8:	d103      	bne.n	80033e2 <xQueueReceive+0x13e>
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033e2:	f001 fc9b 	bl	8004d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033e6:	1d3a      	adds	r2, r7, #4
 80033e8:	f107 0310 	add.w	r3, r7, #16
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 ffbc 	bl	800436c <xTaskCheckForTimeOut>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d123      	bne.n	8003442 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033fc:	f000 fa3e 	bl	800387c <prvIsQueueEmpty>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003408:	3324      	adds	r3, #36	@ 0x24
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ff0c 	bl	800422c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003416:	f000 f9df 	bl	80037d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800341a:	f000 fd3b 	bl	8003e94 <xTaskResumeAll>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d189      	bne.n	8003338 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003424:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <xQueueReceive+0x1c0>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	e780      	b.n	8003338 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003438:	f000 f9ce 	bl	80037d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800343c:	f000 fd2a 	bl	8003e94 <xTaskResumeAll>
 8003440:	e77a      	b.n	8003338 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003444:	f000 f9c8 	bl	80037d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003448:	f000 fd24 	bl	8003e94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800344e:	f000 fa15 	bl	800387c <prvIsQueueEmpty>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f43f af6f 	beq.w	8003338 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800345a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800345c:	4618      	mov	r0, r3
 800345e:	3730      	adds	r7, #48	@ 0x30
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08e      	sub	sp, #56	@ 0x38
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	623b      	str	r3, [r7, #32]
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00b      	beq.n	80034bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61fb      	str	r3, [r7, #28]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034bc:	f001 f8a2 	bl	8004604 <xTaskGetSchedulerState>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <xQueueSemaphoreTake+0x64>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <xQueueSemaphoreTake+0x68>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <xQueueSemaphoreTake+0x6a>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	61bb      	str	r3, [r7, #24]
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	e7fd      	b.n	80034ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034ee:	f001 fbe3 	bl	8004cb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d024      	beq.n	8003548 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	1e5a      	subs	r2, r3, #1
 8003502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800350e:	f001 fa25 	bl	800495c <pvTaskIncrementMutexHeldCount>
 8003512:	4602      	mov	r2, r0
 8003514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003516:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00f      	beq.n	8003540 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003522:	3310      	adds	r3, #16
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fea7 	bl	8004278 <xTaskRemoveFromEventList>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003530:	4b54      	ldr	r3, [pc, #336]	@ (8003684 <xQueueSemaphoreTake+0x21c>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003540:	f001 fbec 	bl	8004d1c <vPortExitCritical>
				return pdPASS;
 8003544:	2301      	movs	r3, #1
 8003546:	e098      	b.n	800367a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d112      	bne.n	8003574 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	617b      	str	r3, [r7, #20]
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800356c:	f001 fbd6 	bl	8004d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003570:	2300      	movs	r3, #0
 8003572:	e082      	b.n	800367a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fede 	bl	8004340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003584:	2301      	movs	r3, #1
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003588:	f001 fbc8 	bl	8004d1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800358c:	f000 fc74 	bl	8003e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003590:	f001 fb92 	bl	8004cb8 <vPortEnterCritical>
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a0:	d103      	bne.n	80035aa <xQueueSemaphoreTake+0x142>
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035b6:	d103      	bne.n	80035c0 <xQueueSemaphoreTake+0x158>
 80035b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035c0:	f001 fbac 	bl	8004d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c4:	463a      	mov	r2, r7
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fecd 	bl	800436c <xTaskCheckForTimeOut>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d132      	bne.n	800363e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035da:	f000 f94f 	bl	800387c <prvIsQueueEmpty>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d026      	beq.n	8003632 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80035ec:	f001 fb64 	bl	8004cb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f823 	bl	8004640 <xTaskPriorityInherit>
 80035fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80035fc:	f001 fb8e 	bl	8004d1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	3324      	adds	r3, #36	@ 0x24
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fe0f 	bl	800422c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800360e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003610:	f000 f8e2 	bl	80037d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003614:	f000 fc3e 	bl	8003e94 <xTaskResumeAll>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f af67 	bne.w	80034ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003620:	4b18      	ldr	r3, [pc, #96]	@ (8003684 <xQueueSemaphoreTake+0x21c>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	e75d      	b.n	80034ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003632:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003634:	f000 f8d0 	bl	80037d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003638:	f000 fc2c 	bl	8003e94 <xTaskResumeAll>
 800363c:	e757      	b.n	80034ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800363e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003640:	f000 f8ca 	bl	80037d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003644:	f000 fc26 	bl	8003e94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003648:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800364a:	f000 f917 	bl	800387c <prvIsQueueEmpty>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f43f af4c 	beq.w	80034ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800365c:	f001 fb2c 	bl	8004cb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003660:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003662:	f000 f811 	bl	8003688 <prvGetDisinheritPriorityAfterTimeout>
 8003666:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f8e4 	bl	800483c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003674:	f001 fb52 	bl	8004d1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800367a:	4618      	mov	r0, r3
 800367c:	3738      	adds	r7, #56	@ 0x38
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e001      	b.n	80036aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036aa:	68fb      	ldr	r3, [r7, #12]
	}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d14d      	bne.n	800377a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f822 	bl	800472c <xTaskPriorityDisinherit>
 80036e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	e043      	b.n	800377a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d119      	bne.n	800372c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6858      	ldr	r0, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	461a      	mov	r2, r3
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	f002 f827 	bl	8005756 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	d32b      	bcc.n	800377a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	e026      	b.n	800377a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68d8      	ldr	r0, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	461a      	mov	r2, r3
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	f002 f80d 	bl	8005756 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	425b      	negs	r3, r3
 8003746:	441a      	add	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d207      	bcs.n	8003768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	425b      	negs	r3, r3
 8003762:	441a      	add	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d105      	bne.n	800377a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3b01      	subs	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003782:	697b      	ldr	r3, [r7, #20]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d303      	bcc.n	80037c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68d9      	ldr	r1, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	461a      	mov	r2, r3
 80037ca:	6838      	ldr	r0, [r7, #0]
 80037cc:	f001 ffc3 	bl	8005756 <memcpy>
	}
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037e0:	f001 fa6a 	bl	8004cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ec:	e011      	b.n	8003812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d012      	beq.n	800381c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	@ 0x24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd3c 	bl	8004278 <xTaskRemoveFromEventList>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003806:	f000 fe15 	bl	8004434 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	3b01      	subs	r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	dce9      	bgt.n	80037ee <prvUnlockQueue+0x16>
 800381a:	e000      	b.n	800381e <prvUnlockQueue+0x46>
					break;
 800381c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	22ff      	movs	r2, #255	@ 0xff
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003826:	f001 fa79 	bl	8004d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800382a:	f001 fa45 	bl	8004cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003836:	e011      	b.n	800385c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3310      	adds	r3, #16
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fd17 	bl	8004278 <xTaskRemoveFromEventList>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003850:	f000 fdf0 	bl	8004434 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003854:	7bbb      	ldrb	r3, [r7, #14]
 8003856:	3b01      	subs	r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800385c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003860:	2b00      	cmp	r3, #0
 8003862:	dce9      	bgt.n	8003838 <prvUnlockQueue+0x60>
 8003864:	e000      	b.n	8003868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	22ff      	movs	r2, #255	@ 0xff
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003870:	f001 fa54 	bl	8004d1c <vPortExitCritical>
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003884:	f001 fa18 	bl	8004cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800389a:	f001 fa3f 	bl	8004d1c <vPortExitCritical>

	return xReturn;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b0:	f001 fa02 	bl	8004cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	429a      	cmp	r2, r3
 80038be:	d102      	bne.n	80038c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e001      	b.n	80038ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ca:	f001 fa27 	bl	8004d1c <vPortExitCritical>

	return xReturn;
 80038ce:	68fb      	ldr	r3, [r7, #12]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	@ 0x38
 80038dc:	af04      	add	r7, sp, #16
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xTaskCreateStatic+0x2c>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	623b      	str	r3, [r7, #32]
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <xTaskCreateStatic+0x4a>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	61fb      	str	r3, [r7, #28]
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003922:	23a0      	movs	r3, #160	@ 0xa0
 8003924:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2ba0      	cmp	r3, #160	@ 0xa0
 800392a:	d00b      	beq.n	8003944 <xTaskCreateStatic+0x6c>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	61bb      	str	r3, [r7, #24]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003944:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01e      	beq.n	800398a <xTaskCreateStatic+0xb2>
 800394c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01b      	beq.n	800398a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	2202      	movs	r2, #2
 8003960:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003964:	2300      	movs	r3, #0
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	9302      	str	r3, [sp, #8]
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f851 	bl	8003a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003982:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003984:	f000 f8ee 	bl	8003b64 <prvAddNewTaskToReadyList>
 8003988:	e001      	b.n	800398e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800398e:	697b      	ldr	r3, [r7, #20]
	}
 8003990:	4618      	mov	r0, r3
 8003992:	3728      	adds	r7, #40	@ 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	@ 0x30
 800399c:	af04      	add	r7, sp, #16
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 faa5 	bl	8004efc <pvPortMalloc>
 80039b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039ba:	20a0      	movs	r0, #160	@ 0xa0
 80039bc:	f001 fa9e 	bl	8004efc <pvPortMalloc>
 80039c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80039ce:	e005      	b.n	80039dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039d0:	6978      	ldr	r0, [r7, #20]
 80039d2:	f001 fb61 	bl	8005098 <vPortFree>
 80039d6:	e001      	b.n	80039dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f80f 	bl	8003a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a06:	69f8      	ldr	r0, [r7, #28]
 8003a08:	f000 f8ac 	bl	8003b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e002      	b.n	8003a18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a18:	69bb      	ldr	r3, [r7, #24]
	}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f023 0307 	bic.w	r3, r3, #7
 8003a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	617b      	str	r3, [r7, #20]
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	e7fd      	b.n	8003a6a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01f      	beq.n	8003ab4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	e012      	b.n	8003aa0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	7819      	ldrb	r1, [r3, #0]
 8003a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	3334      	adds	r3, #52	@ 0x34
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b0f      	cmp	r3, #15
 8003aa4:	d9e9      	bls.n	8003a7a <prvInitialiseNewTask+0x56>
 8003aa6:	e000      	b.n	8003aaa <prvInitialiseNewTask+0x86>
			{
				break;
 8003aa8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ab2:	e003      	b.n	8003abc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d901      	bls.n	8003ac6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ac2:	2306      	movs	r3, #6
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f8f6 	bl	8002cce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f8f1 	bl	8002cce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	f1c3 0207 	rsb	r2, r3, #7
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	334c      	adds	r3, #76	@ 0x4c
 8003b16:	224c      	movs	r2, #76	@ 0x4c
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fd41 	bl	80055a2 <memset>
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <prvInitialiseNewTask+0x134>)
 8003b24:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	4a0c      	ldr	r2, [pc, #48]	@ (8003b5c <prvInitialiseNewTask+0x138>)
 8003b2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003b60 <prvInitialiseNewTask+0x13c>)
 8003b30:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	69b8      	ldr	r0, [r7, #24]
 8003b38:	f000 ff8a 	bl	8004a50 <pxPortInitialiseStack>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20004120 	.word	0x20004120
 8003b5c:	20004188 	.word	0x20004188
 8003b60:	200041f0 	.word	0x200041f0

08003b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b6c:	f001 f8a4 	bl	8004cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b70:	4b2a      	ldr	r3, [pc, #168]	@ (8003c1c <prvAddNewTaskToReadyList+0xb8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a29      	ldr	r2, [pc, #164]	@ (8003c1c <prvAddNewTaskToReadyList+0xb8>)
 8003b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b7a:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <prvAddNewTaskToReadyList+0xbc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b82:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <prvAddNewTaskToReadyList+0xbc>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b88:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <prvAddNewTaskToReadyList+0xb8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d110      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b90:	f000 fc74 	bl	800447c <prvInitialiseTaskLists>
 8003b94:	e00d      	b.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b96:	4b23      	ldr	r3, [pc, #140]	@ (8003c24 <prvAddNewTaskToReadyList+0xc0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b9e:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <prvAddNewTaskToReadyList+0xbc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d802      	bhi.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bac:	4a1c      	ldr	r2, [pc, #112]	@ (8003c20 <prvAddNewTaskToReadyList+0xbc>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003bba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	4a18      	ldr	r2, [pc, #96]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a15      	ldr	r2, [pc, #84]	@ (8003c30 <prvAddNewTaskToReadyList+0xcc>)
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f7ff f87f 	bl	8002ce8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bea:	f001 f897 	bl	8004d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <prvAddNewTaskToReadyList+0xc0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00e      	beq.n	8003c14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <prvAddNewTaskToReadyList+0xbc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d207      	bcs.n	8003c14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <prvAddNewTaskToReadyList+0xd0>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200004cc 	.word	0x200004cc
 8003c20:	200003cc 	.word	0x200003cc
 8003c24:	200004d8 	.word	0x200004d8
 8003c28:	200004e8 	.word	0x200004e8
 8003c2c:	200004d4 	.word	0x200004d4
 8003c30:	200003d0 	.word	0x200003d0
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <vTaskDelayUntil+0x2c>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	617b      	str	r3, [r7, #20]
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <vTaskDelayUntil+0x4a>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	613b      	str	r3, [r7, #16]
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8003c82:	4b2a      	ldr	r3, [pc, #168]	@ (8003d2c <vTaskDelayUntil+0xf4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <vTaskDelayUntil+0x6a>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	60fb      	str	r3, [r7, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8003ca2:	f000 f8e9 	bl	8003e78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003ca6:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <vTaskDelayUntil+0xf8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d20b      	bcs.n	8003cd8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d211      	bcs.n	8003cee <vTaskDelayUntil+0xb6>
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d90d      	bls.n	8003cee <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd6:	e00a      	b.n	8003cee <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d303      	bcc.n	8003cea <vTaskDelayUntil+0xb2>
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d901      	bls.n	8003cee <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fe3e 	bl	8004984 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003d08:	f000 f8c4 	bl	8003e94 <xTaskResumeAll>
 8003d0c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8003d14:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <vTaskDelayUntil+0xfc>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d24:	bf00      	nop
 8003d26:	3728      	adds	r7, #40	@ 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200004f4 	.word	0x200004f4
 8003d30:	200004d0 	.word	0x200004d0
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <vTaskDelay+0x64>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <vTaskDelay+0x32>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60bb      	str	r3, [r7, #8]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d6a:	f000 f885 	bl	8003e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fe07 	bl	8004984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d76:	f000 f88d 	bl	8003e94 <xTaskResumeAll>
 8003d7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <vTaskDelay+0x68>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200004f4 	.word	0x200004f4
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	@ 0x28
 8003da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003db2:	463a      	mov	r2, r7
 8003db4:	1d39      	adds	r1, r7, #4
 8003db6:	f107 0308 	add.w	r3, r7, #8
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fbf6 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	9202      	str	r2, [sp, #8]
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	4921      	ldr	r1, [pc, #132]	@ (8003e58 <vTaskStartScheduler+0xb4>)
 8003dd4:	4821      	ldr	r0, [pc, #132]	@ (8003e5c <vTaskStartScheduler+0xb8>)
 8003dd6:	f7ff fd7f 	bl	80038d8 <xTaskCreateStatic>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4a20      	ldr	r2, [pc, #128]	@ (8003e60 <vTaskStartScheduler+0xbc>)
 8003dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003de0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <vTaskStartScheduler+0xbc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e001      	b.n	8003df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d11b      	bne.n	8003e30 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	613b      	str	r3, [r7, #16]
}
 8003e0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e0c:	4b15      	ldr	r3, [pc, #84]	@ (8003e64 <vTaskStartScheduler+0xc0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	334c      	adds	r3, #76	@ 0x4c
 8003e12:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <vTaskStartScheduler+0xc4>)
 8003e14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e16:	4b15      	ldr	r3, [pc, #84]	@ (8003e6c <vTaskStartScheduler+0xc8>)
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e1e:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <vTaskStartScheduler+0xcc>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <vTaskStartScheduler+0xd0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e2a:	f000 fea1 	bl	8004b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e2e:	e00f      	b.n	8003e50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e36:	d10b      	bne.n	8003e50 <vTaskStartScheduler+0xac>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60fb      	str	r3, [r7, #12]
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <vTaskStartScheduler+0xa8>
}
 8003e50:	bf00      	nop
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	0800678c 	.word	0x0800678c
 8003e5c:	0800444d 	.word	0x0800444d
 8003e60:	200004f0 	.word	0x200004f0
 8003e64:	200003cc 	.word	0x200003cc
 8003e68:	2000001c 	.word	0x2000001c
 8003e6c:	200004ec 	.word	0x200004ec
 8003e70:	200004d8 	.word	0x200004d8
 8003e74:	200004d0 	.word	0x200004d0

08003e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <vTaskSuspendAll+0x18>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a03      	ldr	r2, [pc, #12]	@ (8003e90 <vTaskSuspendAll+0x18>)
 8003e84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	200004f4 	.word	0x200004f4

08003e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ea2:	4b42      	ldr	r3, [pc, #264]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	603b      	str	r3, [r7, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ec2:	f000 fef9 	bl	8004cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ec6:	4b39      	ldr	r3, [pc, #228]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	4a37      	ldr	r2, [pc, #220]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ece:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <xTaskResumeAll+0x118>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d161      	bne.n	8003f9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <xTaskResumeAll+0x11c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05d      	beq.n	8003f9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee0:	e02e      	b.n	8003f40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee2:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <xTaskResumeAll+0x120>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3318      	adds	r3, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe ff57 	bl	8002da2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe ff52 	bl	8002da2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <xTaskResumeAll+0x124>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb8 <xTaskResumeAll+0x124>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <xTaskResumeAll+0x128>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7fe fede 	bl	8002ce8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	4b23      	ldr	r3, [pc, #140]	@ (8003fc0 <xTaskResumeAll+0x12c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	@ (8003fc4 <xTaskResumeAll+0x130>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f40:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <xTaskResumeAll+0x120>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1cc      	bne.n	8003ee2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f4e:	f000 fb39 	bl	80045c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <xTaskResumeAll+0x134>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f5e:	f000 f847 	bl	8003ff0 <xTaskIncrementTick>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f68:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <xTaskResumeAll+0x130>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f1      	bne.n	8003f5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <xTaskResumeAll+0x134>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <xTaskResumeAll+0x130>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <xTaskResumeAll+0x138>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f9c:	f000 febe 	bl	8004d1c <vPortExitCritical>

	return xAlreadyYielded;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200004f4 	.word	0x200004f4
 8003fb0:	200004cc 	.word	0x200004cc
 8003fb4:	2000048c 	.word	0x2000048c
 8003fb8:	200004d4 	.word	0x200004d4
 8003fbc:	200003d0 	.word	0x200003d0
 8003fc0:	200003cc 	.word	0x200003cc
 8003fc4:	200004e0 	.word	0x200004e0
 8003fc8:	200004dc 	.word	0x200004dc
 8003fcc:	e000ed04 	.word	0xe000ed04

08003fd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <xTaskGetTickCount+0x1c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fdc:	687b      	ldr	r3, [r7, #4]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	200004d0 	.word	0x200004d0

08003ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8004138 <xTaskIncrementTick+0x148>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 808f 	bne.w	8004122 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004004:	4b4d      	ldr	r3, [pc, #308]	@ (800413c <xTaskIncrementTick+0x14c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800400c:	4a4b      	ldr	r2, [pc, #300]	@ (800413c <xTaskIncrementTick+0x14c>)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d121      	bne.n	800405c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004018:	4b49      	ldr	r3, [pc, #292]	@ (8004140 <xTaskIncrementTick+0x150>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	603b      	str	r3, [r7, #0]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <xTaskIncrementTick+0x46>
 800403a:	4b41      	ldr	r3, [pc, #260]	@ (8004140 <xTaskIncrementTick+0x150>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	4b40      	ldr	r3, [pc, #256]	@ (8004144 <xTaskIncrementTick+0x154>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3e      	ldr	r2, [pc, #248]	@ (8004140 <xTaskIncrementTick+0x150>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4a3e      	ldr	r2, [pc, #248]	@ (8004144 <xTaskIncrementTick+0x154>)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b3e      	ldr	r3, [pc, #248]	@ (8004148 <xTaskIncrementTick+0x158>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	4a3c      	ldr	r2, [pc, #240]	@ (8004148 <xTaskIncrementTick+0x158>)
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	f000 fab4 	bl	80045c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800405c:	4b3b      	ldr	r3, [pc, #236]	@ (800414c <xTaskIncrementTick+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d348      	bcc.n	80040f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004066:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <xTaskIncrementTick+0x150>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004070:	4b36      	ldr	r3, [pc, #216]	@ (800414c <xTaskIncrementTick+0x15c>)
 8004072:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004076:	601a      	str	r2, [r3, #0]
					break;
 8004078:	e03e      	b.n	80040f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407a:	4b31      	ldr	r3, [pc, #196]	@ (8004140 <xTaskIncrementTick+0x150>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	429a      	cmp	r2, r3
 8004090:	d203      	bcs.n	800409a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004092:	4a2e      	ldr	r2, [pc, #184]	@ (800414c <xTaskIncrementTick+0x15c>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004098:	e02e      	b.n	80040f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3304      	adds	r3, #4
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fe7f 	bl	8002da2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3318      	adds	r3, #24
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fe76 	bl	8002da2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	2201      	movs	r2, #1
 80040bc:	409a      	lsls	r2, r3
 80040be:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <xTaskIncrementTick+0x160>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <xTaskIncrementTick+0x160>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <xTaskIncrementTick+0x164>)
 80040d6:	441a      	add	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3304      	adds	r3, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fe fe02 	bl	8002ce8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <xTaskIncrementTick+0x168>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d3b9      	bcc.n	8004066 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f6:	e7b6      	b.n	8004066 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040f8:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <xTaskIncrementTick+0x168>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fe:	4915      	ldr	r1, [pc, #84]	@ (8004154 <xTaskIncrementTick+0x164>)
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d901      	bls.n	8004114 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004114:	4b11      	ldr	r3, [pc, #68]	@ (800415c <xTaskIncrementTick+0x16c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e004      	b.n	800412c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004122:	4b0f      	ldr	r3, [pc, #60]	@ (8004160 <xTaskIncrementTick+0x170>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a0d      	ldr	r2, [pc, #52]	@ (8004160 <xTaskIncrementTick+0x170>)
 800412a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800412c:	697b      	ldr	r3, [r7, #20]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200004f4 	.word	0x200004f4
 800413c:	200004d0 	.word	0x200004d0
 8004140:	20000484 	.word	0x20000484
 8004144:	20000488 	.word	0x20000488
 8004148:	200004e4 	.word	0x200004e4
 800414c:	200004ec 	.word	0x200004ec
 8004150:	200004d4 	.word	0x200004d4
 8004154:	200003d0 	.word	0x200003d0
 8004158:	200003cc 	.word	0x200003cc
 800415c:	200004e0 	.word	0x200004e0
 8004160:	200004dc 	.word	0x200004dc

08004164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800416a:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <vTaskSwitchContext+0xb0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004172:	4b29      	ldr	r3, [pc, #164]	@ (8004218 <vTaskSwitchContext+0xb4>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004178:	e045      	b.n	8004206 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800417a:	4b27      	ldr	r3, [pc, #156]	@ (8004218 <vTaskSwitchContext+0xb4>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004180:	4b26      	ldr	r3, [pc, #152]	@ (800421c <vTaskSwitchContext+0xb8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800418e:	7afb      	ldrb	r3, [r7, #11]
 8004190:	f1c3 031f 	rsb	r3, r3, #31
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4922      	ldr	r1, [pc, #136]	@ (8004220 <vTaskSwitchContext+0xbc>)
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	607b      	str	r3, [r7, #4]
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	e7fd      	b.n	80041be <vTaskSwitchContext+0x5a>
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <vTaskSwitchContext+0xbc>)
 80041ce:	4413      	add	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3308      	adds	r3, #8
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d104      	bne.n	80041f2 <vTaskSwitchContext+0x8e>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004224 <vTaskSwitchContext+0xc0>)
 80041fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <vTaskSwitchContext+0xc0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	334c      	adds	r3, #76	@ 0x4c
 8004202:	4a09      	ldr	r2, [pc, #36]	@ (8004228 <vTaskSwitchContext+0xc4>)
 8004204:	6013      	str	r3, [r2, #0]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	200004f4 	.word	0x200004f4
 8004218:	200004e0 	.word	0x200004e0
 800421c:	200004d4 	.word	0x200004d4
 8004220:	200003d0 	.word	0x200003d0
 8004224:	200003cc 	.word	0x200003cc
 8004228:	2000001c 	.word	0x2000001c

0800422c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60fb      	str	r3, [r7, #12]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004254:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <vTaskPlaceOnEventList+0x48>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3318      	adds	r3, #24
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fe fd67 	bl	8002d30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004262:	2101      	movs	r1, #1
 8004264:	6838      	ldr	r0, [r7, #0]
 8004266:	f000 fb8d 	bl	8004984 <prvAddCurrentTaskToDelayedList>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200003cc 	.word	0x200003cc

08004278 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60fb      	str	r3, [r7, #12]
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	e7fd      	b.n	80042a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3318      	adds	r3, #24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe fd79 	bl	8002da2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <xTaskRemoveFromEventList+0xb0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11c      	bne.n	80042f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fd70 	bl	8002da2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	2201      	movs	r2, #1
 80042c8:	409a      	lsls	r2, r3
 80042ca:	4b18      	ldr	r3, [pc, #96]	@ (800432c <xTaskRemoveFromEventList+0xb4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	4a16      	ldr	r2, [pc, #88]	@ (800432c <xTaskRemoveFromEventList+0xb4>)
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4a13      	ldr	r2, [pc, #76]	@ (8004330 <xTaskRemoveFromEventList+0xb8>)
 80042e2:	441a      	add	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7fe fcfc 	bl	8002ce8 <vListInsertEnd>
 80042f0:	e005      	b.n	80042fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3318      	adds	r3, #24
 80042f6:	4619      	mov	r1, r3
 80042f8:	480e      	ldr	r0, [pc, #56]	@ (8004334 <xTaskRemoveFromEventList+0xbc>)
 80042fa:	f7fe fcf5 	bl	8002ce8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <xTaskRemoveFromEventList+0xc0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	429a      	cmp	r2, r3
 800430a:	d905      	bls.n	8004318 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <xTaskRemoveFromEventList+0xc4>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e001      	b.n	800431c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200004f4 	.word	0x200004f4
 800432c:	200004d4 	.word	0x200004d4
 8004330:	200003d0 	.word	0x200003d0
 8004334:	2000048c 	.word	0x2000048c
 8004338:	200003cc 	.word	0x200003cc
 800433c:	200004e0 	.word	0x200004e0

08004340 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <vTaskInternalSetTimeOutState+0x24>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <vTaskInternalSetTimeOutState+0x28>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	605a      	str	r2, [r3, #4]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	200004e4 	.word	0x200004e4
 8004368:	200004d0 	.word	0x200004d0

0800436c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	613b      	str	r3, [r7, #16]
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	e7fd      	b.n	8004390 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80043b2:	f000 fc81 	bl	8004cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043b6:	4b1d      	ldr	r3, [pc, #116]	@ (800442c <xTaskCheckForTimeOut+0xc0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ce:	d102      	bne.n	80043d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e023      	b.n	800441e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <xTaskCheckForTimeOut+0xc4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d007      	beq.n	80043f2 <xTaskCheckForTimeOut+0x86>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e015      	b.n	800441e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d20b      	bcs.n	8004414 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff99 	bl	8004340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e004      	b.n	800441e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800441e:	f000 fc7d 	bl	8004d1c <vPortExitCritical>

	return xReturn;
 8004422:	69fb      	ldr	r3, [r7, #28]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200004d0 	.word	0x200004d0
 8004430:	200004e4 	.word	0x200004e4

08004434 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <vTaskMissedYield+0x14>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	200004e0 	.word	0x200004e0

0800444c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004454:	f000 f852 	bl	80044fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <prvIdleTask+0x28>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d9f9      	bls.n	8004454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <prvIdleTask+0x2c>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004470:	e7f0      	b.n	8004454 <prvIdleTask+0x8>
 8004472:	bf00      	nop
 8004474:	200003d0 	.word	0x200003d0
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	e00c      	b.n	80044a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <prvInitialiseTaskLists+0x60>)
 8004494:	4413      	add	r3, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fbf9 	bl	8002c8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d9ef      	bls.n	8004488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044a8:	480d      	ldr	r0, [pc, #52]	@ (80044e0 <prvInitialiseTaskLists+0x64>)
 80044aa:	f7fe fbf0 	bl	8002c8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ae:	480d      	ldr	r0, [pc, #52]	@ (80044e4 <prvInitialiseTaskLists+0x68>)
 80044b0:	f7fe fbed 	bl	8002c8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044b4:	480c      	ldr	r0, [pc, #48]	@ (80044e8 <prvInitialiseTaskLists+0x6c>)
 80044b6:	f7fe fbea 	bl	8002c8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ba:	480c      	ldr	r0, [pc, #48]	@ (80044ec <prvInitialiseTaskLists+0x70>)
 80044bc:	f7fe fbe7 	bl	8002c8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044c0:	480b      	ldr	r0, [pc, #44]	@ (80044f0 <prvInitialiseTaskLists+0x74>)
 80044c2:	f7fe fbe4 	bl	8002c8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <prvInitialiseTaskLists+0x78>)
 80044c8:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <prvInitialiseTaskLists+0x64>)
 80044ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <prvInitialiseTaskLists+0x7c>)
 80044ce:	4a05      	ldr	r2, [pc, #20]	@ (80044e4 <prvInitialiseTaskLists+0x68>)
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200003d0 	.word	0x200003d0
 80044e0:	2000045c 	.word	0x2000045c
 80044e4:	20000470 	.word	0x20000470
 80044e8:	2000048c 	.word	0x2000048c
 80044ec:	200004a0 	.word	0x200004a0
 80044f0:	200004b8 	.word	0x200004b8
 80044f4:	20000484 	.word	0x20000484
 80044f8:	20000488 	.word	0x20000488

080044fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004502:	e019      	b.n	8004538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004504:	f000 fbd8 	bl	8004cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004508:	4b10      	ldr	r3, [pc, #64]	@ (800454c <prvCheckTasksWaitingTermination+0x50>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fc44 	bl	8002da2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <prvCheckTasksWaitingTermination+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a0b      	ldr	r2, [pc, #44]	@ (8004550 <prvCheckTasksWaitingTermination+0x54>)
 8004522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <prvCheckTasksWaitingTermination+0x58>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	4a0a      	ldr	r2, [pc, #40]	@ (8004554 <prvCheckTasksWaitingTermination+0x58>)
 800452c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800452e:	f000 fbf5 	bl	8004d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f810 	bl	8004558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <prvCheckTasksWaitingTermination+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e1      	bne.n	8004504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	200004a0 	.word	0x200004a0
 8004550:	200004cc 	.word	0x200004cc
 8004554:	200004b4 	.word	0x200004b4

08004558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	334c      	adds	r3, #76	@ 0x4c
 8004564:	4618      	mov	r0, r3
 8004566:	f001 f835 	bl	80055d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd8d 	bl	8005098 <vPortFree>
				vPortFree( pxTCB );
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fd8a 	bl	8005098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004584:	e019      	b.n	80045ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800458c:	2b01      	cmp	r3, #1
 800458e:	d103      	bne.n	8004598 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fd81 	bl	8005098 <vPortFree>
	}
 8004596:	e010      	b.n	80045ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d00b      	beq.n	80045ba <prvDeleteTCB+0x62>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60fb      	str	r3, [r7, #12]
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	e7fd      	b.n	80045b6 <prvDeleteTCB+0x5e>
	}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ca:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <prvResetNextTaskUnblockTime+0x38>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <prvResetNextTaskUnblockTime+0x3c>)
 80045d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045dc:	e008      	b.n	80045f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <prvResetNextTaskUnblockTime+0x38>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a04      	ldr	r2, [pc, #16]	@ (8004600 <prvResetNextTaskUnblockTime+0x3c>)
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000484 	.word	0x20000484
 8004600:	200004ec 	.word	0x200004ec

08004604 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800460a:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <xTaskGetSchedulerState+0x34>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004612:	2301      	movs	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	e008      	b.n	800462a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004618:	4b08      	ldr	r3, [pc, #32]	@ (800463c <xTaskGetSchedulerState+0x38>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004620:	2302      	movs	r3, #2
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	e001      	b.n	800462a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800462a:	687b      	ldr	r3, [r7, #4]
	}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	200004d8 	.word	0x200004d8
 800463c:	200004f4 	.word	0x200004f4

08004640 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d05e      	beq.n	8004714 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465a:	4b31      	ldr	r3, [pc, #196]	@ (8004720 <xTaskPriorityInherit+0xe0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	429a      	cmp	r2, r3
 8004662:	d24e      	bcs.n	8004702 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	db06      	blt.n	800467a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466c:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <xTaskPriorityInherit+0xe0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	f1c3 0207 	rsb	r2, r3, #7
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6959      	ldr	r1, [r3, #20]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <xTaskPriorityInherit+0xe4>)
 800468c:	4413      	add	r3, r2
 800468e:	4299      	cmp	r1, r3
 8004690:	d12f      	bne.n	80046f2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3304      	adds	r3, #4
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fb83 	bl	8002da2 <uxListRemove>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	2201      	movs	r2, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43da      	mvns	r2, r3
 80046ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004728 <xTaskPriorityInherit+0xe8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4013      	ands	r3, r2
 80046b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <xTaskPriorityInherit+0xe8>)
 80046b6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046b8:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <xTaskPriorityInherit+0xe0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	2201      	movs	r2, #1
 80046c8:	409a      	lsls	r2, r3
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <xTaskPriorityInherit+0xe8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <xTaskPriorityInherit+0xe8>)
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4a10      	ldr	r2, [pc, #64]	@ (8004724 <xTaskPriorityInherit+0xe4>)
 80046e2:	441a      	add	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe fafc 	bl	8002ce8 <vListInsertEnd>
 80046f0:	e004      	b.n	80046fc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <xTaskPriorityInherit+0xe0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e008      	b.n	8004714 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <xTaskPriorityInherit+0xe0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	429a      	cmp	r2, r3
 800470e:	d201      	bcs.n	8004714 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004714:	68fb      	ldr	r3, [r7, #12]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200003cc 	.word	0x200003cc
 8004724:	200003d0 	.word	0x200003d0
 8004728:	200004d4 	.word	0x200004d4

0800472c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d070      	beq.n	8004824 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004742:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <xTaskPriorityDisinherit+0x104>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	429a      	cmp	r2, r3
 800474a:	d00b      	beq.n	8004764 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60fb      	str	r3, [r7, #12]
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60bb      	str	r3, [r7, #8]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	429a      	cmp	r2, r3
 8004798:	d044      	beq.n	8004824 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d140      	bne.n	8004824 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fafb 	bl	8002da2 <uxListRemove>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d115      	bne.n	80047de <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	491f      	ldr	r1, [pc, #124]	@ (8004834 <xTaskPriorityDisinherit+0x108>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xTaskPriorityDisinherit+0xb2>
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	2201      	movs	r2, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <xTaskPriorityDisinherit+0x10c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4013      	ands	r3, r2
 80047da:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <xTaskPriorityDisinherit+0x10c>)
 80047dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	f1c3 0207 	rsb	r2, r3, #7
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	2201      	movs	r2, #1
 80047f8:	409a      	lsls	r2, r3
 80047fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <xTaskPriorityDisinherit+0x10c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	4a0d      	ldr	r2, [pc, #52]	@ (8004838 <xTaskPriorityDisinherit+0x10c>)
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4a08      	ldr	r2, [pc, #32]	@ (8004834 <xTaskPriorityDisinherit+0x108>)
 8004812:	441a      	add	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7fe fa64 	bl	8002ce8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004824:	697b      	ldr	r3, [r7, #20]
	}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	200003cc 	.word	0x200003cc
 8004834:	200003d0 	.word	0x200003d0
 8004838:	200004d4 	.word	0x200004d4

0800483c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800484a:	2301      	movs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d079      	beq.n	8004948 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60fb      	str	r3, [r7, #12]
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d902      	bls.n	8004884 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e002      	b.n	800488a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004888:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	d059      	beq.n	8004948 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	429a      	cmp	r2, r3
 800489c:	d154      	bne.n	8004948 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800489e:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d10b      	bne.n	80048c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60bb      	str	r3, [r7, #8]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db04      	blt.n	80048de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f1c3 0207 	rsb	r2, r3, #7
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	6959      	ldr	r1, [r3, #20]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a19      	ldr	r2, [pc, #100]	@ (8004954 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048ee:	4413      	add	r3, r2
 80048f0:	4299      	cmp	r1, r3
 80048f2:	d129      	bne.n	8004948 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fa52 	bl	8002da2 <uxListRemove>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	2201      	movs	r2, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43da      	mvns	r2, r3
 8004910:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4013      	ands	r3, r2
 8004916:	4a10      	ldr	r2, [pc, #64]	@ (8004958 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004918:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	2201      	movs	r2, #1
 8004920:	409a      	lsls	r2, r3
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	4a0b      	ldr	r2, [pc, #44]	@ (8004958 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a06      	ldr	r2, [pc, #24]	@ (8004954 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800493a:	441a      	add	r2, r3
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe f9d0 	bl	8002ce8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004948:	bf00      	nop
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200003cc 	.word	0x200003cc
 8004954:	200003d0 	.word	0x200003d0
 8004958:	200004d4 	.word	0x200004d4

0800495c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <pvTaskIncrementMutexHeldCount+0x24>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <pvTaskIncrementMutexHeldCount+0x24>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800496e:	3201      	adds	r2, #1
 8004970:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004972:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <pvTaskIncrementMutexHeldCount+0x24>)
 8004974:	681b      	ldr	r3, [r3, #0]
	}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	200003cc 	.word	0x200003cc

08004984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800498e:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004994:	4b28      	ldr	r3, [pc, #160]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fa01 	bl	8002da2 <uxListRemove>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80049a6:	4b24      	ldr	r3, [pc, #144]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	2201      	movs	r2, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0xb8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4013      	ands	r3, r2
 80049ba:	4a20      	ldr	r2, [pc, #128]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0xb8>)
 80049bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049c4:	d10a      	bne.n	80049dc <prvAddCurrentTaskToDelayedList+0x58>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	481a      	ldr	r0, [pc, #104]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0xbc>)
 80049d6:	f7fe f987 	bl	8002ce8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049da:	e026      	b.n	8004a2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049e4:	4b14      	ldr	r3, [pc, #80]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d209      	bcs.n	8004a08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f4:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f7fe f995 	bl	8002d30 <vListInsert>
}
 8004a06:	e010      	b.n	8004a2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a08:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7fe f98b 	bl	8002d30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d202      	bcs.n	8004a2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a24:	4a09      	ldr	r2, [pc, #36]	@ (8004a4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6013      	str	r3, [r2, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200004d0 	.word	0x200004d0
 8004a38:	200003cc 	.word	0x200003cc
 8004a3c:	200004d4 	.word	0x200004d4
 8004a40:	200004b8 	.word	0x200004b8
 8004a44:	20000488 	.word	0x20000488
 8004a48:	20000484 	.word	0x20000484
 8004a4c:	200004ec 	.word	0x200004ec

08004a50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b04      	subs	r3, #4
 8004a60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a80:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab4 <pxPortInitialiseStack+0x64>)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b14      	subs	r3, #20
 8004a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b04      	subs	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f06f 0202 	mvn.w	r2, #2
 8004a9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3b20      	subs	r3, #32
 8004aa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	08004ab9 	.word	0x08004ab9

08004ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <prvTaskExitError+0x58>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aca:	d00b      	beq.n	8004ae4 <prvTaskExitError+0x2c>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	60fb      	str	r3, [r7, #12]
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	e7fd      	b.n	8004ae0 <prvTaskExitError+0x28>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	60bb      	str	r3, [r7, #8]
}
 8004af6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004af8:	bf00      	nop
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0fc      	beq.n	8004afa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c
	...

08004b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <pxCurrentTCBConst2>)
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	6808      	ldr	r0, [r1, #0]
 8004b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	f380 8809 	msr	PSP, r0
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8811 	msr	BASEPRI, r0
 8004b3a:	4770      	bx	lr
 8004b3c:	f3af 8000 	nop.w

08004b40 <pxCurrentTCBConst2>:
 8004b40:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b48:	4808      	ldr	r0, [pc, #32]	@ (8004b6c <prvPortStartFirstTask+0x24>)
 8004b4a:	6800      	ldr	r0, [r0, #0]
 8004b4c:	6800      	ldr	r0, [r0, #0]
 8004b4e:	f380 8808 	msr	MSP, r0
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8814 	msr	CONTROL, r0
 8004b5a:	b662      	cpsie	i
 8004b5c:	b661      	cpsie	f
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	df00      	svc	0
 8004b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b6a:	bf00      	nop
 8004b6c:	e000ed08 	.word	0xe000ed08

08004b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b76:	4b47      	ldr	r3, [pc, #284]	@ (8004c94 <xPortStartScheduler+0x124>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a47      	ldr	r2, [pc, #284]	@ (8004c98 <xPortStartScheduler+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10b      	bne.n	8004b98 <xPortStartScheduler+0x28>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b98:	4b3e      	ldr	r3, [pc, #248]	@ (8004c94 <xPortStartScheduler+0x124>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c9c <xPortStartScheduler+0x12c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10b      	bne.n	8004bba <xPortStartScheduler+0x4a>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	613b      	str	r3, [r7, #16]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bba:	4b39      	ldr	r3, [pc, #228]	@ (8004ca0 <xPortStartScheduler+0x130>)
 8004bbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	22ff      	movs	r2, #255	@ 0xff
 8004bca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <xPortStartScheduler+0x134>)
 8004be0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004be2:	4b31      	ldr	r3, [pc, #196]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004be4:	2207      	movs	r2, #7
 8004be6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be8:	e009      	b.n	8004bfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004bea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004bf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b80      	cmp	r3, #128	@ 0x80
 8004c08:	d0ef      	beq.n	8004bea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d00b      	beq.n	8004c2e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60bb      	str	r3, [r7, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c40:	4a19      	ldr	r2, [pc, #100]	@ (8004ca8 <xPortStartScheduler+0x138>)
 8004c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c4c:	4b17      	ldr	r3, [pc, #92]	@ (8004cac <xPortStartScheduler+0x13c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <xPortStartScheduler+0x13c>)
 8004c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c58:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <xPortStartScheduler+0x13c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <xPortStartScheduler+0x13c>)
 8004c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c64:	f000 f8da 	bl	8004e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c68:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <xPortStartScheduler+0x140>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c6e:	f000 f8f9 	bl	8004e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c72:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <xPortStartScheduler+0x144>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb4 <xPortStartScheduler+0x144>)
 8004c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c7e:	f7ff ff63 	bl	8004b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c82:	f7ff fa6f 	bl	8004164 <vTaskSwitchContext>
	prvTaskExitError();
 8004c86:	f7ff ff17 	bl	8004ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	e000ed00 	.word	0xe000ed00
 8004c98:	410fc271 	.word	0x410fc271
 8004c9c:	410fc270 	.word	0x410fc270
 8004ca0:	e000e400 	.word	0xe000e400
 8004ca4:	200004f8 	.word	0x200004f8
 8004ca8:	200004fc 	.word	0x200004fc
 8004cac:	e000ed20 	.word	0xe000ed20
 8004cb0:	2000000c 	.word	0x2000000c
 8004cb4:	e000ef34 	.word	0xe000ef34

08004cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <vPortEnterCritical+0x5c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d14 <vPortEnterCritical+0x5c>)
 8004cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <vPortEnterCritical+0x5c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d110      	bne.n	8004d06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <vPortEnterCritical+0x60>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <vPortEnterCritical+0x4e>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	603b      	str	r3, [r7, #0]
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	e7fd      	b.n	8004d02 <vPortEnterCritical+0x4a>
	}
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000000c 	.word	0x2000000c
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <vPortExitCritical+0x50>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <vPortExitCritical+0x26>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	607b      	str	r3, [r7, #4]
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	e7fd      	b.n	8004d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <vPortExitCritical+0x50>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <vPortExitCritical+0x50>)
 8004d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d4c:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <vPortExitCritical+0x50>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <vPortExitCritical+0x44>
 8004d54:	2300      	movs	r3, #0
 8004d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f383 8811 	msr	BASEPRI, r3
}
 8004d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	2000000c 	.word	0x2000000c

08004d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d70:	f3ef 8009 	mrs	r0, PSP
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <pxCurrentTCBConst>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f01e 0f10 	tst.w	lr, #16
 8004d80:	bf08      	it	eq
 8004d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	6010      	str	r0, [r2, #0]
 8004d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d94:	f380 8811 	msr	BASEPRI, r0
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f7ff f9e0 	bl	8004164 <vTaskSwitchContext>
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f380 8811 	msr	BASEPRI, r0
 8004dac:	bc09      	pop	{r0, r3}
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	6808      	ldr	r0, [r1, #0]
 8004db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db6:	f01e 0f10 	tst.w	lr, #16
 8004dba:	bf08      	it	eq
 8004dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dc0:	f380 8809 	msr	PSP, r0
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst>:
 8004dd0:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004df2:	f7ff f8fd 	bl	8003ff0 <xTaskIncrementTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <SysTick_Handler+0x40>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e26:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <vPortSetupTimerInterrupt+0x38>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <vPortSetupTimerInterrupt+0x3c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0a      	ldr	r2, [pc, #40]	@ (8004e5c <vPortSetupTimerInterrupt+0x40>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	4a09      	ldr	r2, [pc, #36]	@ (8004e60 <vPortSetupTimerInterrupt+0x44>)
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e3e:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	e000e010 	.word	0xe000e010
 8004e54:	e000e018 	.word	0xe000e018
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	10624dd3 	.word	0x10624dd3
 8004e60:	e000e014 	.word	0xe000e014

08004e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004e74 <vPortEnableVFP+0x10>
 8004e68:	6801      	ldr	r1, [r0, #0]
 8004e6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004e6e:	6001      	str	r1, [r0, #0]
 8004e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e72:	bf00      	nop
 8004e74:	e000ed88 	.word	0xe000ed88

08004e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e7e:	f3ef 8305 	mrs	r3, IPSR
 8004e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d915      	bls.n	8004eb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e8a:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <vPortValidateInterruptPriority+0x74>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e94:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <vPortValidateInterruptPriority+0x78>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	7afa      	ldrb	r2, [r7, #11]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20b      	bcs.n	8004eb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <vPortValidateInterruptPriority+0x7c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <vPortValidateInterruptPriority+0x80>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90b      	bls.n	8004ede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	603b      	str	r3, [r7, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <vPortValidateInterruptPriority+0x62>
	}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	e000e3f0 	.word	0xe000e3f0
 8004ef0:	200004f8 	.word	0x200004f8
 8004ef4:	e000ed0c 	.word	0xe000ed0c
 8004ef8:	200004fc 	.word	0x200004fc

08004efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	@ 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f08:	f7fe ffb6 	bl	8003e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8005080 <pvPortMalloc+0x184>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f14:	f000 f924 	bl	8005160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f18:	4b5a      	ldr	r3, [pc, #360]	@ (8005084 <pvPortMalloc+0x188>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 8095 	bne.w	8005050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01e      	beq.n	8004f6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	3308      	adds	r3, #8
 8004f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <pvPortMalloc+0x6e>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	617b      	str	r3, [r7, #20]
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	e7fd      	b.n	8004f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d06f      	beq.n	8005050 <pvPortMalloc+0x154>
 8004f70:	4b45      	ldr	r3, [pc, #276]	@ (8005088 <pvPortMalloc+0x18c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d86a      	bhi.n	8005050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f7a:	4b44      	ldr	r3, [pc, #272]	@ (800508c <pvPortMalloc+0x190>)
 8004f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f7e:	4b43      	ldr	r3, [pc, #268]	@ (800508c <pvPortMalloc+0x190>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f84:	e004      	b.n	8004f90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d903      	bls.n	8004fa2 <pvPortMalloc+0xa6>
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f1      	bne.n	8004f86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fa2:	4b37      	ldr	r3, [pc, #220]	@ (8005080 <pvPortMalloc+0x184>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d051      	beq.n	8005050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	4413      	add	r3, r2
 8004fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d920      	bls.n	8005010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <pvPortMalloc+0xfc>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	613b      	str	r3, [r7, #16]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800500a:	69b8      	ldr	r0, [r7, #24]
 800500c:	f000 f90a 	bl	8005224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005010:	4b1d      	ldr	r3, [pc, #116]	@ (8005088 <pvPortMalloc+0x18c>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <pvPortMalloc+0x18c>)
 800501c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800501e:	4b1a      	ldr	r3, [pc, #104]	@ (8005088 <pvPortMalloc+0x18c>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <pvPortMalloc+0x194>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d203      	bcs.n	8005032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800502a:	4b17      	ldr	r3, [pc, #92]	@ (8005088 <pvPortMalloc+0x18c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a18      	ldr	r2, [pc, #96]	@ (8005090 <pvPortMalloc+0x194>)
 8005030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <pvPortMalloc+0x188>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	431a      	orrs	r2, r3
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005046:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <pvPortMalloc+0x198>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	4a11      	ldr	r2, [pc, #68]	@ (8005094 <pvPortMalloc+0x198>)
 800504e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005050:	f7fe ff20 	bl	8003e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <pvPortMalloc+0x17a>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	e7fd      	b.n	8005072 <pvPortMalloc+0x176>
	return pvReturn;
 8005076:	69fb      	ldr	r3, [r7, #28]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3728      	adds	r7, #40	@ 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20004108 	.word	0x20004108
 8005084:	2000411c 	.word	0x2000411c
 8005088:	2000410c 	.word	0x2000410c
 800508c:	20004100 	.word	0x20004100
 8005090:	20004110 	.word	0x20004110
 8005094:	20004114 	.word	0x20004114

08005098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d04f      	beq.n	800514a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050aa:	2308      	movs	r3, #8
 80050ac:	425b      	negs	r3, r3
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	4b25      	ldr	r3, [pc, #148]	@ (8005154 <vPortFree+0xbc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <vPortFree+0x46>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60fb      	str	r3, [r7, #12]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <vPortFree+0x66>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60bb      	str	r3, [r7, #8]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	4b14      	ldr	r3, [pc, #80]	@ (8005154 <vPortFree+0xbc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01e      	beq.n	800514a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d11a      	bne.n	800514a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4b0e      	ldr	r3, [pc, #56]	@ (8005154 <vPortFree+0xbc>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	43db      	mvns	r3, r3
 800511e:	401a      	ands	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005124:	f7fe fea8 	bl	8003e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <vPortFree+0xc0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4413      	add	r3, r2
 8005132:	4a09      	ldr	r2, [pc, #36]	@ (8005158 <vPortFree+0xc0>)
 8005134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005136:	6938      	ldr	r0, [r7, #16]
 8005138:	f000 f874 	bl	8005224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800513c:	4b07      	ldr	r3, [pc, #28]	@ (800515c <vPortFree+0xc4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	4a06      	ldr	r2, [pc, #24]	@ (800515c <vPortFree+0xc4>)
 8005144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005146:	f7fe fea5 	bl	8003e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2000411c 	.word	0x2000411c
 8005158:	2000410c 	.word	0x2000410c
 800515c:	20004118 	.word	0x20004118

08005160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800516a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800516c:	4b27      	ldr	r3, [pc, #156]	@ (800520c <prvHeapInit+0xac>)
 800516e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3307      	adds	r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0307 	bic.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <prvHeapInit+0xac>)
 8005190:	4413      	add	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005198:	4a1d      	ldr	r2, [pc, #116]	@ (8005210 <prvHeapInit+0xb0>)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800519e:	4b1c      	ldr	r3, [pc, #112]	@ (8005210 <prvHeapInit+0xb0>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	4413      	add	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051ac:	2208      	movs	r2, #8
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0307 	bic.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <prvHeapInit+0xb4>)
 80051c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051c2:	4b14      	ldr	r3, [pc, #80]	@ (8005214 <prvHeapInit+0xb4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ca:	4b12      	ldr	r3, [pc, #72]	@ (8005214 <prvHeapInit+0xb4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <prvHeapInit+0xb4>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <prvHeapInit+0xb8>)
 80051ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a09      	ldr	r2, [pc, #36]	@ (800521c <prvHeapInit+0xbc>)
 80051f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051f8:	4b09      	ldr	r3, [pc, #36]	@ (8005220 <prvHeapInit+0xc0>)
 80051fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051fe:	601a      	str	r2, [r3, #0]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000500 	.word	0x20000500
 8005210:	20004100 	.word	0x20004100
 8005214:	20004108 	.word	0x20004108
 8005218:	20004110 	.word	0x20004110
 800521c:	2000410c 	.word	0x2000410c
 8005220:	2000411c 	.word	0x2000411c

08005224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800522c:	4b28      	ldr	r3, [pc, #160]	@ (80052d0 <prvInsertBlockIntoFreeList+0xac>)
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e002      	b.n	8005238 <prvInsertBlockIntoFreeList+0x14>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d8f7      	bhi.n	8005232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	4413      	add	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d108      	bne.n	8005266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d118      	bne.n	80052ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b15      	ldr	r3, [pc, #84]	@ (80052d4 <prvInsertBlockIntoFreeList+0xb0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d00d      	beq.n	80052a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e008      	b.n	80052b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <prvInsertBlockIntoFreeList+0xb0>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e003      	b.n	80052b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d002      	beq.n	80052c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20004100 	.word	0x20004100
 80052d4:	20004108 	.word	0x20004108

080052d8 <rand>:
 80052d8:	4b16      	ldr	r3, [pc, #88]	@ (8005334 <rand+0x5c>)
 80052da:	b510      	push	{r4, lr}
 80052dc:	681c      	ldr	r4, [r3, #0]
 80052de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80052e0:	b9b3      	cbnz	r3, 8005310 <rand+0x38>
 80052e2:	2018      	movs	r0, #24
 80052e4:	f000 faae 	bl	8005844 <malloc>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6320      	str	r0, [r4, #48]	@ 0x30
 80052ec:	b920      	cbnz	r0, 80052f8 <rand+0x20>
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <rand+0x60>)
 80052f0:	4812      	ldr	r0, [pc, #72]	@ (800533c <rand+0x64>)
 80052f2:	2152      	movs	r1, #82	@ 0x52
 80052f4:	f000 fa3e 	bl	8005774 <__assert_func>
 80052f8:	4911      	ldr	r1, [pc, #68]	@ (8005340 <rand+0x68>)
 80052fa:	4b12      	ldr	r3, [pc, #72]	@ (8005344 <rand+0x6c>)
 80052fc:	e9c0 1300 	strd	r1, r3, [r0]
 8005300:	4b11      	ldr	r3, [pc, #68]	@ (8005348 <rand+0x70>)
 8005302:	6083      	str	r3, [r0, #8]
 8005304:	230b      	movs	r3, #11
 8005306:	8183      	strh	r3, [r0, #12]
 8005308:	2100      	movs	r1, #0
 800530a:	2001      	movs	r0, #1
 800530c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005310:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005312:	480e      	ldr	r0, [pc, #56]	@ (800534c <rand+0x74>)
 8005314:	690b      	ldr	r3, [r1, #16]
 8005316:	694c      	ldr	r4, [r1, #20]
 8005318:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <rand+0x78>)
 800531a:	4358      	muls	r0, r3
 800531c:	fb02 0004 	mla	r0, r2, r4, r0
 8005320:	fba3 3202 	umull	r3, r2, r3, r2
 8005324:	3301      	adds	r3, #1
 8005326:	eb40 0002 	adc.w	r0, r0, r2
 800532a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800532e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005332:	bd10      	pop	{r4, pc}
 8005334:	2000001c 	.word	0x2000001c
 8005338:	080067ac 	.word	0x080067ac
 800533c:	080067c3 	.word	0x080067c3
 8005340:	abcd330e 	.word	0xabcd330e
 8005344:	e66d1234 	.word	0xe66d1234
 8005348:	0005deec 	.word	0x0005deec
 800534c:	5851f42d 	.word	0x5851f42d
 8005350:	4c957f2d 	.word	0x4c957f2d

08005354 <std>:
 8005354:	2300      	movs	r3, #0
 8005356:	b510      	push	{r4, lr}
 8005358:	4604      	mov	r4, r0
 800535a:	e9c0 3300 	strd	r3, r3, [r0]
 800535e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005362:	6083      	str	r3, [r0, #8]
 8005364:	8181      	strh	r1, [r0, #12]
 8005366:	6643      	str	r3, [r0, #100]	@ 0x64
 8005368:	81c2      	strh	r2, [r0, #14]
 800536a:	6183      	str	r3, [r0, #24]
 800536c:	4619      	mov	r1, r3
 800536e:	2208      	movs	r2, #8
 8005370:	305c      	adds	r0, #92	@ 0x5c
 8005372:	f000 f916 	bl	80055a2 <memset>
 8005376:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <std+0x58>)
 8005378:	6263      	str	r3, [r4, #36]	@ 0x24
 800537a:	4b0d      	ldr	r3, [pc, #52]	@ (80053b0 <std+0x5c>)
 800537c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800537e:	4b0d      	ldr	r3, [pc, #52]	@ (80053b4 <std+0x60>)
 8005380:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <std+0x64>)
 8005384:	6323      	str	r3, [r4, #48]	@ 0x30
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <std+0x68>)
 8005388:	6224      	str	r4, [r4, #32]
 800538a:	429c      	cmp	r4, r3
 800538c:	d006      	beq.n	800539c <std+0x48>
 800538e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005392:	4294      	cmp	r4, r2
 8005394:	d002      	beq.n	800539c <std+0x48>
 8005396:	33d0      	adds	r3, #208	@ 0xd0
 8005398:	429c      	cmp	r4, r3
 800539a:	d105      	bne.n	80053a8 <std+0x54>
 800539c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a4:	f000 b9d4 	b.w	8005750 <__retarget_lock_init_recursive>
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	bf00      	nop
 80053ac:	0800551d 	.word	0x0800551d
 80053b0:	0800553f 	.word	0x0800553f
 80053b4:	08005577 	.word	0x08005577
 80053b8:	0800559b 	.word	0x0800559b
 80053bc:	20004120 	.word	0x20004120

080053c0 <stdio_exit_handler>:
 80053c0:	4a02      	ldr	r2, [pc, #8]	@ (80053cc <stdio_exit_handler+0xc>)
 80053c2:	4903      	ldr	r1, [pc, #12]	@ (80053d0 <stdio_exit_handler+0x10>)
 80053c4:	4803      	ldr	r0, [pc, #12]	@ (80053d4 <stdio_exit_handler+0x14>)
 80053c6:	f000 b869 	b.w	800549c <_fwalk_sglue>
 80053ca:	bf00      	nop
 80053cc:	20000010 	.word	0x20000010
 80053d0:	08006081 	.word	0x08006081
 80053d4:	20000020 	.word	0x20000020

080053d8 <cleanup_stdio>:
 80053d8:	6841      	ldr	r1, [r0, #4]
 80053da:	4b0c      	ldr	r3, [pc, #48]	@ (800540c <cleanup_stdio+0x34>)
 80053dc:	4299      	cmp	r1, r3
 80053de:	b510      	push	{r4, lr}
 80053e0:	4604      	mov	r4, r0
 80053e2:	d001      	beq.n	80053e8 <cleanup_stdio+0x10>
 80053e4:	f000 fe4c 	bl	8006080 <_fflush_r>
 80053e8:	68a1      	ldr	r1, [r4, #8]
 80053ea:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <cleanup_stdio+0x38>)
 80053ec:	4299      	cmp	r1, r3
 80053ee:	d002      	beq.n	80053f6 <cleanup_stdio+0x1e>
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fe45 	bl	8006080 <_fflush_r>
 80053f6:	68e1      	ldr	r1, [r4, #12]
 80053f8:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <cleanup_stdio+0x3c>)
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d004      	beq.n	8005408 <cleanup_stdio+0x30>
 80053fe:	4620      	mov	r0, r4
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f000 be3c 	b.w	8006080 <_fflush_r>
 8005408:	bd10      	pop	{r4, pc}
 800540a:	bf00      	nop
 800540c:	20004120 	.word	0x20004120
 8005410:	20004188 	.word	0x20004188
 8005414:	200041f0 	.word	0x200041f0

08005418 <global_stdio_init.part.0>:
 8005418:	b510      	push	{r4, lr}
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <global_stdio_init.part.0+0x30>)
 800541c:	4c0b      	ldr	r4, [pc, #44]	@ (800544c <global_stdio_init.part.0+0x34>)
 800541e:	4a0c      	ldr	r2, [pc, #48]	@ (8005450 <global_stdio_init.part.0+0x38>)
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	4620      	mov	r0, r4
 8005424:	2200      	movs	r2, #0
 8005426:	2104      	movs	r1, #4
 8005428:	f7ff ff94 	bl	8005354 <std>
 800542c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005430:	2201      	movs	r2, #1
 8005432:	2109      	movs	r1, #9
 8005434:	f7ff ff8e 	bl	8005354 <std>
 8005438:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800543c:	2202      	movs	r2, #2
 800543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005442:	2112      	movs	r1, #18
 8005444:	f7ff bf86 	b.w	8005354 <std>
 8005448:	20004258 	.word	0x20004258
 800544c:	20004120 	.word	0x20004120
 8005450:	080053c1 	.word	0x080053c1

08005454 <__sfp_lock_acquire>:
 8005454:	4801      	ldr	r0, [pc, #4]	@ (800545c <__sfp_lock_acquire+0x8>)
 8005456:	f000 b97c 	b.w	8005752 <__retarget_lock_acquire_recursive>
 800545a:	bf00      	nop
 800545c:	20004261 	.word	0x20004261

08005460 <__sfp_lock_release>:
 8005460:	4801      	ldr	r0, [pc, #4]	@ (8005468 <__sfp_lock_release+0x8>)
 8005462:	f000 b977 	b.w	8005754 <__retarget_lock_release_recursive>
 8005466:	bf00      	nop
 8005468:	20004261 	.word	0x20004261

0800546c <__sinit>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	f7ff fff0 	bl	8005454 <__sfp_lock_acquire>
 8005474:	6a23      	ldr	r3, [r4, #32]
 8005476:	b11b      	cbz	r3, 8005480 <__sinit+0x14>
 8005478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547c:	f7ff bff0 	b.w	8005460 <__sfp_lock_release>
 8005480:	4b04      	ldr	r3, [pc, #16]	@ (8005494 <__sinit+0x28>)
 8005482:	6223      	str	r3, [r4, #32]
 8005484:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <__sinit+0x2c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f5      	bne.n	8005478 <__sinit+0xc>
 800548c:	f7ff ffc4 	bl	8005418 <global_stdio_init.part.0>
 8005490:	e7f2      	b.n	8005478 <__sinit+0xc>
 8005492:	bf00      	nop
 8005494:	080053d9 	.word	0x080053d9
 8005498:	20004258 	.word	0x20004258

0800549c <_fwalk_sglue>:
 800549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a0:	4607      	mov	r7, r0
 80054a2:	4688      	mov	r8, r1
 80054a4:	4614      	mov	r4, r2
 80054a6:	2600      	movs	r6, #0
 80054a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054ac:	f1b9 0901 	subs.w	r9, r9, #1
 80054b0:	d505      	bpl.n	80054be <_fwalk_sglue+0x22>
 80054b2:	6824      	ldr	r4, [r4, #0]
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	d1f7      	bne.n	80054a8 <_fwalk_sglue+0xc>
 80054b8:	4630      	mov	r0, r6
 80054ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d907      	bls.n	80054d4 <_fwalk_sglue+0x38>
 80054c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054c8:	3301      	adds	r3, #1
 80054ca:	d003      	beq.n	80054d4 <_fwalk_sglue+0x38>
 80054cc:	4629      	mov	r1, r5
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	4306      	orrs	r6, r0
 80054d4:	3568      	adds	r5, #104	@ 0x68
 80054d6:	e7e9      	b.n	80054ac <_fwalk_sglue+0x10>

080054d8 <siprintf>:
 80054d8:	b40e      	push	{r1, r2, r3}
 80054da:	b510      	push	{r4, lr}
 80054dc:	b09d      	sub	sp, #116	@ 0x74
 80054de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054e0:	9002      	str	r0, [sp, #8]
 80054e2:	9006      	str	r0, [sp, #24]
 80054e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054e8:	480a      	ldr	r0, [pc, #40]	@ (8005514 <siprintf+0x3c>)
 80054ea:	9107      	str	r1, [sp, #28]
 80054ec:	9104      	str	r1, [sp, #16]
 80054ee:	490a      	ldr	r1, [pc, #40]	@ (8005518 <siprintf+0x40>)
 80054f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f4:	9105      	str	r1, [sp, #20]
 80054f6:	2400      	movs	r4, #0
 80054f8:	a902      	add	r1, sp, #8
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005500:	f000 fab2 	bl	8005a68 <_svfiprintf_r>
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	701c      	strb	r4, [r3, #0]
 8005508:	b01d      	add	sp, #116	@ 0x74
 800550a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550e:	b003      	add	sp, #12
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000001c 	.word	0x2000001c
 8005518:	ffff0208 	.word	0xffff0208

0800551c <__sread>:
 800551c:	b510      	push	{r4, lr}
 800551e:	460c      	mov	r4, r1
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	f000 f8c6 	bl	80056b4 <_read_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	bfab      	itete	ge
 800552c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800552e:	89a3      	ldrhlt	r3, [r4, #12]
 8005530:	181b      	addge	r3, r3, r0
 8005532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005536:	bfac      	ite	ge
 8005538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800553a:	81a3      	strhlt	r3, [r4, #12]
 800553c:	bd10      	pop	{r4, pc}

0800553e <__swrite>:
 800553e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	461f      	mov	r7, r3
 8005544:	898b      	ldrh	r3, [r1, #12]
 8005546:	05db      	lsls	r3, r3, #23
 8005548:	4605      	mov	r5, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4616      	mov	r6, r2
 800554e:	d505      	bpl.n	800555c <__swrite+0x1e>
 8005550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005554:	2302      	movs	r3, #2
 8005556:	2200      	movs	r2, #0
 8005558:	f000 f89a 	bl	8005690 <_lseek_r>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	4632      	mov	r2, r6
 800556a:	463b      	mov	r3, r7
 800556c:	4628      	mov	r0, r5
 800556e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005572:	f000 b8b1 	b.w	80056d8 <_write_r>

08005576 <__sseek>:
 8005576:	b510      	push	{r4, lr}
 8005578:	460c      	mov	r4, r1
 800557a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557e:	f000 f887 	bl	8005690 <_lseek_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	bf15      	itete	ne
 8005588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800558a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800558e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005592:	81a3      	strheq	r3, [r4, #12]
 8005594:	bf18      	it	ne
 8005596:	81a3      	strhne	r3, [r4, #12]
 8005598:	bd10      	pop	{r4, pc}

0800559a <__sclose>:
 800559a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559e:	f000 b809 	b.w	80055b4 <_close_r>

080055a2 <memset>:
 80055a2:	4402      	add	r2, r0
 80055a4:	4603      	mov	r3, r0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d100      	bne.n	80055ac <memset+0xa>
 80055aa:	4770      	bx	lr
 80055ac:	f803 1b01 	strb.w	r1, [r3], #1
 80055b0:	e7f9      	b.n	80055a6 <memset+0x4>
	...

080055b4 <_close_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d06      	ldr	r5, [pc, #24]	@ (80055d0 <_close_r+0x1c>)
 80055b8:	2300      	movs	r3, #0
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fb fbb8 	bl	8000d34 <_close>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_close_r+0x1a>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_close_r+0x1a>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	2000425c 	.word	0x2000425c

080055d4 <_reclaim_reent>:
 80055d4:	4b2d      	ldr	r3, [pc, #180]	@ (800568c <_reclaim_reent+0xb8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4283      	cmp	r3, r0
 80055da:	b570      	push	{r4, r5, r6, lr}
 80055dc:	4604      	mov	r4, r0
 80055de:	d053      	beq.n	8005688 <_reclaim_reent+0xb4>
 80055e0:	69c3      	ldr	r3, [r0, #28]
 80055e2:	b31b      	cbz	r3, 800562c <_reclaim_reent+0x58>
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	b163      	cbz	r3, 8005602 <_reclaim_reent+0x2e>
 80055e8:	2500      	movs	r5, #0
 80055ea:	69e3      	ldr	r3, [r4, #28]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	5959      	ldr	r1, [r3, r5]
 80055f0:	b9b1      	cbnz	r1, 8005620 <_reclaim_reent+0x4c>
 80055f2:	3504      	adds	r5, #4
 80055f4:	2d80      	cmp	r5, #128	@ 0x80
 80055f6:	d1f8      	bne.n	80055ea <_reclaim_reent+0x16>
 80055f8:	69e3      	ldr	r3, [r4, #28]
 80055fa:	4620      	mov	r0, r4
 80055fc:	68d9      	ldr	r1, [r3, #12]
 80055fe:	f000 f8d7 	bl	80057b0 <_free_r>
 8005602:	69e3      	ldr	r3, [r4, #28]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	b111      	cbz	r1, 800560e <_reclaim_reent+0x3a>
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f8d1 	bl	80057b0 <_free_r>
 800560e:	69e3      	ldr	r3, [r4, #28]
 8005610:	689d      	ldr	r5, [r3, #8]
 8005612:	b15d      	cbz	r5, 800562c <_reclaim_reent+0x58>
 8005614:	4629      	mov	r1, r5
 8005616:	4620      	mov	r0, r4
 8005618:	682d      	ldr	r5, [r5, #0]
 800561a:	f000 f8c9 	bl	80057b0 <_free_r>
 800561e:	e7f8      	b.n	8005612 <_reclaim_reent+0x3e>
 8005620:	680e      	ldr	r6, [r1, #0]
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f8c4 	bl	80057b0 <_free_r>
 8005628:	4631      	mov	r1, r6
 800562a:	e7e1      	b.n	80055f0 <_reclaim_reent+0x1c>
 800562c:	6961      	ldr	r1, [r4, #20]
 800562e:	b111      	cbz	r1, 8005636 <_reclaim_reent+0x62>
 8005630:	4620      	mov	r0, r4
 8005632:	f000 f8bd 	bl	80057b0 <_free_r>
 8005636:	69e1      	ldr	r1, [r4, #28]
 8005638:	b111      	cbz	r1, 8005640 <_reclaim_reent+0x6c>
 800563a:	4620      	mov	r0, r4
 800563c:	f000 f8b8 	bl	80057b0 <_free_r>
 8005640:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005642:	b111      	cbz	r1, 800564a <_reclaim_reent+0x76>
 8005644:	4620      	mov	r0, r4
 8005646:	f000 f8b3 	bl	80057b0 <_free_r>
 800564a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800564c:	b111      	cbz	r1, 8005654 <_reclaim_reent+0x80>
 800564e:	4620      	mov	r0, r4
 8005650:	f000 f8ae 	bl	80057b0 <_free_r>
 8005654:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005656:	b111      	cbz	r1, 800565e <_reclaim_reent+0x8a>
 8005658:	4620      	mov	r0, r4
 800565a:	f000 f8a9 	bl	80057b0 <_free_r>
 800565e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005660:	b111      	cbz	r1, 8005668 <_reclaim_reent+0x94>
 8005662:	4620      	mov	r0, r4
 8005664:	f000 f8a4 	bl	80057b0 <_free_r>
 8005668:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800566a:	b111      	cbz	r1, 8005672 <_reclaim_reent+0x9e>
 800566c:	4620      	mov	r0, r4
 800566e:	f000 f89f 	bl	80057b0 <_free_r>
 8005672:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005674:	b111      	cbz	r1, 800567c <_reclaim_reent+0xa8>
 8005676:	4620      	mov	r0, r4
 8005678:	f000 f89a 	bl	80057b0 <_free_r>
 800567c:	6a23      	ldr	r3, [r4, #32]
 800567e:	b11b      	cbz	r3, 8005688 <_reclaim_reent+0xb4>
 8005680:	4620      	mov	r0, r4
 8005682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005686:	4718      	bx	r3
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	bf00      	nop
 800568c:	2000001c 	.word	0x2000001c

08005690 <_lseek_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d07      	ldr	r5, [pc, #28]	@ (80056b0 <_lseek_r+0x20>)
 8005694:	4604      	mov	r4, r0
 8005696:	4608      	mov	r0, r1
 8005698:	4611      	mov	r1, r2
 800569a:	2200      	movs	r2, #0
 800569c:	602a      	str	r2, [r5, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f7fb fb6f 	bl	8000d82 <_lseek>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_lseek_r+0x1e>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_lseek_r+0x1e>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	2000425c 	.word	0x2000425c

080056b4 <_read_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d07      	ldr	r5, [pc, #28]	@ (80056d4 <_read_r+0x20>)
 80056b8:	4604      	mov	r4, r0
 80056ba:	4608      	mov	r0, r1
 80056bc:	4611      	mov	r1, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	602a      	str	r2, [r5, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f7fb fafd 	bl	8000cc2 <_read>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_read_r+0x1e>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_read_r+0x1e>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000425c 	.word	0x2000425c

080056d8 <_write_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4d07      	ldr	r5, [pc, #28]	@ (80056f8 <_write_r+0x20>)
 80056dc:	4604      	mov	r4, r0
 80056de:	4608      	mov	r0, r1
 80056e0:	4611      	mov	r1, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f7fb fb08 	bl	8000cfc <_write>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_write_r+0x1e>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_write_r+0x1e>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	2000425c 	.word	0x2000425c

080056fc <__errno>:
 80056fc:	4b01      	ldr	r3, [pc, #4]	@ (8005704 <__errno+0x8>)
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2000001c 	.word	0x2000001c

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	@ (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	@ (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	@ (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	@ (800574c <__libc_init_array+0x44>)
 800571c:	f000 ffee 	bl	80066fc <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	08006894 	.word	0x08006894
 8005744:	08006894 	.word	0x08006894
 8005748:	08006894 	.word	0x08006894
 800574c:	08006898 	.word	0x08006898

08005750 <__retarget_lock_init_recursive>:
 8005750:	4770      	bx	lr

08005752 <__retarget_lock_acquire_recursive>:
 8005752:	4770      	bx	lr

08005754 <__retarget_lock_release_recursive>:
 8005754:	4770      	bx	lr

08005756 <memcpy>:
 8005756:	440a      	add	r2, r1
 8005758:	4291      	cmp	r1, r2
 800575a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800575e:	d100      	bne.n	8005762 <memcpy+0xc>
 8005760:	4770      	bx	lr
 8005762:	b510      	push	{r4, lr}
 8005764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800576c:	4291      	cmp	r1, r2
 800576e:	d1f9      	bne.n	8005764 <memcpy+0xe>
 8005770:	bd10      	pop	{r4, pc}
	...

08005774 <__assert_func>:
 8005774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005776:	4614      	mov	r4, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4b09      	ldr	r3, [pc, #36]	@ (80057a0 <__assert_func+0x2c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4605      	mov	r5, r0
 8005780:	68d8      	ldr	r0, [r3, #12]
 8005782:	b14c      	cbz	r4, 8005798 <__assert_func+0x24>
 8005784:	4b07      	ldr	r3, [pc, #28]	@ (80057a4 <__assert_func+0x30>)
 8005786:	9100      	str	r1, [sp, #0]
 8005788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800578c:	4906      	ldr	r1, [pc, #24]	@ (80057a8 <__assert_func+0x34>)
 800578e:	462b      	mov	r3, r5
 8005790:	f000 fc9e 	bl	80060d0 <fiprintf>
 8005794:	f000 fcd8 	bl	8006148 <abort>
 8005798:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <__assert_func+0x38>)
 800579a:	461c      	mov	r4, r3
 800579c:	e7f3      	b.n	8005786 <__assert_func+0x12>
 800579e:	bf00      	nop
 80057a0:	2000001c 	.word	0x2000001c
 80057a4:	0800681b 	.word	0x0800681b
 80057a8:	08006828 	.word	0x08006828
 80057ac:	08006856 	.word	0x08006856

080057b0 <_free_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4605      	mov	r5, r0
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d041      	beq.n	800583c <_free_r+0x8c>
 80057b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057bc:	1f0c      	subs	r4, r1, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	bfb8      	it	lt
 80057c2:	18e4      	addlt	r4, r4, r3
 80057c4:	f000 f8e8 	bl	8005998 <__malloc_lock>
 80057c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005840 <_free_r+0x90>)
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	b933      	cbnz	r3, 80057dc <_free_r+0x2c>
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	6014      	str	r4, [r2, #0]
 80057d2:	4628      	mov	r0, r5
 80057d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057d8:	f000 b8e4 	b.w	80059a4 <__malloc_unlock>
 80057dc:	42a3      	cmp	r3, r4
 80057de:	d908      	bls.n	80057f2 <_free_r+0x42>
 80057e0:	6820      	ldr	r0, [r4, #0]
 80057e2:	1821      	adds	r1, r4, r0
 80057e4:	428b      	cmp	r3, r1
 80057e6:	bf01      	itttt	eq
 80057e8:	6819      	ldreq	r1, [r3, #0]
 80057ea:	685b      	ldreq	r3, [r3, #4]
 80057ec:	1809      	addeq	r1, r1, r0
 80057ee:	6021      	streq	r1, [r4, #0]
 80057f0:	e7ed      	b.n	80057ce <_free_r+0x1e>
 80057f2:	461a      	mov	r2, r3
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	b10b      	cbz	r3, 80057fc <_free_r+0x4c>
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	d9fa      	bls.n	80057f2 <_free_r+0x42>
 80057fc:	6811      	ldr	r1, [r2, #0]
 80057fe:	1850      	adds	r0, r2, r1
 8005800:	42a0      	cmp	r0, r4
 8005802:	d10b      	bne.n	800581c <_free_r+0x6c>
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	4401      	add	r1, r0
 8005808:	1850      	adds	r0, r2, r1
 800580a:	4283      	cmp	r3, r0
 800580c:	6011      	str	r1, [r2, #0]
 800580e:	d1e0      	bne.n	80057d2 <_free_r+0x22>
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	6053      	str	r3, [r2, #4]
 8005816:	4408      	add	r0, r1
 8005818:	6010      	str	r0, [r2, #0]
 800581a:	e7da      	b.n	80057d2 <_free_r+0x22>
 800581c:	d902      	bls.n	8005824 <_free_r+0x74>
 800581e:	230c      	movs	r3, #12
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	e7d6      	b.n	80057d2 <_free_r+0x22>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	1821      	adds	r1, r4, r0
 8005828:	428b      	cmp	r3, r1
 800582a:	bf04      	itt	eq
 800582c:	6819      	ldreq	r1, [r3, #0]
 800582e:	685b      	ldreq	r3, [r3, #4]
 8005830:	6063      	str	r3, [r4, #4]
 8005832:	bf04      	itt	eq
 8005834:	1809      	addeq	r1, r1, r0
 8005836:	6021      	streq	r1, [r4, #0]
 8005838:	6054      	str	r4, [r2, #4]
 800583a:	e7ca      	b.n	80057d2 <_free_r+0x22>
 800583c:	bd38      	pop	{r3, r4, r5, pc}
 800583e:	bf00      	nop
 8005840:	20004268 	.word	0x20004268

08005844 <malloc>:
 8005844:	4b02      	ldr	r3, [pc, #8]	@ (8005850 <malloc+0xc>)
 8005846:	4601      	mov	r1, r0
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f000 b825 	b.w	8005898 <_malloc_r>
 800584e:	bf00      	nop
 8005850:	2000001c 	.word	0x2000001c

08005854 <sbrk_aligned>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4e0f      	ldr	r6, [pc, #60]	@ (8005894 <sbrk_aligned+0x40>)
 8005858:	460c      	mov	r4, r1
 800585a:	6831      	ldr	r1, [r6, #0]
 800585c:	4605      	mov	r5, r0
 800585e:	b911      	cbnz	r1, 8005866 <sbrk_aligned+0x12>
 8005860:	f000 fc62 	bl	8006128 <_sbrk_r>
 8005864:	6030      	str	r0, [r6, #0]
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f000 fc5d 	bl	8006128 <_sbrk_r>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d103      	bne.n	800587a <sbrk_aligned+0x26>
 8005872:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005876:	4620      	mov	r0, r4
 8005878:	bd70      	pop	{r4, r5, r6, pc}
 800587a:	1cc4      	adds	r4, r0, #3
 800587c:	f024 0403 	bic.w	r4, r4, #3
 8005880:	42a0      	cmp	r0, r4
 8005882:	d0f8      	beq.n	8005876 <sbrk_aligned+0x22>
 8005884:	1a21      	subs	r1, r4, r0
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fc4e 	bl	8006128 <_sbrk_r>
 800588c:	3001      	adds	r0, #1
 800588e:	d1f2      	bne.n	8005876 <sbrk_aligned+0x22>
 8005890:	e7ef      	b.n	8005872 <sbrk_aligned+0x1e>
 8005892:	bf00      	nop
 8005894:	20004264 	.word	0x20004264

08005898 <_malloc_r>:
 8005898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800589c:	1ccd      	adds	r5, r1, #3
 800589e:	f025 0503 	bic.w	r5, r5, #3
 80058a2:	3508      	adds	r5, #8
 80058a4:	2d0c      	cmp	r5, #12
 80058a6:	bf38      	it	cc
 80058a8:	250c      	movcc	r5, #12
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	4606      	mov	r6, r0
 80058ae:	db01      	blt.n	80058b4 <_malloc_r+0x1c>
 80058b0:	42a9      	cmp	r1, r5
 80058b2:	d904      	bls.n	80058be <_malloc_r+0x26>
 80058b4:	230c      	movs	r3, #12
 80058b6:	6033      	str	r3, [r6, #0]
 80058b8:	2000      	movs	r0, #0
 80058ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005994 <_malloc_r+0xfc>
 80058c2:	f000 f869 	bl	8005998 <__malloc_lock>
 80058c6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ca:	461c      	mov	r4, r3
 80058cc:	bb44      	cbnz	r4, 8005920 <_malloc_r+0x88>
 80058ce:	4629      	mov	r1, r5
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff ffbf 	bl	8005854 <sbrk_aligned>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	4604      	mov	r4, r0
 80058da:	d158      	bne.n	800598e <_malloc_r+0xf6>
 80058dc:	f8d8 4000 	ldr.w	r4, [r8]
 80058e0:	4627      	mov	r7, r4
 80058e2:	2f00      	cmp	r7, #0
 80058e4:	d143      	bne.n	800596e <_malloc_r+0xd6>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d04b      	beq.n	8005982 <_malloc_r+0xea>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	4639      	mov	r1, r7
 80058ee:	4630      	mov	r0, r6
 80058f0:	eb04 0903 	add.w	r9, r4, r3
 80058f4:	f000 fc18 	bl	8006128 <_sbrk_r>
 80058f8:	4581      	cmp	r9, r0
 80058fa:	d142      	bne.n	8005982 <_malloc_r+0xea>
 80058fc:	6821      	ldr	r1, [r4, #0]
 80058fe:	1a6d      	subs	r5, r5, r1
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ffa6 	bl	8005854 <sbrk_aligned>
 8005908:	3001      	adds	r0, #1
 800590a:	d03a      	beq.n	8005982 <_malloc_r+0xea>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	442b      	add	r3, r5
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	f8d8 3000 	ldr.w	r3, [r8]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	bb62      	cbnz	r2, 8005974 <_malloc_r+0xdc>
 800591a:	f8c8 7000 	str.w	r7, [r8]
 800591e:	e00f      	b.n	8005940 <_malloc_r+0xa8>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	1b52      	subs	r2, r2, r5
 8005924:	d420      	bmi.n	8005968 <_malloc_r+0xd0>
 8005926:	2a0b      	cmp	r2, #11
 8005928:	d917      	bls.n	800595a <_malloc_r+0xc2>
 800592a:	1961      	adds	r1, r4, r5
 800592c:	42a3      	cmp	r3, r4
 800592e:	6025      	str	r5, [r4, #0]
 8005930:	bf18      	it	ne
 8005932:	6059      	strne	r1, [r3, #4]
 8005934:	6863      	ldr	r3, [r4, #4]
 8005936:	bf08      	it	eq
 8005938:	f8c8 1000 	streq.w	r1, [r8]
 800593c:	5162      	str	r2, [r4, r5]
 800593e:	604b      	str	r3, [r1, #4]
 8005940:	4630      	mov	r0, r6
 8005942:	f000 f82f 	bl	80059a4 <__malloc_unlock>
 8005946:	f104 000b 	add.w	r0, r4, #11
 800594a:	1d23      	adds	r3, r4, #4
 800594c:	f020 0007 	bic.w	r0, r0, #7
 8005950:	1ac2      	subs	r2, r0, r3
 8005952:	bf1c      	itt	ne
 8005954:	1a1b      	subne	r3, r3, r0
 8005956:	50a3      	strne	r3, [r4, r2]
 8005958:	e7af      	b.n	80058ba <_malloc_r+0x22>
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	42a3      	cmp	r3, r4
 800595e:	bf0c      	ite	eq
 8005960:	f8c8 2000 	streq.w	r2, [r8]
 8005964:	605a      	strne	r2, [r3, #4]
 8005966:	e7eb      	b.n	8005940 <_malloc_r+0xa8>
 8005968:	4623      	mov	r3, r4
 800596a:	6864      	ldr	r4, [r4, #4]
 800596c:	e7ae      	b.n	80058cc <_malloc_r+0x34>
 800596e:	463c      	mov	r4, r7
 8005970:	687f      	ldr	r7, [r7, #4]
 8005972:	e7b6      	b.n	80058e2 <_malloc_r+0x4a>
 8005974:	461a      	mov	r2, r3
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	42a3      	cmp	r3, r4
 800597a:	d1fb      	bne.n	8005974 <_malloc_r+0xdc>
 800597c:	2300      	movs	r3, #0
 800597e:	6053      	str	r3, [r2, #4]
 8005980:	e7de      	b.n	8005940 <_malloc_r+0xa8>
 8005982:	230c      	movs	r3, #12
 8005984:	6033      	str	r3, [r6, #0]
 8005986:	4630      	mov	r0, r6
 8005988:	f000 f80c 	bl	80059a4 <__malloc_unlock>
 800598c:	e794      	b.n	80058b8 <_malloc_r+0x20>
 800598e:	6005      	str	r5, [r0, #0]
 8005990:	e7d6      	b.n	8005940 <_malloc_r+0xa8>
 8005992:	bf00      	nop
 8005994:	20004268 	.word	0x20004268

08005998 <__malloc_lock>:
 8005998:	4801      	ldr	r0, [pc, #4]	@ (80059a0 <__malloc_lock+0x8>)
 800599a:	f7ff beda 	b.w	8005752 <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	20004260 	.word	0x20004260

080059a4 <__malloc_unlock>:
 80059a4:	4801      	ldr	r0, [pc, #4]	@ (80059ac <__malloc_unlock+0x8>)
 80059a6:	f7ff bed5 	b.w	8005754 <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	20004260 	.word	0x20004260

080059b0 <__ssputs_r>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	688e      	ldr	r6, [r1, #8]
 80059b6:	461f      	mov	r7, r3
 80059b8:	42be      	cmp	r6, r7
 80059ba:	680b      	ldr	r3, [r1, #0]
 80059bc:	4682      	mov	sl, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	4690      	mov	r8, r2
 80059c2:	d82d      	bhi.n	8005a20 <__ssputs_r+0x70>
 80059c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059cc:	d026      	beq.n	8005a1c <__ssputs_r+0x6c>
 80059ce:	6965      	ldr	r5, [r4, #20]
 80059d0:	6909      	ldr	r1, [r1, #16]
 80059d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059d6:	eba3 0901 	sub.w	r9, r3, r1
 80059da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059de:	1c7b      	adds	r3, r7, #1
 80059e0:	444b      	add	r3, r9
 80059e2:	106d      	asrs	r5, r5, #1
 80059e4:	429d      	cmp	r5, r3
 80059e6:	bf38      	it	cc
 80059e8:	461d      	movcc	r5, r3
 80059ea:	0553      	lsls	r3, r2, #21
 80059ec:	d527      	bpl.n	8005a3e <__ssputs_r+0x8e>
 80059ee:	4629      	mov	r1, r5
 80059f0:	f7ff ff52 	bl	8005898 <_malloc_r>
 80059f4:	4606      	mov	r6, r0
 80059f6:	b360      	cbz	r0, 8005a52 <__ssputs_r+0xa2>
 80059f8:	6921      	ldr	r1, [r4, #16]
 80059fa:	464a      	mov	r2, r9
 80059fc:	f7ff feab 	bl	8005756 <memcpy>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	6126      	str	r6, [r4, #16]
 8005a0e:	6165      	str	r5, [r4, #20]
 8005a10:	444e      	add	r6, r9
 8005a12:	eba5 0509 	sub.w	r5, r5, r9
 8005a16:	6026      	str	r6, [r4, #0]
 8005a18:	60a5      	str	r5, [r4, #8]
 8005a1a:	463e      	mov	r6, r7
 8005a1c:	42be      	cmp	r6, r7
 8005a1e:	d900      	bls.n	8005a22 <__ssputs_r+0x72>
 8005a20:	463e      	mov	r6, r7
 8005a22:	6820      	ldr	r0, [r4, #0]
 8005a24:	4632      	mov	r2, r6
 8005a26:	4641      	mov	r1, r8
 8005a28:	f000 fb64 	bl	80060f4 <memmove>
 8005a2c:	68a3      	ldr	r3, [r4, #8]
 8005a2e:	1b9b      	subs	r3, r3, r6
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	4433      	add	r3, r6
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	462a      	mov	r2, r5
 8005a40:	f000 fb89 	bl	8006156 <_realloc_r>
 8005a44:	4606      	mov	r6, r0
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d1e0      	bne.n	8005a0c <__ssputs_r+0x5c>
 8005a4a:	6921      	ldr	r1, [r4, #16]
 8005a4c:	4650      	mov	r0, sl
 8005a4e:	f7ff feaf 	bl	80057b0 <_free_r>
 8005a52:	230c      	movs	r3, #12
 8005a54:	f8ca 3000 	str.w	r3, [sl]
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5e:	81a3      	strh	r3, [r4, #12]
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a64:	e7e9      	b.n	8005a3a <__ssputs_r+0x8a>
	...

08005a68 <_svfiprintf_r>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	4698      	mov	r8, r3
 8005a6e:	898b      	ldrh	r3, [r1, #12]
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	b09d      	sub	sp, #116	@ 0x74
 8005a74:	4607      	mov	r7, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	4614      	mov	r4, r2
 8005a7a:	d510      	bpl.n	8005a9e <_svfiprintf_r+0x36>
 8005a7c:	690b      	ldr	r3, [r1, #16]
 8005a7e:	b973      	cbnz	r3, 8005a9e <_svfiprintf_r+0x36>
 8005a80:	2140      	movs	r1, #64	@ 0x40
 8005a82:	f7ff ff09 	bl	8005898 <_malloc_r>
 8005a86:	6028      	str	r0, [r5, #0]
 8005a88:	6128      	str	r0, [r5, #16]
 8005a8a:	b930      	cbnz	r0, 8005a9a <_svfiprintf_r+0x32>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a94:	b01d      	add	sp, #116	@ 0x74
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	2340      	movs	r3, #64	@ 0x40
 8005a9c:	616b      	str	r3, [r5, #20]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa2:	2320      	movs	r3, #32
 8005aa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aac:	2330      	movs	r3, #48	@ 0x30
 8005aae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c4c <_svfiprintf_r+0x1e4>
 8005ab2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ab6:	f04f 0901 	mov.w	r9, #1
 8005aba:	4623      	mov	r3, r4
 8005abc:	469a      	mov	sl, r3
 8005abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac2:	b10a      	cbz	r2, 8005ac8 <_svfiprintf_r+0x60>
 8005ac4:	2a25      	cmp	r2, #37	@ 0x25
 8005ac6:	d1f9      	bne.n	8005abc <_svfiprintf_r+0x54>
 8005ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8005acc:	d00b      	beq.n	8005ae6 <_svfiprintf_r+0x7e>
 8005ace:	465b      	mov	r3, fp
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f7ff ff6b 	bl	80059b0 <__ssputs_r>
 8005ada:	3001      	adds	r0, #1
 8005adc:	f000 80a7 	beq.w	8005c2e <_svfiprintf_r+0x1c6>
 8005ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae2:	445a      	add	r2, fp
 8005ae4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 809f 	beq.w	8005c2e <_svfiprintf_r+0x1c6>
 8005af0:	2300      	movs	r3, #0
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afa:	f10a 0a01 	add.w	sl, sl, #1
 8005afe:	9304      	str	r3, [sp, #16]
 8005b00:	9307      	str	r3, [sp, #28]
 8005b02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b06:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b08:	4654      	mov	r4, sl
 8005b0a:	2205      	movs	r2, #5
 8005b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b10:	484e      	ldr	r0, [pc, #312]	@ (8005c4c <_svfiprintf_r+0x1e4>)
 8005b12:	f7fa fb65 	bl	80001e0 <memchr>
 8005b16:	9a04      	ldr	r2, [sp, #16]
 8005b18:	b9d8      	cbnz	r0, 8005b52 <_svfiprintf_r+0xea>
 8005b1a:	06d0      	lsls	r0, r2, #27
 8005b1c:	bf44      	itt	mi
 8005b1e:	2320      	movmi	r3, #32
 8005b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b24:	0711      	lsls	r1, r2, #28
 8005b26:	bf44      	itt	mi
 8005b28:	232b      	movmi	r3, #43	@ 0x2b
 8005b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b34:	d015      	beq.n	8005b62 <_svfiprintf_r+0xfa>
 8005b36:	9a07      	ldr	r2, [sp, #28]
 8005b38:	4654      	mov	r4, sl
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f04f 0c0a 	mov.w	ip, #10
 8005b40:	4621      	mov	r1, r4
 8005b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b46:	3b30      	subs	r3, #48	@ 0x30
 8005b48:	2b09      	cmp	r3, #9
 8005b4a:	d94b      	bls.n	8005be4 <_svfiprintf_r+0x17c>
 8005b4c:	b1b0      	cbz	r0, 8005b7c <_svfiprintf_r+0x114>
 8005b4e:	9207      	str	r2, [sp, #28]
 8005b50:	e014      	b.n	8005b7c <_svfiprintf_r+0x114>
 8005b52:	eba0 0308 	sub.w	r3, r0, r8
 8005b56:	fa09 f303 	lsl.w	r3, r9, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	46a2      	mov	sl, r4
 8005b60:	e7d2      	b.n	8005b08 <_svfiprintf_r+0xa0>
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	1d19      	adds	r1, r3, #4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	9103      	str	r1, [sp, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bfbb      	ittet	lt
 8005b6e:	425b      	neglt	r3, r3
 8005b70:	f042 0202 	orrlt.w	r2, r2, #2
 8005b74:	9307      	strge	r3, [sp, #28]
 8005b76:	9307      	strlt	r3, [sp, #28]
 8005b78:	bfb8      	it	lt
 8005b7a:	9204      	strlt	r2, [sp, #16]
 8005b7c:	7823      	ldrb	r3, [r4, #0]
 8005b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b80:	d10a      	bne.n	8005b98 <_svfiprintf_r+0x130>
 8005b82:	7863      	ldrb	r3, [r4, #1]
 8005b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b86:	d132      	bne.n	8005bee <_svfiprintf_r+0x186>
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	9203      	str	r2, [sp, #12]
 8005b90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b94:	3402      	adds	r4, #2
 8005b96:	9305      	str	r3, [sp, #20]
 8005b98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c5c <_svfiprintf_r+0x1f4>
 8005b9c:	7821      	ldrb	r1, [r4, #0]
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	4650      	mov	r0, sl
 8005ba2:	f7fa fb1d 	bl	80001e0 <memchr>
 8005ba6:	b138      	cbz	r0, 8005bb8 <_svfiprintf_r+0x150>
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	eba0 000a 	sub.w	r0, r0, sl
 8005bae:	2240      	movs	r2, #64	@ 0x40
 8005bb0:	4082      	lsls	r2, r0
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	4824      	ldr	r0, [pc, #144]	@ (8005c50 <_svfiprintf_r+0x1e8>)
 8005bbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bc2:	2206      	movs	r2, #6
 8005bc4:	f7fa fb0c 	bl	80001e0 <memchr>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d036      	beq.n	8005c3a <_svfiprintf_r+0x1d2>
 8005bcc:	4b21      	ldr	r3, [pc, #132]	@ (8005c54 <_svfiprintf_r+0x1ec>)
 8005bce:	bb1b      	cbnz	r3, 8005c18 <_svfiprintf_r+0x1b0>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	3307      	adds	r3, #7
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	3308      	adds	r3, #8
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bde:	4433      	add	r3, r6
 8005be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005be2:	e76a      	b.n	8005aba <_svfiprintf_r+0x52>
 8005be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be8:	460c      	mov	r4, r1
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7a8      	b.n	8005b40 <_svfiprintf_r+0xd8>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c00:	3a30      	subs	r2, #48	@ 0x30
 8005c02:	2a09      	cmp	r2, #9
 8005c04:	d903      	bls.n	8005c0e <_svfiprintf_r+0x1a6>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0c6      	beq.n	8005b98 <_svfiprintf_r+0x130>
 8005c0a:	9105      	str	r1, [sp, #20]
 8005c0c:	e7c4      	b.n	8005b98 <_svfiprintf_r+0x130>
 8005c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c12:	4604      	mov	r4, r0
 8005c14:	2301      	movs	r3, #1
 8005c16:	e7f0      	b.n	8005bfa <_svfiprintf_r+0x192>
 8005c18:	ab03      	add	r3, sp, #12
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <_svfiprintf_r+0x1f0>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	4638      	mov	r0, r7
 8005c24:	f3af 8000 	nop.w
 8005c28:	1c42      	adds	r2, r0, #1
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	d1d6      	bne.n	8005bdc <_svfiprintf_r+0x174>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	065b      	lsls	r3, r3, #25
 8005c32:	f53f af2d 	bmi.w	8005a90 <_svfiprintf_r+0x28>
 8005c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c38:	e72c      	b.n	8005a94 <_svfiprintf_r+0x2c>
 8005c3a:	ab03      	add	r3, sp, #12
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <_svfiprintf_r+0x1f0>)
 8005c42:	a904      	add	r1, sp, #16
 8005c44:	4638      	mov	r0, r7
 8005c46:	f000 f879 	bl	8005d3c <_printf_i>
 8005c4a:	e7ed      	b.n	8005c28 <_svfiprintf_r+0x1c0>
 8005c4c:	08006857 	.word	0x08006857
 8005c50:	08006861 	.word	0x08006861
 8005c54:	00000000 	.word	0x00000000
 8005c58:	080059b1 	.word	0x080059b1
 8005c5c:	0800685d 	.word	0x0800685d

08005c60 <_printf_common>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	4616      	mov	r6, r2
 8005c66:	4698      	mov	r8, r3
 8005c68:	688a      	ldr	r2, [r1, #8]
 8005c6a:	690b      	ldr	r3, [r1, #16]
 8005c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bfb8      	it	lt
 8005c74:	4613      	movlt	r3, r2
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	b10a      	cbz	r2, 8005c86 <_printf_common+0x26>
 8005c82:	3301      	adds	r3, #1
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	0699      	lsls	r1, r3, #26
 8005c8a:	bf42      	ittt	mi
 8005c8c:	6833      	ldrmi	r3, [r6, #0]
 8005c8e:	3302      	addmi	r3, #2
 8005c90:	6033      	strmi	r3, [r6, #0]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d106      	bne.n	8005ca8 <_printf_common+0x48>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	6832      	ldr	r2, [r6, #0]
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	42ab      	cmp	r3, r5
 8005ca6:	dc26      	bgt.n	8005cf6 <_printf_common+0x96>
 8005ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	3b00      	subs	r3, #0
 8005cb0:	bf18      	it	ne
 8005cb2:	2301      	movne	r3, #1
 8005cb4:	0692      	lsls	r2, r2, #26
 8005cb6:	d42b      	bmi.n	8005d10 <_printf_common+0xb0>
 8005cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c8      	blx	r9
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d01e      	beq.n	8005d04 <_printf_common+0xa4>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	6922      	ldr	r2, [r4, #16]
 8005cca:	f003 0306 	and.w	r3, r3, #6
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	bf02      	ittt	eq
 8005cd2:	68e5      	ldreq	r5, [r4, #12]
 8005cd4:	6833      	ldreq	r3, [r6, #0]
 8005cd6:	1aed      	subeq	r5, r5, r3
 8005cd8:	68a3      	ldr	r3, [r4, #8]
 8005cda:	bf0c      	ite	eq
 8005cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce0:	2500      	movne	r5, #0
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bfc4      	itt	gt
 8005ce6:	1a9b      	subgt	r3, r3, r2
 8005ce8:	18ed      	addgt	r5, r5, r3
 8005cea:	2600      	movs	r6, #0
 8005cec:	341a      	adds	r4, #26
 8005cee:	42b5      	cmp	r5, r6
 8005cf0:	d11a      	bne.n	8005d28 <_printf_common+0xc8>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e008      	b.n	8005d08 <_printf_common+0xa8>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	47c8      	blx	r9
 8005d00:	3001      	adds	r0, #1
 8005d02:	d103      	bne.n	8005d0c <_printf_common+0xac>
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0c:	3501      	adds	r5, #1
 8005d0e:	e7c6      	b.n	8005c9e <_printf_common+0x3e>
 8005d10:	18e1      	adds	r1, r4, r3
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	2030      	movs	r0, #48	@ 0x30
 8005d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d1a:	4422      	add	r2, r4
 8005d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d24:	3302      	adds	r3, #2
 8005d26:	e7c7      	b.n	8005cb8 <_printf_common+0x58>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c8      	blx	r9
 8005d32:	3001      	adds	r0, #1
 8005d34:	d0e6      	beq.n	8005d04 <_printf_common+0xa4>
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7d9      	b.n	8005cee <_printf_common+0x8e>
	...

08005d3c <_printf_i>:
 8005d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	7e0f      	ldrb	r7, [r1, #24]
 8005d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d44:	2f78      	cmp	r7, #120	@ 0x78
 8005d46:	4691      	mov	r9, r2
 8005d48:	4680      	mov	r8, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	469a      	mov	sl, r3
 8005d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d52:	d807      	bhi.n	8005d64 <_printf_i+0x28>
 8005d54:	2f62      	cmp	r7, #98	@ 0x62
 8005d56:	d80a      	bhi.n	8005d6e <_printf_i+0x32>
 8005d58:	2f00      	cmp	r7, #0
 8005d5a:	f000 80d1 	beq.w	8005f00 <_printf_i+0x1c4>
 8005d5e:	2f58      	cmp	r7, #88	@ 0x58
 8005d60:	f000 80b8 	beq.w	8005ed4 <_printf_i+0x198>
 8005d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d6c:	e03a      	b.n	8005de4 <_printf_i+0xa8>
 8005d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d72:	2b15      	cmp	r3, #21
 8005d74:	d8f6      	bhi.n	8005d64 <_printf_i+0x28>
 8005d76:	a101      	add	r1, pc, #4	@ (adr r1, 8005d7c <_printf_i+0x40>)
 8005d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d7c:	08005dd5 	.word	0x08005dd5
 8005d80:	08005de9 	.word	0x08005de9
 8005d84:	08005d65 	.word	0x08005d65
 8005d88:	08005d65 	.word	0x08005d65
 8005d8c:	08005d65 	.word	0x08005d65
 8005d90:	08005d65 	.word	0x08005d65
 8005d94:	08005de9 	.word	0x08005de9
 8005d98:	08005d65 	.word	0x08005d65
 8005d9c:	08005d65 	.word	0x08005d65
 8005da0:	08005d65 	.word	0x08005d65
 8005da4:	08005d65 	.word	0x08005d65
 8005da8:	08005ee7 	.word	0x08005ee7
 8005dac:	08005e13 	.word	0x08005e13
 8005db0:	08005ea1 	.word	0x08005ea1
 8005db4:	08005d65 	.word	0x08005d65
 8005db8:	08005d65 	.word	0x08005d65
 8005dbc:	08005f09 	.word	0x08005f09
 8005dc0:	08005d65 	.word	0x08005d65
 8005dc4:	08005e13 	.word	0x08005e13
 8005dc8:	08005d65 	.word	0x08005d65
 8005dcc:	08005d65 	.word	0x08005d65
 8005dd0:	08005ea9 	.word	0x08005ea9
 8005dd4:	6833      	ldr	r3, [r6, #0]
 8005dd6:	1d1a      	adds	r2, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6032      	str	r2, [r6, #0]
 8005ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de4:	2301      	movs	r3, #1
 8005de6:	e09c      	b.n	8005f22 <_printf_i+0x1e6>
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	6031      	str	r1, [r6, #0]
 8005df0:	0606      	lsls	r6, r0, #24
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0xbc>
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	e003      	b.n	8005e00 <_printf_i+0xc4>
 8005df8:	0645      	lsls	r5, r0, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0xb8>
 8005dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	da03      	bge.n	8005e0c <_printf_i+0xd0>
 8005e04:	232d      	movs	r3, #45	@ 0x2d
 8005e06:	426d      	negs	r5, r5
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e0c:	4858      	ldr	r0, [pc, #352]	@ (8005f70 <_printf_i+0x234>)
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e011      	b.n	8005e36 <_printf_i+0xfa>
 8005e12:	6821      	ldr	r1, [r4, #0]
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	0608      	lsls	r0, r1, #24
 8005e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e1c:	d402      	bmi.n	8005e24 <_printf_i+0xe8>
 8005e1e:	0649      	lsls	r1, r1, #25
 8005e20:	bf48      	it	mi
 8005e22:	b2ad      	uxthmi	r5, r5
 8005e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e26:	4852      	ldr	r0, [pc, #328]	@ (8005f70 <_printf_i+0x234>)
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	bf14      	ite	ne
 8005e2c:	230a      	movne	r3, #10
 8005e2e:	2308      	moveq	r3, #8
 8005e30:	2100      	movs	r1, #0
 8005e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e36:	6866      	ldr	r6, [r4, #4]
 8005e38:	60a6      	str	r6, [r4, #8]
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	db05      	blt.n	8005e4a <_printf_i+0x10e>
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	432e      	orrs	r6, r5
 8005e42:	f021 0104 	bic.w	r1, r1, #4
 8005e46:	6021      	str	r1, [r4, #0]
 8005e48:	d04b      	beq.n	8005ee2 <_printf_i+0x1a6>
 8005e4a:	4616      	mov	r6, r2
 8005e4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e50:	fb03 5711 	mls	r7, r3, r1, r5
 8005e54:	5dc7      	ldrb	r7, [r0, r7]
 8005e56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e5a:	462f      	mov	r7, r5
 8005e5c:	42bb      	cmp	r3, r7
 8005e5e:	460d      	mov	r5, r1
 8005e60:	d9f4      	bls.n	8005e4c <_printf_i+0x110>
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d10b      	bne.n	8005e7e <_printf_i+0x142>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	07df      	lsls	r7, r3, #31
 8005e6a:	d508      	bpl.n	8005e7e <_printf_i+0x142>
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	6861      	ldr	r1, [r4, #4]
 8005e70:	4299      	cmp	r1, r3
 8005e72:	bfde      	ittt	le
 8005e74:	2330      	movle	r3, #48	@ 0x30
 8005e76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e7a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e7e:	1b92      	subs	r2, r2, r6
 8005e80:	6122      	str	r2, [r4, #16]
 8005e82:	f8cd a000 	str.w	sl, [sp]
 8005e86:	464b      	mov	r3, r9
 8005e88:	aa03      	add	r2, sp, #12
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	f7ff fee7 	bl	8005c60 <_printf_common>
 8005e92:	3001      	adds	r0, #1
 8005e94:	d14a      	bne.n	8005f2c <_printf_i+0x1f0>
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e9a:	b004      	add	sp, #16
 8005e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	4832      	ldr	r0, [pc, #200]	@ (8005f74 <_printf_i+0x238>)
 8005eaa:	2778      	movs	r7, #120	@ 0x78
 8005eac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6831      	ldr	r1, [r6, #0]
 8005eb4:	061f      	lsls	r7, r3, #24
 8005eb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eba:	d402      	bmi.n	8005ec2 <_printf_i+0x186>
 8005ebc:	065f      	lsls	r7, r3, #25
 8005ebe:	bf48      	it	mi
 8005ec0:	b2ad      	uxthmi	r5, r5
 8005ec2:	6031      	str	r1, [r6, #0]
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	bf44      	itt	mi
 8005ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ecc:	6023      	strmi	r3, [r4, #0]
 8005ece:	b11d      	cbz	r5, 8005ed8 <_printf_i+0x19c>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	e7ad      	b.n	8005e30 <_printf_i+0xf4>
 8005ed4:	4826      	ldr	r0, [pc, #152]	@ (8005f70 <_printf_i+0x234>)
 8005ed6:	e7e9      	b.n	8005eac <_printf_i+0x170>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f023 0320 	bic.w	r3, r3, #32
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	e7f6      	b.n	8005ed0 <_printf_i+0x194>
 8005ee2:	4616      	mov	r6, r2
 8005ee4:	e7bd      	b.n	8005e62 <_printf_i+0x126>
 8005ee6:	6833      	ldr	r3, [r6, #0]
 8005ee8:	6825      	ldr	r5, [r4, #0]
 8005eea:	6961      	ldr	r1, [r4, #20]
 8005eec:	1d18      	adds	r0, r3, #4
 8005eee:	6030      	str	r0, [r6, #0]
 8005ef0:	062e      	lsls	r6, r5, #24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	d501      	bpl.n	8005efa <_printf_i+0x1be>
 8005ef6:	6019      	str	r1, [r3, #0]
 8005ef8:	e002      	b.n	8005f00 <_printf_i+0x1c4>
 8005efa:	0668      	lsls	r0, r5, #25
 8005efc:	d5fb      	bpl.n	8005ef6 <_printf_i+0x1ba>
 8005efe:	8019      	strh	r1, [r3, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	4616      	mov	r6, r2
 8005f06:	e7bc      	b.n	8005e82 <_printf_i+0x146>
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	6032      	str	r2, [r6, #0]
 8005f0e:	681e      	ldr	r6, [r3, #0]
 8005f10:	6862      	ldr	r2, [r4, #4]
 8005f12:	2100      	movs	r1, #0
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7fa f963 	bl	80001e0 <memchr>
 8005f1a:	b108      	cbz	r0, 8005f20 <_printf_i+0x1e4>
 8005f1c:	1b80      	subs	r0, r0, r6
 8005f1e:	6060      	str	r0, [r4, #4]
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	2300      	movs	r3, #0
 8005f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f2a:	e7aa      	b.n	8005e82 <_printf_i+0x146>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	4632      	mov	r2, r6
 8005f30:	4649      	mov	r1, r9
 8005f32:	4640      	mov	r0, r8
 8005f34:	47d0      	blx	sl
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0ad      	beq.n	8005e96 <_printf_i+0x15a>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	079b      	lsls	r3, r3, #30
 8005f3e:	d413      	bmi.n	8005f68 <_printf_i+0x22c>
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	4298      	cmp	r0, r3
 8005f46:	bfb8      	it	lt
 8005f48:	4618      	movlt	r0, r3
 8005f4a:	e7a6      	b.n	8005e9a <_printf_i+0x15e>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4632      	mov	r2, r6
 8005f50:	4649      	mov	r1, r9
 8005f52:	4640      	mov	r0, r8
 8005f54:	47d0      	blx	sl
 8005f56:	3001      	adds	r0, #1
 8005f58:	d09d      	beq.n	8005e96 <_printf_i+0x15a>
 8005f5a:	3501      	adds	r5, #1
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	9903      	ldr	r1, [sp, #12]
 8005f60:	1a5b      	subs	r3, r3, r1
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	dcf2      	bgt.n	8005f4c <_printf_i+0x210>
 8005f66:	e7eb      	b.n	8005f40 <_printf_i+0x204>
 8005f68:	2500      	movs	r5, #0
 8005f6a:	f104 0619 	add.w	r6, r4, #25
 8005f6e:	e7f5      	b.n	8005f5c <_printf_i+0x220>
 8005f70:	08006868 	.word	0x08006868
 8005f74:	08006879 	.word	0x08006879

08005f78 <__sflush_r>:
 8005f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	0716      	lsls	r6, r2, #28
 8005f82:	4605      	mov	r5, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	d454      	bmi.n	8006032 <__sflush_r+0xba>
 8005f88:	684b      	ldr	r3, [r1, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dc02      	bgt.n	8005f94 <__sflush_r+0x1c>
 8005f8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	dd48      	ble.n	8006026 <__sflush_r+0xae>
 8005f94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	d045      	beq.n	8006026 <__sflush_r+0xae>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fa0:	682f      	ldr	r7, [r5, #0]
 8005fa2:	6a21      	ldr	r1, [r4, #32]
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	d030      	beq.n	800600a <__sflush_r+0x92>
 8005fa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	0759      	lsls	r1, r3, #29
 8005fae:	d505      	bpl.n	8005fbc <__sflush_r+0x44>
 8005fb0:	6863      	ldr	r3, [r4, #4]
 8005fb2:	1ad2      	subs	r2, r2, r3
 8005fb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fb6:	b10b      	cbz	r3, 8005fbc <__sflush_r+0x44>
 8005fb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fc0:	6a21      	ldr	r1, [r4, #32]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b0      	blx	r6
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	d106      	bne.n	8005fda <__sflush_r+0x62>
 8005fcc:	6829      	ldr	r1, [r5, #0]
 8005fce:	291d      	cmp	r1, #29
 8005fd0:	d82b      	bhi.n	800602a <__sflush_r+0xb2>
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800607c <__sflush_r+0x104>)
 8005fd4:	40ca      	lsrs	r2, r1
 8005fd6:	07d6      	lsls	r6, r2, #31
 8005fd8:	d527      	bpl.n	800602a <__sflush_r+0xb2>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6062      	str	r2, [r4, #4]
 8005fde:	04d9      	lsls	r1, r3, #19
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	6022      	str	r2, [r4, #0]
 8005fe4:	d504      	bpl.n	8005ff0 <__sflush_r+0x78>
 8005fe6:	1c42      	adds	r2, r0, #1
 8005fe8:	d101      	bne.n	8005fee <__sflush_r+0x76>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b903      	cbnz	r3, 8005ff0 <__sflush_r+0x78>
 8005fee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ff2:	602f      	str	r7, [r5, #0]
 8005ff4:	b1b9      	cbz	r1, 8006026 <__sflush_r+0xae>
 8005ff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	d002      	beq.n	8006004 <__sflush_r+0x8c>
 8005ffe:	4628      	mov	r0, r5
 8006000:	f7ff fbd6 	bl	80057b0 <_free_r>
 8006004:	2300      	movs	r3, #0
 8006006:	6363      	str	r3, [r4, #52]	@ 0x34
 8006008:	e00d      	b.n	8006026 <__sflush_r+0xae>
 800600a:	2301      	movs	r3, #1
 800600c:	4628      	mov	r0, r5
 800600e:	47b0      	blx	r6
 8006010:	4602      	mov	r2, r0
 8006012:	1c50      	adds	r0, r2, #1
 8006014:	d1c9      	bne.n	8005faa <__sflush_r+0x32>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0c6      	beq.n	8005faa <__sflush_r+0x32>
 800601c:	2b1d      	cmp	r3, #29
 800601e:	d001      	beq.n	8006024 <__sflush_r+0xac>
 8006020:	2b16      	cmp	r3, #22
 8006022:	d11e      	bne.n	8006062 <__sflush_r+0xea>
 8006024:	602f      	str	r7, [r5, #0]
 8006026:	2000      	movs	r0, #0
 8006028:	e022      	b.n	8006070 <__sflush_r+0xf8>
 800602a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800602e:	b21b      	sxth	r3, r3
 8006030:	e01b      	b.n	800606a <__sflush_r+0xf2>
 8006032:	690f      	ldr	r7, [r1, #16]
 8006034:	2f00      	cmp	r7, #0
 8006036:	d0f6      	beq.n	8006026 <__sflush_r+0xae>
 8006038:	0793      	lsls	r3, r2, #30
 800603a:	680e      	ldr	r6, [r1, #0]
 800603c:	bf08      	it	eq
 800603e:	694b      	ldreq	r3, [r1, #20]
 8006040:	600f      	str	r7, [r1, #0]
 8006042:	bf18      	it	ne
 8006044:	2300      	movne	r3, #0
 8006046:	eba6 0807 	sub.w	r8, r6, r7
 800604a:	608b      	str	r3, [r1, #8]
 800604c:	f1b8 0f00 	cmp.w	r8, #0
 8006050:	dde9      	ble.n	8006026 <__sflush_r+0xae>
 8006052:	6a21      	ldr	r1, [r4, #32]
 8006054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006056:	4643      	mov	r3, r8
 8006058:	463a      	mov	r2, r7
 800605a:	4628      	mov	r0, r5
 800605c:	47b0      	blx	r6
 800605e:	2800      	cmp	r0, #0
 8006060:	dc08      	bgt.n	8006074 <__sflush_r+0xfc>
 8006062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006074:	4407      	add	r7, r0
 8006076:	eba8 0800 	sub.w	r8, r8, r0
 800607a:	e7e7      	b.n	800604c <__sflush_r+0xd4>
 800607c:	20400001 	.word	0x20400001

08006080 <_fflush_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	4605      	mov	r5, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b913      	cbnz	r3, 8006090 <_fflush_r+0x10>
 800608a:	2500      	movs	r5, #0
 800608c:	4628      	mov	r0, r5
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	b118      	cbz	r0, 800609a <_fflush_r+0x1a>
 8006092:	6a03      	ldr	r3, [r0, #32]
 8006094:	b90b      	cbnz	r3, 800609a <_fflush_r+0x1a>
 8006096:	f7ff f9e9 	bl	800546c <__sinit>
 800609a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f3      	beq.n	800608a <_fflush_r+0xa>
 80060a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060a4:	07d0      	lsls	r0, r2, #31
 80060a6:	d404      	bmi.n	80060b2 <_fflush_r+0x32>
 80060a8:	0599      	lsls	r1, r3, #22
 80060aa:	d402      	bmi.n	80060b2 <_fflush_r+0x32>
 80060ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ae:	f7ff fb50 	bl	8005752 <__retarget_lock_acquire_recursive>
 80060b2:	4628      	mov	r0, r5
 80060b4:	4621      	mov	r1, r4
 80060b6:	f7ff ff5f 	bl	8005f78 <__sflush_r>
 80060ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060bc:	07da      	lsls	r2, r3, #31
 80060be:	4605      	mov	r5, r0
 80060c0:	d4e4      	bmi.n	800608c <_fflush_r+0xc>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	059b      	lsls	r3, r3, #22
 80060c6:	d4e1      	bmi.n	800608c <_fflush_r+0xc>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f7ff fb43 	bl	8005754 <__retarget_lock_release_recursive>
 80060ce:	e7dd      	b.n	800608c <_fflush_r+0xc>

080060d0 <fiprintf>:
 80060d0:	b40e      	push	{r1, r2, r3}
 80060d2:	b503      	push	{r0, r1, lr}
 80060d4:	4601      	mov	r1, r0
 80060d6:	ab03      	add	r3, sp, #12
 80060d8:	4805      	ldr	r0, [pc, #20]	@ (80060f0 <fiprintf+0x20>)
 80060da:	f853 2b04 	ldr.w	r2, [r3], #4
 80060de:	6800      	ldr	r0, [r0, #0]
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	f000 f88f 	bl	8006204 <_vfiprintf_r>
 80060e6:	b002      	add	sp, #8
 80060e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060ec:	b003      	add	sp, #12
 80060ee:	4770      	bx	lr
 80060f0:	2000001c 	.word	0x2000001c

080060f4 <memmove>:
 80060f4:	4288      	cmp	r0, r1
 80060f6:	b510      	push	{r4, lr}
 80060f8:	eb01 0402 	add.w	r4, r1, r2
 80060fc:	d902      	bls.n	8006104 <memmove+0x10>
 80060fe:	4284      	cmp	r4, r0
 8006100:	4623      	mov	r3, r4
 8006102:	d807      	bhi.n	8006114 <memmove+0x20>
 8006104:	1e43      	subs	r3, r0, #1
 8006106:	42a1      	cmp	r1, r4
 8006108:	d008      	beq.n	800611c <memmove+0x28>
 800610a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800610e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006112:	e7f8      	b.n	8006106 <memmove+0x12>
 8006114:	4402      	add	r2, r0
 8006116:	4601      	mov	r1, r0
 8006118:	428a      	cmp	r2, r1
 800611a:	d100      	bne.n	800611e <memmove+0x2a>
 800611c:	bd10      	pop	{r4, pc}
 800611e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006126:	e7f7      	b.n	8006118 <memmove+0x24>

08006128 <_sbrk_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d06      	ldr	r5, [pc, #24]	@ (8006144 <_sbrk_r+0x1c>)
 800612c:	2300      	movs	r3, #0
 800612e:	4604      	mov	r4, r0
 8006130:	4608      	mov	r0, r1
 8006132:	602b      	str	r3, [r5, #0]
 8006134:	f7fa fe32 	bl	8000d9c <_sbrk>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_sbrk_r+0x1a>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	b103      	cbz	r3, 8006142 <_sbrk_r+0x1a>
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	2000425c 	.word	0x2000425c

08006148 <abort>:
 8006148:	b508      	push	{r3, lr}
 800614a:	2006      	movs	r0, #6
 800614c:	f000 fa2e 	bl	80065ac <raise>
 8006150:	2001      	movs	r0, #1
 8006152:	f7fa fdab 	bl	8000cac <_exit>

08006156 <_realloc_r>:
 8006156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615a:	4607      	mov	r7, r0
 800615c:	4614      	mov	r4, r2
 800615e:	460d      	mov	r5, r1
 8006160:	b921      	cbnz	r1, 800616c <_realloc_r+0x16>
 8006162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006166:	4611      	mov	r1, r2
 8006168:	f7ff bb96 	b.w	8005898 <_malloc_r>
 800616c:	b92a      	cbnz	r2, 800617a <_realloc_r+0x24>
 800616e:	f7ff fb1f 	bl	80057b0 <_free_r>
 8006172:	4625      	mov	r5, r4
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800617a:	f000 fa33 	bl	80065e4 <_malloc_usable_size_r>
 800617e:	4284      	cmp	r4, r0
 8006180:	4606      	mov	r6, r0
 8006182:	d802      	bhi.n	800618a <_realloc_r+0x34>
 8006184:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006188:	d8f4      	bhi.n	8006174 <_realloc_r+0x1e>
 800618a:	4621      	mov	r1, r4
 800618c:	4638      	mov	r0, r7
 800618e:	f7ff fb83 	bl	8005898 <_malloc_r>
 8006192:	4680      	mov	r8, r0
 8006194:	b908      	cbnz	r0, 800619a <_realloc_r+0x44>
 8006196:	4645      	mov	r5, r8
 8006198:	e7ec      	b.n	8006174 <_realloc_r+0x1e>
 800619a:	42b4      	cmp	r4, r6
 800619c:	4622      	mov	r2, r4
 800619e:	4629      	mov	r1, r5
 80061a0:	bf28      	it	cs
 80061a2:	4632      	movcs	r2, r6
 80061a4:	f7ff fad7 	bl	8005756 <memcpy>
 80061a8:	4629      	mov	r1, r5
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff fb00 	bl	80057b0 <_free_r>
 80061b0:	e7f1      	b.n	8006196 <_realloc_r+0x40>

080061b2 <__sfputc_r>:
 80061b2:	6893      	ldr	r3, [r2, #8]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	b410      	push	{r4}
 80061ba:	6093      	str	r3, [r2, #8]
 80061bc:	da08      	bge.n	80061d0 <__sfputc_r+0x1e>
 80061be:	6994      	ldr	r4, [r2, #24]
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	db01      	blt.n	80061c8 <__sfputc_r+0x16>
 80061c4:	290a      	cmp	r1, #10
 80061c6:	d103      	bne.n	80061d0 <__sfputc_r+0x1e>
 80061c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061cc:	f000 b932 	b.w	8006434 <__swbuf_r>
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	1c58      	adds	r0, r3, #1
 80061d4:	6010      	str	r0, [r2, #0]
 80061d6:	7019      	strb	r1, [r3, #0]
 80061d8:	4608      	mov	r0, r1
 80061da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <__sfputs_r>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	4606      	mov	r6, r0
 80061e4:	460f      	mov	r7, r1
 80061e6:	4614      	mov	r4, r2
 80061e8:	18d5      	adds	r5, r2, r3
 80061ea:	42ac      	cmp	r4, r5
 80061ec:	d101      	bne.n	80061f2 <__sfputs_r+0x12>
 80061ee:	2000      	movs	r0, #0
 80061f0:	e007      	b.n	8006202 <__sfputs_r+0x22>
 80061f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f6:	463a      	mov	r2, r7
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff ffda 	bl	80061b2 <__sfputc_r>
 80061fe:	1c43      	adds	r3, r0, #1
 8006200:	d1f3      	bne.n	80061ea <__sfputs_r+0xa>
 8006202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006204 <_vfiprintf_r>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	460d      	mov	r5, r1
 800620a:	b09d      	sub	sp, #116	@ 0x74
 800620c:	4614      	mov	r4, r2
 800620e:	4698      	mov	r8, r3
 8006210:	4606      	mov	r6, r0
 8006212:	b118      	cbz	r0, 800621c <_vfiprintf_r+0x18>
 8006214:	6a03      	ldr	r3, [r0, #32]
 8006216:	b90b      	cbnz	r3, 800621c <_vfiprintf_r+0x18>
 8006218:	f7ff f928 	bl	800546c <__sinit>
 800621c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d405      	bmi.n	800622e <_vfiprintf_r+0x2a>
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	059a      	lsls	r2, r3, #22
 8006226:	d402      	bmi.n	800622e <_vfiprintf_r+0x2a>
 8006228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800622a:	f7ff fa92 	bl	8005752 <__retarget_lock_acquire_recursive>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	071b      	lsls	r3, r3, #28
 8006232:	d501      	bpl.n	8006238 <_vfiprintf_r+0x34>
 8006234:	692b      	ldr	r3, [r5, #16]
 8006236:	b99b      	cbnz	r3, 8006260 <_vfiprintf_r+0x5c>
 8006238:	4629      	mov	r1, r5
 800623a:	4630      	mov	r0, r6
 800623c:	f000 f938 	bl	80064b0 <__swsetup_r>
 8006240:	b170      	cbz	r0, 8006260 <_vfiprintf_r+0x5c>
 8006242:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006244:	07dc      	lsls	r4, r3, #31
 8006246:	d504      	bpl.n	8006252 <_vfiprintf_r+0x4e>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800624c:	b01d      	add	sp, #116	@ 0x74
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	0598      	lsls	r0, r3, #22
 8006256:	d4f7      	bmi.n	8006248 <_vfiprintf_r+0x44>
 8006258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800625a:	f7ff fa7b 	bl	8005754 <__retarget_lock_release_recursive>
 800625e:	e7f3      	b.n	8006248 <_vfiprintf_r+0x44>
 8006260:	2300      	movs	r3, #0
 8006262:	9309      	str	r3, [sp, #36]	@ 0x24
 8006264:	2320      	movs	r3, #32
 8006266:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800626a:	f8cd 800c 	str.w	r8, [sp, #12]
 800626e:	2330      	movs	r3, #48	@ 0x30
 8006270:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006420 <_vfiprintf_r+0x21c>
 8006274:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006278:	f04f 0901 	mov.w	r9, #1
 800627c:	4623      	mov	r3, r4
 800627e:	469a      	mov	sl, r3
 8006280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006284:	b10a      	cbz	r2, 800628a <_vfiprintf_r+0x86>
 8006286:	2a25      	cmp	r2, #37	@ 0x25
 8006288:	d1f9      	bne.n	800627e <_vfiprintf_r+0x7a>
 800628a:	ebba 0b04 	subs.w	fp, sl, r4
 800628e:	d00b      	beq.n	80062a8 <_vfiprintf_r+0xa4>
 8006290:	465b      	mov	r3, fp
 8006292:	4622      	mov	r2, r4
 8006294:	4629      	mov	r1, r5
 8006296:	4630      	mov	r0, r6
 8006298:	f7ff ffa2 	bl	80061e0 <__sfputs_r>
 800629c:	3001      	adds	r0, #1
 800629e:	f000 80a7 	beq.w	80063f0 <_vfiprintf_r+0x1ec>
 80062a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a4:	445a      	add	r2, fp
 80062a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80062a8:	f89a 3000 	ldrb.w	r3, [sl]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 809f 	beq.w	80063f0 <_vfiprintf_r+0x1ec>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062bc:	f10a 0a01 	add.w	sl, sl, #1
 80062c0:	9304      	str	r3, [sp, #16]
 80062c2:	9307      	str	r3, [sp, #28]
 80062c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80062ca:	4654      	mov	r4, sl
 80062cc:	2205      	movs	r2, #5
 80062ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d2:	4853      	ldr	r0, [pc, #332]	@ (8006420 <_vfiprintf_r+0x21c>)
 80062d4:	f7f9 ff84 	bl	80001e0 <memchr>
 80062d8:	9a04      	ldr	r2, [sp, #16]
 80062da:	b9d8      	cbnz	r0, 8006314 <_vfiprintf_r+0x110>
 80062dc:	06d1      	lsls	r1, r2, #27
 80062de:	bf44      	itt	mi
 80062e0:	2320      	movmi	r3, #32
 80062e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e6:	0713      	lsls	r3, r2, #28
 80062e8:	bf44      	itt	mi
 80062ea:	232b      	movmi	r3, #43	@ 0x2b
 80062ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f0:	f89a 3000 	ldrb.w	r3, [sl]
 80062f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f6:	d015      	beq.n	8006324 <_vfiprintf_r+0x120>
 80062f8:	9a07      	ldr	r2, [sp, #28]
 80062fa:	4654      	mov	r4, sl
 80062fc:	2000      	movs	r0, #0
 80062fe:	f04f 0c0a 	mov.w	ip, #10
 8006302:	4621      	mov	r1, r4
 8006304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006308:	3b30      	subs	r3, #48	@ 0x30
 800630a:	2b09      	cmp	r3, #9
 800630c:	d94b      	bls.n	80063a6 <_vfiprintf_r+0x1a2>
 800630e:	b1b0      	cbz	r0, 800633e <_vfiprintf_r+0x13a>
 8006310:	9207      	str	r2, [sp, #28]
 8006312:	e014      	b.n	800633e <_vfiprintf_r+0x13a>
 8006314:	eba0 0308 	sub.w	r3, r0, r8
 8006318:	fa09 f303 	lsl.w	r3, r9, r3
 800631c:	4313      	orrs	r3, r2
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	46a2      	mov	sl, r4
 8006322:	e7d2      	b.n	80062ca <_vfiprintf_r+0xc6>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	1d19      	adds	r1, r3, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	9103      	str	r1, [sp, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfbb      	ittet	lt
 8006330:	425b      	neglt	r3, r3
 8006332:	f042 0202 	orrlt.w	r2, r2, #2
 8006336:	9307      	strge	r3, [sp, #28]
 8006338:	9307      	strlt	r3, [sp, #28]
 800633a:	bfb8      	it	lt
 800633c:	9204      	strlt	r2, [sp, #16]
 800633e:	7823      	ldrb	r3, [r4, #0]
 8006340:	2b2e      	cmp	r3, #46	@ 0x2e
 8006342:	d10a      	bne.n	800635a <_vfiprintf_r+0x156>
 8006344:	7863      	ldrb	r3, [r4, #1]
 8006346:	2b2a      	cmp	r3, #42	@ 0x2a
 8006348:	d132      	bne.n	80063b0 <_vfiprintf_r+0x1ac>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	1d1a      	adds	r2, r3, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9203      	str	r2, [sp, #12]
 8006352:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006356:	3402      	adds	r4, #2
 8006358:	9305      	str	r3, [sp, #20]
 800635a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006430 <_vfiprintf_r+0x22c>
 800635e:	7821      	ldrb	r1, [r4, #0]
 8006360:	2203      	movs	r2, #3
 8006362:	4650      	mov	r0, sl
 8006364:	f7f9 ff3c 	bl	80001e0 <memchr>
 8006368:	b138      	cbz	r0, 800637a <_vfiprintf_r+0x176>
 800636a:	9b04      	ldr	r3, [sp, #16]
 800636c:	eba0 000a 	sub.w	r0, r0, sl
 8006370:	2240      	movs	r2, #64	@ 0x40
 8006372:	4082      	lsls	r2, r0
 8006374:	4313      	orrs	r3, r2
 8006376:	3401      	adds	r4, #1
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637e:	4829      	ldr	r0, [pc, #164]	@ (8006424 <_vfiprintf_r+0x220>)
 8006380:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006384:	2206      	movs	r2, #6
 8006386:	f7f9 ff2b 	bl	80001e0 <memchr>
 800638a:	2800      	cmp	r0, #0
 800638c:	d03f      	beq.n	800640e <_vfiprintf_r+0x20a>
 800638e:	4b26      	ldr	r3, [pc, #152]	@ (8006428 <_vfiprintf_r+0x224>)
 8006390:	bb1b      	cbnz	r3, 80063da <_vfiprintf_r+0x1d6>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	3307      	adds	r3, #7
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	3308      	adds	r3, #8
 800639c:	9303      	str	r3, [sp, #12]
 800639e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a0:	443b      	add	r3, r7
 80063a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a4:	e76a      	b.n	800627c <_vfiprintf_r+0x78>
 80063a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063aa:	460c      	mov	r4, r1
 80063ac:	2001      	movs	r0, #1
 80063ae:	e7a8      	b.n	8006302 <_vfiprintf_r+0xfe>
 80063b0:	2300      	movs	r3, #0
 80063b2:	3401      	adds	r4, #1
 80063b4:	9305      	str	r3, [sp, #20]
 80063b6:	4619      	mov	r1, r3
 80063b8:	f04f 0c0a 	mov.w	ip, #10
 80063bc:	4620      	mov	r0, r4
 80063be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c2:	3a30      	subs	r2, #48	@ 0x30
 80063c4:	2a09      	cmp	r2, #9
 80063c6:	d903      	bls.n	80063d0 <_vfiprintf_r+0x1cc>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0c6      	beq.n	800635a <_vfiprintf_r+0x156>
 80063cc:	9105      	str	r1, [sp, #20]
 80063ce:	e7c4      	b.n	800635a <_vfiprintf_r+0x156>
 80063d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063d4:	4604      	mov	r4, r0
 80063d6:	2301      	movs	r3, #1
 80063d8:	e7f0      	b.n	80063bc <_vfiprintf_r+0x1b8>
 80063da:	ab03      	add	r3, sp, #12
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	462a      	mov	r2, r5
 80063e0:	4b12      	ldr	r3, [pc, #72]	@ (800642c <_vfiprintf_r+0x228>)
 80063e2:	a904      	add	r1, sp, #16
 80063e4:	4630      	mov	r0, r6
 80063e6:	f3af 8000 	nop.w
 80063ea:	4607      	mov	r7, r0
 80063ec:	1c78      	adds	r0, r7, #1
 80063ee:	d1d6      	bne.n	800639e <_vfiprintf_r+0x19a>
 80063f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063f2:	07d9      	lsls	r1, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_vfiprintf_r+0x1fe>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	059a      	lsls	r2, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_vfiprintf_r+0x1fe>
 80063fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063fe:	f7ff f9a9 	bl	8005754 <__retarget_lock_release_recursive>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	065b      	lsls	r3, r3, #25
 8006406:	f53f af1f 	bmi.w	8006248 <_vfiprintf_r+0x44>
 800640a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800640c:	e71e      	b.n	800624c <_vfiprintf_r+0x48>
 800640e:	ab03      	add	r3, sp, #12
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	462a      	mov	r2, r5
 8006414:	4b05      	ldr	r3, [pc, #20]	@ (800642c <_vfiprintf_r+0x228>)
 8006416:	a904      	add	r1, sp, #16
 8006418:	4630      	mov	r0, r6
 800641a:	f7ff fc8f 	bl	8005d3c <_printf_i>
 800641e:	e7e4      	b.n	80063ea <_vfiprintf_r+0x1e6>
 8006420:	08006857 	.word	0x08006857
 8006424:	08006861 	.word	0x08006861
 8006428:	00000000 	.word	0x00000000
 800642c:	080061e1 	.word	0x080061e1
 8006430:	0800685d 	.word	0x0800685d

08006434 <__swbuf_r>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	460e      	mov	r6, r1
 8006438:	4614      	mov	r4, r2
 800643a:	4605      	mov	r5, r0
 800643c:	b118      	cbz	r0, 8006446 <__swbuf_r+0x12>
 800643e:	6a03      	ldr	r3, [r0, #32]
 8006440:	b90b      	cbnz	r3, 8006446 <__swbuf_r+0x12>
 8006442:	f7ff f813 	bl	800546c <__sinit>
 8006446:	69a3      	ldr	r3, [r4, #24]
 8006448:	60a3      	str	r3, [r4, #8]
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	071a      	lsls	r2, r3, #28
 800644e:	d501      	bpl.n	8006454 <__swbuf_r+0x20>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	b943      	cbnz	r3, 8006466 <__swbuf_r+0x32>
 8006454:	4621      	mov	r1, r4
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f82a 	bl	80064b0 <__swsetup_r>
 800645c:	b118      	cbz	r0, 8006466 <__swbuf_r+0x32>
 800645e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006462:	4638      	mov	r0, r7
 8006464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	1a98      	subs	r0, r3, r2
 800646c:	6963      	ldr	r3, [r4, #20]
 800646e:	b2f6      	uxtb	r6, r6
 8006470:	4283      	cmp	r3, r0
 8006472:	4637      	mov	r7, r6
 8006474:	dc05      	bgt.n	8006482 <__swbuf_r+0x4e>
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f7ff fe01 	bl	8006080 <_fflush_r>
 800647e:	2800      	cmp	r0, #0
 8006480:	d1ed      	bne.n	800645e <__swbuf_r+0x2a>
 8006482:	68a3      	ldr	r3, [r4, #8]
 8006484:	3b01      	subs	r3, #1
 8006486:	60a3      	str	r3, [r4, #8]
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	6022      	str	r2, [r4, #0]
 800648e:	701e      	strb	r6, [r3, #0]
 8006490:	6962      	ldr	r2, [r4, #20]
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	429a      	cmp	r2, r3
 8006496:	d004      	beq.n	80064a2 <__swbuf_r+0x6e>
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	07db      	lsls	r3, r3, #31
 800649c:	d5e1      	bpl.n	8006462 <__swbuf_r+0x2e>
 800649e:	2e0a      	cmp	r6, #10
 80064a0:	d1df      	bne.n	8006462 <__swbuf_r+0x2e>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f7ff fdeb 	bl	8006080 <_fflush_r>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0d9      	beq.n	8006462 <__swbuf_r+0x2e>
 80064ae:	e7d6      	b.n	800645e <__swbuf_r+0x2a>

080064b0 <__swsetup_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4b29      	ldr	r3, [pc, #164]	@ (8006558 <__swsetup_r+0xa8>)
 80064b4:	4605      	mov	r5, r0
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	460c      	mov	r4, r1
 80064ba:	b118      	cbz	r0, 80064c4 <__swsetup_r+0x14>
 80064bc:	6a03      	ldr	r3, [r0, #32]
 80064be:	b90b      	cbnz	r3, 80064c4 <__swsetup_r+0x14>
 80064c0:	f7fe ffd4 	bl	800546c <__sinit>
 80064c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c8:	0719      	lsls	r1, r3, #28
 80064ca:	d422      	bmi.n	8006512 <__swsetup_r+0x62>
 80064cc:	06da      	lsls	r2, r3, #27
 80064ce:	d407      	bmi.n	80064e0 <__swsetup_r+0x30>
 80064d0:	2209      	movs	r2, #9
 80064d2:	602a      	str	r2, [r5, #0]
 80064d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064de:	e033      	b.n	8006548 <__swsetup_r+0x98>
 80064e0:	0758      	lsls	r0, r3, #29
 80064e2:	d512      	bpl.n	800650a <__swsetup_r+0x5a>
 80064e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064e6:	b141      	cbz	r1, 80064fa <__swsetup_r+0x4a>
 80064e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064ec:	4299      	cmp	r1, r3
 80064ee:	d002      	beq.n	80064f6 <__swsetup_r+0x46>
 80064f0:	4628      	mov	r0, r5
 80064f2:	f7ff f95d 	bl	80057b0 <_free_r>
 80064f6:	2300      	movs	r3, #0
 80064f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	2300      	movs	r3, #0
 8006504:	6063      	str	r3, [r4, #4]
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f043 0308 	orr.w	r3, r3, #8
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	b94b      	cbnz	r3, 800652a <__swsetup_r+0x7a>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800651c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006520:	d003      	beq.n	800652a <__swsetup_r+0x7a>
 8006522:	4621      	mov	r1, r4
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f88b 	bl	8006640 <__smakebuf_r>
 800652a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652e:	f013 0201 	ands.w	r2, r3, #1
 8006532:	d00a      	beq.n	800654a <__swsetup_r+0x9a>
 8006534:	2200      	movs	r2, #0
 8006536:	60a2      	str	r2, [r4, #8]
 8006538:	6962      	ldr	r2, [r4, #20]
 800653a:	4252      	negs	r2, r2
 800653c:	61a2      	str	r2, [r4, #24]
 800653e:	6922      	ldr	r2, [r4, #16]
 8006540:	b942      	cbnz	r2, 8006554 <__swsetup_r+0xa4>
 8006542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006546:	d1c5      	bne.n	80064d4 <__swsetup_r+0x24>
 8006548:	bd38      	pop	{r3, r4, r5, pc}
 800654a:	0799      	lsls	r1, r3, #30
 800654c:	bf58      	it	pl
 800654e:	6962      	ldrpl	r2, [r4, #20]
 8006550:	60a2      	str	r2, [r4, #8]
 8006552:	e7f4      	b.n	800653e <__swsetup_r+0x8e>
 8006554:	2000      	movs	r0, #0
 8006556:	e7f7      	b.n	8006548 <__swsetup_r+0x98>
 8006558:	2000001c 	.word	0x2000001c

0800655c <_raise_r>:
 800655c:	291f      	cmp	r1, #31
 800655e:	b538      	push	{r3, r4, r5, lr}
 8006560:	4605      	mov	r5, r0
 8006562:	460c      	mov	r4, r1
 8006564:	d904      	bls.n	8006570 <_raise_r+0x14>
 8006566:	2316      	movs	r3, #22
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006572:	b112      	cbz	r2, 800657a <_raise_r+0x1e>
 8006574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006578:	b94b      	cbnz	r3, 800658e <_raise_r+0x32>
 800657a:	4628      	mov	r0, r5
 800657c:	f000 f830 	bl	80065e0 <_getpid_r>
 8006580:	4622      	mov	r2, r4
 8006582:	4601      	mov	r1, r0
 8006584:	4628      	mov	r0, r5
 8006586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800658a:	f000 b817 	b.w	80065bc <_kill_r>
 800658e:	2b01      	cmp	r3, #1
 8006590:	d00a      	beq.n	80065a8 <_raise_r+0x4c>
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	d103      	bne.n	800659e <_raise_r+0x42>
 8006596:	2316      	movs	r3, #22
 8006598:	6003      	str	r3, [r0, #0]
 800659a:	2001      	movs	r0, #1
 800659c:	e7e7      	b.n	800656e <_raise_r+0x12>
 800659e:	2100      	movs	r1, #0
 80065a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065a4:	4620      	mov	r0, r4
 80065a6:	4798      	blx	r3
 80065a8:	2000      	movs	r0, #0
 80065aa:	e7e0      	b.n	800656e <_raise_r+0x12>

080065ac <raise>:
 80065ac:	4b02      	ldr	r3, [pc, #8]	@ (80065b8 <raise+0xc>)
 80065ae:	4601      	mov	r1, r0
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	f7ff bfd3 	b.w	800655c <_raise_r>
 80065b6:	bf00      	nop
 80065b8:	2000001c 	.word	0x2000001c

080065bc <_kill_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d07      	ldr	r5, [pc, #28]	@ (80065dc <_kill_r+0x20>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	4611      	mov	r1, r2
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	f7fa fb5f 	bl	8000c8c <_kill>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d102      	bne.n	80065d8 <_kill_r+0x1c>
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	b103      	cbz	r3, 80065d8 <_kill_r+0x1c>
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	bd38      	pop	{r3, r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	2000425c 	.word	0x2000425c

080065e0 <_getpid_r>:
 80065e0:	f7fa bb4c 	b.w	8000c7c <_getpid>

080065e4 <_malloc_usable_size_r>:
 80065e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e8:	1f18      	subs	r0, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfbc      	itt	lt
 80065ee:	580b      	ldrlt	r3, [r1, r0]
 80065f0:	18c0      	addlt	r0, r0, r3
 80065f2:	4770      	bx	lr

080065f4 <__swhatbuf_r>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	460c      	mov	r4, r1
 80065f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fc:	2900      	cmp	r1, #0
 80065fe:	b096      	sub	sp, #88	@ 0x58
 8006600:	4615      	mov	r5, r2
 8006602:	461e      	mov	r6, r3
 8006604:	da0d      	bge.n	8006622 <__swhatbuf_r+0x2e>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	bf14      	ite	ne
 8006612:	2340      	movne	r3, #64	@ 0x40
 8006614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006618:	2000      	movs	r0, #0
 800661a:	6031      	str	r1, [r6, #0]
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	b016      	add	sp, #88	@ 0x58
 8006620:	bd70      	pop	{r4, r5, r6, pc}
 8006622:	466a      	mov	r2, sp
 8006624:	f000 f848 	bl	80066b8 <_fstat_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	dbec      	blt.n	8006606 <__swhatbuf_r+0x12>
 800662c:	9901      	ldr	r1, [sp, #4]
 800662e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006636:	4259      	negs	r1, r3
 8006638:	4159      	adcs	r1, r3
 800663a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800663e:	e7eb      	b.n	8006618 <__swhatbuf_r+0x24>

08006640 <__smakebuf_r>:
 8006640:	898b      	ldrh	r3, [r1, #12]
 8006642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006644:	079d      	lsls	r5, r3, #30
 8006646:	4606      	mov	r6, r0
 8006648:	460c      	mov	r4, r1
 800664a:	d507      	bpl.n	800665c <__smakebuf_r+0x1c>
 800664c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	2301      	movs	r3, #1
 8006656:	6163      	str	r3, [r4, #20]
 8006658:	b003      	add	sp, #12
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665c:	ab01      	add	r3, sp, #4
 800665e:	466a      	mov	r2, sp
 8006660:	f7ff ffc8 	bl	80065f4 <__swhatbuf_r>
 8006664:	9f00      	ldr	r7, [sp, #0]
 8006666:	4605      	mov	r5, r0
 8006668:	4639      	mov	r1, r7
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff f914 	bl	8005898 <_malloc_r>
 8006670:	b948      	cbnz	r0, 8006686 <__smakebuf_r+0x46>
 8006672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006676:	059a      	lsls	r2, r3, #22
 8006678:	d4ee      	bmi.n	8006658 <__smakebuf_r+0x18>
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	f043 0302 	orr.w	r3, r3, #2
 8006682:	81a3      	strh	r3, [r4, #12]
 8006684:	e7e2      	b.n	800664c <__smakebuf_r+0xc>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	6020      	str	r0, [r4, #0]
 800668a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006696:	b15b      	cbz	r3, 80066b0 <__smakebuf_r+0x70>
 8006698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669c:	4630      	mov	r0, r6
 800669e:	f000 f81d 	bl	80066dc <_isatty_r>
 80066a2:	b128      	cbz	r0, 80066b0 <__smakebuf_r+0x70>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	431d      	orrs	r5, r3
 80066b4:	81a5      	strh	r5, [r4, #12]
 80066b6:	e7cf      	b.n	8006658 <__smakebuf_r+0x18>

080066b8 <_fstat_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	@ (80066d8 <_fstat_r+0x20>)
 80066bc:	2300      	movs	r3, #0
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	f7fa fb41 	bl	8000d4c <_fstat>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d102      	bne.n	80066d4 <_fstat_r+0x1c>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b103      	cbz	r3, 80066d4 <_fstat_r+0x1c>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
 80066d6:	bf00      	nop
 80066d8:	2000425c 	.word	0x2000425c

080066dc <_isatty_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	@ (80066f8 <_isatty_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa fb40 	bl	8000d6c <_isatty>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_isatty_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_isatty_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	2000425c 	.word	0x2000425c

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
