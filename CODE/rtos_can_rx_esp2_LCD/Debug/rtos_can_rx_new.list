
rtos_can_rx_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ec  080055ec  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055ec  080055ec  000065ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f4  080055f4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080055fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          0000424c  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042ac  200042ac  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014cd9  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e33  00000000  00000000  0001bd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0001eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de9  00000000  00000000  0001fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023370  00000000  00000000  00020b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e8a  00000000  00000000  00043ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d68f8  00000000  00000000  00056d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d663  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005024  00000000  00000000  0012d6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001326cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005500 	.word	0x08005500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005500 	.word	0x08005500

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	2000011c 	.word	0x2000011c

080005e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  // Get received message
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80005ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 fe7a 	bl	80012e8 <HAL_CAN_GetRxMessage>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d12c      	bne.n	8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
  {
    if (RxHeader.StdId == 0x0A9 && RxHeader.DLC >= 4)
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2ba9      	cmp	r3, #169	@ 0xa9
 8000600:	d128      	bne.n	8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d924      	bls.n	8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
    {
      // Extract 16-bit sensor values from data bytes
      LDR_Value  = (RxData[0] << 8) | RxData[1];
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b21b      	sxth	r3, r3
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000622:	801a      	strh	r2, [r3, #0]
      MQ5_Value  = (RxData[2] << 8) | RxData[3];
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	b21b      	sxth	r3, r3
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	b21a      	sxth	r2, r3
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800063c:	801a      	strh	r2, [r3, #0]
      Temp_Value = (RxData[4] << 8) | RxData[5];
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000640:	795a      	ldrb	r2, [r3, #5]
 8000642:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000644:	701a      	strb	r2, [r3, #0]
      Hum_Value  = (RxData[6] << 8) | RxData[7];
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000648:	79da      	ldrb	r2, [r3, #7]
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800064c:	701a      	strb	r2, [r3, #0]
      dataReady  = 1;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200003b0 	.word	0x200003b0
 8000660:	20000394 	.word	0x20000394
 8000664:	200003ba 	.word	0x200003ba
 8000668:	200003bc 	.word	0x200003bc
 800066c:	200003be 	.word	0x200003be
 8000670:	200003bf 	.word	0x200003bf
 8000674:	200003b8 	.word	0x200003b8

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b08e      	sub	sp, #56	@ 0x38
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fbd3 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f83f 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f927 	bl	80008d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800068a:	f000 f8a5 	bl	80007d8 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800068e:	f000 f8f9 	bl	8000884 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000692:	4817      	ldr	r0, [pc, #92]	@ (80006f0 <main+0x78>)
 8000694:	f000 fde4 	bl	8001260 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING );
 8000698:	2102      	movs	r1, #2
 800069a:	4815      	ldr	r0, [pc, #84]	@ (80006f0 <main+0x78>)
 800069c:	f000 ff46 	bl	800152c <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <main+0x7c>)
 80006a2:	f107 041c 	add.w	r4, r7, #28
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 ffb5 	bl	800362a <osThreadCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0d      	ldr	r2, [pc, #52]	@ (80006f8 <main+0x80>)
 80006c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(CANRxTask, canRxTask, osPriorityIdle, 0, 128);
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <main+0x84>)
 80006c8:	463c      	mov	r4, r7
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CANRxTaskHandle = osThreadCreate(osThread(CANRxTask), NULL);
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 ffa4 	bl	800362a <osThreadCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <main+0x88>)
 80006e6:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f002 ff98 	bl	800361c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <main+0x74>
 80006f0:	2000031c 	.word	0x2000031c
 80006f4:	08005524 	.word	0x08005524
 80006f8:	2000038c 	.word	0x2000038c
 80006fc:	0800554c 	.word	0x0800554c
 8000700:	20000390 	.word	0x20000390

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fa18 	bl	8004b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000778:	2348      	movs	r3, #72	@ 0x48
 800077a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000780:	2307      	movs	r3, #7
 8000782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fbbd 	bl	8001f08 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f960 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fe1e 	bl	80023f8 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f949 	bl	8000a58 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007e0:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <MX_CAN1_Init+0xa8>)
 80007e2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007e6:	2212      	movs	r2, #18
 80007e8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_CAN1_Init+0xa4>)
 80007f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_CAN1_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_CAN1_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000828:	4814      	ldr	r0, [pc, #80]	@ (800087c <MX_CAN1_Init+0xa4>)
 800082a:	f000 fb3f 	bl	8000eac <HAL_CAN_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 f910 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;

    canFilterConfig.FilterActivation = ENABLE;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
    canFilterConfig.FilterBank = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
    canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
    canFilterConfig.FilterIdHigh = 0x0A9 << 5;  // Standard ID in top bits
 8000844:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8000848:	603b      	str	r3, [r7, #0]
    canFilterConfig.FilterIdLow = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
    canFilterConfig.FilterMaskIdHigh = 0x7FF << 5;  // Match only 0x0A9
 800084e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000852:	60bb      	str	r3, [r7, #8]
    canFilterConfig.FilterMaskIdLow = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_CAN1_Init+0xa4>)
 8000866:	f000 fc1d 	bl	80010a4 <HAL_CAN_ConfigFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_CAN1_Init+0x9c>
    {
      Error_Handler();
 8000870:	f000 f8f2 	bl	8000a58 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000031c 	.word	0x2000031c
 8000880:	40006400 	.word	0x40006400

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <MX_USART2_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008bc:	f002 fa8a 	bl	8002dd4 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f8c7 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000344 	.word	0x20000344
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <MX_GPIO_Init+0x9c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000974 <MX_GPIO_Init+0x9c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_GPIO_Init+0x9c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_GPIO_Init+0x9c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <MX_GPIO_Init+0x9c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_GPIO_Init+0x9c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_GPIO_Init+0x9c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <MX_GPIO_Init+0x9c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_GPIO_Init+0x9c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000948:	480b      	ldr	r0, [pc, #44]	@ (8000978 <MX_GPIO_Init+0xa0>)
 800094a:	f001 fac3 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800094e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_GPIO_Init+0xa0>)
 8000968:	f001 f918 	bl	8001b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020c00 	.word	0x40020c00

0800097c <canRxTask>:

/* USER CODE BEGIN 4 */
void canRxTask(void const * argument)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b09f      	sub	sp, #124	@ 0x7c
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
  char uartMsg[100];
  for (;;)
  {
    if (dataReady)
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <canRxTask+0x88>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d036      	beq.n	80009fc <canRxTask+0x80>
    {
      sprintf(uartMsg, "LDR: %u  MQ5: %u  TEMP:%u  Humidity: %u%% \r\n", LDR_Value, MQ5_Value, Temp_Value, Hum_Value);
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <canRxTask+0x8c>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <canRxTask+0x90>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	461c      	mov	r4, r3
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <canRxTask+0x94>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <canRxTask+0x98>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	9200      	str	r2, [sp, #0]
 80009ac:	4623      	mov	r3, r4
 80009ae:	460a      	mov	r2, r1
 80009b0:	4919      	ldr	r1, [pc, #100]	@ (8000a18 <canRxTask+0x9c>)
 80009b2:	f004 f8a7 	bl	8004b04 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f107 010c 	add.w	r1, r7, #12
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009cc:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <canRxTask+0xa0>)
 80009ce:	f002 fa51 	bl	8002e74 <HAL_UART_Transmit>

      // Optional: LED control example (turn on if LDR < 2000)
      if (LDR_Value < 2000)
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <canRxTask+0x8c>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80009da:	d206      	bcs.n	80009ea <canRxTask+0x6e>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e2:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <canRxTask+0xa4>)
 80009e4:	f001 fa76 	bl	8001ed4 <HAL_GPIO_WritePin>
 80009e8:	e005      	b.n	80009f6 <canRxTask+0x7a>
      else
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f0:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <canRxTask+0xa4>)
 80009f2:	f001 fa6f 	bl	8001ed4 <HAL_GPIO_WritePin>

      dataReady = 0;
 80009f6:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <canRxTask+0x88>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
    }
    osDelay(100);
 80009fc:	2064      	movs	r0, #100	@ 0x64
 80009fe:	f002 fe60 	bl	80036c2 <osDelay>
    if (dataReady)
 8000a02:	e7bf      	b.n	8000984 <canRxTask+0x8>
 8000a04:	200003b8 	.word	0x200003b8
 8000a08:	200003ba 	.word	0x200003ba
 8000a0c:	200003bc 	.word	0x200003bc
 8000a10:	200003be 	.word	0x200003be
 8000a14:	200003bf 	.word	0x200003bf
 8000a18:	08005568 	.word	0x08005568
 8000a1c:	20000344 	.word	0x20000344
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f002 fe48 	bl	80036c2 <osDelay>
 8000a32:	e7fb      	b.n	8000a2c <StartDefaultTask+0x8>

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a46:	f000 fa11 	bl	8000e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40001000 	.word	0x40001000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f001 f84d 	bl	8001b48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <HAL_CAN_MspInit+0x94>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d134      	bne.n	8000b48 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b28:	2309      	movs	r3, #9
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <HAL_CAN_MspInit+0x9c>)
 8000b34:	f001 f832 	bl	8001b9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f001 f803 	bl	8001b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b42:	2014      	movs	r0, #20
 8000b44:	f001 f81c 	bl	8001b80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40006400 	.word	0x40006400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400

08000b5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_UART_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bb6:	2360      	movs	r3, #96	@ 0x60
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_UART_MspInit+0x8c>)
 8000bd2:	f000 ffe3 	bl	8001b9c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020c00 	.word	0x40020c00

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	@ 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c18:	f107 0210 	add.w	r2, r7, #16
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fe08 	bl	8002838 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c32:	f001 fdd9 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8000c36:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c38:	e004      	b.n	8000c44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3a:	f001 fdd5 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c46:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <HAL_InitTick+0xe8>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_InitTick+0xf0>)
 8000c56:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c7a:	f001 fe0f 	bl	800289c <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d11b      	bne.n	8000cc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c8c:	4812      	ldr	r0, [pc, #72]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c8e:	f001 fe5f 	bl	8002950 <HAL_TIM_Base_Start_IT>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d111      	bne.n	8000cc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca0:	2036      	movs	r0, #54	@ 0x36
 8000ca2:	f000 ff6d 	bl	8001b80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d808      	bhi.n	8000cbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2036      	movs	r0, #54	@ 0x36
 8000cb2:	f000 ff49 	bl	8001b48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_InitTick+0xf4>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e002      	b.n	8000cc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3738      	adds	r7, #56	@ 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	200003c0 	.word	0x200003c0
 8000cdc:	40001000 	.word	0x40001000
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <CAN1_RX0_IRQHandler+0x10>)
 8000d22:	f000 fc29 	bl	8001578 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000031c 	.word	0x2000031c

08000d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <TIM6_DAC_IRQHandler+0x10>)
 8000d36:	f001 fe7b 	bl	8002a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200003c0 	.word	0x200003c0

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f003 ff4e 	bl	8004c14 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	20000408 	.word	0x20000408
 8000dac:	200042b0 	.word	0x200042b0

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f003 ff0d 	bl	8004c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fc37 	bl	8000678 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e18:	080055fc 	.word	0x080055fc
  ldr r2, =_sbss
 8000e1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e20:	200042ac 	.word	0x200042ac

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	@ (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 fe6e 	bl	8001b32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f7ff fec8 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fe02 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	2000040c 	.word	0x2000040c

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000040c 	.word	0x2000040c

08000eac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e0ed      	b.n	800109a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fdf6 	bl	8000abc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee0:	f7ff ffd8 	bl	8000e94 <HAL_GetTick>
 8000ee4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ee6:	e012      	b.n	8000f0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee8:	f7ff ffd4 	bl	8000e94 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b0a      	cmp	r3, #10
 8000ef4:	d90b      	bls.n	8000f0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2205      	movs	r2, #5
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0c5      	b.n	800109a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0e5      	beq.n	8000ee8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0202 	bic.w	r2, r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f2c:	f7ff ffb2 	bl	8000e94 <HAL_GetTick>
 8000f30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f32:	e012      	b.n	8000f5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f34:	f7ff ffae 	bl	8000e94 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	d90b      	bls.n	8000f5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2205      	movs	r2, #5
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e09f      	b.n	800109a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e5      	bne.n	8000f34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7e1b      	ldrb	r3, [r3, #24]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d108      	bne.n	8000f82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e007      	b.n	8000f92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e5b      	ldrb	r3, [r3, #25]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e007      	b.n	8000fbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7e9b      	ldrb	r3, [r3, #26]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0220 	orr.w	r2, r2, #32
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0220 	bic.w	r2, r2, #32
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7edb      	ldrb	r3, [r3, #27]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0210 	bic.w	r2, r2, #16
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0210 	orr.w	r2, r2, #16
 800100e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7f1b      	ldrb	r3, [r3, #28]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d108      	bne.n	800102a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0208 	orr.w	r2, r2, #8
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e007      	b.n	800103a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0208 	bic.w	r2, r2, #8
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7f5b      	ldrb	r3, [r3, #29]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d108      	bne.n	8001054 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0204 	orr.w	r2, r2, #4
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e007      	b.n	8001064 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0204 	bic.w	r2, r2, #4
 8001062:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	ea42 0103 	orr.w	r1, r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d003      	beq.n	80010c4 <HAL_CAN_ConfigFilter+0x20>
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	f040 80be 	bne.w	8001240 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010c4:	4b65      	ldr	r3, [pc, #404]	@ (800125c <HAL_CAN_ConfigFilter+0x1b8>)
 80010c6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010de:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	431a      	orrs	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	2201      	movs	r2, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d123      	bne.n	800116e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001148:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	3248      	adds	r2, #72	@ 0x48
 800114e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001162:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001164:	6939      	ldr	r1, [r7, #16]
 8001166:	3348      	adds	r3, #72	@ 0x48
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d122      	bne.n	80011bc <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	431a      	orrs	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3248      	adds	r2, #72	@ 0x48
 800119c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	3348      	adds	r3, #72	@ 0x48
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d109      	bne.n	80011d8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d109      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001202:	e007      	b.n	8001214 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	431a      	orrs	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	431a      	orrs	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001232:	f023 0201 	bic.w	r2, r3, #1
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e006      	b.n	800124e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40006400 	.word	0x40006400

08001260 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d12e      	bne.n	80012d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0201 	bic.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800128c:	f7ff fe02 	bl	8000e94 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001292:	e012      	b.n	80012ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001294:	f7ff fdfe 	bl	8000e94 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b0a      	cmp	r3, #10
 80012a0:	d90b      	bls.n	80012ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2205      	movs	r2, #5
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e012      	b.n	80012e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e5      	bne.n	8001294 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e006      	b.n	80012e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
  }
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d003      	beq.n	800130c <HAL_CAN_GetRxMessage+0x24>
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b02      	cmp	r3, #2
 8001308:	f040 8103 	bne.w	8001512 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10e      	bne.n	8001330 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d116      	bne.n	800134e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0f7      	b.n	8001520 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0e8      	b.n	8001520 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	331b      	adds	r3, #27
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0204 	and.w	r2, r3, #4
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10c      	bne.n	8001386 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	331b      	adds	r3, #27
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0d5b      	lsrs	r3, r3, #21
 800137c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e00b      	b.n	800139e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	331b      	adds	r3, #27
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	331b      	adds	r3, #27
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0202 	and.w	r2, r3, #2
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	331b      	adds	r3, #27
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2208      	movs	r2, #8
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	e00b      	b.n	80013ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	331b      	adds	r3, #27
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	3304      	adds	r3, #4
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 020f 	and.w	r2, r3, #15
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	331b      	adds	r3, #27
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	3304      	adds	r3, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	331b      	adds	r3, #27
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	3304      	adds	r3, #4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0c1b      	lsrs	r3, r3, #16
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0a1a      	lsrs	r2, r3, #8
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0c1a      	lsrs	r2, r3, #16
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3302      	adds	r3, #2
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0e1a      	lsrs	r2, r3, #24
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	3303      	adds	r3, #3
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3304      	adds	r3, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0a1a      	lsrs	r2, r3, #8
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3305      	adds	r3, #5
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0c1a      	lsrs	r2, r3, #16
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3306      	adds	r3, #6
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0e1a      	lsrs	r2, r3, #24
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3307      	adds	r3, #7
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	e007      	b.n	800150e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e006      	b.n	8001520 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d002      	beq.n	800154a <HAL_CAN_ActivateNotification+0x1e>
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d109      	bne.n	800155e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6959      	ldr	r1, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e006      	b.n	800156c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d07c      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2201      	movs	r2, #1
 80015ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f983 	bl	80018e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80015e0:	e016      	b.n	8001610 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f4:	e00c      	b.n	8001610 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
 8001608:	e002      	b.n	8001610 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f989 	bl	8001922 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001622:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f963 	bl	80018fa <HAL_CAN_TxMailbox1CompleteCallback>
 8001634:	e016      	b.n	8001664 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
 8001648:	e00c      	b.n	8001664 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
 800165c:	e002      	b.n	8001664 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f969 	bl	8001936 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d024      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001676:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f943 	bl	800190e <HAL_CAN_TxMailbox2CompleteCallback>
 8001688:	e016      	b.n	80016b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
 800169c:	e00c      	b.n	80016b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b0:	e002      	b.n	80016b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f949 	bl	800194a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2210      	movs	r2, #16
 80016da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2208      	movs	r2, #8
 80016f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f930 	bl	800195e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff62 	bl	80005e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00c      	beq.n	8001740 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2210      	movs	r2, #16
 800173e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2208      	movs	r2, #8
 800175a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f912 	bl	8001986 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8f9 	bl	8001972 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8fc 	bl	800199a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2208      	movs	r2, #8
 80017bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8f5 	bl	80019ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d07b      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d072      	beq.n	80018be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001832:	2b00      	cmp	r3, #0
 8001834:	d043      	beq.n	80018be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03e      	beq.n	80018be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001846:	2b60      	cmp	r3, #96	@ 0x60
 8001848:	d02b      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x32a>
 800184a:	2b60      	cmp	r3, #96	@ 0x60
 800184c:	d82e      	bhi.n	80018ac <HAL_CAN_IRQHandler+0x334>
 800184e:	2b50      	cmp	r3, #80	@ 0x50
 8001850:	d022      	beq.n	8001898 <HAL_CAN_IRQHandler+0x320>
 8001852:	2b50      	cmp	r3, #80	@ 0x50
 8001854:	d82a      	bhi.n	80018ac <HAL_CAN_IRQHandler+0x334>
 8001856:	2b40      	cmp	r3, #64	@ 0x40
 8001858:	d019      	beq.n	800188e <HAL_CAN_IRQHandler+0x316>
 800185a:	2b40      	cmp	r3, #64	@ 0x40
 800185c:	d826      	bhi.n	80018ac <HAL_CAN_IRQHandler+0x334>
 800185e:	2b30      	cmp	r3, #48	@ 0x30
 8001860:	d010      	beq.n	8001884 <HAL_CAN_IRQHandler+0x30c>
 8001862:	2b30      	cmp	r3, #48	@ 0x30
 8001864:	d822      	bhi.n	80018ac <HAL_CAN_IRQHandler+0x334>
 8001866:	2b10      	cmp	r3, #16
 8001868:	d002      	beq.n	8001870 <HAL_CAN_IRQHandler+0x2f8>
 800186a:	2b20      	cmp	r3, #32
 800186c:	d005      	beq.n	800187a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800186e:	e01d      	b.n	80018ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001878:	e019      	b.n	80018ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001882:	e014      	b.n	80018ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800188c:	e00f      	b.n	80018ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001896:	e00a      	b.n	80018ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018a0:	e005      	b.n	80018ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018aa:	e000      	b.n	80018ae <HAL_CAN_IRQHandler+0x336>
            break;
 80018ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80018bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2204      	movs	r2, #4
 80018c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f872 	bl	80019c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	@ (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	@ (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	@ (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	@ 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	@ 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff4c 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5a:	f7ff ff61 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	6978      	ldr	r0, [r7, #20]
 8001b66:	f7ff ffb1 	bl	8001acc <NVIC_EncodePriority>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff80 	bl	8001a78 <__NVIC_SetPriority>
}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff54 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e16b      	b.n	8001e90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 815a 	bne.w	8001e8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d005      	beq.n	8001bee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d017      	beq.n	8001c8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80b4 	beq.w	8001e8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b60      	ldr	r3, [pc, #384]	@ (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001eac <HAL_GPIO_Init+0x310>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a52      	ldr	r2, [pc, #328]	@ (8001eb0 <HAL_GPIO_Init+0x314>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a51      	ldr	r2, [pc, #324]	@ (8001eb4 <HAL_GPIO_Init+0x318>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x222>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a50      	ldr	r2, [pc, #320]	@ (8001eb8 <HAL_GPIO_Init+0x31c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x21e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ebc <HAL_GPIO_Init+0x320>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x216>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec4 <HAL_GPIO_Init+0x328>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x212>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec8 <HAL_GPIO_Init+0x32c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x20a>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00e      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001da6:	2308      	movs	r3, #8
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	@ (8001eac <HAL_GPIO_Init+0x310>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e06:	4a32      	ldr	r2, [pc, #200]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e30:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e36:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e84:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae90 	bls.w	8001bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40021c00 	.word	0x40021c00
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	619a      	str	r2, [r3, #24]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e267      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d00c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b85      	ldr	r3, [pc, #532]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d112      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <HAL_RCC_OscConfig+0x108>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d157      	bne.n	8002010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e242      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x74>
 8001f6e:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b6d      	ldr	r3, [pc, #436]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6c      	ldr	r2, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001fa0:	4b69      	ldr	r3, [pc, #420]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a68      	ldr	r2, [pc, #416]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b66      	ldr	r3, [pc, #408]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff68 	bl	8000e94 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7fe ff64 	bl	8000e94 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	@ 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e207      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ff54 	bl	8000e94 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe ff50 	bl	8000e94 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1f3      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d063      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1c7      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4937      	ldr	r1, [pc, #220]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b34      	ldr	r3, [pc, #208]	@ (800214c <HAL_RCC_OscConfig+0x244>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe ff09 	bl	8000e94 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe ff05 	bl	8000e94 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1a8      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4925      	ldr	r1, [pc, #148]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_RCC_OscConfig+0x244>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe fee8 	bl	8000e94 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7fe fee4 	bl	8000e94 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e187      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d036      	beq.n	8002160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_RCC_OscConfig+0x248>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7fe fec8 	bl	8000e94 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe fec4 	bl	8000e94 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e167      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_OscConfig+0x240>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x200>
 8002126:	e01b      	b.n	8002160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x248>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe feb1 	bl	8000e94 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e00e      	b.n	8002154 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fead 	bl	8000e94 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d907      	bls.n	8002154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e150      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	42470000 	.word	0x42470000
 8002150:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ea      	bne.n	8002136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8097 	beq.w	800229c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10f      	bne.n	800219e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a7c      	ldr	r2, [pc, #496]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b7a      	ldr	r3, [pc, #488]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b77      	ldr	r3, [pc, #476]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b74      	ldr	r3, [pc, #464]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a73      	ldr	r2, [pc, #460]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fe6d 	bl	8000e94 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fe69 	bl	8000e94 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e10c      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_OscConfig+0x474>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2ea>
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	4a63      	ldr	r2, [pc, #396]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x324>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x30c>
 80021fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	@ 0x70
 8002206:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a5b      	ldr	r2, [pc, #364]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x324>
 8002214:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002218:	4a57      	ldr	r2, [pc, #348]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002220:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a54      	ldr	r2, [pc, #336]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fe2e 	bl	8000e94 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fe2a 	bl	8000e94 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0cb      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0ee      	beq.n	800223c <HAL_RCC_OscConfig+0x334>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7fe fe18 	bl	8000e94 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fe14 	bl	8000e94 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0b5      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	4b3e      	ldr	r3, [pc, #248]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ee      	bne.n	8002268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	4a38      	ldr	r2, [pc, #224]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a1 	beq.w	80023e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d05c      	beq.n	800236c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d141      	bne.n	800233e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_OscConfig+0x478>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fde8 	bl	8000e94 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fde4 	bl	8000e94 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e087      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	3b01      	subs	r3, #1
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	491b      	ldr	r1, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x478>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fdbd 	bl	8000e94 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fdb9 	bl	8000e94 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e05c      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x416>
 800233c:	e054      	b.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_RCC_OscConfig+0x478>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fda6 	bl	8000e94 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fda2 	bl	8000e94 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e045      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_OscConfig+0x470>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x444>
 800236a:	e03d      	b.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e038      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000
 8002380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002384:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_RCC_OscConfig+0x4ec>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d028      	beq.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d121      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d11a      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	4293      	cmp	r3, r2
 80023be:	d111      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0cc      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b68      	ldr	r3, [pc, #416]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d90c      	bls.n	8002434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b65      	ldr	r3, [pc, #404]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a58      	ldr	r2, [pc, #352]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002456:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800246e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b3f      	ldr	r3, [pc, #252]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e067      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4934      	ldr	r1, [pc, #208]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fcd4 	bl	8000e94 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fcd0 	bl	8000e94 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e04f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d20c      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490a      	ldr	r1, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fb24 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080055a0 	.word	0x080055a0
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c8:	b094      	sub	sp, #80	@ 0x50
 80025ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025dc:	4b79      	ldr	r3, [pc, #484]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d00d      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0x40>
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	f200 80e1 	bhi.w	80027b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x34>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x3a>
 80025f6:	e0db      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4b73      	ldr	r3, [pc, #460]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fc:	e0db      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025fe:	4b73      	ldr	r3, [pc, #460]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002602:	e0d8      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002604:	4b6f      	ldr	r3, [pc, #444]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800260c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260e:	4b6d      	ldr	r3, [pc, #436]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261a:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	2200      	movs	r2, #0
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002624:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262c:	633b      	str	r3, [r7, #48]	@ 0x30
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
 8002632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002636:	4622      	mov	r2, r4
 8002638:	462b      	mov	r3, r5
 800263a:	f04f 0000 	mov.w	r0, #0
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	0159      	lsls	r1, r3, #5
 8002644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002648:	0150      	lsls	r0, r2, #5
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4621      	mov	r1, r4
 8002650:	1a51      	subs	r1, r2, r1
 8002652:	6139      	str	r1, [r7, #16]
 8002654:	4629      	mov	r1, r5
 8002656:	eb63 0301 	sbc.w	r3, r3, r1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002668:	4659      	mov	r1, fp
 800266a:	018b      	lsls	r3, r1, #6
 800266c:	4651      	mov	r1, sl
 800266e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002672:	4651      	mov	r1, sl
 8002674:	018a      	lsls	r2, r1, #6
 8002676:	4651      	mov	r1, sl
 8002678:	ebb2 0801 	subs.w	r8, r2, r1
 800267c:	4659      	mov	r1, fp
 800267e:	eb63 0901 	sbc.w	r9, r3, r1
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002696:	4690      	mov	r8, r2
 8002698:	4699      	mov	r9, r3
 800269a:	4623      	mov	r3, r4
 800269c:	eb18 0303 	adds.w	r3, r8, r3
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	462b      	mov	r3, r5
 80026a4:	eb49 0303 	adc.w	r3, r9, r3
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026b6:	4629      	mov	r1, r5
 80026b8:	024b      	lsls	r3, r1, #9
 80026ba:	4621      	mov	r1, r4
 80026bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c0:	4621      	mov	r1, r4
 80026c2:	024a      	lsls	r2, r1, #9
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ca:	2200      	movs	r2, #0
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026d4:	f7fd fdd4 	bl	8000280 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4613      	mov	r3, r2
 80026de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e0:	e058      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e2:	4b38      	ldr	r3, [pc, #224]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	2200      	movs	r2, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	4611      	mov	r1, r2
 80026ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026f2:	623b      	str	r3, [r7, #32]
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	f04f 0000 	mov.w	r0, #0
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	0159      	lsls	r1, r3, #5
 800270a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270e:	0150      	lsls	r0, r2, #5
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4641      	mov	r1, r8
 8002716:	ebb2 0a01 	subs.w	sl, r2, r1
 800271a:	4649      	mov	r1, r9
 800271c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800272c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002730:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002734:	ebb2 040a 	subs.w	r4, r2, sl
 8002738:	eb63 050b 	sbc.w	r5, r3, fp
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	00eb      	lsls	r3, r5, #3
 8002746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274a:	00e2      	lsls	r2, r4, #3
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	4643      	mov	r3, r8
 8002752:	18e3      	adds	r3, r4, r3
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	464b      	mov	r3, r9
 8002758:	eb45 0303 	adc.w	r3, r5, r3
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276a:	4629      	mov	r1, r5
 800276c:	028b      	lsls	r3, r1, #10
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002774:	4621      	mov	r1, r4
 8002776:	028a      	lsls	r2, r1, #10
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277e:	2200      	movs	r2, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	61fa      	str	r2, [r7, #28]
 8002784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002788:	f7fd fd7a 	bl	8000280 <__aeabi_uldivmod>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4613      	mov	r3, r2
 8002792:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	3301      	adds	r3, #1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3750      	adds	r7, #80	@ 0x50
 80027bc:	46bd      	mov	sp, r7
 80027be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	007a1200 	.word	0x007a1200

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	080055b0 	.word	0x080055b0

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002814:	f7ff ffdc 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	0b5b      	lsrs	r3, r3, #13
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	@ (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	080055b0 	.word	0x080055b0

08002838 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	220f      	movs	r2, #15
 8002846:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002854:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <HAL_RCC_GetClockConfig+0x60>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0207 	and.w	r2, r3, #7
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e041      	b.n	8002932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f839 	bl	800293a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f000 f9c0 	bl	8002c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e04e      	b.n	8002a06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a23      	ldr	r2, [pc, #140]	@ (8002a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d022      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002992:	d01d      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d018      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d013      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00e      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d009      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a19      	ldr	r2, [pc, #100]	@ (8002a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x80>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a18      	ldr	r2, [pc, #96]	@ (8002a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d111      	bne.n	80029f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d010      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	e007      	b.n	8002a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40010400 	.word	0x40010400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40001800 	.word	0x40001800

08002a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d020      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01b      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0202 	mvn.w	r2, #2
 8002a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8d2 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8c4 	bl	8002c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8d5 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d020      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01b      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0204 	mvn.w	r2, #4
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8ac 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f89e 	bl	8002c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f8af 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d020      	beq.n	8002b2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01b      	beq.n	8002b2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0208 	mvn.w	r2, #8
 8002afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2204      	movs	r2, #4
 8002b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f886 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f878 	bl	8002c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f889 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d020      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0210 	mvn.w	r2, #16
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f860 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f852 	bl	8002c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f863 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0201 	mvn.w	r2, #1
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd ff4c 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f900 	bl	8002dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f834 	bl	8002c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0220 	mvn.w	r2, #32
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8d2 	bl	8002dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a43      	ldr	r2, [pc, #268]	@ (8002d80 <TIM_Base_SetConfig+0x120>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7e:	d00f      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a40      	ldr	r2, [pc, #256]	@ (8002d84 <TIM_Base_SetConfig+0x124>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d88 <TIM_Base_SetConfig+0x128>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	@ (8002d8c <TIM_Base_SetConfig+0x12c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d90 <TIM_Base_SetConfig+0x130>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d108      	bne.n	8002cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a32      	ldr	r2, [pc, #200]	@ (8002d80 <TIM_Base_SetConfig+0x120>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02b      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc0:	d027      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d84 <TIM_Base_SetConfig+0x124>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d023      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d88 <TIM_Base_SetConfig+0x128>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <TIM_Base_SetConfig+0x12c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01b      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d90 <TIM_Base_SetConfig+0x130>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d017      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <TIM_Base_SetConfig+0x134>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <TIM_Base_SetConfig+0x138>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00f      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	@ (8002d9c <TIM_Base_SetConfig+0x13c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a28      	ldr	r2, [pc, #160]	@ (8002da0 <TIM_Base_SetConfig+0x140>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a27      	ldr	r2, [pc, #156]	@ (8002da4 <TIM_Base_SetConfig+0x144>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	@ (8002da8 <TIM_Base_SetConfig+0x148>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <TIM_Base_SetConfig+0x120>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <TIM_Base_SetConfig+0xf2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a10      	ldr	r2, [pc, #64]	@ (8002d90 <TIM_Base_SetConfig+0x130>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d103      	bne.n	8002d5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	40010400 	.word	0x40010400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800
 8002da0:	40001800 	.word	0x40001800
 8002da4:	40001c00 	.word	0x40001c00
 8002da8:	40002000 	.word	0x40002000

08002dac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e042      	b.n	8002e6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd feae 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	@ 0x24
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f973 	bl	8003104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d175      	bne.n	8002f80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_UART_Transmit+0x2c>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e06e      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2221      	movs	r2, #33	@ 0x21
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb2:	f7fd ffef 	bl	8000e94 <HAL_GetTick>
 8002eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ecc:	d108      	bne.n	8002ee0 <HAL_UART_Transmit+0x6c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e003      	b.n	8002ee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee8:	e02e      	b.n	8002f48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	@ 0x80
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f848 	bl	8002f8a <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e03a      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3302      	adds	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e007      	b.n	8002f3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1cb      	bne.n	8002eea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2140      	movs	r1, #64	@ 0x40
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f814 	bl	8002f8a <UART_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	e03b      	b.n	8003014 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fa2:	d037      	beq.n	8003014 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	f7fd ff76 	bl	8000e94 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d302      	bcc.n	8002fba <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e03a      	b.n	8003034 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b80      	cmp	r3, #128	@ 0x80
 8002fd0:	d020      	beq.n	8003014 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	d01d      	beq.n	8003014 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d116      	bne.n	8003014 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f81d 	bl	800303c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2208      	movs	r2, #8
 8003006:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e00f      	b.n	8003034 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	429a      	cmp	r2, r3
 8003030:	d0b4      	beq.n	8002f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b095      	sub	sp, #84	@ 0x54
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800305a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003064:	643a      	str	r2, [r7, #64]	@ 0x40
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800306a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e5      	bne.n	8003044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	61fb      	str	r3, [r7, #28]
   return(result);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d119      	bne.n	80030e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	e853 3f00 	ldrex	r3, [r3]
 80030c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f023 0310 	bic.w	r3, r3, #16
 80030ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d4:	61ba      	str	r2, [r7, #24]
 80030d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	613b      	str	r3, [r7, #16]
   return(result);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e5      	bne.n	80030b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030f6:	bf00      	nop
 80030f8:	3754      	adds	r7, #84	@ 0x54
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0c0      	sub	sp, #256	@ 0x100
 800310a:	af00      	add	r7, sp, #0
 800310c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	ea40 0301 	orr.w	r3, r0, r1
 800312c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	431a      	orrs	r2, r3
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800315c:	f021 010c 	bic.w	r1, r1, #12
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800316a:	430b      	orrs	r3, r1
 800316c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	ea40 0301 	orr.w	r3, r0, r1
 800318a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b8f      	ldr	r3, [pc, #572]	@ (80033d0 <UART_SetConfig+0x2cc>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0xa0>
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8d      	ldr	r3, [pc, #564]	@ (80033d4 <UART_SetConfig+0x2d0>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d104      	bne.n	80031ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7ff fb34 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 80031a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031ac:	e003      	b.n	80031b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ae:	f7ff fb1b 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 80031b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c0:	f040 810c 	bne.w	80033dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031de:	415b      	adcs	r3, r3
 80031e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031e6:	4621      	mov	r1, r4
 80031e8:	eb12 0801 	adds.w	r8, r2, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb43 0901 	adc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800322a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800322e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003232:	460b      	mov	r3, r1
 8003234:	18db      	adds	r3, r3, r3
 8003236:	653b      	str	r3, [r7, #80]	@ 0x50
 8003238:	4613      	mov	r3, r2
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003248:	f7fd f81a 	bl	8000280 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b61      	ldr	r3, [pc, #388]	@ (80033d8 <UART_SetConfig+0x2d4>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011c      	lsls	r4, r3, #4
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003264:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003274:	415b      	adcs	r3, r3
 8003276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800327c:	4641      	mov	r1, r8
 800327e:	eb12 0a01 	adds.w	sl, r2, r1
 8003282:	4649      	mov	r1, r9
 8003284:	eb43 0b01 	adc.w	fp, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	4692      	mov	sl, r2
 800329e:	469b      	mov	fp, r3
 80032a0:	4643      	mov	r3, r8
 80032a2:	eb1a 0303 	adds.w	r3, sl, r3
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032aa:	464b      	mov	r3, r9
 80032ac:	eb4b 0303 	adc.w	r3, fp, r3
 80032b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032c8:	460b      	mov	r3, r1
 80032ca:	18db      	adds	r3, r3, r3
 80032cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ce:	4613      	mov	r3, r2
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032de:	f7fc ffcf 	bl	8000280 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <UART_SetConfig+0x2d4>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2264      	movs	r2, #100	@ 0x64
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	1acb      	subs	r3, r1, r3
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032fe:	4b36      	ldr	r3, [pc, #216]	@ (80033d8 <UART_SetConfig+0x2d4>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800330c:	441c      	add	r4, r3
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003318:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800331c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003328:	415b      	adcs	r3, r3
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800332c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003330:	4641      	mov	r1, r8
 8003332:	1851      	adds	r1, r2, r1
 8003334:	6339      	str	r1, [r7, #48]	@ 0x30
 8003336:	4649      	mov	r1, r9
 8003338:	414b      	adcs	r3, r1
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003348:	4659      	mov	r1, fp
 800334a:	00cb      	lsls	r3, r1, #3
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003352:	4651      	mov	r1, sl
 8003354:	00ca      	lsls	r2, r1, #3
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	4603      	mov	r3, r0
 800335c:	4642      	mov	r2, r8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003364:	464b      	mov	r3, r9
 8003366:	460a      	mov	r2, r1
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800337c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003384:	460b      	mov	r3, r1
 8003386:	18db      	adds	r3, r3, r3
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800338a:	4613      	mov	r3, r2
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800339a:	f7fc ff71 	bl	8000280 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <UART_SetConfig+0x2d4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	@ 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	@ 0x32
 80033b6:	4a08      	ldr	r2, [pc, #32]	@ (80033d8 <UART_SetConfig+0x2d4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4422      	add	r2, r4
 80033ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033cc:	e106      	b.n	80035dc <UART_SetConfig+0x4d8>
 80033ce:	bf00      	nop
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033ee:	4642      	mov	r2, r8
 80033f0:	464b      	mov	r3, r9
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	6239      	str	r1, [r7, #32]
 80033f6:	415b      	adcs	r3, r3
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fe:	4641      	mov	r1, r8
 8003400:	1854      	adds	r4, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb43 0501 	adc.w	r5, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003424:	464b      	mov	r3, r9
 8003426:	eb45 0303 	adc.w	r3, r5, r3
 800342a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800343a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800344a:	4629      	mov	r1, r5
 800344c:	008b      	lsls	r3, r1, #2
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003454:	4621      	mov	r1, r4
 8003456:	008a      	lsls	r2, r1, #2
 8003458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800345c:	f7fc ff10 	bl	8000280 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4b60      	ldr	r3, [pc, #384]	@ (80035e8 <UART_SetConfig+0x4e4>)
 8003466:	fba3 2302 	umull	r2, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	011c      	lsls	r4, r3, #4
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003478:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800347c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	61b9      	str	r1, [r7, #24]
 8003488:	415b      	adcs	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6139      	str	r1, [r7, #16]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034e8:	4649      	mov	r1, r9
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	4641      	mov	r1, r8
 80034ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f2:	4641      	mov	r1, r8
 80034f4:	008a      	lsls	r2, r1, #2
 80034f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034fa:	f7fc fec1 	bl	8000280 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4611      	mov	r1, r2
 8003504:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <UART_SetConfig+0x4e4>)
 8003506:	fba3 2301 	umull	r2, r3, r3, r1
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2264      	movs	r2, #100	@ 0x64
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	1acb      	subs	r3, r1, r3
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	3332      	adds	r3, #50	@ 0x32
 8003518:	4a33      	ldr	r2, [pc, #204]	@ (80035e8 <UART_SetConfig+0x4e4>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003524:	441c      	add	r4, r3
 8003526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800352a:	2200      	movs	r2, #0
 800352c:	673b      	str	r3, [r7, #112]	@ 0x70
 800352e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003530:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003534:	4642      	mov	r2, r8
 8003536:	464b      	mov	r3, r9
 8003538:	1891      	adds	r1, r2, r2
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	415b      	adcs	r3, r3
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003544:	4641      	mov	r1, r8
 8003546:	1851      	adds	r1, r2, r1
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	4649      	mov	r1, r9
 800354c:	414b      	adcs	r3, r1
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355c:	4659      	mov	r1, fp
 800355e:	00cb      	lsls	r3, r1, #3
 8003560:	4651      	mov	r1, sl
 8003562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003566:	4651      	mov	r1, sl
 8003568:	00ca      	lsls	r2, r1, #3
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	4603      	mov	r3, r0
 8003570:	4642      	mov	r2, r8
 8003572:	189b      	adds	r3, r3, r2
 8003574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003576:	464b      	mov	r3, r9
 8003578:	460a      	mov	r2, r1
 800357a:	eb42 0303 	adc.w	r3, r2, r3
 800357e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	663b      	str	r3, [r7, #96]	@ 0x60
 800358a:	667a      	str	r2, [r7, #100]	@ 0x64
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003598:	4649      	mov	r1, r9
 800359a:	008b      	lsls	r3, r1, #2
 800359c:	4641      	mov	r1, r8
 800359e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a2:	4641      	mov	r1, r8
 80035a4:	008a      	lsls	r2, r1, #2
 80035a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035aa:	f7fc fe69 	bl	8000280 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <UART_SetConfig+0x4e4>)
 80035b4:	fba3 1302 	umull	r1, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	2164      	movs	r1, #100	@ 0x64
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	3332      	adds	r3, #50	@ 0x32
 80035c6:	4a08      	ldr	r2, [pc, #32]	@ (80035e8 <UART_SetConfig+0x4e4>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 020f 	and.w	r2, r3, #15
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4422      	add	r2, r4
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035e2:	46bd      	mov	sp, r7
 80035e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fe:	2b84      	cmp	r3, #132	@ 0x84
 8003600:	d005      	beq.n	800360e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003602:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	3303      	adds	r3, #3
 800360c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003620:	f000 fafc 	bl	8003c1c <vTaskStartScheduler>
  
  return osOK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}

0800362a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800362a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362c:	b089      	sub	sp, #36	@ 0x24
 800362e:	af04      	add	r7, sp, #16
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <osThreadCreate+0x54>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685c      	ldr	r4, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691e      	ldr	r6, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff ffc8 	bl	80035ec <makeFreeRtosPriority>
 800365c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003666:	9202      	str	r2, [sp, #8]
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9100      	str	r1, [sp, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4632      	mov	r2, r6
 8003670:	4629      	mov	r1, r5
 8003672:	4620      	mov	r0, r4
 8003674:	f000 f8ed 	bl	8003852 <xTaskCreateStatic>
 8003678:	4603      	mov	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e01c      	b.n	80036b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685c      	ldr	r4, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800368a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ffaa 	bl	80035ec <makeFreeRtosPriority>
 8003698:	4602      	mov	r2, r0
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	9200      	str	r2, [sp, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4632      	mov	r2, r6
 80036a6:	4629      	mov	r1, r5
 80036a8:	4620      	mov	r0, r4
 80036aa:	f000 f932 	bl	8003912 <xTaskCreate>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d001      	beq.n	80036b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036b8:	68fb      	ldr	r3, [r7, #12]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <osDelay+0x16>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	e000      	b.n	80036da <osDelay+0x18>
 80036d8:	2301      	movs	r3, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fa68 	bl	8003bb0 <vTaskDelay>
  
  return osOK;
 80036e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f103 0208 	add.w	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003702:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f103 0208 	add.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f103 0208 	add.w	r2, r3, #8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037a2:	d103      	bne.n	80037ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e00c      	b.n	80037c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3308      	adds	r3, #8
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e002      	b.n	80037ba <vListInsert+0x2e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d2f6      	bcs.n	80037b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6892      	ldr	r2, [r2, #8]
 8003814:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6852      	ldr	r2, [r2, #4]
 800381e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d103      	bne.n	8003832 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	1e5a      	subs	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003852:	b580      	push	{r7, lr}
 8003854:	b08e      	sub	sp, #56	@ 0x38
 8003856:	af04      	add	r7, sp, #16
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	61fb      	str	r3, [r7, #28]
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800389c:	23a0      	movs	r3, #160	@ 0xa0
 800389e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80038a4:	d00b      	beq.n	80038be <xTaskCreateStatic+0x6c>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	61bb      	str	r3, [r7, #24]
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	e7fd      	b.n	80038ba <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01e      	beq.n	8003904 <xTaskCreateStatic+0xb2>
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038de:	2300      	movs	r3, #0
 80038e0:	9303      	str	r3, [sp, #12]
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	9302      	str	r3, [sp, #8]
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f850 	bl	800399c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038fe:	f000 f8ed 	bl	8003adc <prvAddNewTaskToReadyList>
 8003902:	e001      	b.n	8003908 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003908:	697b      	ldr	r3, [r7, #20]
	}
 800390a:	4618      	mov	r0, r3
 800390c:	3728      	adds	r7, #40	@ 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08c      	sub	sp, #48	@ 0x30
 8003916:	af04      	add	r7, sp, #16
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fefe 	bl	8004728 <pvPortMalloc>
 800392c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00e      	beq.n	8003952 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003934:	20a0      	movs	r0, #160	@ 0xa0
 8003936:	f000 fef7 	bl	8004728 <pvPortMalloc>
 800393a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
 8003948:	e005      	b.n	8003956 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800394a:	6978      	ldr	r0, [r7, #20]
 800394c:	f000 ffba 	bl	80048c4 <vPortFree>
 8003950:	e001      	b.n	8003956 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d017      	beq.n	800398c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	2300      	movs	r3, #0
 8003968:	9303      	str	r3, [sp, #12]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	9302      	str	r3, [sp, #8]
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f80e 	bl	800399c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003980:	69f8      	ldr	r0, [r7, #28]
 8003982:	f000 f8ab 	bl	8003adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e002      	b.n	8003992 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003990:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003992:	69bb      	ldr	r3, [r7, #24]
	}
 8003994:	4618      	mov	r0, r3
 8003996:	3720      	adds	r7, #32
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039b4:	3b01      	subs	r3, #1
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f023 0307 	bic.w	r3, r3, #7
 80039c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	617b      	str	r3, [r7, #20]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01f      	beq.n	8003a2c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	e012      	b.n	8003a18 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	7819      	ldrb	r1, [r3, #0]
 80039fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	3334      	adds	r3, #52	@ 0x34
 8003a02:	460a      	mov	r2, r1
 8003a04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	d9e9      	bls.n	80039f2 <prvInitialiseNewTask+0x56>
 8003a1e:	e000      	b.n	8003a22 <prvInitialiseNewTask+0x86>
			{
				break;
 8003a20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a2a:	e003      	b.n	8003a34 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d901      	bls.n	8003a3e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a3a:	2306      	movs	r3, #6
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	3304      	adds	r3, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe68 	bl	800372a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fe63 	bl	800372a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6c:	f1c3 0207 	rsb	r2, r3, #7
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	334c      	adds	r3, #76	@ 0x4c
 8003a8e:	224c      	movs	r2, #76	@ 0x4c
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f858 	bl	8004b48 <memset>
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad0 <prvInitialiseNewTask+0x134>)
 8003a9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad4 <prvInitialiseNewTask+0x138>)
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad8 <prvInitialiseNewTask+0x13c>)
 8003aa8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	69b8      	ldr	r0, [r7, #24]
 8003ab0:	f000 fc2a 	bl	8004308 <pxPortInitialiseStack>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ac6:	bf00      	nop
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20004164 	.word	0x20004164
 8003ad4:	200041cc 	.word	0x200041cc
 8003ad8:	20004234 	.word	0x20004234

08003adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ae4:	f000 fd40 	bl	8004568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <prvAddNewTaskToReadyList+0xb8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <prvAddNewTaskToReadyList+0xb8>)
 8003af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003af2:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <prvAddNewTaskToReadyList+0xbc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003afa:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <prvAddNewTaskToReadyList+0xbc>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b00:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <prvAddNewTaskToReadyList+0xb8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d110      	bne.n	8003b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b08:	f000 fad4 	bl	80040b4 <prvInitialiseTaskLists>
 8003b0c:	e00d      	b.n	8003b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b0e:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <prvAddNewTaskToReadyList+0xc0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <prvAddNewTaskToReadyList+0xbc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d802      	bhi.n	8003b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b24:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <prvAddNewTaskToReadyList+0xbc>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba0 <prvAddNewTaskToReadyList+0xc4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba0 <prvAddNewTaskToReadyList+0xc4>)
 8003b32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <prvAddNewTaskToReadyList+0xc8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	4a18      	ldr	r2, [pc, #96]	@ (8003ba4 <prvAddNewTaskToReadyList+0xc8>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4a15      	ldr	r2, [pc, #84]	@ (8003ba8 <prvAddNewTaskToReadyList+0xcc>)
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f7ff fdf1 	bl	8003744 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b62:	f000 fd33 	bl	80045cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <prvAddNewTaskToReadyList+0xc0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <prvAddNewTaskToReadyList+0xbc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d207      	bcs.n	8003b8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <prvAddNewTaskToReadyList+0xd0>)
 8003b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000510 	.word	0x20000510
 8003b98:	20000410 	.word	0x20000410
 8003b9c:	2000051c 	.word	0x2000051c
 8003ba0:	2000052c 	.word	0x2000052c
 8003ba4:	20000518 	.word	0x20000518
 8003ba8:	20000414 	.word	0x20000414
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d018      	beq.n	8003bf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <vTaskDelay+0x64>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <vTaskDelay+0x32>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	60bb      	str	r3, [r7, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	e7fd      	b.n	8003bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003be2:	f000 f885 	bl	8003cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003be6:	2100      	movs	r1, #0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb27 	bl	800423c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bee:	f000 f88d 	bl	8003d0c <xTaskResumeAll>
 8003bf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <vTaskDelay+0x68>)
 8003bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000538 	.word	0x20000538
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	@ 0x28
 8003c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c2a:	463a      	mov	r2, r7
 8003c2c:	1d39      	adds	r1, r7, #4
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fcba 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	9202      	str	r2, [sp, #8]
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	460a      	mov	r2, r1
 8003c4a:	4921      	ldr	r1, [pc, #132]	@ (8003cd0 <vTaskStartScheduler+0xb4>)
 8003c4c:	4821      	ldr	r0, [pc, #132]	@ (8003cd4 <vTaskStartScheduler+0xb8>)
 8003c4e:	f7ff fe00 	bl	8003852 <xTaskCreateStatic>
 8003c52:	4603      	mov	r3, r0
 8003c54:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <vTaskStartScheduler+0xbc>)
 8003c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c58:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <vTaskStartScheduler+0xbc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e001      	b.n	8003c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d11b      	bne.n	8003ca8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	613b      	str	r3, [r7, #16]
}
 8003c82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c84:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <vTaskStartScheduler+0xc0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	334c      	adds	r3, #76	@ 0x4c
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <vTaskStartScheduler+0xc4>)
 8003c8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <vTaskStartScheduler+0xc8>)
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c96:	4b14      	ldr	r3, [pc, #80]	@ (8003ce8 <vTaskStartScheduler+0xcc>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c9c:	4b13      	ldr	r3, [pc, #76]	@ (8003cec <vTaskStartScheduler+0xd0>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ca2:	f000 fbbd 	bl	8004420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ca6:	e00f      	b.n	8003cc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cae:	d10b      	bne.n	8003cc8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <vTaskStartScheduler+0xa8>
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08005598 	.word	0x08005598
 8003cd4:	08004085 	.word	0x08004085
 8003cd8:	20000534 	.word	0x20000534
 8003cdc:	20000410 	.word	0x20000410
 8003ce0:	20000010 	.word	0x20000010
 8003ce4:	20000530 	.word	0x20000530
 8003ce8:	2000051c 	.word	0x2000051c
 8003cec:	20000514 	.word	0x20000514

08003cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cf4:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <vTaskSuspendAll+0x18>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a03      	ldr	r2, [pc, #12]	@ (8003d08 <vTaskSuspendAll+0x18>)
 8003cfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000538 	.word	0x20000538

08003d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d1a:	4b42      	ldr	r3, [pc, #264]	@ (8003e24 <xTaskResumeAll+0x118>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <xTaskResumeAll+0x2e>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	603b      	str	r3, [r7, #0]
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d3a:	f000 fc15 	bl	8004568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d3e:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <xTaskResumeAll+0x118>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4a37      	ldr	r2, [pc, #220]	@ (8003e24 <xTaskResumeAll+0x118>)
 8003d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d48:	4b36      	ldr	r3, [pc, #216]	@ (8003e24 <xTaskResumeAll+0x118>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d161      	bne.n	8003e14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d50:	4b35      	ldr	r3, [pc, #212]	@ (8003e28 <xTaskResumeAll+0x11c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05d      	beq.n	8003e14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d58:	e02e      	b.n	8003db8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <xTaskResumeAll+0x120>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3318      	adds	r3, #24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fd49 	bl	80037fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fd44 	bl	80037fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e30 <xTaskResumeAll+0x124>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	4a2a      	ldr	r2, [pc, #168]	@ (8003e30 <xTaskResumeAll+0x124>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <xTaskResumeAll+0x128>)
 8003d96:	441a      	add	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f7ff fcd0 	bl	8003744 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da8:	4b23      	ldr	r3, [pc, #140]	@ (8003e38 <xTaskResumeAll+0x12c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003db2:	4b22      	ldr	r3, [pc, #136]	@ (8003e3c <xTaskResumeAll+0x130>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003db8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <xTaskResumeAll+0x120>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1cc      	bne.n	8003d5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dc6:	f000 fa19 	bl	80041fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dca:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <xTaskResumeAll+0x134>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dd6:	f000 f837 	bl	8003e48 <xTaskIncrementTick>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003de0:	4b16      	ldr	r3, [pc, #88]	@ (8003e3c <xTaskResumeAll+0x130>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f1      	bne.n	8003dd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003df2:	4b13      	ldr	r3, [pc, #76]	@ (8003e40 <xTaskResumeAll+0x134>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003df8:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <xTaskResumeAll+0x130>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <xTaskResumeAll+0x138>)
 8003e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e14:	f000 fbda 	bl	80045cc <vPortExitCritical>

	return xAlreadyYielded;
 8003e18:	68bb      	ldr	r3, [r7, #8]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000538 	.word	0x20000538
 8003e28:	20000510 	.word	0x20000510
 8003e2c:	200004d0 	.word	0x200004d0
 8003e30:	20000518 	.word	0x20000518
 8003e34:	20000414 	.word	0x20000414
 8003e38:	20000410 	.word	0x20000410
 8003e3c:	20000524 	.word	0x20000524
 8003e40:	20000520 	.word	0x20000520
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e52:	4b4f      	ldr	r3, [pc, #316]	@ (8003f90 <xTaskIncrementTick+0x148>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 808f 	bne.w	8003f7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003f94 <xTaskIncrementTick+0x14c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e64:	4a4b      	ldr	r2, [pc, #300]	@ (8003f94 <xTaskIncrementTick+0x14c>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d121      	bne.n	8003eb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e70:	4b49      	ldr	r3, [pc, #292]	@ (8003f98 <xTaskIncrementTick+0x150>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	603b      	str	r3, [r7, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <xTaskIncrementTick+0x46>
 8003e92:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <xTaskIncrementTick+0x150>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	4b40      	ldr	r3, [pc, #256]	@ (8003f9c <xTaskIncrementTick+0x154>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f98 <xTaskIncrementTick+0x150>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8003f9c <xTaskIncrementTick+0x154>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa0 <xTaskIncrementTick+0x158>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa0 <xTaskIncrementTick+0x158>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	f000 f9a4 	bl	80041fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <xTaskIncrementTick+0x15c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d348      	bcc.n	8003f50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebe:	4b36      	ldr	r3, [pc, #216]	@ (8003f98 <xTaskIncrementTick+0x150>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec8:	4b36      	ldr	r3, [pc, #216]	@ (8003fa4 <xTaskIncrementTick+0x15c>)
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ece:	601a      	str	r2, [r3, #0]
					break;
 8003ed0:	e03e      	b.n	8003f50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed2:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <xTaskIncrementTick+0x150>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d203      	bcs.n	8003ef2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003eea:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <xTaskIncrementTick+0x15c>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ef0:	e02e      	b.n	8003f50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fc81 	bl	80037fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3318      	adds	r3, #24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fc78 	bl	80037fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	2201      	movs	r2, #1
 8003f14:	409a      	lsls	r2, r3
 8003f16:	4b24      	ldr	r3, [pc, #144]	@ (8003fa8 <xTaskIncrementTick+0x160>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <xTaskIncrementTick+0x160>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fac <xTaskIncrementTick+0x164>)
 8003f2e:	441a      	add	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7ff fc04 	bl	8003744 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <xTaskIncrementTick+0x168>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3b9      	bcc.n	8003ebe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f4e:	e7b6      	b.n	8003ebe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f50:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <xTaskIncrementTick+0x168>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f56:	4915      	ldr	r1, [pc, #84]	@ (8003fac <xTaskIncrementTick+0x164>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d901      	bls.n	8003f6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <xTaskIncrementTick+0x16c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e004      	b.n	8003f84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb8 <xTaskIncrementTick+0x170>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <xTaskIncrementTick+0x170>)
 8003f82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f84:	697b      	ldr	r3, [r7, #20]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000538 	.word	0x20000538
 8003f94:	20000514 	.word	0x20000514
 8003f98:	200004c8 	.word	0x200004c8
 8003f9c:	200004cc 	.word	0x200004cc
 8003fa0:	20000528 	.word	0x20000528
 8003fa4:	20000530 	.word	0x20000530
 8003fa8:	20000518 	.word	0x20000518
 8003fac:	20000414 	.word	0x20000414
 8003fb0:	20000410 	.word	0x20000410
 8003fb4:	20000524 	.word	0x20000524
 8003fb8:	20000520 	.word	0x20000520

08003fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800406c <vTaskSwitchContext+0xb0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fca:	4b29      	ldr	r3, [pc, #164]	@ (8004070 <vTaskSwitchContext+0xb4>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fd0:	e045      	b.n	800405e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	@ (8004070 <vTaskSwitchContext+0xb4>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd8:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <vTaskSwitchContext+0xb8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
 8003fe8:	f1c3 031f 	rsb	r3, r3, #31
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	4922      	ldr	r1, [pc, #136]	@ (8004078 <vTaskSwitchContext+0xbc>)
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	607b      	str	r3, [r7, #4]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <vTaskSwitchContext+0x5a>
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4a14      	ldr	r2, [pc, #80]	@ (8004078 <vTaskSwitchContext+0xbc>)
 8004026:	4413      	add	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3308      	adds	r3, #8
 800403c:	429a      	cmp	r2, r3
 800403e:	d104      	bne.n	800404a <vTaskSwitchContext+0x8e>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <vTaskSwitchContext+0xc0>)
 8004052:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004054:	4b09      	ldr	r3, [pc, #36]	@ (800407c <vTaskSwitchContext+0xc0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	334c      	adds	r3, #76	@ 0x4c
 800405a:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <vTaskSwitchContext+0xc4>)
 800405c:	6013      	str	r3, [r2, #0]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	20000538 	.word	0x20000538
 8004070:	20000524 	.word	0x20000524
 8004074:	20000518 	.word	0x20000518
 8004078:	20000414 	.word	0x20000414
 800407c:	20000410 	.word	0x20000410
 8004080:	20000010 	.word	0x20000010

08004084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800408c:	f000 f852 	bl	8004134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <prvIdleTask+0x28>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d9f9      	bls.n	800408c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <prvIdleTask+0x2c>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040a8:	e7f0      	b.n	800408c <prvIdleTask+0x8>
 80040aa:	bf00      	nop
 80040ac:	20000414 	.word	0x20000414
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e00c      	b.n	80040da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <prvInitialiseTaskLists+0x60>)
 80040cc:	4413      	add	r3, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fb0b 	bl	80036ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3301      	adds	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b06      	cmp	r3, #6
 80040de:	d9ef      	bls.n	80040c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040e0:	480d      	ldr	r0, [pc, #52]	@ (8004118 <prvInitialiseTaskLists+0x64>)
 80040e2:	f7ff fb02 	bl	80036ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040e6:	480d      	ldr	r0, [pc, #52]	@ (800411c <prvInitialiseTaskLists+0x68>)
 80040e8:	f7ff faff 	bl	80036ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040ec:	480c      	ldr	r0, [pc, #48]	@ (8004120 <prvInitialiseTaskLists+0x6c>)
 80040ee:	f7ff fafc 	bl	80036ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040f2:	480c      	ldr	r0, [pc, #48]	@ (8004124 <prvInitialiseTaskLists+0x70>)
 80040f4:	f7ff faf9 	bl	80036ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040f8:	480b      	ldr	r0, [pc, #44]	@ (8004128 <prvInitialiseTaskLists+0x74>)
 80040fa:	f7ff faf6 	bl	80036ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040fe:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <prvInitialiseTaskLists+0x78>)
 8004100:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <prvInitialiseTaskLists+0x64>)
 8004102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <prvInitialiseTaskLists+0x7c>)
 8004106:	4a05      	ldr	r2, [pc, #20]	@ (800411c <prvInitialiseTaskLists+0x68>)
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000414 	.word	0x20000414
 8004118:	200004a0 	.word	0x200004a0
 800411c:	200004b4 	.word	0x200004b4
 8004120:	200004d0 	.word	0x200004d0
 8004124:	200004e4 	.word	0x200004e4
 8004128:	200004fc 	.word	0x200004fc
 800412c:	200004c8 	.word	0x200004c8
 8004130:	200004cc 	.word	0x200004cc

08004134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800413a:	e019      	b.n	8004170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800413c:	f000 fa14 	bl	8004568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <prvCheckTasksWaitingTermination+0x50>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fb56 	bl	80037fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <prvCheckTasksWaitingTermination+0x54>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	4a0b      	ldr	r2, [pc, #44]	@ (8004188 <prvCheckTasksWaitingTermination+0x54>)
 800415a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <prvCheckTasksWaitingTermination+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <prvCheckTasksWaitingTermination+0x58>)
 8004164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004166:	f000 fa31 	bl	80045cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f810 	bl	8004190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <prvCheckTasksWaitingTermination+0x58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e1      	bne.n	800413c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	200004e4 	.word	0x200004e4
 8004188:	20000510 	.word	0x20000510
 800418c:	200004f8 	.word	0x200004f8

08004190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	334c      	adds	r3, #76	@ 0x4c
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fcdb 	bl	8004b58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d108      	bne.n	80041be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fb87 	bl	80048c4 <vPortFree>
				vPortFree( pxTCB );
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb84 	bl	80048c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041bc:	e019      	b.n	80041f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d103      	bne.n	80041d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fb7b 	bl	80048c4 <vPortFree>
	}
 80041ce:	e010      	b.n	80041f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d00b      	beq.n	80041f2 <prvDeleteTCB+0x62>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <prvDeleteTCB+0x5e>
	}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004214:	e008      	b.n	8004228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	200004c8 	.word	0x200004c8
 8004238:	20000530 	.word	0x20000530

0800423c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424c:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fad3 	bl	80037fe <uxListRemove>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800425e:	4b24      	ldr	r3, [pc, #144]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004264:	2201      	movs	r2, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	4b21      	ldr	r3, [pc, #132]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4013      	ands	r3, r2
 8004272:	4a20      	ldr	r2, [pc, #128]	@ (80042f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004274:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800427c:	d10a      	bne.n	8004294 <prvAddCurrentTaskToDelayedList+0x58>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004284:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	481a      	ldr	r0, [pc, #104]	@ (80042f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800428e:	f7ff fa59 	bl	8003744 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004292:	e026      	b.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d209      	bcs.n	80042c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7ff fa67 	bl	800378c <vListInsert>
}
 80042be:	e010      	b.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7ff fa5d 	bl	800378c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d202      	bcs.n	80042e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042dc:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000514 	.word	0x20000514
 80042f0:	20000410 	.word	0x20000410
 80042f4:	20000518 	.word	0x20000518
 80042f8:	200004fc 	.word	0x200004fc
 80042fc:	200004cc 	.word	0x200004cc
 8004300:	200004c8 	.word	0x200004c8
 8004304:	20000530 	.word	0x20000530

08004308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3b04      	subs	r3, #4
 8004318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b04      	subs	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b04      	subs	r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004338:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <pxPortInitialiseStack+0x64>)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b14      	subs	r3, #20
 8004342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b04      	subs	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f06f 0202 	mvn.w	r2, #2
 8004356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b20      	subs	r3, #32
 800435c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	08004371 	.word	0x08004371

08004370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800437a:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <prvTaskExitError+0x58>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004382:	d00b      	beq.n	800439c <prvTaskExitError+0x2c>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <prvTaskExitError+0x28>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	60bb      	str	r3, [r7, #8]
}
 80043ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043b0:	bf00      	nop
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0fc      	beq.n	80043b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2000000c 	.word	0x2000000c
 80043cc:	00000000 	.word	0x00000000

080043d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <pxCurrentTCBConst2>)
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	f380 8809 	msr	PSP, r0
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f04f 0000 	mov.w	r0, #0
 80043e6:	f380 8811 	msr	BASEPRI, r0
 80043ea:	4770      	bx	lr
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst2>:
 80043f0:	20000410 	.word	0x20000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043f8:	4808      	ldr	r0, [pc, #32]	@ (800441c <prvPortStartFirstTask+0x24>)
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f380 8808 	msr	MSP, r0
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f380 8814 	msr	CONTROL, r0
 800440a:	b662      	cpsie	i
 800440c:	b661      	cpsie	f
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	df00      	svc	0
 8004418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800441a:	bf00      	nop
 800441c:	e000ed08 	.word	0xe000ed08

08004420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004426:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <xPortStartScheduler+0x124>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a47      	ldr	r2, [pc, #284]	@ (8004548 <xPortStartScheduler+0x128>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10b      	bne.n	8004448 <xPortStartScheduler+0x28>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	60fb      	str	r3, [r7, #12]
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004448:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <xPortStartScheduler+0x124>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3f      	ldr	r2, [pc, #252]	@ (800454c <xPortStartScheduler+0x12c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10b      	bne.n	800446a <xPortStartScheduler+0x4a>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	613b      	str	r3, [r7, #16]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800446a:	4b39      	ldr	r3, [pc, #228]	@ (8004550 <xPortStartScheduler+0x130>)
 800446c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	22ff      	movs	r2, #255	@ 0xff
 800447a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4b31      	ldr	r3, [pc, #196]	@ (8004554 <xPortStartScheduler+0x134>)
 8004490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004492:	4b31      	ldr	r3, [pc, #196]	@ (8004558 <xPortStartScheduler+0x138>)
 8004494:	2207      	movs	r2, #7
 8004496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004498:	e009      	b.n	80044ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <xPortStartScheduler+0x138>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3b01      	subs	r3, #1
 80044a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004558 <xPortStartScheduler+0x138>)
 80044a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d0ef      	beq.n	800449a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ba:	4b27      	ldr	r3, [pc, #156]	@ (8004558 <xPortStartScheduler+0x138>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1c3 0307 	rsb	r3, r3, #7
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d00b      	beq.n	80044de <xPortStartScheduler+0xbe>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60bb      	str	r3, [r7, #8]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <xPortStartScheduler+0x138>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <xPortStartScheduler+0x138>)
 80044e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <xPortStartScheduler+0x138>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044f0:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <xPortStartScheduler+0x138>)
 80044f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044fc:	4b17      	ldr	r3, [pc, #92]	@ (800455c <xPortStartScheduler+0x13c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	@ (800455c <xPortStartScheduler+0x13c>)
 8004502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004508:	4b14      	ldr	r3, [pc, #80]	@ (800455c <xPortStartScheduler+0x13c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	@ (800455c <xPortStartScheduler+0x13c>)
 800450e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004514:	f000 f8da 	bl	80046cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <xPortStartScheduler+0x140>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800451e:	f000 f8f9 	bl	8004714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004522:	4b10      	ldr	r3, [pc, #64]	@ (8004564 <xPortStartScheduler+0x144>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0f      	ldr	r2, [pc, #60]	@ (8004564 <xPortStartScheduler+0x144>)
 8004528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800452c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800452e:	f7ff ff63 	bl	80043f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004532:	f7ff fd43 	bl	8003fbc <vTaskSwitchContext>
	prvTaskExitError();
 8004536:	f7ff ff1b 	bl	8004370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed00 	.word	0xe000ed00
 8004548:	410fc271 	.word	0x410fc271
 800454c:	410fc270 	.word	0x410fc270
 8004550:	e000e400 	.word	0xe000e400
 8004554:	2000053c 	.word	0x2000053c
 8004558:	20000540 	.word	0x20000540
 800455c:	e000ed20 	.word	0xe000ed20
 8004560:	2000000c 	.word	0x2000000c
 8004564:	e000ef34 	.word	0xe000ef34

08004568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <vPortEnterCritical+0x5c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <vPortEnterCritical+0x5c>)
 800458a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800458c:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <vPortEnterCritical+0x5c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d110      	bne.n	80045b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <vPortEnterCritical+0x60>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	603b      	str	r3, [r7, #0]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vPortEnterCritical+0x4a>
	}
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	2000000c 	.word	0x2000000c
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045d2:	4b12      	ldr	r3, [pc, #72]	@ (800461c <vPortExitCritical+0x50>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <vPortExitCritical+0x26>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045f2:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <vPortExitCritical+0x50>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4a08      	ldr	r2, [pc, #32]	@ (800461c <vPortExitCritical+0x50>)
 80045fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <vPortExitCritical+0x50>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <vPortExitCritical+0x44>
 8004604:	2300      	movs	r3, #0
 8004606:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800460e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	2000000c 	.word	0x2000000c

08004620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004620:	f3ef 8009 	mrs	r0, PSP
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4b15      	ldr	r3, [pc, #84]	@ (8004680 <pxCurrentTCBConst>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f01e 0f10 	tst.w	lr, #16
 8004630:	bf08      	it	eq
 8004632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004644:	f380 8811 	msr	BASEPRI, r0
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f7ff fcb4 	bl	8003fbc <vTaskSwitchContext>
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f380 8811 	msr	BASEPRI, r0
 800465c:	bc09      	pop	{r0, r3}
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004666:	f01e 0f10 	tst.w	lr, #16
 800466a:	bf08      	it	eq
 800466c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004670:	f380 8809 	msr	PSP, r0
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst>:
 8004680:	20000410 	.word	0x20000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f7ff fbd1 	bl	8003e48 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <SysTick_Handler+0x40>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f383 8811 	msr	BASEPRI, r3
}
 80046be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <vPortSetupTimerInterrupt+0x38>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <vPortSetupTimerInterrupt+0x3c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <vPortSetupTimerInterrupt+0x40>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <vPortSetupTimerInterrupt+0x44>)
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ee:	4b04      	ldr	r3, [pc, #16]	@ (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e010 	.word	0xe000e010
 8004704:	e000e018 	.word	0xe000e018
 8004708:	20000000 	.word	0x20000000
 800470c:	10624dd3 	.word	0x10624dd3
 8004710:	e000e014 	.word	0xe000e014

08004714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004724 <vPortEnableVFP+0x10>
 8004718:	6801      	ldr	r1, [r0, #0]
 800471a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800471e:	6001      	str	r1, [r0, #0]
 8004720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004722:	bf00      	nop
 8004724:	e000ed88 	.word	0xe000ed88

08004728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	@ 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004734:	f7ff fadc 	bl	8003cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004738:	4b5c      	ldr	r3, [pc, #368]	@ (80048ac <pvPortMalloc+0x184>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004740:	f000 f924 	bl	800498c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004744:	4b5a      	ldr	r3, [pc, #360]	@ (80048b0 <pvPortMalloc+0x188>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8095 	bne.w	800487c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01e      	beq.n	8004796 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004758:	2208      	movs	r2, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d015      	beq.n	8004796 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f023 0307 	bic.w	r3, r3, #7
 8004770:	3308      	adds	r3, #8
 8004772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <pvPortMalloc+0x6e>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	617b      	str	r3, [r7, #20]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06f      	beq.n	800487c <pvPortMalloc+0x154>
 800479c:	4b45      	ldr	r3, [pc, #276]	@ (80048b4 <pvPortMalloc+0x18c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d86a      	bhi.n	800487c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047a6:	4b44      	ldr	r3, [pc, #272]	@ (80048b8 <pvPortMalloc+0x190>)
 80047a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047aa:	4b43      	ldr	r3, [pc, #268]	@ (80048b8 <pvPortMalloc+0x190>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b0:	e004      	b.n	80047bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d903      	bls.n	80047ce <pvPortMalloc+0xa6>
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f1      	bne.n	80047b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <pvPortMalloc+0x184>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d051      	beq.n	800487c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2208      	movs	r2, #8
 80047de:	4413      	add	r3, r2
 80047e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	2308      	movs	r3, #8
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d920      	bls.n	800483c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <pvPortMalloc+0xfc>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	613b      	str	r3, [r7, #16]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f000 f90a 	bl	8004a50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <pvPortMalloc+0x18c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <pvPortMalloc+0x18c>)
 8004848:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800484a:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <pvPortMalloc+0x18c>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <pvPortMalloc+0x194>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <pvPortMalloc+0x18c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <pvPortMalloc+0x194>)
 800485c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <pvPortMalloc+0x188>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	431a      	orrs	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004872:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <pvPortMalloc+0x198>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <pvPortMalloc+0x198>)
 800487a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800487c:	f7ff fa46 	bl	8003d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <pvPortMalloc+0x17a>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60fb      	str	r3, [r7, #12]
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <pvPortMalloc+0x176>
	return pvReturn;
 80048a2:	69fb      	ldr	r3, [r7, #28]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	@ 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	2000414c 	.word	0x2000414c
 80048b0:	20004160 	.word	0x20004160
 80048b4:	20004150 	.word	0x20004150
 80048b8:	20004144 	.word	0x20004144
 80048bc:	20004154 	.word	0x20004154
 80048c0:	20004158 	.word	0x20004158

080048c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048d6:	2308      	movs	r3, #8
 80048d8:	425b      	negs	r3, r3
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <vPortFree+0xbc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <vPortFree+0x46>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <vPortFree+0x66>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <vPortFree+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01e      	beq.n	8004976 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11a      	bne.n	8004976 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <vPortFree+0xbc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004950:	f7ff f9ce 	bl	8003cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <vPortFree+0xc0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4413      	add	r3, r2
 800495e:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <vPortFree+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	f000 f874 	bl	8004a50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <vPortFree+0xc4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a06      	ldr	r2, [pc, #24]	@ (8004988 <vPortFree+0xc4>)
 8004970:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004972:	f7ff f9cb 	bl	8003d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20004160 	.word	0x20004160
 8004984:	20004150 	.word	0x20004150
 8004988:	2000415c 	.word	0x2000415c

0800498c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004992:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004996:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004998:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <prvHeapInit+0xac>)
 800499a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3307      	adds	r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <prvHeapInit+0xac>)
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <prvHeapInit+0xb0>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049ca:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <prvHeapInit+0xb0>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049d8:	2208      	movs	r2, #8
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <prvHeapInit+0xb4>)
 80049ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <prvHeapInit+0xb4>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <prvHeapInit+0xb8>)
 8004a1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <prvHeapInit+0xbc>)
 8004a22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <prvHeapInit+0xc0>)
 8004a26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000544 	.word	0x20000544
 8004a3c:	20004144 	.word	0x20004144
 8004a40:	2000414c 	.word	0x2000414c
 8004a44:	20004154 	.word	0x20004154
 8004a48:	20004150 	.word	0x20004150
 8004a4c:	20004160 	.word	0x20004160

08004a50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <prvInsertBlockIntoFreeList+0xac>)
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e002      	b.n	8004a64 <prvInsertBlockIntoFreeList+0x14>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d8f7      	bhi.n	8004a5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d108      	bne.n	8004a92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d118      	bne.n	8004ad8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d00d      	beq.n	8004ace <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e008      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e003      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d002      	beq.n	8004aee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20004144 	.word	0x20004144
 8004b00:	2000414c 	.word	0x2000414c

08004b04 <siprintf>:
 8004b04:	b40e      	push	{r1, r2, r3}
 8004b06:	b510      	push	{r4, lr}
 8004b08:	b09d      	sub	sp, #116	@ 0x74
 8004b0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004b0c:	9002      	str	r0, [sp, #8]
 8004b0e:	9006      	str	r0, [sp, #24]
 8004b10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b14:	480a      	ldr	r0, [pc, #40]	@ (8004b40 <siprintf+0x3c>)
 8004b16:	9107      	str	r1, [sp, #28]
 8004b18:	9104      	str	r1, [sp, #16]
 8004b1a:	490a      	ldr	r1, [pc, #40]	@ (8004b44 <siprintf+0x40>)
 8004b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b20:	9105      	str	r1, [sp, #20]
 8004b22:	2400      	movs	r4, #0
 8004b24:	a902      	add	r1, sp, #8
 8004b26:	6800      	ldr	r0, [r0, #0]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004b2c:	f000 fa00 	bl	8004f30 <_svfiprintf_r>
 8004b30:	9b02      	ldr	r3, [sp, #8]
 8004b32:	701c      	strb	r4, [r3, #0]
 8004b34:	b01d      	add	sp, #116	@ 0x74
 8004b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3a:	b003      	add	sp, #12
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000010 	.word	0x20000010
 8004b44:	ffff0208 	.word	0xffff0208

08004b48 <memset>:
 8004b48:	4402      	add	r2, r0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <memset+0xa>
 8004b50:	4770      	bx	lr
 8004b52:	f803 1b01 	strb.w	r1, [r3], #1
 8004b56:	e7f9      	b.n	8004b4c <memset+0x4>

08004b58 <_reclaim_reent>:
 8004b58:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <_reclaim_reent+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4283      	cmp	r3, r0
 8004b5e:	b570      	push	{r4, r5, r6, lr}
 8004b60:	4604      	mov	r4, r0
 8004b62:	d053      	beq.n	8004c0c <_reclaim_reent+0xb4>
 8004b64:	69c3      	ldr	r3, [r0, #28]
 8004b66:	b31b      	cbz	r3, 8004bb0 <_reclaim_reent+0x58>
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	b163      	cbz	r3, 8004b86 <_reclaim_reent+0x2e>
 8004b6c:	2500      	movs	r5, #0
 8004b6e:	69e3      	ldr	r3, [r4, #28]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	5959      	ldr	r1, [r3, r5]
 8004b74:	b9b1      	cbnz	r1, 8004ba4 <_reclaim_reent+0x4c>
 8004b76:	3504      	adds	r5, #4
 8004b78:	2d80      	cmp	r5, #128	@ 0x80
 8004b7a:	d1f8      	bne.n	8004b6e <_reclaim_reent+0x16>
 8004b7c:	69e3      	ldr	r3, [r4, #28]
 8004b7e:	4620      	mov	r0, r4
 8004b80:	68d9      	ldr	r1, [r3, #12]
 8004b82:	f000 f881 	bl	8004c88 <_free_r>
 8004b86:	69e3      	ldr	r3, [r4, #28]
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	b111      	cbz	r1, 8004b92 <_reclaim_reent+0x3a>
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 f87b 	bl	8004c88 <_free_r>
 8004b92:	69e3      	ldr	r3, [r4, #28]
 8004b94:	689d      	ldr	r5, [r3, #8]
 8004b96:	b15d      	cbz	r5, 8004bb0 <_reclaim_reent+0x58>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	682d      	ldr	r5, [r5, #0]
 8004b9e:	f000 f873 	bl	8004c88 <_free_r>
 8004ba2:	e7f8      	b.n	8004b96 <_reclaim_reent+0x3e>
 8004ba4:	680e      	ldr	r6, [r1, #0]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 f86e 	bl	8004c88 <_free_r>
 8004bac:	4631      	mov	r1, r6
 8004bae:	e7e1      	b.n	8004b74 <_reclaim_reent+0x1c>
 8004bb0:	6961      	ldr	r1, [r4, #20]
 8004bb2:	b111      	cbz	r1, 8004bba <_reclaim_reent+0x62>
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f000 f867 	bl	8004c88 <_free_r>
 8004bba:	69e1      	ldr	r1, [r4, #28]
 8004bbc:	b111      	cbz	r1, 8004bc4 <_reclaim_reent+0x6c>
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f000 f862 	bl	8004c88 <_free_r>
 8004bc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004bc6:	b111      	cbz	r1, 8004bce <_reclaim_reent+0x76>
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 f85d 	bl	8004c88 <_free_r>
 8004bce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bd0:	b111      	cbz	r1, 8004bd8 <_reclaim_reent+0x80>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f858 	bl	8004c88 <_free_r>
 8004bd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004bda:	b111      	cbz	r1, 8004be2 <_reclaim_reent+0x8a>
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 f853 	bl	8004c88 <_free_r>
 8004be2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004be4:	b111      	cbz	r1, 8004bec <_reclaim_reent+0x94>
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 f84e 	bl	8004c88 <_free_r>
 8004bec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004bee:	b111      	cbz	r1, 8004bf6 <_reclaim_reent+0x9e>
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 f849 	bl	8004c88 <_free_r>
 8004bf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004bf8:	b111      	cbz	r1, 8004c00 <_reclaim_reent+0xa8>
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f844 	bl	8004c88 <_free_r>
 8004c00:	6a23      	ldr	r3, [r4, #32]
 8004c02:	b11b      	cbz	r3, 8004c0c <_reclaim_reent+0xb4>
 8004c04:	4620      	mov	r0, r4
 8004c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c0a:	4718      	bx	r3
 8004c0c:	bd70      	pop	{r4, r5, r6, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000010 	.word	0x20000010

08004c14 <__errno>:
 8004c14:	4b01      	ldr	r3, [pc, #4]	@ (8004c1c <__errno+0x8>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000010 	.word	0x20000010

08004c20 <__libc_init_array>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4d0d      	ldr	r5, [pc, #52]	@ (8004c58 <__libc_init_array+0x38>)
 8004c24:	4c0d      	ldr	r4, [pc, #52]	@ (8004c5c <__libc_init_array+0x3c>)
 8004c26:	1b64      	subs	r4, r4, r5
 8004c28:	10a4      	asrs	r4, r4, #2
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	42a6      	cmp	r6, r4
 8004c2e:	d109      	bne.n	8004c44 <__libc_init_array+0x24>
 8004c30:	4d0b      	ldr	r5, [pc, #44]	@ (8004c60 <__libc_init_array+0x40>)
 8004c32:	4c0c      	ldr	r4, [pc, #48]	@ (8004c64 <__libc_init_array+0x44>)
 8004c34:	f000 fc64 	bl	8005500 <_init>
 8004c38:	1b64      	subs	r4, r4, r5
 8004c3a:	10a4      	asrs	r4, r4, #2
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	42a6      	cmp	r6, r4
 8004c40:	d105      	bne.n	8004c4e <__libc_init_array+0x2e>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c48:	4798      	blx	r3
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7ee      	b.n	8004c2c <__libc_init_array+0xc>
 8004c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c52:	4798      	blx	r3
 8004c54:	3601      	adds	r6, #1
 8004c56:	e7f2      	b.n	8004c3e <__libc_init_array+0x1e>
 8004c58:	080055f4 	.word	0x080055f4
 8004c5c:	080055f4 	.word	0x080055f4
 8004c60:	080055f4 	.word	0x080055f4
 8004c64:	080055f8 	.word	0x080055f8

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <memcpy>:
 8004c6c:	440a      	add	r2, r1
 8004c6e:	4291      	cmp	r1, r2
 8004c70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004c74:	d100      	bne.n	8004c78 <memcpy+0xc>
 8004c76:	4770      	bx	lr
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c82:	4291      	cmp	r1, r2
 8004c84:	d1f9      	bne.n	8004c7a <memcpy+0xe>
 8004c86:	bd10      	pop	{r4, pc}

08004c88 <_free_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d041      	beq.n	8004d14 <_free_r+0x8c>
 8004c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c94:	1f0c      	subs	r4, r1, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfb8      	it	lt
 8004c9a:	18e4      	addlt	r4, r4, r3
 8004c9c:	f000 f8e0 	bl	8004e60 <__malloc_lock>
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d18 <_free_r+0x90>)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	b933      	cbnz	r3, 8004cb4 <_free_r+0x2c>
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	6014      	str	r4, [r2, #0]
 8004caa:	4628      	mov	r0, r5
 8004cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cb0:	f000 b8dc 	b.w	8004e6c <__malloc_unlock>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x42>
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	1821      	adds	r1, r4, r0
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf01      	itttt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	1809      	addeq	r1, r1, r0
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	e7ed      	b.n	8004ca6 <_free_r+0x1e>
 8004cca:	461a      	mov	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b10b      	cbz	r3, 8004cd4 <_free_r+0x4c>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x42>
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	1850      	adds	r0, r2, r1
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x6c>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	4401      	add	r1, r0
 8004ce0:	1850      	adds	r0, r2, r1
 8004ce2:	4283      	cmp	r3, r0
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	d1e0      	bne.n	8004caa <_free_r+0x22>
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	6053      	str	r3, [r2, #4]
 8004cee:	4408      	add	r0, r1
 8004cf0:	6010      	str	r0, [r2, #0]
 8004cf2:	e7da      	b.n	8004caa <_free_r+0x22>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x74>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	e7d6      	b.n	8004caa <_free_r+0x22>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf04      	itt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	bf04      	itt	eq
 8004d0c:	1809      	addeq	r1, r1, r0
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	6054      	str	r4, [r2, #4]
 8004d12:	e7ca      	b.n	8004caa <_free_r+0x22>
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	bf00      	nop
 8004d18:	200042a8 	.word	0x200042a8

08004d1c <sbrk_aligned>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004d5c <sbrk_aligned+0x40>)
 8004d20:	460c      	mov	r4, r1
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	4605      	mov	r5, r0
 8004d26:	b911      	cbnz	r1, 8004d2e <sbrk_aligned+0x12>
 8004d28:	f000 fba4 	bl	8005474 <_sbrk_r>
 8004d2c:	6030      	str	r0, [r6, #0]
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 fb9f 	bl	8005474 <_sbrk_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d103      	bne.n	8004d42 <sbrk_aligned+0x26>
 8004d3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d3e:	4620      	mov	r0, r4
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	1cc4      	adds	r4, r0, #3
 8004d44:	f024 0403 	bic.w	r4, r4, #3
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d0f8      	beq.n	8004d3e <sbrk_aligned+0x22>
 8004d4c:	1a21      	subs	r1, r4, r0
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 fb90 	bl	8005474 <_sbrk_r>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d1f2      	bne.n	8004d3e <sbrk_aligned+0x22>
 8004d58:	e7ef      	b.n	8004d3a <sbrk_aligned+0x1e>
 8004d5a:	bf00      	nop
 8004d5c:	200042a4 	.word	0x200042a4

08004d60 <_malloc_r>:
 8004d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d64:	1ccd      	adds	r5, r1, #3
 8004d66:	f025 0503 	bic.w	r5, r5, #3
 8004d6a:	3508      	adds	r5, #8
 8004d6c:	2d0c      	cmp	r5, #12
 8004d6e:	bf38      	it	cc
 8004d70:	250c      	movcc	r5, #12
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	4606      	mov	r6, r0
 8004d76:	db01      	blt.n	8004d7c <_malloc_r+0x1c>
 8004d78:	42a9      	cmp	r1, r5
 8004d7a:	d904      	bls.n	8004d86 <_malloc_r+0x26>
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	2000      	movs	r0, #0
 8004d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e5c <_malloc_r+0xfc>
 8004d8a:	f000 f869 	bl	8004e60 <__malloc_lock>
 8004d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d92:	461c      	mov	r4, r3
 8004d94:	bb44      	cbnz	r4, 8004de8 <_malloc_r+0x88>
 8004d96:	4629      	mov	r1, r5
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f7ff ffbf 	bl	8004d1c <sbrk_aligned>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	4604      	mov	r4, r0
 8004da2:	d158      	bne.n	8004e56 <_malloc_r+0xf6>
 8004da4:	f8d8 4000 	ldr.w	r4, [r8]
 8004da8:	4627      	mov	r7, r4
 8004daa:	2f00      	cmp	r7, #0
 8004dac:	d143      	bne.n	8004e36 <_malloc_r+0xd6>
 8004dae:	2c00      	cmp	r4, #0
 8004db0:	d04b      	beq.n	8004e4a <_malloc_r+0xea>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	4639      	mov	r1, r7
 8004db6:	4630      	mov	r0, r6
 8004db8:	eb04 0903 	add.w	r9, r4, r3
 8004dbc:	f000 fb5a 	bl	8005474 <_sbrk_r>
 8004dc0:	4581      	cmp	r9, r0
 8004dc2:	d142      	bne.n	8004e4a <_malloc_r+0xea>
 8004dc4:	6821      	ldr	r1, [r4, #0]
 8004dc6:	1a6d      	subs	r5, r5, r1
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7ff ffa6 	bl	8004d1c <sbrk_aligned>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d03a      	beq.n	8004e4a <_malloc_r+0xea>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	442b      	add	r3, r5
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	f8d8 3000 	ldr.w	r3, [r8]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	bb62      	cbnz	r2, 8004e3c <_malloc_r+0xdc>
 8004de2:	f8c8 7000 	str.w	r7, [r8]
 8004de6:	e00f      	b.n	8004e08 <_malloc_r+0xa8>
 8004de8:	6822      	ldr	r2, [r4, #0]
 8004dea:	1b52      	subs	r2, r2, r5
 8004dec:	d420      	bmi.n	8004e30 <_malloc_r+0xd0>
 8004dee:	2a0b      	cmp	r2, #11
 8004df0:	d917      	bls.n	8004e22 <_malloc_r+0xc2>
 8004df2:	1961      	adds	r1, r4, r5
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	6025      	str	r5, [r4, #0]
 8004df8:	bf18      	it	ne
 8004dfa:	6059      	strne	r1, [r3, #4]
 8004dfc:	6863      	ldr	r3, [r4, #4]
 8004dfe:	bf08      	it	eq
 8004e00:	f8c8 1000 	streq.w	r1, [r8]
 8004e04:	5162      	str	r2, [r4, r5]
 8004e06:	604b      	str	r3, [r1, #4]
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f000 f82f 	bl	8004e6c <__malloc_unlock>
 8004e0e:	f104 000b 	add.w	r0, r4, #11
 8004e12:	1d23      	adds	r3, r4, #4
 8004e14:	f020 0007 	bic.w	r0, r0, #7
 8004e18:	1ac2      	subs	r2, r0, r3
 8004e1a:	bf1c      	itt	ne
 8004e1c:	1a1b      	subne	r3, r3, r0
 8004e1e:	50a3      	strne	r3, [r4, r2]
 8004e20:	e7af      	b.n	8004d82 <_malloc_r+0x22>
 8004e22:	6862      	ldr	r2, [r4, #4]
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	bf0c      	ite	eq
 8004e28:	f8c8 2000 	streq.w	r2, [r8]
 8004e2c:	605a      	strne	r2, [r3, #4]
 8004e2e:	e7eb      	b.n	8004e08 <_malloc_r+0xa8>
 8004e30:	4623      	mov	r3, r4
 8004e32:	6864      	ldr	r4, [r4, #4]
 8004e34:	e7ae      	b.n	8004d94 <_malloc_r+0x34>
 8004e36:	463c      	mov	r4, r7
 8004e38:	687f      	ldr	r7, [r7, #4]
 8004e3a:	e7b6      	b.n	8004daa <_malloc_r+0x4a>
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d1fb      	bne.n	8004e3c <_malloc_r+0xdc>
 8004e44:	2300      	movs	r3, #0
 8004e46:	6053      	str	r3, [r2, #4]
 8004e48:	e7de      	b.n	8004e08 <_malloc_r+0xa8>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	6033      	str	r3, [r6, #0]
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 f80c 	bl	8004e6c <__malloc_unlock>
 8004e54:	e794      	b.n	8004d80 <_malloc_r+0x20>
 8004e56:	6005      	str	r5, [r0, #0]
 8004e58:	e7d6      	b.n	8004e08 <_malloc_r+0xa8>
 8004e5a:	bf00      	nop
 8004e5c:	200042a8 	.word	0x200042a8

08004e60 <__malloc_lock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	@ (8004e68 <__malloc_lock+0x8>)
 8004e62:	f7ff bf01 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004e66:	bf00      	nop
 8004e68:	200042a0 	.word	0x200042a0

08004e6c <__malloc_unlock>:
 8004e6c:	4801      	ldr	r0, [pc, #4]	@ (8004e74 <__malloc_unlock+0x8>)
 8004e6e:	f7ff befc 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004e72:	bf00      	nop
 8004e74:	200042a0 	.word	0x200042a0

08004e78 <__ssputs_r>:
 8004e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e7c:	688e      	ldr	r6, [r1, #8]
 8004e7e:	461f      	mov	r7, r3
 8004e80:	42be      	cmp	r6, r7
 8004e82:	680b      	ldr	r3, [r1, #0]
 8004e84:	4682      	mov	sl, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	4690      	mov	r8, r2
 8004e8a:	d82d      	bhi.n	8004ee8 <__ssputs_r+0x70>
 8004e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e94:	d026      	beq.n	8004ee4 <__ssputs_r+0x6c>
 8004e96:	6965      	ldr	r5, [r4, #20]
 8004e98:	6909      	ldr	r1, [r1, #16]
 8004e9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e9e:	eba3 0901 	sub.w	r9, r3, r1
 8004ea2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ea6:	1c7b      	adds	r3, r7, #1
 8004ea8:	444b      	add	r3, r9
 8004eaa:	106d      	asrs	r5, r5, #1
 8004eac:	429d      	cmp	r5, r3
 8004eae:	bf38      	it	cc
 8004eb0:	461d      	movcc	r5, r3
 8004eb2:	0553      	lsls	r3, r2, #21
 8004eb4:	d527      	bpl.n	8004f06 <__ssputs_r+0x8e>
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	f7ff ff52 	bl	8004d60 <_malloc_r>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	b360      	cbz	r0, 8004f1a <__ssputs_r+0xa2>
 8004ec0:	6921      	ldr	r1, [r4, #16]
 8004ec2:	464a      	mov	r2, r9
 8004ec4:	f7ff fed2 	bl	8004c6c <memcpy>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ed2:	81a3      	strh	r3, [r4, #12]
 8004ed4:	6126      	str	r6, [r4, #16]
 8004ed6:	6165      	str	r5, [r4, #20]
 8004ed8:	444e      	add	r6, r9
 8004eda:	eba5 0509 	sub.w	r5, r5, r9
 8004ede:	6026      	str	r6, [r4, #0]
 8004ee0:	60a5      	str	r5, [r4, #8]
 8004ee2:	463e      	mov	r6, r7
 8004ee4:	42be      	cmp	r6, r7
 8004ee6:	d900      	bls.n	8004eea <__ssputs_r+0x72>
 8004ee8:	463e      	mov	r6, r7
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	4632      	mov	r2, r6
 8004eee:	4641      	mov	r1, r8
 8004ef0:	f000 faa6 	bl	8005440 <memmove>
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	1b9b      	subs	r3, r3, r6
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	4433      	add	r3, r6
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	2000      	movs	r0, #0
 8004f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f06:	462a      	mov	r2, r5
 8004f08:	f000 fac4 	bl	8005494 <_realloc_r>
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d1e0      	bne.n	8004ed4 <__ssputs_r+0x5c>
 8004f12:	6921      	ldr	r1, [r4, #16]
 8004f14:	4650      	mov	r0, sl
 8004f16:	f7ff feb7 	bl	8004c88 <_free_r>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	f8ca 3000 	str.w	r3, [sl]
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f2c:	e7e9      	b.n	8004f02 <__ssputs_r+0x8a>
	...

08004f30 <_svfiprintf_r>:
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	4698      	mov	r8, r3
 8004f36:	898b      	ldrh	r3, [r1, #12]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	b09d      	sub	sp, #116	@ 0x74
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	460d      	mov	r5, r1
 8004f40:	4614      	mov	r4, r2
 8004f42:	d510      	bpl.n	8004f66 <_svfiprintf_r+0x36>
 8004f44:	690b      	ldr	r3, [r1, #16]
 8004f46:	b973      	cbnz	r3, 8004f66 <_svfiprintf_r+0x36>
 8004f48:	2140      	movs	r1, #64	@ 0x40
 8004f4a:	f7ff ff09 	bl	8004d60 <_malloc_r>
 8004f4e:	6028      	str	r0, [r5, #0]
 8004f50:	6128      	str	r0, [r5, #16]
 8004f52:	b930      	cbnz	r0, 8004f62 <_svfiprintf_r+0x32>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f5c:	b01d      	add	sp, #116	@ 0x74
 8004f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f62:	2340      	movs	r3, #64	@ 0x40
 8004f64:	616b      	str	r3, [r5, #20]
 8004f66:	2300      	movs	r3, #0
 8004f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f74:	2330      	movs	r3, #48	@ 0x30
 8004f76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005114 <_svfiprintf_r+0x1e4>
 8004f7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f7e:	f04f 0901 	mov.w	r9, #1
 8004f82:	4623      	mov	r3, r4
 8004f84:	469a      	mov	sl, r3
 8004f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f8a:	b10a      	cbz	r2, 8004f90 <_svfiprintf_r+0x60>
 8004f8c:	2a25      	cmp	r2, #37	@ 0x25
 8004f8e:	d1f9      	bne.n	8004f84 <_svfiprintf_r+0x54>
 8004f90:	ebba 0b04 	subs.w	fp, sl, r4
 8004f94:	d00b      	beq.n	8004fae <_svfiprintf_r+0x7e>
 8004f96:	465b      	mov	r3, fp
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff ff6b 	bl	8004e78 <__ssputs_r>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f000 80a7 	beq.w	80050f6 <_svfiprintf_r+0x1c6>
 8004fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004faa:	445a      	add	r2, fp
 8004fac:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fae:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 809f 	beq.w	80050f6 <_svfiprintf_r+0x1c6>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fc2:	f10a 0a01 	add.w	sl, sl, #1
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	9307      	str	r3, [sp, #28]
 8004fca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fce:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fd0:	4654      	mov	r4, sl
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd8:	484e      	ldr	r0, [pc, #312]	@ (8005114 <_svfiprintf_r+0x1e4>)
 8004fda:	f7fb f901 	bl	80001e0 <memchr>
 8004fde:	9a04      	ldr	r2, [sp, #16]
 8004fe0:	b9d8      	cbnz	r0, 800501a <_svfiprintf_r+0xea>
 8004fe2:	06d0      	lsls	r0, r2, #27
 8004fe4:	bf44      	itt	mi
 8004fe6:	2320      	movmi	r3, #32
 8004fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fec:	0711      	lsls	r1, r2, #28
 8004fee:	bf44      	itt	mi
 8004ff0:	232b      	movmi	r3, #43	@ 0x2b
 8004ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ffc:	d015      	beq.n	800502a <_svfiprintf_r+0xfa>
 8004ffe:	9a07      	ldr	r2, [sp, #28]
 8005000:	4654      	mov	r4, sl
 8005002:	2000      	movs	r0, #0
 8005004:	f04f 0c0a 	mov.w	ip, #10
 8005008:	4621      	mov	r1, r4
 800500a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800500e:	3b30      	subs	r3, #48	@ 0x30
 8005010:	2b09      	cmp	r3, #9
 8005012:	d94b      	bls.n	80050ac <_svfiprintf_r+0x17c>
 8005014:	b1b0      	cbz	r0, 8005044 <_svfiprintf_r+0x114>
 8005016:	9207      	str	r2, [sp, #28]
 8005018:	e014      	b.n	8005044 <_svfiprintf_r+0x114>
 800501a:	eba0 0308 	sub.w	r3, r0, r8
 800501e:	fa09 f303 	lsl.w	r3, r9, r3
 8005022:	4313      	orrs	r3, r2
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	46a2      	mov	sl, r4
 8005028:	e7d2      	b.n	8004fd0 <_svfiprintf_r+0xa0>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	1d19      	adds	r1, r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	9103      	str	r1, [sp, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfbb      	ittet	lt
 8005036:	425b      	neglt	r3, r3
 8005038:	f042 0202 	orrlt.w	r2, r2, #2
 800503c:	9307      	strge	r3, [sp, #28]
 800503e:	9307      	strlt	r3, [sp, #28]
 8005040:	bfb8      	it	lt
 8005042:	9204      	strlt	r2, [sp, #16]
 8005044:	7823      	ldrb	r3, [r4, #0]
 8005046:	2b2e      	cmp	r3, #46	@ 0x2e
 8005048:	d10a      	bne.n	8005060 <_svfiprintf_r+0x130>
 800504a:	7863      	ldrb	r3, [r4, #1]
 800504c:	2b2a      	cmp	r3, #42	@ 0x2a
 800504e:	d132      	bne.n	80050b6 <_svfiprintf_r+0x186>
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	9203      	str	r2, [sp, #12]
 8005058:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800505c:	3402      	adds	r4, #2
 800505e:	9305      	str	r3, [sp, #20]
 8005060:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005124 <_svfiprintf_r+0x1f4>
 8005064:	7821      	ldrb	r1, [r4, #0]
 8005066:	2203      	movs	r2, #3
 8005068:	4650      	mov	r0, sl
 800506a:	f7fb f8b9 	bl	80001e0 <memchr>
 800506e:	b138      	cbz	r0, 8005080 <_svfiprintf_r+0x150>
 8005070:	9b04      	ldr	r3, [sp, #16]
 8005072:	eba0 000a 	sub.w	r0, r0, sl
 8005076:	2240      	movs	r2, #64	@ 0x40
 8005078:	4082      	lsls	r2, r0
 800507a:	4313      	orrs	r3, r2
 800507c:	3401      	adds	r4, #1
 800507e:	9304      	str	r3, [sp, #16]
 8005080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005084:	4824      	ldr	r0, [pc, #144]	@ (8005118 <_svfiprintf_r+0x1e8>)
 8005086:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800508a:	2206      	movs	r2, #6
 800508c:	f7fb f8a8 	bl	80001e0 <memchr>
 8005090:	2800      	cmp	r0, #0
 8005092:	d036      	beq.n	8005102 <_svfiprintf_r+0x1d2>
 8005094:	4b21      	ldr	r3, [pc, #132]	@ (800511c <_svfiprintf_r+0x1ec>)
 8005096:	bb1b      	cbnz	r3, 80050e0 <_svfiprintf_r+0x1b0>
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	3307      	adds	r3, #7
 800509c:	f023 0307 	bic.w	r3, r3, #7
 80050a0:	3308      	adds	r3, #8
 80050a2:	9303      	str	r3, [sp, #12]
 80050a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a6:	4433      	add	r3, r6
 80050a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80050aa:	e76a      	b.n	8004f82 <_svfiprintf_r+0x52>
 80050ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80050b0:	460c      	mov	r4, r1
 80050b2:	2001      	movs	r0, #1
 80050b4:	e7a8      	b.n	8005008 <_svfiprintf_r+0xd8>
 80050b6:	2300      	movs	r3, #0
 80050b8:	3401      	adds	r4, #1
 80050ba:	9305      	str	r3, [sp, #20]
 80050bc:	4619      	mov	r1, r3
 80050be:	f04f 0c0a 	mov.w	ip, #10
 80050c2:	4620      	mov	r0, r4
 80050c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c8:	3a30      	subs	r2, #48	@ 0x30
 80050ca:	2a09      	cmp	r2, #9
 80050cc:	d903      	bls.n	80050d6 <_svfiprintf_r+0x1a6>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0c6      	beq.n	8005060 <_svfiprintf_r+0x130>
 80050d2:	9105      	str	r1, [sp, #20]
 80050d4:	e7c4      	b.n	8005060 <_svfiprintf_r+0x130>
 80050d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050da:	4604      	mov	r4, r0
 80050dc:	2301      	movs	r3, #1
 80050de:	e7f0      	b.n	80050c2 <_svfiprintf_r+0x192>
 80050e0:	ab03      	add	r3, sp, #12
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	462a      	mov	r2, r5
 80050e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005120 <_svfiprintf_r+0x1f0>)
 80050e8:	a904      	add	r1, sp, #16
 80050ea:	4638      	mov	r0, r7
 80050ec:	f3af 8000 	nop.w
 80050f0:	1c42      	adds	r2, r0, #1
 80050f2:	4606      	mov	r6, r0
 80050f4:	d1d6      	bne.n	80050a4 <_svfiprintf_r+0x174>
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	065b      	lsls	r3, r3, #25
 80050fa:	f53f af2d 	bmi.w	8004f58 <_svfiprintf_r+0x28>
 80050fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005100:	e72c      	b.n	8004f5c <_svfiprintf_r+0x2c>
 8005102:	ab03      	add	r3, sp, #12
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462a      	mov	r2, r5
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <_svfiprintf_r+0x1f0>)
 800510a:	a904      	add	r1, sp, #16
 800510c:	4638      	mov	r0, r7
 800510e:	f000 f879 	bl	8005204 <_printf_i>
 8005112:	e7ed      	b.n	80050f0 <_svfiprintf_r+0x1c0>
 8005114:	080055b8 	.word	0x080055b8
 8005118:	080055c2 	.word	0x080055c2
 800511c:	00000000 	.word	0x00000000
 8005120:	08004e79 	.word	0x08004e79
 8005124:	080055be 	.word	0x080055be

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4698      	mov	r8, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	3b00      	subs	r3, #0
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005184:	4641      	mov	r1, r8
 8005186:	4638      	mov	r0, r7
 8005188:	47c8      	blx	r9
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	f003 0306 	and.w	r3, r3, #6
 8005196:	2b04      	cmp	r3, #4
 8005198:	bf02      	ittt	eq
 800519a:	68e5      	ldreq	r5, [r4, #12]
 800519c:	6833      	ldreq	r3, [r6, #0]
 800519e:	1aed      	subeq	r5, r5, r3
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4641      	mov	r1, r8
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c8      	blx	r9
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	@ 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4641      	mov	r1, r8
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c8      	blx	r9
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	7e0f      	ldrb	r7, [r1, #24]
 800520a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800520c:	2f78      	cmp	r7, #120	@ 0x78
 800520e:	4691      	mov	r9, r2
 8005210:	4680      	mov	r8, r0
 8005212:	460c      	mov	r4, r1
 8005214:	469a      	mov	sl, r3
 8005216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	@ 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d1 	beq.w	80053c8 <_printf_i+0x1c4>
 8005226:	2f58      	cmp	r7, #88	@ 0x58
 8005228:	f000 80b8 	beq.w	800539c <_printf_i+0x198>
 800522c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a101      	add	r1, pc, #4	@ (adr r1, 8005244 <_printf_i+0x40>)
 8005240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053af 	.word	0x080053af
 8005274:	080052db 	.word	0x080052db
 8005278:	08005369 	.word	0x08005369
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053d1 	.word	0x080053d1
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052db 	.word	0x080052db
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	08005371 	.word	0x08005371
 800529c:	6833      	ldr	r3, [r6, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6032      	str	r2, [r6, #0]
 80052a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09c      	b.n	80053ea <_printf_i+0x1e6>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	1d19      	adds	r1, r3, #4
 80052b6:	6031      	str	r1, [r6, #0]
 80052b8:	0606      	lsls	r6, r0, #24
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0xbc>
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	e003      	b.n	80052c8 <_printf_i+0xc4>
 80052c0:	0645      	lsls	r5, r0, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0xb8>
 80052c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	da03      	bge.n	80052d4 <_printf_i+0xd0>
 80052cc:	232d      	movs	r3, #45	@ 0x2d
 80052ce:	426d      	negs	r5, r5
 80052d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d4:	4858      	ldr	r0, [pc, #352]	@ (8005438 <_printf_i+0x234>)
 80052d6:	230a      	movs	r3, #10
 80052d8:	e011      	b.n	80052fe <_printf_i+0xfa>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	0608      	lsls	r0, r1, #24
 80052e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e4:	d402      	bmi.n	80052ec <_printf_i+0xe8>
 80052e6:	0649      	lsls	r1, r1, #25
 80052e8:	bf48      	it	mi
 80052ea:	b2ad      	uxthmi	r5, r5
 80052ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ee:	4852      	ldr	r0, [pc, #328]	@ (8005438 <_printf_i+0x234>)
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	bf14      	ite	ne
 80052f4:	230a      	movne	r3, #10
 80052f6:	2308      	moveq	r3, #8
 80052f8:	2100      	movs	r1, #0
 80052fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fe:	6866      	ldr	r6, [r4, #4]
 8005300:	60a6      	str	r6, [r4, #8]
 8005302:	2e00      	cmp	r6, #0
 8005304:	db05      	blt.n	8005312 <_printf_i+0x10e>
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	432e      	orrs	r6, r5
 800530a:	f021 0104 	bic.w	r1, r1, #4
 800530e:	6021      	str	r1, [r4, #0]
 8005310:	d04b      	beq.n	80053aa <_printf_i+0x1a6>
 8005312:	4616      	mov	r6, r2
 8005314:	fbb5 f1f3 	udiv	r1, r5, r3
 8005318:	fb03 5711 	mls	r7, r3, r1, r5
 800531c:	5dc7      	ldrb	r7, [r0, r7]
 800531e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005322:	462f      	mov	r7, r5
 8005324:	42bb      	cmp	r3, r7
 8005326:	460d      	mov	r5, r1
 8005328:	d9f4      	bls.n	8005314 <_printf_i+0x110>
 800532a:	2b08      	cmp	r3, #8
 800532c:	d10b      	bne.n	8005346 <_printf_i+0x142>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07df      	lsls	r7, r3, #31
 8005332:	d508      	bpl.n	8005346 <_printf_i+0x142>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	6861      	ldr	r1, [r4, #4]
 8005338:	4299      	cmp	r1, r3
 800533a:	bfde      	ittt	le
 800533c:	2330      	movle	r3, #48	@ 0x30
 800533e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005342:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005346:	1b92      	subs	r2, r2, r6
 8005348:	6122      	str	r2, [r4, #16]
 800534a:	f8cd a000 	str.w	sl, [sp]
 800534e:	464b      	mov	r3, r9
 8005350:	aa03      	add	r2, sp, #12
 8005352:	4621      	mov	r1, r4
 8005354:	4640      	mov	r0, r8
 8005356:	f7ff fee7 	bl	8005128 <_printf_common>
 800535a:	3001      	adds	r0, #1
 800535c:	d14a      	bne.n	80053f4 <_printf_i+0x1f0>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005362:	b004      	add	sp, #16
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	4832      	ldr	r0, [pc, #200]	@ (800543c <_printf_i+0x238>)
 8005372:	2778      	movs	r7, #120	@ 0x78
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	6831      	ldr	r1, [r6, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005382:	d402      	bmi.n	800538a <_printf_i+0x186>
 8005384:	065f      	lsls	r7, r3, #25
 8005386:	bf48      	it	mi
 8005388:	b2ad      	uxthmi	r5, r5
 800538a:	6031      	str	r1, [r6, #0]
 800538c:	07d9      	lsls	r1, r3, #31
 800538e:	bf44      	itt	mi
 8005390:	f043 0320 	orrmi.w	r3, r3, #32
 8005394:	6023      	strmi	r3, [r4, #0]
 8005396:	b11d      	cbz	r5, 80053a0 <_printf_i+0x19c>
 8005398:	2310      	movs	r3, #16
 800539a:	e7ad      	b.n	80052f8 <_printf_i+0xf4>
 800539c:	4826      	ldr	r0, [pc, #152]	@ (8005438 <_printf_i+0x234>)
 800539e:	e7e9      	b.n	8005374 <_printf_i+0x170>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e7f6      	b.n	8005398 <_printf_i+0x194>
 80053aa:	4616      	mov	r6, r2
 80053ac:	e7bd      	b.n	800532a <_printf_i+0x126>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	6961      	ldr	r1, [r4, #20]
 80053b4:	1d18      	adds	r0, r3, #4
 80053b6:	6030      	str	r0, [r6, #0]
 80053b8:	062e      	lsls	r6, r5, #24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	d501      	bpl.n	80053c2 <_printf_i+0x1be>
 80053be:	6019      	str	r1, [r3, #0]
 80053c0:	e002      	b.n	80053c8 <_printf_i+0x1c4>
 80053c2:	0668      	lsls	r0, r5, #25
 80053c4:	d5fb      	bpl.n	80053be <_printf_i+0x1ba>
 80053c6:	8019      	strh	r1, [r3, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	4616      	mov	r6, r2
 80053ce:	e7bc      	b.n	800534a <_printf_i+0x146>
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	6032      	str	r2, [r6, #0]
 80053d6:	681e      	ldr	r6, [r3, #0]
 80053d8:	6862      	ldr	r2, [r4, #4]
 80053da:	2100      	movs	r1, #0
 80053dc:	4630      	mov	r0, r6
 80053de:	f7fa feff 	bl	80001e0 <memchr>
 80053e2:	b108      	cbz	r0, 80053e8 <_printf_i+0x1e4>
 80053e4:	1b80      	subs	r0, r0, r6
 80053e6:	6060      	str	r0, [r4, #4]
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	6123      	str	r3, [r4, #16]
 80053ec:	2300      	movs	r3, #0
 80053ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f2:	e7aa      	b.n	800534a <_printf_i+0x146>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	4632      	mov	r2, r6
 80053f8:	4649      	mov	r1, r9
 80053fa:	4640      	mov	r0, r8
 80053fc:	47d0      	blx	sl
 80053fe:	3001      	adds	r0, #1
 8005400:	d0ad      	beq.n	800535e <_printf_i+0x15a>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	079b      	lsls	r3, r3, #30
 8005406:	d413      	bmi.n	8005430 <_printf_i+0x22c>
 8005408:	68e0      	ldr	r0, [r4, #12]
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	4298      	cmp	r0, r3
 800540e:	bfb8      	it	lt
 8005410:	4618      	movlt	r0, r3
 8005412:	e7a6      	b.n	8005362 <_printf_i+0x15e>
 8005414:	2301      	movs	r3, #1
 8005416:	4632      	mov	r2, r6
 8005418:	4649      	mov	r1, r9
 800541a:	4640      	mov	r0, r8
 800541c:	47d0      	blx	sl
 800541e:	3001      	adds	r0, #1
 8005420:	d09d      	beq.n	800535e <_printf_i+0x15a>
 8005422:	3501      	adds	r5, #1
 8005424:	68e3      	ldr	r3, [r4, #12]
 8005426:	9903      	ldr	r1, [sp, #12]
 8005428:	1a5b      	subs	r3, r3, r1
 800542a:	42ab      	cmp	r3, r5
 800542c:	dcf2      	bgt.n	8005414 <_printf_i+0x210>
 800542e:	e7eb      	b.n	8005408 <_printf_i+0x204>
 8005430:	2500      	movs	r5, #0
 8005432:	f104 0619 	add.w	r6, r4, #25
 8005436:	e7f5      	b.n	8005424 <_printf_i+0x220>
 8005438:	080055c9 	.word	0x080055c9
 800543c:	080055da 	.word	0x080055da

08005440 <memmove>:
 8005440:	4288      	cmp	r0, r1
 8005442:	b510      	push	{r4, lr}
 8005444:	eb01 0402 	add.w	r4, r1, r2
 8005448:	d902      	bls.n	8005450 <memmove+0x10>
 800544a:	4284      	cmp	r4, r0
 800544c:	4623      	mov	r3, r4
 800544e:	d807      	bhi.n	8005460 <memmove+0x20>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	42a1      	cmp	r1, r4
 8005454:	d008      	beq.n	8005468 <memmove+0x28>
 8005456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545e:	e7f8      	b.n	8005452 <memmove+0x12>
 8005460:	4402      	add	r2, r0
 8005462:	4601      	mov	r1, r0
 8005464:	428a      	cmp	r2, r1
 8005466:	d100      	bne.n	800546a <memmove+0x2a>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005472:	e7f7      	b.n	8005464 <memmove+0x24>

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d06      	ldr	r5, [pc, #24]	@ (8005490 <_sbrk_r+0x1c>)
 8005478:	2300      	movs	r3, #0
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fb fc60 	bl	8000d44 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	2000429c 	.word	0x2000429c

08005494 <_realloc_r>:
 8005494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	4607      	mov	r7, r0
 800549a:	4614      	mov	r4, r2
 800549c:	460d      	mov	r5, r1
 800549e:	b921      	cbnz	r1, 80054aa <_realloc_r+0x16>
 80054a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	4611      	mov	r1, r2
 80054a6:	f7ff bc5b 	b.w	8004d60 <_malloc_r>
 80054aa:	b92a      	cbnz	r2, 80054b8 <_realloc_r+0x24>
 80054ac:	f7ff fbec 	bl	8004c88 <_free_r>
 80054b0:	4625      	mov	r5, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b8:	f000 f81a 	bl	80054f0 <_malloc_usable_size_r>
 80054bc:	4284      	cmp	r4, r0
 80054be:	4606      	mov	r6, r0
 80054c0:	d802      	bhi.n	80054c8 <_realloc_r+0x34>
 80054c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054c6:	d8f4      	bhi.n	80054b2 <_realloc_r+0x1e>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff fc48 	bl	8004d60 <_malloc_r>
 80054d0:	4680      	mov	r8, r0
 80054d2:	b908      	cbnz	r0, 80054d8 <_realloc_r+0x44>
 80054d4:	4645      	mov	r5, r8
 80054d6:	e7ec      	b.n	80054b2 <_realloc_r+0x1e>
 80054d8:	42b4      	cmp	r4, r6
 80054da:	4622      	mov	r2, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	bf28      	it	cs
 80054e0:	4632      	movcs	r2, r6
 80054e2:	f7ff fbc3 	bl	8004c6c <memcpy>
 80054e6:	4629      	mov	r1, r5
 80054e8:	4638      	mov	r0, r7
 80054ea:	f7ff fbcd 	bl	8004c88 <_free_r>
 80054ee:	e7f1      	b.n	80054d4 <_realloc_r+0x40>

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
