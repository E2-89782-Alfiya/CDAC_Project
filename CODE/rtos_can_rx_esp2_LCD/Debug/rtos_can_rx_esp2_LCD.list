
rtos_can_rx_esp2_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006148  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080062d8  080062d8  000072d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006444  08006444  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800644c  0800644c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800644c  0800644c  0000744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006450  08006450  00007450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006454  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          000042a4  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004304  20004304  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f35  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e2  00000000  00000000  0001ffc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  000232a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001065  00000000  00000000  00024790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cbc  00000000  00000000  000257f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017432  00000000  00000000  000494b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d917c  00000000  00000000  000608e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139a5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc4  00000000  00000000  00139aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062c0 	.word	0x080062c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080062c0 	.word	0x080062c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	2000011c 	.word	0x2000011c

080005e0 <LcdInit>:

#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;

void LcdInit(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80005e4:	2014      	movs	r0, #20
 80005e6:	f000 fe65 	bl	80012b4 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005ea:	2103      	movs	r1, #3
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f82f 	bl	8000650 <LcdWriteNibble>
	HAL_Delay(5);
 80005f2:	2005      	movs	r0, #5
 80005f4:	f000 fe5e 	bl	80012b4 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80005f8:	2103      	movs	r1, #3
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f828 	bl	8000650 <LcdWriteNibble>
	HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fe57 	bl	80012b4 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000606:	2103      	movs	r1, #3
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f821 	bl	8000650 <LcdWriteNibble>
	HAL_Delay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f000 fe50 	bl	80012b4 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 8000614:	2102      	movs	r1, #2
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f81a 	bl	8000650 <LcdWriteNibble>
	HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fe49 	bl	80012b4 <HAL_Delay>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 8000622:	2128      	movs	r1, #40	@ 0x28
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f859 	bl	80006dc <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 800062a:	2108      	movs	r1, #8
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f855 	bl	80006dc <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 8000632:	2101      	movs	r1, #1
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f851 	bl	80006dc <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 800063a:	2106      	movs	r1, #6
 800063c:	2000      	movs	r0, #0
 800063e:	f000 f84d 	bl	80006dc <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 8000642:	210c      	movs	r1, #12
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f849 	bl	80006dc <LcdWriteByte>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b01      	cmp	r3, #1
 8000664:	bf0c      	ite	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	2300      	movne	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 800066e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	b25a      	sxtb	r2, r3
 8000676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067a:	4313      	orrs	r3, r2
 800067c:	b25b      	sxtb	r3, r3
 800067e:	f043 030c 	orr.w	r3, r3, #12
 8000682:	b25b      	sxtb	r3, r3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73bb      	strb	r3, [r7, #14]
	//I2CWrite(LCD_SLAVE_ADDR_W, val);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t *)&val, sizeof(val), HAL_MAX_DELAY);
 8000688:	f107 020e 	add.w	r2, r7, #14
 800068c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	214e      	movs	r1, #78	@ 0x4e
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <LcdWriteNibble+0x88>)
 8000698:	f001 ffbc 	bl	8002614 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fe09 	bl	80012b4 <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 80006a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b25b      	sxtb	r3, r3
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	73bb      	strb	r3, [r7, #14]
	//I2CWrite(LCD_SLAVE_ADDR_W, val);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t *)&val, sizeof(val), HAL_MAX_DELAY);
 80006bc:	f107 020e 	add.w	r2, r7, #14
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2301      	movs	r3, #1
 80006c8:	214e      	movs	r1, #78	@ 0x4e
 80006ca:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <LcdWriteNibble+0x88>)
 80006cc:	f001 ffa2 	bl	8002614 <HAL_I2C_Master_Transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000344 	.word	0x20000344

080006dc <LcdWriteByte>:

void LcdWriteByte(uint8_t rs, uint8_t data) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 80006fa:	7bfa      	ldrb	r2, [r7, #15]
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffa5 	bl	8000650 <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 8000706:	7bba      	ldrb	r2, [r7, #14]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff9f 	bl	8000650 <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	HAL_Delay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fdce 	bl	80012b4 <HAL_Delay>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4619      	mov	r1, r3
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ffd3 	bl	80006dc <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e00a      	b.n	8000752 <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ffc8 	bl	80006dc <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1ee      	bne.n	800073c <LcdPuts+0x1c>
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  // Get received message
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000772:	4a1d      	ldr	r2, [pc, #116]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 ffde 	bl	8001738 <HAL_CAN_GetRxMessage>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d12c      	bne.n	80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
  {
    if (RxHeader.StdId == 0x0A9 && RxHeader.DLC >= 4)
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2ba9      	cmp	r3, #169	@ 0xa9
 8000788:	d128      	bne.n	80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d924      	bls.n	80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
    {
      // Extract 16-bit sensor values from data bytes
      LDR_Value  = (RxData[0] << 8) | RxData[1];
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b21b      	sxth	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80007aa:	801a      	strh	r2, [r3, #0]
      MQ5_Value  = (RxData[2] << 8) | RxData[3];
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80007b8:	78db      	ldrb	r3, [r3, #3]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80007c4:	801a      	strh	r2, [r3, #0]
      Temp_Value = (RxData[4] << 8) | RxData[5];
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80007c8:	795a      	ldrb	r2, [r3, #5]
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80007cc:	701a      	strb	r2, [r3, #0]
      Hum_Value  = (RxData[6] << 8) | RxData[7];
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80007d0:	79da      	ldrb	r2, [r3, #7]
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80007d4:	701a      	strb	r2, [r3, #0]
      dataReady  = 1;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000408 	.word	0x20000408
 80007e8:	200003ec 	.word	0x200003ec
 80007ec:	20000412 	.word	0x20000412
 80007f0:	20000414 	.word	0x20000414
 80007f4:	20000416 	.word	0x20000416
 80007f8:	20000417 	.word	0x20000417
 80007fc:	20000410 	.word	0x20000410

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b5b0      	push	{r4, r5, r7, lr}
 8000802:	b096      	sub	sp, #88	@ 0x58
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fd13 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f85b 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080e:	f000 f971 	bl	8000af4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000812:	f000 f8c1 	bl	8000998 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000816:	f000 f943 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800081a:	f000 f913 	bl	8000a44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800081e:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <main+0xa8>)
 8000820:	f000 ff46 	bl	80016b0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING );
 8000824:	2102      	movs	r1, #2
 8000826:	4820      	ldr	r0, [pc, #128]	@ (80008a8 <main+0xa8>)
 8000828:	f001 f8a8 	bl	800197c <HAL_CAN_ActivateNotification>
  LcdInit();
 800082c:	f7ff fed8 	bl	80005e0 <LcdInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <main+0xac>)
 8000832:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000836:	461d      	mov	r5, r3
 8000838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000844:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fdcd 	bl	80043ea <osThreadCreate>
 8000850:	4603      	mov	r3, r0
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <main+0xb0>)
 8000854:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(CANRxTask, canRxTask, osPriorityIdle, 0, 128);
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <main+0xb4>)
 8000858:	f107 0420 	add.w	r4, r7, #32
 800085c:	461d      	mov	r5, r3
 800085e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CANRxTaskHandle = osThreadCreate(osThread(CANRxTask), NULL);
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f003 fdba 	bl	80043ea <osThreadCreate>
 8000876:	4603      	mov	r3, r0
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <main+0xb8>)
 800087a:	6013      	str	r3, [r2, #0]

  osThreadDef(CANRxTask1, canRxTask1, osPriorityIdle, 0, 128);
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <main+0xbc>)
 800087e:	1d3c      	adds	r4, r7, #4
 8000880:	461d      	mov	r5, r3
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800088a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDTaskHandle1 = osThreadCreate(osThread(CANRxTask1), NULL);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fda9 	bl	80043ea <osThreadCreate>
 8000898:	4603      	mov	r3, r0
 800089a:	4a09      	ldr	r2, [pc, #36]	@ (80008c0 <main+0xc0>)
 800089c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800089e:	f003 fd9d 	bl	80043dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a2:	bf00      	nop
 80008a4:	e7fd      	b.n	80008a2 <main+0xa2>
 80008a6:	bf00      	nop
 80008a8:	2000031c 	.word	0x2000031c
 80008ac:	080062e4 	.word	0x080062e4
 80008b0:	200003e0 	.word	0x200003e0
 80008b4:	0800630c 	.word	0x0800630c
 80008b8:	200003e4 	.word	0x200003e4
 80008bc:	08006334 	.word	0x08006334
 80008c0:	200003e8 	.word	0x200003e8

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f005 f818 	bl	8005908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000938:	2348      	movs	r3, #72	@ 0x48
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000940:	2307      	movs	r3, #7
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f9bd 	bl	8002cc8 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 fa3c 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fc1e 	bl	80031b8 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000982:	f000 fa25 	bl	8000dd0 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	@ 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800099e:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009a0:	4a27      	ldr	r2, [pc, #156]	@ (8000a40 <MX_CAN1_Init+0xa8>)
 80009a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009a6:	2212      	movs	r2, #18
 80009a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009aa:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009e2:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e8:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 80009ea:	f000 fc87 	bl	80012fc <HAL_CAN_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009f4:	f000 f9ec 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;

    canFilterConfig.FilterActivation = ENABLE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
    canFilterConfig.FilterBank = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
    canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
    canFilterConfig.FilterIdHigh = 0x0A9 << 5;  // Standard ID in top bits
 8000a04:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8000a08:	603b      	str	r3, [r7, #0]
    canFilterConfig.FilterIdLow = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
    canFilterConfig.FilterMaskIdHigh = 0x7FF << 5;  // Match only 0x0A9
 8000a0e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a12:	60bb      	str	r3, [r7, #8]
    canFilterConfig.FilterMaskIdLow = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
    canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
    canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_CAN1_Init+0xa4>)
 8000a26:	f000 fd65 	bl	80014f4 <HAL_CAN_ConfigFilter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_CAN1_Init+0x9c>
    {
      Error_Handler();
 8000a30:	f000 f9ce 	bl	8000dd0 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	@ 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000031c 	.word	0x2000031c
 8000a40:	40006400 	.word	0x40006400

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <MX_I2C1_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a50:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_I2C1_Init+0x58>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_I2C1_Init+0x50>)
 8000a82:	f001 fc83 	bl	800238c <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 f9a0 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000344 	.word	0x20000344
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f003 f85c 	bl	8003b94 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f975 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000398 	.word	0x20000398
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a11      	ldr	r2, [pc, #68]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_GPIO_Init+0x9c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <MX_GPIO_Init+0xa0>)
 8000b66:	f001 fbdd 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000b6a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_GPIO_Init+0xa0>)
 8000b84:	f001 fa32 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <canRxTask>:

/* USER CODE BEGIN 4 */
void canRxTask(void const * argument)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b0ab      	sub	sp, #172	@ 0xac
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
  char uartMsg[150];
  for (;;)
  {
    if (dataReady)
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <canRxTask+0x78>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d02c      	beq.n	8000c04 <canRxTask+0x6c>
    {
    	 sprintf(uartMsg,"{\"LDR_DATA\":%u,\"MQ5_DATA\":%u,\"TEMPERATURE\":%u,\"HUMIDITY\":%u,\"LOCATION\":\"Lab1\"}\n",LDR_Value, MQ5_Value, Temp_Value, Hum_Value);
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <canRxTask+0x7c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <canRxTask+0x80>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	461c      	mov	r4, r3
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <canRxTask+0x84>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <canRxTask+0x88>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f107 0008 	add.w	r0, r7, #8
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	4623      	mov	r3, r4
 8000bca:	460a      	mov	r2, r1
 8000bcc:	4915      	ldr	r1, [pc, #84]	@ (8000c24 <canRxTask+0x8c>)
 8000bce:	f004 fe79 	bl	80058c4 <siprintf>
    	 HAL_UART_Transmit(&huart2, (uint8_t*)uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fafa 	bl	80001d0 <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f107 0108 	add.w	r1, r7, #8
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be8:	480f      	ldr	r0, [pc, #60]	@ (8000c28 <canRxTask+0x90>)
 8000bea:	f003 f823 	bl	8003c34 <HAL_UART_Transmit>
    	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000bee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <canRxTask+0x94>)
 8000bf4:	f001 fbaf 	bl	8002356 <HAL_GPIO_TogglePin>

      dataReady = 0;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <canRxTask+0x78>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
      dataReady_1 = 1;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <canRxTask+0x98>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10000);
 8000c04:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c08:	f003 fc3b 	bl	8004482 <osDelay>
    if (dataReady)
 8000c0c:	e7c8      	b.n	8000ba0 <canRxTask+0x8>
 8000c0e:	bf00      	nop
 8000c10:	20000410 	.word	0x20000410
 8000c14:	20000412 	.word	0x20000412
 8000c18:	20000414 	.word	0x20000414
 8000c1c:	20000416 	.word	0x20000416
 8000c20:	20000417 	.word	0x20000417
 8000c24:	08006350 	.word	0x08006350
 8000c28:	20000398 	.word	0x20000398
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	20000411 	.word	0x20000411

08000c34 <canRxTask1>:
  }
}
void canRxTask1(void const * argument)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b08f      	sub	sp, #60	@ 0x3c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    char line1[20];  // For Temperature & Humidity
    char line2[20];  // For Status/Alert

    for (;;)
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c42:	484b      	ldr	r0, [pc, #300]	@ (8000d70 <canRxTask1+0x13c>)
 8000c44:	f001 fb6e 	bl	8002324 <HAL_GPIO_WritePin>
        if (dataReady_1)
 8000c48:	4b4a      	ldr	r3, [pc, #296]	@ (8000d74 <canRxTask1+0x140>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8088 	beq.w	8000d64 <canRxTask1+0x130>
        {
            sprintf(line1, "T:%uC H:%u%%", Temp_Value, Hum_Value);
 8000c54:	4b48      	ldr	r3, [pc, #288]	@ (8000d78 <canRxTask1+0x144>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b48      	ldr	r3, [pc, #288]	@ (8000d7c <canRxTask1+0x148>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f107 0020 	add.w	r0, r7, #32
 8000c62:	4947      	ldr	r1, [pc, #284]	@ (8000d80 <canRxTask1+0x14c>)
 8000c64:	f004 fe2e 	bl	80058c4 <siprintf>

            // Check LDR and MQ5 values
            bool darkness = (LDR_Value > 2000);
 8000c68:	4b46      	ldr	r3, [pc, #280]	@ (8000d84 <canRxTask1+0x150>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000c70:	bf8c      	ite	hi
 8000c72:	2301      	movhi	r3, #1
 8000c74:	2300      	movls	r3, #0
 8000c76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            bool gas      = (MQ5_Value > 1500);
 8000c7a:	4b43      	ldr	r3, [pc, #268]	@ (8000d88 <canRxTask1+0x154>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000c82:	4293      	cmp	r3, r2
 8000c84:	bf8c      	ite	hi
 8000c86:	2301      	movhi	r3, #1
 8000c88:	2300      	movls	r3, #0
 8000c8a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            // Prepare Line 2 based on sensor readings
            if (darkness && gas)
 8000c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00c      	beq.n	8000cb0 <canRxTask1+0x7c>
 8000c96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <canRxTask1+0x7c>
                strcpy(line2, "ALERT: DARK+GAS");
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8000d8c <canRxTask1+0x158>)
 8000ca4:	461c      	mov	r4, r3
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cae:	e043      	b.n	8000d38 <canRxTask1+0x104>
            else if (!darkness && !gas)
 8000cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <canRxTask1+0xaa>
 8000cbe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d008      	beq.n	8000cde <canRxTask1+0xaa>
                strcpy(line2, "Status: NORMAL ");
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8000d90 <canRxTask1+0x15c>)
 8000cd2:	461c      	mov	r4, r3
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cdc:	e02c      	b.n	8000d38 <canRxTask1+0x104>
            else if (darkness && !gas)
 8000cde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00f      	beq.n	8000d06 <canRxTask1+0xd2>
 8000ce6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <canRxTask1+0xd2>
                strcpy(line2, "ALERT: DARK    ");
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4a26      	ldr	r2, [pc, #152]	@ (8000d94 <canRxTask1+0x160>)
 8000cfa:	461c      	mov	r4, r3
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d04:	e018      	b.n	8000d38 <canRxTask1+0x104>
            else if (!darkness && gas){
 8000d06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d011      	beq.n	8000d38 <canRxTask1+0x104>
 8000d14:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00d      	beq.n	8000d38 <canRxTask1+0x104>
                strcpy(line2, "ALERT: GAS     ");
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4a1d      	ldr	r2, [pc, #116]	@ (8000d98 <canRxTask1+0x164>)
 8000d22:	461c      	mov	r4, r3
 8000d24:	4613      	mov	r3, r2
 8000d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d32:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <canRxTask1+0x13c>)
 8000d34:	f001 faf6 	bl	8002324 <HAL_GPIO_WritePin>
            }

            // Clear LCD and update lines
            LcdWriteByte(LCD_CMD, LCD_CLEAR);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fcce 	bl	80006dc <LcdWriteByte>
            HAL_Delay(2);  // Small delay after clear
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 fab7 	bl	80012b4 <HAL_Delay>

            // Write to LCD
            LcdPuts(LCD_LINE1, line1);  // Display Temp & Hum
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2080      	movs	r0, #128	@ 0x80
 8000d4e:	f7ff fce7 	bl	8000720 <LcdPuts>
            LcdPuts(LCD_LINE2, line2);  // Display Alert/Status
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	20c0      	movs	r0, #192	@ 0xc0
 8000d5a:	f7ff fce1 	bl	8000720 <LcdPuts>

            dataReady_1 = 0;  // Reset flag
 8000d5e:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <canRxTask1+0x140>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
        }

        osDelay(1000);  // Task runs every 1 second
 8000d64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d68:	f003 fb8b 	bl	8004482 <osDelay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d6c:	e766      	b.n	8000c3c <canRxTask1+0x8>
 8000d6e:	bf00      	nop
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	20000411 	.word	0x20000411
 8000d78:	20000416 	.word	0x20000416
 8000d7c:	20000417 	.word	0x20000417
 8000d80:	080063a0 	.word	0x080063a0
 8000d84:	20000412 	.word	0x20000412
 8000d88:	20000414 	.word	0x20000414
 8000d8c:	080063b0 	.word	0x080063b0
 8000d90:	080063c0 	.word	0x080063c0
 8000d94:	080063d0 	.word	0x080063d0
 8000d98:	080063e0 	.word	0x080063e0

08000d9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f003 fb6c 	bl	8004482 <osDelay>
 8000daa:	e7fb      	b.n	8000da4 <StartDefaultTask+0x8>

08000dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dbe:	f000 fa59 	bl	8001274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_MspInit+0x54>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a11      	ldr	r2, [pc, #68]	@ (8000e30 <HAL_MspInit+0x54>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_MspInit+0x54>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <HAL_MspInit+0x54>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <HAL_MspInit+0x54>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_MspInit+0x54>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	f06f 0001 	mvn.w	r0, #1
 8000e22:	f001 f8b9 	bl	8001f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_CAN_MspInit+0x94>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d134      	bne.n	8000ec0 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_CAN_MspInit+0x98>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ecc <HAL_CAN_MspInit+0x98>)
 8000e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_CAN_MspInit+0x98>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_CAN_MspInit+0x98>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <HAL_CAN_MspInit+0x98>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_CAN_MspInit+0x98>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <HAL_CAN_MspInit+0x9c>)
 8000eac:	f001 f89e 	bl	8001fec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f001 f86f 	bl	8001f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000eba:	2014      	movs	r0, #20
 8000ebc:	f001 f888 	bl	8001fd0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	@ 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_I2C_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_I2C_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f12:	23c0      	movs	r3, #192	@ 0xc0
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f16:	2312      	movs	r3, #18
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f22:	2304      	movs	r3, #4
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <HAL_I2C_MspInit+0x8c>)
 8000f2e:	f001 f85d 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	@ 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12b      	bne.n	8000fde <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fbe:	2360      	movs	r3, #96	@ 0x60
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fda:	f001 f807 	bl	8001fec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	@ 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b33      	ldr	r3, [pc, #204]	@ (80010d8 <HAL_InitTick+0xe4>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a32      	ldr	r2, [pc, #200]	@ (80010d8 <HAL_InitTick+0xe4>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <HAL_InitTick+0xe4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f003 0310 	and.w	r3, r3, #16
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001020:	f107 0210 	add.w	r2, r7, #16
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fae4 	bl	80035f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103a:	f002 fab5 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800103e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001042:	f002 fab1 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8001046:	4603      	mov	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800104c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104e:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <HAL_InitTick+0xe8>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	0c9b      	lsrs	r3, r3, #18
 8001056:	3b01      	subs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <HAL_InitTick+0xec>)
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <HAL_InitTick+0xf0>)
 800105e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_InitTick+0xec>)
 8001062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001066:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001068:	4a1d      	ldr	r2, [pc, #116]	@ (80010e0 <HAL_InitTick+0xec>)
 800106a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <HAL_InitTick+0xec>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <HAL_InitTick+0xec>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_InitTick+0xec>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001080:	4817      	ldr	r0, [pc, #92]	@ (80010e0 <HAL_InitTick+0xec>)
 8001082:	f002 faeb 	bl	800365c <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800108c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001090:	2b00      	cmp	r3, #0
 8001092:	d11b      	bne.n	80010cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <HAL_InitTick+0xec>)
 8001096:	f002 fb3b 	bl	8003710 <HAL_TIM_Base_Start_IT>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d111      	bne.n	80010cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a8:	2036      	movs	r0, #54	@ 0x36
 80010aa:	f000 ff91 	bl	8001fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d808      	bhi.n	80010c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2036      	movs	r0, #54	@ 0x36
 80010ba:	f000 ff6d 	bl	8001f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_InitTick+0xf4>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e002      	b.n	80010cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3738      	adds	r7, #56	@ 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	20000418 	.word	0x20000418
 80010e4:	40001000 	.word	0x40001000
 80010e8:	20000004 	.word	0x20000004

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <CAN1_RX0_IRQHandler+0x10>)
 800112a:	f000 fc4d 	bl	80019c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000031c 	.word	0x2000031c

08001138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <TIM6_DAC_IRQHandler+0x10>)
 800113e:	f002 fb57 	bl	80037f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000418 	.word	0x20000418

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f004 fc2a 	bl	80059d4 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20020000 	.word	0x20020000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	20000460 	.word	0x20000460
 80011b4:	20004308 	.word	0x20004308

080011b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001214 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011e0:	f7ff ffea 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	@ (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f004 fbe9 	bl	80059e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff faf7 	bl	8000800 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001220:	08006454 	.word	0x08006454
  ldr r2, =_sbss
 8001224:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001228:	20004304 	.word	0x20004304

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <HAL_Init+0x40>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_Init+0x40>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800124a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	@ (8001270 <HAL_Init+0x40>)
 8001252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 fe92 	bl	8001f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f7ff fec8 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fdba 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000464 	.word	0x20000464

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000464 	.word	0x20000464

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e0ed      	b.n	80014ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fd8a 	bl	8000e34 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001330:	f7ff ffb4 	bl	800129c <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001336:	e012      	b.n	800135e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001338:	f7ff ffb0 	bl	800129c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b0a      	cmp	r3, #10
 8001344:	d90b      	bls.n	800135e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0c5      	b.n	80014ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0e5      	beq.n	8001338 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0202 	bic.w	r2, r2, #2
 800137a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff ff8e 	bl	800129c <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001382:	e012      	b.n	80013aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001384:	f7ff ff8a 	bl	800129c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d90b      	bls.n	80013aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2205      	movs	r2, #5
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e09f      	b.n	80014ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e5      	bne.n	8001384 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e1b      	ldrb	r3, [r3, #24]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d108      	bne.n	80013d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7e5b      	ldrb	r3, [r3, #25]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d108      	bne.n	80013fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e007      	b.n	800140c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800140a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7e9b      	ldrb	r3, [r3, #26]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d108      	bne.n	8001426 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e007      	b.n	8001436 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0220 	bic.w	r2, r2, #32
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7edb      	ldrb	r3, [r3, #27]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d108      	bne.n	8001450 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0210 	bic.w	r2, r2, #16
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e007      	b.n	8001460 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0210 	orr.w	r2, r2, #16
 800145e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d108      	bne.n	800147a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0208 	orr.w	r2, r2, #8
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e007      	b.n	800148a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0208 	bic.w	r2, r2, #8
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7f5b      	ldrb	r3, [r3, #29]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0204 	orr.w	r2, r2, #4
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e007      	b.n	80014b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0204 	bic.w	r2, r2, #4
 80014b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	ea42 0103 	orr.w	r1, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	1e5a      	subs	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d003      	beq.n	8001514 <HAL_CAN_ConfigFilter+0x20>
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	2b02      	cmp	r3, #2
 8001510:	f040 80be 	bne.w	8001690 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001514:	4b65      	ldr	r3, [pc, #404]	@ (80016ac <HAL_CAN_ConfigFilter+0x1b8>)
 8001516:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800152e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	431a      	orrs	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	2201      	movs	r2, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d123      	bne.n	80015be <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001598:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3248      	adds	r2, #72	@ 0x48
 800159e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	3348      	adds	r3, #72	@ 0x48
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d122      	bne.n	800160c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	3248      	adds	r2, #72	@ 0x48
 80015ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001600:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001602:	6939      	ldr	r1, [r7, #16]
 8001604:	3348      	adds	r3, #72	@ 0x48
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001626:	e007      	b.n	8001638 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	431a      	orrs	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001652:	e007      	b.n	8001664 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	431a      	orrs	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001682:	f023 0201 	bic.w	r2, r3, #1
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	e006      	b.n	800169e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
  }
}
 800169e:	4618      	mov	r0, r3
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40006400 	.word	0x40006400

080016b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d12e      	bne.n	8001722 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fdde 	bl	800129c <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e2:	e012      	b.n	800170a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e4:	f7ff fdda 	bl	800129c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d90b      	bls.n	800170a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e012      	b.n	8001730 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e5      	bne.n	80016e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e006      	b.n	8001730 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <HAL_CAN_GetRxMessage+0x24>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b02      	cmp	r3, #2
 8001758:	f040 8103 	bne.w	8001962 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10e      	bne.n	8001780 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d116      	bne.n	800179e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0f7      	b.n	8001970 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0e8      	b.n	8001970 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	331b      	adds	r3, #27
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0204 	and.w	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10c      	bne.n	80017d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	331b      	adds	r3, #27
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0d5b      	lsrs	r3, r3, #21
 80017cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e00b      	b.n	80017ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	331b      	adds	r3, #27
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	331b      	adds	r3, #27
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0202 	and.w	r2, r3, #2
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	331b      	adds	r3, #27
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	3304      	adds	r3, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2208      	movs	r2, #8
 8001820:	611a      	str	r2, [r3, #16]
 8001822:	e00b      	b.n	800183c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	331b      	adds	r3, #27
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	331b      	adds	r3, #27
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	3304      	adds	r3, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b2da      	uxtb	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	331b      	adds	r3, #27
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	3304      	adds	r3, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0c1b      	lsrs	r3, r3, #16
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0a1a      	lsrs	r2, r3, #8
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1a      	lsrs	r2, r3, #16
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3302      	adds	r3, #2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e1a      	lsrs	r2, r3, #24
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3303      	adds	r3, #3
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3304      	adds	r3, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0a1a      	lsrs	r2, r3, #8
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3305      	adds	r3, #5
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1a      	lsrs	r2, r3, #16
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3306      	adds	r3, #6
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e1a      	lsrs	r2, r3, #24
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3307      	adds	r3, #7
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	e007      	b.n	800195e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e006      	b.n	8001970 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
  }
}
 8001970:	4618      	mov	r0, r3
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d002      	beq.n	800199a <HAL_CAN_ActivateNotification+0x1e>
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d109      	bne.n	80019ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e006      	b.n	80019bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
  }
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d07c      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f983 	bl	8001d36 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a30:	e016      	b.n	8001a60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a44:	e00c      	b.n	8001a60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a58:	e002      	b.n	8001a60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f989 	bl	8001d72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d024      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f963 	bl	8001d4a <HAL_CAN_TxMailbox1CompleteCallback>
 8001a84:	e016      	b.n	8001ab4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	e00c      	b.n	8001ab4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e002      	b.n	8001ab4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f969 	bl	8001d86 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d024      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ac6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f943 	bl	8001d5e <HAL_CAN_TxMailbox2CompleteCallback>
 8001ad8:	e016      	b.n	8001b08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aec:	e00c      	b.n	8001b08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b00:	e002      	b.n	8001b08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f949 	bl	8001d9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f930 	bl	8001dae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fdfe 	bl	8000768 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f912 	bl	8001dd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8f9 	bl	8001dc2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2210      	movs	r2, #16
 8001bea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8fc 	bl	8001dea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00b      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8f5 	bl	8001dfe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d07b      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d072      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d043      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03e      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c96:	2b60      	cmp	r3, #96	@ 0x60
 8001c98:	d02b      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x32a>
 8001c9a:	2b60      	cmp	r3, #96	@ 0x60
 8001c9c:	d82e      	bhi.n	8001cfc <HAL_CAN_IRQHandler+0x334>
 8001c9e:	2b50      	cmp	r3, #80	@ 0x50
 8001ca0:	d022      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x320>
 8001ca2:	2b50      	cmp	r3, #80	@ 0x50
 8001ca4:	d82a      	bhi.n	8001cfc <HAL_CAN_IRQHandler+0x334>
 8001ca6:	2b40      	cmp	r3, #64	@ 0x40
 8001ca8:	d019      	beq.n	8001cde <HAL_CAN_IRQHandler+0x316>
 8001caa:	2b40      	cmp	r3, #64	@ 0x40
 8001cac:	d826      	bhi.n	8001cfc <HAL_CAN_IRQHandler+0x334>
 8001cae:	2b30      	cmp	r3, #48	@ 0x30
 8001cb0:	d010      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x30c>
 8001cb2:	2b30      	cmp	r3, #48	@ 0x30
 8001cb4:	d822      	bhi.n	8001cfc <HAL_CAN_IRQHandler+0x334>
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d002      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x2f8>
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d005      	beq.n	8001cca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cbe:	e01d      	b.n	8001cfc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc8:	e019      	b.n	8001cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cd2:	e014      	b.n	8001cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cdc:	e00f      	b.n	8001cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ce6:	e00a      	b.n	8001cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cf0:	e005      	b.n	8001cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cfa:	e000      	b.n	8001cfe <HAL_CAN_IRQHandler+0x336>
            break;
 8001cfc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2204      	movs	r2, #4
 8001d14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f872 	bl	8001e12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	@ 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff4c 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001faa:	f7ff ff61 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7ff ffb1 	bl	8001f1c <NVIC_EncodePriority>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff80 	bl	8001ec8 <__NVIC_SetPriority>
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff54 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e16b      	b.n	80022e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 815a 	bne.w	80022da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80b4 	beq.w	80022da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b60      	ldr	r3, [pc, #384]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a5f      	ldr	r2, [pc, #380]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b5d      	ldr	r3, [pc, #372]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a5b      	ldr	r2, [pc, #364]	@ (80022fc <HAL_GPIO_Init+0x310>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_GPIO_Init+0x314>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02b      	beq.n	8002212 <HAL_GPIO_Init+0x226>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <HAL_GPIO_Init+0x318>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d025      	beq.n	800220e <HAL_GPIO_Init+0x222>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a50      	ldr	r2, [pc, #320]	@ (8002308 <HAL_GPIO_Init+0x31c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <HAL_GPIO_Init+0x21e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	@ (800230c <HAL_GPIO_Init+0x320>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d019      	beq.n	8002206 <HAL_GPIO_Init+0x21a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002310 <HAL_GPIO_Init+0x324>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0x216>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002314 <HAL_GPIO_Init+0x328>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00d      	beq.n	80021fe <HAL_GPIO_Init+0x212>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002318 <HAL_GPIO_Init+0x32c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <HAL_GPIO_Init+0x20e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	@ (800231c <HAL_GPIO_Init+0x330>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_GPIO_Init+0x20a>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00e      	b.n	8002214 <HAL_GPIO_Init+0x228>
 80021f6:	2308      	movs	r3, #8
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x228>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x228>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x228>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x228>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x228>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x228>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x228>
 8002212:	2300      	movs	r3, #0
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002224:	4935      	ldr	r1, [pc, #212]	@ (80022fc <HAL_GPIO_Init+0x310>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002232:	4b3b      	ldr	r3, [pc, #236]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002256:	4a32      	ldr	r2, [pc, #200]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <HAL_GPIO_Init+0x334>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f ae90 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40013800 	.word	0x40013800
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40021400 	.word	0x40021400
 8002318:	40021800 	.word	0x40021800
 800231c:	40021c00 	.word	0x40021c00
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43d9      	mvns	r1, r3
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	400b      	ands	r3, r1
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e12b      	b.n	80025f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fd8e 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	@ 0x24
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f0:	f001 f8da 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80023f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a81      	ldr	r2, [pc, #516]	@ (8002600 <HAL_I2C_Init+0x274>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d807      	bhi.n	8002410 <HAL_I2C_Init+0x84>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a80      	ldr	r2, [pc, #512]	@ (8002604 <HAL_I2C_Init+0x278>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e006      	b.n	800241e <HAL_I2C_Init+0x92>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a7d      	ldr	r2, [pc, #500]	@ (8002608 <HAL_I2C_Init+0x27c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0e7      	b.n	80025f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a78      	ldr	r2, [pc, #480]	@ (800260c <HAL_I2C_Init+0x280>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0c9b      	lsrs	r3, r3, #18
 8002430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a6a      	ldr	r2, [pc, #424]	@ (8002600 <HAL_I2C_Init+0x274>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d802      	bhi.n	8002460 <HAL_I2C_Init+0xd4>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	e009      	b.n	8002474 <HAL_I2C_Init+0xe8>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	4a69      	ldr	r2, [pc, #420]	@ (8002610 <HAL_I2C_Init+0x284>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	3301      	adds	r3, #1
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002486:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	495c      	ldr	r1, [pc, #368]	@ (8002600 <HAL_I2C_Init+0x274>)
 8002490:	428b      	cmp	r3, r1
 8002492:	d819      	bhi.n	80024c8 <HAL_I2C_Init+0x13c>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e59      	subs	r1, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a2:	1c59      	adds	r1, r3, #1
 80024a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024a8:	400b      	ands	r3, r1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_I2C_Init+0x138>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1e59      	subs	r1, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	e051      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e04f      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_I2C_Init+0x168>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e58      	subs	r0, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e012      	b.n	800251a <HAL_I2C_Init+0x18e>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	0099      	lsls	r1, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x196>
 800251e:	2301      	movs	r3, #1
 8002520:	e022      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <HAL_I2C_Init+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1e58      	subs	r0, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	440b      	add	r3, r1
 8002538:	fbb0 f3f3 	udiv	r3, r0, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002546:	e00f      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	fbb0 f3f3 	udiv	r3, r0, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	6809      	ldr	r1, [r1, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002596:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6911      	ldr	r1, [r2, #16]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68d2      	ldr	r2, [r2, #12]
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	000186a0 	.word	0x000186a0
 8002604:	001e847f 	.word	0x001e847f
 8002608:	003d08ff 	.word	0x003d08ff
 800260c:	431bde83 	.word	0x431bde83
 8002610:	10624dd3 	.word	0x10624dd3

08002614 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
 8002624:	4613      	mov	r3, r2
 8002626:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7fe fe38 	bl	800129c <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b20      	cmp	r3, #32
 8002638:	f040 80e0 	bne.w	80027fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2319      	movs	r3, #25
 8002642:	2201      	movs	r2, #1
 8002644:	4970      	ldr	r1, [pc, #448]	@ (8002808 <HAL_I2C_Master_Transmit+0x1f4>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f964 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	e0d3      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2C_Master_Transmit+0x50>
 8002660:	2302      	movs	r3, #2
 8002662:	e0cc      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d007      	beq.n	800268a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002698:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	@ 0x21
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2210      	movs	r2, #16
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	893a      	ldrh	r2, [r7, #8]
 80026ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a50      	ldr	r2, [pc, #320]	@ (800280c <HAL_I2C_Master_Transmit+0x1f8>)
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f89c 	bl	8002810 <I2C_MasterRequestWrite>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e08d      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026f8:	e066      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fa22 	bl	8002b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002720:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d11b      	bne.n	800279c <HAL_I2C_Master_Transmit+0x188>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	6a39      	ldr	r1, [r7, #32]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fa19 	bl	8002bd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e01a      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d194      	bne.n	80026fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	00100002 	.word	0x00100002
 800280c:	ffff0000 	.word	0xffff0000

08002810 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	460b      	mov	r3, r1
 800281e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d006      	beq.n	800283a <I2C_MasterRequestWrite+0x2a>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d003      	beq.n	800283a <I2C_MasterRequestWrite+0x2a>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002838:	d108      	bne.n	800284c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e00b      	b.n	8002864 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	2b12      	cmp	r3, #18
 8002852:	d107      	bne.n	8002864 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002862:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f84f 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288a:	d103      	bne.n	8002894 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e035      	b.n	8002904 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028a0:	d108      	bne.n	80028b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028b0:	611a      	str	r2, [r3, #16]
 80028b2:	e01b      	b.n	80028ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028b4:	897b      	ldrh	r3, [r7, #10]
 80028b6:	11db      	asrs	r3, r3, #7
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0306 	and.w	r3, r3, #6
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f063 030f 	orn	r3, r3, #15
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	490e      	ldr	r1, [pc, #56]	@ (800290c <I2C_MasterRequestWrite+0xfc>)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f898 	bl	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e010      	b.n	8002904 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4907      	ldr	r1, [pc, #28]	@ (8002910 <I2C_MasterRequestWrite+0x100>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f888 	bl	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00010008 	.word	0x00010008
 8002910:	00010002 	.word	0x00010002

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e048      	b.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800292c:	d044      	beq.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe fcb5 	bl	800129c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d139      	bne.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10d      	bne.n	800296a <I2C_WaitOnFlagUntilTimeout+0x56>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	e00c      	b.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x70>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	429a      	cmp	r2, r3
 8002988:	d116      	bne.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e023      	b.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	0c1b      	lsrs	r3, r3, #16
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d10d      	bne.n	80029de <I2C_WaitOnFlagUntilTimeout+0xca>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	43da      	mvns	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4013      	ands	r3, r2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	e00c      	b.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d093      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a16:	e071      	b.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a26:	d123      	bne.n	8002a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e067      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a76:	d041      	beq.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7fe fc10 	bl	800129c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d136      	bne.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d10c      	bne.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	e00b      	b.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4013      	ands	r3, r2
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e021      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10c      	bne.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e00b      	b.n	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f af6d 	bne.w	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b54:	e034      	b.n	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f886 	bl	8002c68 <I2C_IsAcknowledgeFailed>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b6c:	d028      	beq.n	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fb95 	bl	800129c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d11d      	bne.n	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8e:	2b80      	cmp	r3, #128	@ 0x80
 8002b90:	d016      	beq.n	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e007      	b.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bca:	2b80      	cmp	r3, #128	@ 0x80
 8002bcc:	d1c3      	bne.n	8002b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be4:	e034      	b.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f83e 	bl	8002c68 <I2C_IsAcknowledgeFailed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bfc:	d028      	beq.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7fe fb4d 	bl	800129c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11d      	bne.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d016      	beq.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d1c3      	bne.n	8002be6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7e:	d11b      	bne.n	8002cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e267      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d075      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ce6:	4b88      	ldr	r3, [pc, #544]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d00c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b85      	ldr	r3, [pc, #532]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d112      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfe:	4b82      	ldr	r3, [pc, #520]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d0a:	d10b      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d05b      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x108>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d157      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e242      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x74>
 8002d2e:	4b76      	ldr	r3, [pc, #472]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a75      	ldr	r2, [pc, #468]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e01d      	b.n	8002d78 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x98>
 8002d46:	4b70      	ldr	r3, [pc, #448]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b6d      	ldr	r3, [pc, #436]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6c      	ldr	r2, [pc, #432]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xb0>
 8002d60:	4b69      	ldr	r3, [pc, #420]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a68      	ldr	r2, [pc, #416]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b66      	ldr	r3, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fa8c 	bl	800129c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fa88 	bl	800129c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e207      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0xc0>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fa78 	bl	800129c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fa74 	bl	800129c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1f3      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	4b51      	ldr	r3, [pc, #324]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0xe8>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d063      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dde:	4b4a      	ldr	r3, [pc, #296]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b47      	ldr	r3, [pc, #284]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d11c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df6:	4b44      	ldr	r3, [pc, #272]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	4b41      	ldr	r3, [pc, #260]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_RCC_OscConfig+0x152>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e1c7      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4937      	ldr	r1, [pc, #220]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	e03a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e38:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <HAL_RCC_OscConfig+0x244>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fa2d 	bl	800129c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe fa29 	bl	800129c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e1a8      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b28      	ldr	r3, [pc, #160]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4925      	ldr	r1, [pc, #148]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7a:	4b24      	ldr	r3, [pc, #144]	@ (8002f0c <HAL_RCC_OscConfig+0x244>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fa0c 	bl	800129c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e88:	f7fe fa08 	bl	800129c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e187      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d036      	beq.n	8002f20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_RCC_OscConfig+0x248>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe f9ec 	bl	800129c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe f9e8 	bl	800129c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e167      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_RCC_OscConfig+0x240>)
 8002edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x200>
 8002ee6:	e01b      	b.n	8002f20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee8:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <HAL_RCC_OscConfig+0x248>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7fe f9d5 	bl	800129c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	e00e      	b.n	8002f14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f9d1 	bl	800129c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d907      	bls.n	8002f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e150      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	42470000 	.word	0x42470000
 8002f10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	4b88      	ldr	r3, [pc, #544]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ea      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8097 	beq.w	800305c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f32:	4b81      	ldr	r3, [pc, #516]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	4b7d      	ldr	r3, [pc, #500]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a7c      	ldr	r2, [pc, #496]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b77      	ldr	r3, [pc, #476]	@ (800313c <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4b74      	ldr	r3, [pc, #464]	@ (800313c <HAL_RCC_OscConfig+0x474>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a73      	ldr	r2, [pc, #460]	@ (800313c <HAL_RCC_OscConfig+0x474>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7fe f991 	bl	800129c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7fe f98d 	bl	800129c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e10c      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	4b6a      	ldr	r3, [pc, #424]	@ (800313c <HAL_RCC_OscConfig+0x474>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x2ea>
 8002fa4:	4b64      	ldr	r3, [pc, #400]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a63      	ldr	r2, [pc, #396]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb0:	e01c      	b.n	8002fec <HAL_RCC_OscConfig+0x324>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x30c>
 8002fba:	4b5f      	ldr	r3, [pc, #380]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fca:	4a5b      	ldr	r2, [pc, #364]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_OscConfig+0x324>
 8002fd4:	4b58      	ldr	r3, [pc, #352]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe0:	4b55      	ldr	r3, [pc, #340]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	4a54      	ldr	r2, [pc, #336]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f023 0304 	bic.w	r3, r3, #4
 8002fea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f952 	bl	800129c <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f94e 	bl	800129c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0cb      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	4b49      	ldr	r3, [pc, #292]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ee      	beq.n	8002ffc <HAL_RCC_OscConfig+0x334>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe f93c 	bl	800129c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe f938 	bl	800129c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0b5      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303e:	4b3e      	ldr	r3, [pc, #248]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ee      	bne.n	8003028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d105      	bne.n	800305c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003050:	4b39      	ldr	r3, [pc, #228]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	4a38      	ldr	r2, [pc, #224]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8003056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a1 	beq.w	80031a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003066:	4b34      	ldr	r3, [pc, #208]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b08      	cmp	r3, #8
 8003070:	d05c      	beq.n	800312c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d141      	bne.n	80030fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_RCC_OscConfig+0x478>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe f90c 	bl	800129c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f908 	bl	800129c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e087      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	3b01      	subs	r3, #1
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	491b      	ldr	r1, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x478>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe f8e1 	bl	800129c <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe f8dd 	bl	800129c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e05c      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x416>
 80030fc:	e054      	b.n	80031a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_OscConfig+0x478>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe f8ca 	bl	800129c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe f8c6 	bl	800129c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e045      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_OscConfig+0x470>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x444>
 800312a:	e03d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e038      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003144:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_RCC_OscConfig+0x4ec>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d028      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d121      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d11a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	4293      	cmp	r3, r2
 800317e:	d111      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0cc      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b68      	ldr	r3, [pc, #416]	@ (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d90c      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b65      	ldr	r3, [pc, #404]	@ (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b63      	ldr	r3, [pc, #396]	@ (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b8      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800320c:	4b59      	ldr	r3, [pc, #356]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a58      	ldr	r2, [pc, #352]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003216:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003224:	4b53      	ldr	r3, [pc, #332]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a52      	ldr	r2, [pc, #328]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800322e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b50      	ldr	r3, [pc, #320]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	494d      	ldr	r1, [pc, #308]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d044      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d119      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e07f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d003      	beq.n	8003276 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003272:	2b03      	cmp	r3, #3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	4b3f      	ldr	r3, [pc, #252]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e067      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003296:	4b37      	ldr	r3, [pc, #220]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f023 0203 	bic.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4934      	ldr	r1, [pc, #208]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a8:	f7fd fff8 	bl	800129c <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b0:	f7fd fff4 	bl	800129c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e04f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 020c 	and.w	r2, r3, #12
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1eb      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d20c      	bcs.n	8003300 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e032      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4916      	ldr	r1, [pc, #88]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332a:	4b12      	ldr	r3, [pc, #72]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	490e      	ldr	r1, [pc, #56]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800333e:	f000 f821 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8003342:	4602      	mov	r2, r0
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	490a      	ldr	r1, [pc, #40]	@ (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	5ccb      	ldrb	r3, [r1, r3]
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	4a09      	ldr	r2, [pc, #36]	@ (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800335a:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd fe48 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00
 8003374:	40023800 	.word	0x40023800
 8003378:	080063f8 	.word	0x080063f8
 800337c:	20000000 	.word	0x20000000
 8003380:	20000004 	.word	0x20000004

08003384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003388:	b094      	sub	sp, #80	@ 0x50
 800338a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800339c:	4b79      	ldr	r3, [pc, #484]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d00d      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x40>
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	f200 80e1 	bhi.w	8003570 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x34>
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d003      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x3a>
 80033b6:	e0db      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b73      	ldr	r3, [pc, #460]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033bc:	e0db      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033be:	4b73      	ldr	r3, [pc, #460]	@ (800358c <HAL_RCC_GetSysClockFreq+0x208>)
 80033c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c2:	e0d8      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b6a      	ldr	r3, [pc, #424]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	2200      	movs	r2, #0
 80033e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033f6:	4622      	mov	r2, r4
 80033f8:	462b      	mov	r3, r5
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	0159      	lsls	r1, r3, #5
 8003404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003408:	0150      	lsls	r0, r2, #5
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4621      	mov	r1, r4
 8003410:	1a51      	subs	r1, r2, r1
 8003412:	6139      	str	r1, [r7, #16]
 8003414:	4629      	mov	r1, r5
 8003416:	eb63 0301 	sbc.w	r3, r3, r1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003428:	4659      	mov	r1, fp
 800342a:	018b      	lsls	r3, r1, #6
 800342c:	4651      	mov	r1, sl
 800342e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003432:	4651      	mov	r1, sl
 8003434:	018a      	lsls	r2, r1, #6
 8003436:	4651      	mov	r1, sl
 8003438:	ebb2 0801 	subs.w	r8, r2, r1
 800343c:	4659      	mov	r1, fp
 800343e:	eb63 0901 	sbc.w	r9, r3, r1
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003456:	4690      	mov	r8, r2
 8003458:	4699      	mov	r9, r3
 800345a:	4623      	mov	r3, r4
 800345c:	eb18 0303 	adds.w	r3, r8, r3
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	462b      	mov	r3, r5
 8003464:	eb49 0303 	adc.w	r3, r9, r3
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003476:	4629      	mov	r1, r5
 8003478:	024b      	lsls	r3, r1, #9
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003480:	4621      	mov	r1, r4
 8003482:	024a      	lsls	r2, r1, #9
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800348e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003494:	f7fc fef4 	bl	8000280 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a0:	e058      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	2200      	movs	r2, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	4611      	mov	r1, r2
 80034ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	f04f 0000 	mov.w	r0, #0
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	0159      	lsls	r1, r3, #5
 80034ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ce:	0150      	lsls	r0, r2, #5
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4641      	mov	r1, r8
 80034d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034da:	4649      	mov	r1, r9
 80034dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034f4:	ebb2 040a 	subs.w	r4, r2, sl
 80034f8:	eb63 050b 	sbc.w	r5, r3, fp
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	00eb      	lsls	r3, r5, #3
 8003506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350a:	00e2      	lsls	r2, r4, #3
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	4643      	mov	r3, r8
 8003512:	18e3      	adds	r3, r4, r3
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	464b      	mov	r3, r9
 8003518:	eb45 0303 	adc.w	r3, r5, r3
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800352a:	4629      	mov	r1, r5
 800352c:	028b      	lsls	r3, r1, #10
 800352e:	4621      	mov	r1, r4
 8003530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003534:	4621      	mov	r1, r4
 8003536:	028a      	lsls	r2, r1, #10
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800353e:	2200      	movs	r2, #0
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	61fa      	str	r2, [r7, #28]
 8003544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003548:	f7fc fe9a 	bl	8000280 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4613      	mov	r3, r2
 8003552:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003554:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x200>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	3301      	adds	r3, #1
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x204>)
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003578:	4618      	mov	r0, r3
 800357a:	3750      	adds	r7, #80	@ 0x50
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	00f42400 	.word	0x00f42400
 800358c:	007a1200 	.word	0x007a1200

08003590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000000 	.word	0x20000000

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	@ (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08006408 	.word	0x08006408

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d4:	f7ff ffdc 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0b5b      	lsrs	r3, r3, #13
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	@ (80035f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08006408 	.word	0x08006408

080035f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	220f      	movs	r2, #15
 8003606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003608:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003614:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <HAL_RCC_GetClockConfig+0x5c>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	08db      	lsrs	r3, r3, #3
 8003632:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800363a:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <HAL_RCC_GetClockConfig+0x60>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0207 	and.w	r2, r3, #7
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40023c00 	.word	0x40023c00

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e041      	b.n	80036f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f839 	bl	80036fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f000 f9c0 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e04e      	b.n	80037c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a23      	ldr	r2, [pc, #140]	@ (80037d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1e      	ldr	r2, [pc, #120]	@ (80037dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a19      	ldr	r2, [pc, #100]	@ (80037e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a18      	ldr	r2, [pc, #96]	@ (80037ec <HAL_TIM_Base_Start_IT+0xdc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40000c00 	.word	0x40000c00
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40001800 	.word	0x40001800

080037f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d020      	beq.n	8003854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01b      	beq.n	8003854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0202 	mvn.w	r2, #2
 8003824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8d2 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8c4 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8d5 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d020      	beq.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01b      	beq.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0204 	mvn.w	r2, #4
 8003870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8ac 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f89e 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8af 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d020      	beq.n	80038ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0208 	mvn.w	r2, #8
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2204      	movs	r2, #4
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f886 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f878 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f889 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d020      	beq.n	8003938 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0210 	mvn.w	r2, #16
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2208      	movs	r2, #8
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f860 	bl	80039e4 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f852 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f863 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fa28 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00c      	beq.n	8003980 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f900 	bl	8003b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f834 	bl	8003a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00c      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0220 	mvn.w	r2, #32
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f8d2 	bl	8003b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a43      	ldr	r2, [pc, #268]	@ (8003b40 <TIM_Base_SetConfig+0x120>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d00f      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a40      	ldr	r2, [pc, #256]	@ (8003b44 <TIM_Base_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b48 <TIM_Base_SetConfig+0x128>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3e      	ldr	r2, [pc, #248]	@ (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b50 <TIM_Base_SetConfig+0x130>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a32      	ldr	r2, [pc, #200]	@ (8003b40 <TIM_Base_SetConfig+0x120>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d027      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <TIM_Base_SetConfig+0x124>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d023      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b48 <TIM_Base_SetConfig+0x128>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <TIM_Base_SetConfig+0x12c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b50 <TIM_Base_SetConfig+0x130>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8003b54 <TIM_Base_SetConfig+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	@ (8003b58 <TIM_Base_SetConfig+0x138>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a29      	ldr	r2, [pc, #164]	@ (8003b5c <TIM_Base_SetConfig+0x13c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a28      	ldr	r2, [pc, #160]	@ (8003b60 <TIM_Base_SetConfig+0x140>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a27      	ldr	r2, [pc, #156]	@ (8003b64 <TIM_Base_SetConfig+0x144>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a26      	ldr	r2, [pc, #152]	@ (8003b68 <TIM_Base_SetConfig+0x148>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <TIM_Base_SetConfig+0x120>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0xf2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a10      	ldr	r2, [pc, #64]	@ (8003b50 <TIM_Base_SetConfig+0x130>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d103      	bne.n	8003b1a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f043 0204 	orr.w	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40010400 	.word	0x40010400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800
 8003b60:	40001800 	.word	0x40001800
 8003b64:	40001c00 	.word	0x40001c00
 8003b68:	40002000 	.word	0x40002000

08003b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e042      	b.n	8003c2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd f9d2 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	@ 0x24
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f973 	bl	8003ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d175      	bne.n	8003d40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_UART_Transmit+0x2c>
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e06e      	b.n	8003d42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2221      	movs	r2, #33	@ 0x21
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c72:	f7fd fb13 	bl	800129c <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	d108      	bne.n	8003ca0 <HAL_UART_Transmit+0x6c>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	e003      	b.n	8003ca8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ca8:	e02e      	b.n	8003d08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2180      	movs	r1, #128	@ 0x80
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f848 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e03a      	b.n	8003d42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	e007      	b.n	8003cfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1cb      	bne.n	8003caa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2140      	movs	r1, #64	@ 0x40
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f814 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e006      	b.n	8003d42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	e03b      	b.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d62:	d037      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d64:	f7fd fa9a 	bl	800129c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e03a      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d023      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b80      	cmp	r3, #128	@ 0x80
 8003d90:	d020      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b40      	cmp	r3, #64	@ 0x40
 8003d96:	d01d      	beq.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d116      	bne.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f81d 	bl	8003dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e00f      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d0b4      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b095      	sub	sp, #84	@ 0x54
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e24:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e5      	bne.n	8003e04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d119      	bne.n	8003ea8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e94:	61ba      	str	r2, [r7, #24]
 8003e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003eb6:	bf00      	nop
 8003eb8:	3754      	adds	r7, #84	@ 0x54
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b0c0      	sub	sp, #256	@ 0x100
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	ea40 0301 	orr.w	r3, r0, r1
 8003eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f1c:	f021 010c 	bic.w	r1, r1, #12
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	6999      	ldr	r1, [r3, #24]
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	ea40 0301 	orr.w	r3, r0, r1
 8003f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b8f      	ldr	r3, [pc, #572]	@ (8004190 <UART_SetConfig+0x2cc>)
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d005      	beq.n	8003f64 <UART_SetConfig+0xa0>
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004194 <UART_SetConfig+0x2d0>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d104      	bne.n	8003f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff fb34 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8003f68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f6c:	e003      	b.n	8003f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7ff fb1b 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8003f72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f80:	f040 810c 	bne.w	800419c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	eb12 0801 	adds.w	r8, r2, r1
 8003fac:	4629      	mov	r1, r5
 8003fae:	eb43 0901 	adc.w	r9, r3, r1
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	4699      	mov	r9, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	eb18 0303 	adds.w	r3, r8, r3
 8003fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	eb49 0303 	adc.w	r3, r9, r3
 8003fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	18db      	adds	r3, r3, r3
 8003ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	eb42 0303 	adc.w	r3, r2, r3
 8003ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004008:	f7fc f93a 	bl	8000280 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4b61      	ldr	r3, [pc, #388]	@ (8004198 <UART_SetConfig+0x2d4>)
 8004012:	fba3 2302 	umull	r2, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	011c      	lsls	r4, r3, #4
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004024:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	1891      	adds	r1, r2, r2
 8004032:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004034:	415b      	adcs	r3, r3
 8004036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800403c:	4641      	mov	r1, r8
 800403e:	eb12 0a01 	adds.w	sl, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0b01 	adc.w	fp, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405c:	4692      	mov	sl, r2
 800405e:	469b      	mov	fp, r3
 8004060:	4643      	mov	r3, r8
 8004062:	eb1a 0303 	adds.w	r3, sl, r3
 8004066:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800406a:	464b      	mov	r3, r9
 800406c:	eb4b 0303 	adc.w	r3, fp, r3
 8004070:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004080:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004088:	460b      	mov	r3, r1
 800408a:	18db      	adds	r3, r3, r3
 800408c:	643b      	str	r3, [r7, #64]	@ 0x40
 800408e:	4613      	mov	r3, r2
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	647b      	str	r3, [r7, #68]	@ 0x44
 8004096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800409a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800409e:	f7fc f8ef 	bl	8000280 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004198 <UART_SetConfig+0x2d4>)
 80040aa:	fba3 2301 	umull	r2, r3, r3, r1
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2264      	movs	r2, #100	@ 0x64
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	1acb      	subs	r3, r1, r3
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040be:	4b36      	ldr	r3, [pc, #216]	@ (8004198 <UART_SetConfig+0x2d4>)
 80040c0:	fba3 2302 	umull	r2, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040cc:	441c      	add	r4, r3
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	1891      	adds	r1, r2, r2
 80040e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040e8:	415b      	adcs	r3, r3
 80040ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040f0:	4641      	mov	r1, r8
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004108:	4659      	mov	r1, fp
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004112:	4651      	mov	r1, sl
 8004114:	00ca      	lsls	r2, r1, #3
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	4603      	mov	r3, r0
 800411c:	4642      	mov	r2, r8
 800411e:	189b      	adds	r3, r3, r2
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004124:	464b      	mov	r3, r9
 8004126:	460a      	mov	r2, r1
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800413c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800415a:	f7fc f891 	bl	8000280 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <UART_SetConfig+0x2d4>)
 8004164:	fba3 1302 	umull	r1, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2164      	movs	r1, #100	@ 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	3332      	adds	r3, #50	@ 0x32
 8004176:	4a08      	ldr	r2, [pc, #32]	@ (8004198 <UART_SetConfig+0x2d4>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 0207 	and.w	r2, r3, #7
 8004182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4422      	add	r2, r4
 800418a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800418c:	e106      	b.n	800439c <UART_SetConfig+0x4d8>
 800418e:	bf00      	nop
 8004190:	40011000 	.word	0x40011000
 8004194:	40011400 	.word	0x40011400
 8004198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	6239      	str	r1, [r7, #32]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041be:	4641      	mov	r1, r8
 80041c0:	1854      	adds	r4, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0501 	adc.w	r5, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	00eb      	lsls	r3, r5, #3
 80041d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d6:	00e2      	lsls	r2, r4, #3
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041e4:	464b      	mov	r3, r9
 80041e6:	eb45 0303 	adc.w	r3, r5, r3
 80041ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800420a:	4629      	mov	r1, r5
 800420c:	008b      	lsls	r3, r1, #2
 800420e:	4621      	mov	r1, r4
 8004210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004214:	4621      	mov	r1, r4
 8004216:	008a      	lsls	r2, r1, #2
 8004218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800421c:	f7fc f830 	bl	8000280 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b60      	ldr	r3, [pc, #384]	@ (80043a8 <UART_SetConfig+0x4e4>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011c      	lsls	r4, r3, #4
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004238:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800423c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	61b9      	str	r1, [r7, #24]
 8004248:	415b      	adcs	r3, r3
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004250:	4641      	mov	r1, r8
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6139      	str	r1, [r7, #16]
 8004256:	4649      	mov	r1, r9
 8004258:	414b      	adcs	r3, r1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004268:	4659      	mov	r1, fp
 800426a:	00cb      	lsls	r3, r1, #3
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004272:	4651      	mov	r1, sl
 8004274:	00ca      	lsls	r2, r1, #3
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4603      	mov	r3, r0
 800427c:	4642      	mov	r2, r8
 800427e:	189b      	adds	r3, r3, r2
 8004280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004284:	464b      	mov	r3, r9
 8004286:	460a      	mov	r2, r1
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800429a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042a8:	4649      	mov	r1, r9
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b2:	4641      	mov	r1, r8
 80042b4:	008a      	lsls	r2, r1, #2
 80042b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042ba:	f7fb ffe1 	bl	8000280 <__aeabi_uldivmod>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	4b38      	ldr	r3, [pc, #224]	@ (80043a8 <UART_SetConfig+0x4e4>)
 80042c6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2264      	movs	r2, #100	@ 0x64
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	1acb      	subs	r3, r1, r3
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	3332      	adds	r3, #50	@ 0x32
 80042d8:	4a33      	ldr	r2, [pc, #204]	@ (80043a8 <UART_SetConfig+0x4e4>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e4:	441c      	add	r4, r3
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80042ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80042f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	415b      	adcs	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004304:	4641      	mov	r1, r8
 8004306:	1851      	adds	r1, r2, r1
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	4649      	mov	r1, r9
 800430c:	414b      	adcs	r3, r1
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800431c:	4659      	mov	r1, fp
 800431e:	00cb      	lsls	r3, r1, #3
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004326:	4651      	mov	r1, sl
 8004328:	00ca      	lsls	r2, r1, #3
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4603      	mov	r3, r0
 8004330:	4642      	mov	r2, r8
 8004332:	189b      	adds	r3, r3, r2
 8004334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004336:	464b      	mov	r3, r9
 8004338:	460a      	mov	r2, r1
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	663b      	str	r3, [r7, #96]	@ 0x60
 800434a:	667a      	str	r2, [r7, #100]	@ 0x64
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004358:	4649      	mov	r1, r9
 800435a:	008b      	lsls	r3, r1, #2
 800435c:	4641      	mov	r1, r8
 800435e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004362:	4641      	mov	r1, r8
 8004364:	008a      	lsls	r2, r1, #2
 8004366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800436a:	f7fb ff89 	bl	8000280 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4b0d      	ldr	r3, [pc, #52]	@ (80043a8 <UART_SetConfig+0x4e4>)
 8004374:	fba3 1302 	umull	r1, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2164      	movs	r1, #100	@ 0x64
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	3332      	adds	r3, #50	@ 0x32
 8004386:	4a08      	ldr	r2, [pc, #32]	@ (80043a8 <UART_SetConfig+0x4e4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4422      	add	r2, r4
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043a2:	46bd      	mov	sp, r7
 80043a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a8:	51eb851f 	.word	0x51eb851f

080043ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043be:	2b84      	cmp	r3, #132	@ 0x84
 80043c0:	d005      	beq.n	80043ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	3303      	adds	r3, #3
 80043cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043e0:	f000 fafc 	bl	80049dc <vTaskStartScheduler>
  
  return osOK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	bd80      	pop	{r7, pc}

080043ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ec:	b089      	sub	sp, #36	@ 0x24
 80043ee:	af04      	add	r7, sp, #16
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <osThreadCreate+0x54>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685c      	ldr	r4, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691e      	ldr	r6, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff ffc8 	bl	80043ac <makeFreeRtosPriority>
 800441c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004426:	9202      	str	r2, [sp, #8]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	9100      	str	r1, [sp, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4632      	mov	r2, r6
 8004430:	4629      	mov	r1, r5
 8004432:	4620      	mov	r0, r4
 8004434:	f000 f8ed 	bl	8004612 <xTaskCreateStatic>
 8004438:	4603      	mov	r3, r0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e01c      	b.n	8004478 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685c      	ldr	r4, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800444a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ffaa 	bl	80043ac <makeFreeRtosPriority>
 8004458:	4602      	mov	r2, r0
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	9200      	str	r2, [sp, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4632      	mov	r2, r6
 8004466:	4629      	mov	r1, r5
 8004468:	4620      	mov	r0, r4
 800446a:	f000 f932 	bl	80046d2 <xTaskCreate>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004482 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <osDelay+0x16>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	e000      	b.n	800449a <osDelay+0x18>
 8004498:	2301      	movs	r3, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fa68 	bl	8004970 <vTaskDelay>
  
  return osOK;
 80044a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f103 0208 	add.w	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f103 0208 	add.w	r2, r3, #8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f103 0208 	add.w	r2, r3, #8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004562:	d103      	bne.n	800456c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e00c      	b.n	8004586 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3308      	adds	r3, #8
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e002      	b.n	800457a <vListInsert+0x2e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	d2f6      	bcs.n	8004574 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6852      	ldr	r2, [r2, #4]
 80045de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d103      	bne.n	80045f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08e      	sub	sp, #56	@ 0x38
 8004616:	af04      	add	r7, sp, #16
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	e7fd      	b.n	800463a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61fb      	str	r3, [r7, #28]
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	e7fd      	b.n	8004658 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800465c:	23a0      	movs	r3, #160	@ 0xa0
 800465e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2ba0      	cmp	r3, #160	@ 0xa0
 8004664:	d00b      	beq.n	800467e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	61bb      	str	r3, [r7, #24]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800467e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01e      	beq.n	80046c4 <xTaskCreateStatic+0xb2>
 8004686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2202      	movs	r2, #2
 800469a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800469e:	2300      	movs	r3, #0
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	9302      	str	r3, [sp, #8]
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f850 	bl	800475c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046be:	f000 f8ed 	bl	800489c <prvAddNewTaskToReadyList>
 80046c2:	e001      	b.n	80046c8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046c8:	697b      	ldr	r3, [r7, #20]
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3728      	adds	r7, #40	@ 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b08c      	sub	sp, #48	@ 0x30
 80046d6:	af04      	add	r7, sp, #16
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fefe 	bl	80054e8 <pvPortMalloc>
 80046ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00e      	beq.n	8004712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046f4:	20a0      	movs	r0, #160	@ 0xa0
 80046f6:	f000 fef7 	bl	80054e8 <pvPortMalloc>
 80046fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
 8004708:	e005      	b.n	8004716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f000 ffba 	bl	8005684 <vPortFree>
 8004710:	e001      	b.n	8004716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d017      	beq.n	800474c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	2300      	movs	r3, #0
 8004728:	9303      	str	r3, [sp, #12]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f80e 	bl	800475c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004740:	69f8      	ldr	r0, [r7, #28]
 8004742:	f000 f8ab 	bl	800489c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004746:	2301      	movs	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e002      	b.n	8004752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800474c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004752:	69bb      	ldr	r3, [r7, #24]
	}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004774:	3b01      	subs	r3, #1
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f023 0307 	bic.w	r3, r3, #7
 8004782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	617b      	str	r3, [r7, #20]
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	e7fd      	b.n	80047a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01f      	beq.n	80047ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e012      	b.n	80047d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	7819      	ldrb	r1, [r3, #0]
 80047ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	3334      	adds	r3, #52	@ 0x34
 80047c2:	460a      	mov	r2, r1
 80047c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3301      	adds	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d9e9      	bls.n	80047b2 <prvInitialiseNewTask+0x56>
 80047de:	e000      	b.n	80047e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80047e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ea:	e003      	b.n	80047f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d901      	bls.n	80047fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047fa:	2306      	movs	r3, #6
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	3304      	adds	r3, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fe68 	bl	80044ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	3318      	adds	r3, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fe63 	bl	80044ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004828:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	f1c3 0207 	rsb	r2, r3, #7
 8004830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004832:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	2200      	movs	r2, #0
 800483e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	2200      	movs	r2, #0
 8004846:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	334c      	adds	r3, #76	@ 0x4c
 800484e:	224c      	movs	r2, #76	@ 0x4c
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f858 	bl	8005908 <memset>
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	4a0d      	ldr	r2, [pc, #52]	@ (8004890 <prvInitialiseNewTask+0x134>)
 800485c:	651a      	str	r2, [r3, #80]	@ 0x50
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	4a0c      	ldr	r2, [pc, #48]	@ (8004894 <prvInitialiseNewTask+0x138>)
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	4a0c      	ldr	r2, [pc, #48]	@ (8004898 <prvInitialiseNewTask+0x13c>)
 8004868:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	69b8      	ldr	r0, [r7, #24]
 8004870:	f000 fc2a 	bl	80050c8 <pxPortInitialiseStack>
 8004874:	4602      	mov	r2, r0
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800487a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004886:	bf00      	nop
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	200041bc 	.word	0x200041bc
 8004894:	20004224 	.word	0x20004224
 8004898:	2000428c 	.word	0x2000428c

0800489c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048a4:	f000 fd40 	bl	8005328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004954 <prvAddNewTaskToReadyList+0xb8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <prvAddNewTaskToReadyList+0xb8>)
 80048b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048b2:	4b29      	ldr	r3, [pc, #164]	@ (8004958 <prvAddNewTaskToReadyList+0xbc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ba:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <prvAddNewTaskToReadyList+0xbc>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048c0:	4b24      	ldr	r3, [pc, #144]	@ (8004954 <prvAddNewTaskToReadyList+0xb8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d110      	bne.n	80048ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048c8:	f000 fad4 	bl	8004e74 <prvInitialiseTaskLists>
 80048cc:	e00d      	b.n	80048ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048ce:	4b23      	ldr	r3, [pc, #140]	@ (800495c <prvAddNewTaskToReadyList+0xc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048d6:	4b20      	ldr	r3, [pc, #128]	@ (8004958 <prvAddNewTaskToReadyList+0xbc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d802      	bhi.n	80048ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004958 <prvAddNewTaskToReadyList+0xbc>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <prvAddNewTaskToReadyList+0xc4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <prvAddNewTaskToReadyList+0xc4>)
 80048f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	4b19      	ldr	r3, [pc, #100]	@ (8004964 <prvAddNewTaskToReadyList+0xc8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	4a18      	ldr	r2, [pc, #96]	@ (8004964 <prvAddNewTaskToReadyList+0xc8>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a15      	ldr	r2, [pc, #84]	@ (8004968 <prvAddNewTaskToReadyList+0xcc>)
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7ff fdf1 	bl	8004504 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004922:	f000 fd33 	bl	800538c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <prvAddNewTaskToReadyList+0xc0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <prvAddNewTaskToReadyList+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d207      	bcs.n	800494c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <prvAddNewTaskToReadyList+0xd0>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000568 	.word	0x20000568
 8004958:	20000468 	.word	0x20000468
 800495c:	20000574 	.word	0x20000574
 8004960:	20000584 	.word	0x20000584
 8004964:	20000570 	.word	0x20000570
 8004968:	2000046c 	.word	0x2000046c
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004982:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <vTaskDelay+0x64>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <vTaskDelay+0x32>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049a2:	f000 f885 	bl	8004ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049a6:	2100      	movs	r1, #0
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb27 	bl	8004ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049ae:	f000 f88d 	bl	8004acc <xTaskResumeAll>
 80049b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049ba:	4b07      	ldr	r3, [pc, #28]	@ (80049d8 <vTaskDelay+0x68>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000590 	.word	0x20000590
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	@ 0x28
 80049e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049ea:	463a      	mov	r2, r7
 80049ec:	1d39      	adds	r1, r7, #4
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fdda 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	9202      	str	r2, [sp, #8]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2300      	movs	r3, #0
 8004a08:	460a      	mov	r2, r1
 8004a0a:	4921      	ldr	r1, [pc, #132]	@ (8004a90 <vTaskStartScheduler+0xb4>)
 8004a0c:	4821      	ldr	r0, [pc, #132]	@ (8004a94 <vTaskStartScheduler+0xb8>)
 8004a0e:	f7ff fe00 	bl	8004612 <xTaskCreateStatic>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4a20      	ldr	r2, [pc, #128]	@ (8004a98 <vTaskStartScheduler+0xbc>)
 8004a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a18:	4b1f      	ldr	r3, [pc, #124]	@ (8004a98 <vTaskStartScheduler+0xbc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e001      	b.n	8004a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d11b      	bne.n	8004a68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
}
 8004a42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a44:	4b15      	ldr	r3, [pc, #84]	@ (8004a9c <vTaskStartScheduler+0xc0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	334c      	adds	r3, #76	@ 0x4c
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <vTaskStartScheduler+0xc4>)
 8004a4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a4e:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <vTaskStartScheduler+0xc8>)
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a56:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <vTaskStartScheduler+0xcc>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <vTaskStartScheduler+0xd0>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a62:	f000 fbbd 	bl	80051e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a66:	e00f      	b.n	8004a88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a6e:	d10b      	bne.n	8004a88 <vTaskStartScheduler+0xac>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60fb      	str	r3, [r7, #12]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <vTaskStartScheduler+0xa8>
}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	080063f0 	.word	0x080063f0
 8004a94:	08004e45 	.word	0x08004e45
 8004a98:	2000058c 	.word	0x2000058c
 8004a9c:	20000468 	.word	0x20000468
 8004aa0:	20000010 	.word	0x20000010
 8004aa4:	20000588 	.word	0x20000588
 8004aa8:	20000574 	.word	0x20000574
 8004aac:	2000056c 	.word	0x2000056c

08004ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ab4:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <vTaskSuspendAll+0x18>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	4a03      	ldr	r2, [pc, #12]	@ (8004ac8 <vTaskSuspendAll+0x18>)
 8004abc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000590 	.word	0x20000590

08004acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ada:	4b42      	ldr	r3, [pc, #264]	@ (8004be4 <xTaskResumeAll+0x118>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <xTaskResumeAll+0x2e>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	603b      	str	r3, [r7, #0]
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004afa:	f000 fc15 	bl	8005328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <xTaskResumeAll+0x118>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	4a37      	ldr	r2, [pc, #220]	@ (8004be4 <xTaskResumeAll+0x118>)
 8004b06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b08:	4b36      	ldr	r3, [pc, #216]	@ (8004be4 <xTaskResumeAll+0x118>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d161      	bne.n	8004bd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b10:	4b35      	ldr	r3, [pc, #212]	@ (8004be8 <xTaskResumeAll+0x11c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05d      	beq.n	8004bd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b18:	e02e      	b.n	8004b78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1a:	4b34      	ldr	r3, [pc, #208]	@ (8004bec <xTaskResumeAll+0x120>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3318      	adds	r3, #24
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fd49 	bl	80045be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fd44 	bl	80045be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf0 <xTaskResumeAll+0x124>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <xTaskResumeAll+0x124>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4a27      	ldr	r2, [pc, #156]	@ (8004bf4 <xTaskResumeAll+0x128>)
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f7ff fcd0 	bl	8004504 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b68:	4b23      	ldr	r3, [pc, #140]	@ (8004bf8 <xTaskResumeAll+0x12c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b72:	4b22      	ldr	r3, [pc, #136]	@ (8004bfc <xTaskResumeAll+0x130>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b78:	4b1c      	ldr	r3, [pc, #112]	@ (8004bec <xTaskResumeAll+0x120>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1cc      	bne.n	8004b1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b86:	f000 fa19 	bl	8004fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <xTaskResumeAll+0x134>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b96:	f000 f837 	bl	8004c08 <xTaskIncrementTick>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ba0:	4b16      	ldr	r3, [pc, #88]	@ (8004bfc <xTaskResumeAll+0x130>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f1      	bne.n	8004b96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <xTaskResumeAll+0x134>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bb8:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <xTaskResumeAll+0x130>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <xTaskResumeAll+0x138>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bd4:	f000 fbda 	bl	800538c <vPortExitCritical>

	return xAlreadyYielded;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000590 	.word	0x20000590
 8004be8:	20000568 	.word	0x20000568
 8004bec:	20000528 	.word	0x20000528
 8004bf0:	20000570 	.word	0x20000570
 8004bf4:	2000046c 	.word	0x2000046c
 8004bf8:	20000468 	.word	0x20000468
 8004bfc:	2000057c 	.word	0x2000057c
 8004c00:	20000578 	.word	0x20000578
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c12:	4b4f      	ldr	r3, [pc, #316]	@ (8004d50 <xTaskIncrementTick+0x148>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 808f 	bne.w	8004d3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d54 <xTaskIncrementTick+0x14c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c24:	4a4b      	ldr	r2, [pc, #300]	@ (8004d54 <xTaskIncrementTick+0x14c>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d121      	bne.n	8004c74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c30:	4b49      	ldr	r3, [pc, #292]	@ (8004d58 <xTaskIncrementTick+0x150>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <xTaskIncrementTick+0x46>
 8004c52:	4b41      	ldr	r3, [pc, #260]	@ (8004d58 <xTaskIncrementTick+0x150>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	4b40      	ldr	r3, [pc, #256]	@ (8004d5c <xTaskIncrementTick+0x154>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8004d58 <xTaskIncrementTick+0x150>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4a3e      	ldr	r2, [pc, #248]	@ (8004d5c <xTaskIncrementTick+0x154>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b3e      	ldr	r3, [pc, #248]	@ (8004d60 <xTaskIncrementTick+0x158>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d60 <xTaskIncrementTick+0x158>)
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	f000 f9a4 	bl	8004fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c74:	4b3b      	ldr	r3, [pc, #236]	@ (8004d64 <xTaskIncrementTick+0x15c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d348      	bcc.n	8004d10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7e:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <xTaskIncrementTick+0x150>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c88:	4b36      	ldr	r3, [pc, #216]	@ (8004d64 <xTaskIncrementTick+0x15c>)
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c8e:	601a      	str	r2, [r3, #0]
					break;
 8004c90:	e03e      	b.n	8004d10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c92:	4b31      	ldr	r3, [pc, #196]	@ (8004d58 <xTaskIncrementTick+0x150>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d203      	bcs.n	8004cb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004caa:	4a2e      	ldr	r2, [pc, #184]	@ (8004d64 <xTaskIncrementTick+0x15c>)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cb0:	e02e      	b.n	8004d10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fc81 	bl	80045be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fc78 	bl	80045be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <xTaskIncrementTick+0x160>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <xTaskIncrementTick+0x160>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <xTaskIncrementTick+0x164>)
 8004cee:	441a      	add	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7ff fc04 	bl	8004504 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d00:	4b1b      	ldr	r3, [pc, #108]	@ (8004d70 <xTaskIncrementTick+0x168>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d3b9      	bcc.n	8004c7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d0e:	e7b6      	b.n	8004c7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d10:	4b17      	ldr	r3, [pc, #92]	@ (8004d70 <xTaskIncrementTick+0x168>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d16:	4915      	ldr	r1, [pc, #84]	@ (8004d6c <xTaskIncrementTick+0x164>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d901      	bls.n	8004d2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d2c:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <xTaskIncrementTick+0x16c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e004      	b.n	8004d44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <xTaskIncrementTick+0x170>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	4a0d      	ldr	r2, [pc, #52]	@ (8004d78 <xTaskIncrementTick+0x170>)
 8004d42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d44:	697b      	ldr	r3, [r7, #20]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000590 	.word	0x20000590
 8004d54:	2000056c 	.word	0x2000056c
 8004d58:	20000520 	.word	0x20000520
 8004d5c:	20000524 	.word	0x20000524
 8004d60:	20000580 	.word	0x20000580
 8004d64:	20000588 	.word	0x20000588
 8004d68:	20000570 	.word	0x20000570
 8004d6c:	2000046c 	.word	0x2000046c
 8004d70:	20000468 	.word	0x20000468
 8004d74:	2000057c 	.word	0x2000057c
 8004d78:	20000578 	.word	0x20000578

08004d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d82:	4b2a      	ldr	r3, [pc, #168]	@ (8004e2c <vTaskSwitchContext+0xb0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d8a:	4b29      	ldr	r3, [pc, #164]	@ (8004e30 <vTaskSwitchContext+0xb4>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d90:	e045      	b.n	8004e1e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004d92:	4b27      	ldr	r3, [pc, #156]	@ (8004e30 <vTaskSwitchContext+0xb4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d98:	4b26      	ldr	r3, [pc, #152]	@ (8004e34 <vTaskSwitchContext+0xb8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	fab3 f383 	clz	r3, r3
 8004da4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004da6:	7afb      	ldrb	r3, [r7, #11]
 8004da8:	f1c3 031f 	rsb	r3, r3, #31
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	4922      	ldr	r1, [pc, #136]	@ (8004e38 <vTaskSwitchContext+0xbc>)
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <vTaskSwitchContext+0x5e>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <vTaskSwitchContext+0x5a>
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a14      	ldr	r2, [pc, #80]	@ (8004e38 <vTaskSwitchContext+0xbc>)
 8004de6:	4413      	add	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d104      	bne.n	8004e0a <vTaskSwitchContext+0x8e>
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a0a      	ldr	r2, [pc, #40]	@ (8004e3c <vTaskSwitchContext+0xc0>)
 8004e12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e14:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <vTaskSwitchContext+0xc0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	334c      	adds	r3, #76	@ 0x4c
 8004e1a:	4a09      	ldr	r2, [pc, #36]	@ (8004e40 <vTaskSwitchContext+0xc4>)
 8004e1c:	6013      	str	r3, [r2, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000590 	.word	0x20000590
 8004e30:	2000057c 	.word	0x2000057c
 8004e34:	20000570 	.word	0x20000570
 8004e38:	2000046c 	.word	0x2000046c
 8004e3c:	20000468 	.word	0x20000468
 8004e40:	20000010 	.word	0x20000010

08004e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e4c:	f000 f852 	bl	8004ef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e50:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <prvIdleTask+0x28>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d9f9      	bls.n	8004e4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <prvIdleTask+0x2c>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e68:	e7f0      	b.n	8004e4c <prvIdleTask+0x8>
 8004e6a:	bf00      	nop
 8004e6c:	2000046c 	.word	0x2000046c
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	e00c      	b.n	8004e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <prvInitialiseTaskLists+0x60>)
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fb0b 	bl	80044aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3301      	adds	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b06      	cmp	r3, #6
 8004e9e:	d9ef      	bls.n	8004e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ea0:	480d      	ldr	r0, [pc, #52]	@ (8004ed8 <prvInitialiseTaskLists+0x64>)
 8004ea2:	f7ff fb02 	bl	80044aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ea6:	480d      	ldr	r0, [pc, #52]	@ (8004edc <prvInitialiseTaskLists+0x68>)
 8004ea8:	f7ff faff 	bl	80044aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eac:	480c      	ldr	r0, [pc, #48]	@ (8004ee0 <prvInitialiseTaskLists+0x6c>)
 8004eae:	f7ff fafc 	bl	80044aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eb2:	480c      	ldr	r0, [pc, #48]	@ (8004ee4 <prvInitialiseTaskLists+0x70>)
 8004eb4:	f7ff faf9 	bl	80044aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004eb8:	480b      	ldr	r0, [pc, #44]	@ (8004ee8 <prvInitialiseTaskLists+0x74>)
 8004eba:	f7ff faf6 	bl	80044aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <prvInitialiseTaskLists+0x78>)
 8004ec0:	4a05      	ldr	r2, [pc, #20]	@ (8004ed8 <prvInitialiseTaskLists+0x64>)
 8004ec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <prvInitialiseTaskLists+0x7c>)
 8004ec6:	4a05      	ldr	r2, [pc, #20]	@ (8004edc <prvInitialiseTaskLists+0x68>)
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2000046c 	.word	0x2000046c
 8004ed8:	200004f8 	.word	0x200004f8
 8004edc:	2000050c 	.word	0x2000050c
 8004ee0:	20000528 	.word	0x20000528
 8004ee4:	2000053c 	.word	0x2000053c
 8004ee8:	20000554 	.word	0x20000554
 8004eec:	20000520 	.word	0x20000520
 8004ef0:	20000524 	.word	0x20000524

08004ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004efa:	e019      	b.n	8004f30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004efc:	f000 fa14 	bl	8005328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f00:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <prvCheckTasksWaitingTermination+0x50>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fb56 	bl	80045be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <prvCheckTasksWaitingTermination+0x54>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4a0b      	ldr	r2, [pc, #44]	@ (8004f48 <prvCheckTasksWaitingTermination+0x54>)
 8004f1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <prvCheckTasksWaitingTermination+0x58>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <prvCheckTasksWaitingTermination+0x58>)
 8004f24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f26:	f000 fa31 	bl	800538c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f810 	bl	8004f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <prvCheckTasksWaitingTermination+0x58>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e1      	bne.n	8004efc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000053c 	.word	0x2000053c
 8004f48:	20000568 	.word	0x20000568
 8004f4c:	20000550 	.word	0x20000550

08004f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	334c      	adds	r3, #76	@ 0x4c
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fcdb 	bl	8005918 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fb87 	bl	8005684 <vPortFree>
				vPortFree( pxTCB );
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fb84 	bl	8005684 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f7c:	e019      	b.n	8004fb2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d103      	bne.n	8004f90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb7b 	bl	8005684 <vPortFree>
	}
 8004f8e:	e010      	b.n	8004fb2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d00b      	beq.n	8004fb2 <prvDeleteTCB+0x62>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	60fb      	str	r3, [r7, #12]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <prvDeleteTCB+0x5e>
	}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x38>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fd4:	e008      	b.n	8004fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd6:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x38>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	20000520 	.word	0x20000520
 8004ff8:	20000588 	.word	0x20000588

08004ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005006:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800500c:	4b28      	ldr	r3, [pc, #160]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3304      	adds	r3, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fad3 	bl	80045be <uxListRemove>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800501e:	4b24      	ldr	r3, [pc, #144]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	2201      	movs	r2, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43da      	mvns	r2, r3
 800502c:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4013      	ands	r3, r2
 8005032:	4a20      	ldr	r2, [pc, #128]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503c:	d10a      	bne.n	8005054 <prvAddCurrentTaskToDelayedList+0x58>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005044:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	481a      	ldr	r0, [pc, #104]	@ (80050b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800504e:	f7ff fa59 	bl	8004504 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005052:	e026      	b.n	80050a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	429a      	cmp	r2, r3
 800506a:	d209      	bcs.n	8005080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506c:	4b13      	ldr	r3, [pc, #76]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b0f      	ldr	r3, [pc, #60]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7ff fa67 	bl	800454c <vListInsert>
}
 800507e:	e010      	b.n	80050a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005080:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3304      	adds	r3, #4
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f7ff fa5d 	bl	800454c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	429a      	cmp	r2, r3
 800509a:	d202      	bcs.n	80050a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800509c:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6013      	str	r3, [r2, #0]
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	2000056c 	.word	0x2000056c
 80050b0:	20000468 	.word	0x20000468
 80050b4:	20000570 	.word	0x20000570
 80050b8:	20000554 	.word	0x20000554
 80050bc:	20000524 	.word	0x20000524
 80050c0:	20000520 	.word	0x20000520
 80050c4:	20000588 	.word	0x20000588

080050c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b04      	subs	r3, #4
 80050d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3b04      	subs	r3, #4
 80050e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f023 0201 	bic.w	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3b04      	subs	r3, #4
 80050f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050f8:	4a0c      	ldr	r2, [pc, #48]	@ (800512c <pxPortInitialiseStack+0x64>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3b14      	subs	r3, #20
 8005102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3b04      	subs	r3, #4
 800510e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f06f 0202 	mvn.w	r2, #2
 8005116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3b20      	subs	r3, #32
 800511c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	08005131 	.word	0x08005131

08005130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800513a:	4b13      	ldr	r3, [pc, #76]	@ (8005188 <prvTaskExitError+0x58>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005142:	d00b      	beq.n	800515c <prvTaskExitError+0x2c>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	60fb      	str	r3, [r7, #12]
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	e7fd      	b.n	8005158 <prvTaskExitError+0x28>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60bb      	str	r3, [r7, #8]
}
 800516e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005170:	bf00      	nop
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0fc      	beq.n	8005172 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	2000000c 	.word	0x2000000c
 800518c:	00000000 	.word	0x00000000

08005190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005190:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <pxCurrentTCBConst2>)
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	6808      	ldr	r0, [r1, #0]
 8005196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519a:	f380 8809 	msr	PSP, r0
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f04f 0000 	mov.w	r0, #0
 80051a6:	f380 8811 	msr	BASEPRI, r0
 80051aa:	4770      	bx	lr
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst2>:
 80051b0:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051b8:	4808      	ldr	r0, [pc, #32]	@ (80051dc <prvPortStartFirstTask+0x24>)
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	6800      	ldr	r0, [r0, #0]
 80051be:	f380 8808 	msr	MSP, r0
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8814 	msr	CONTROL, r0
 80051ca:	b662      	cpsie	i
 80051cc:	b661      	cpsie	f
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	df00      	svc	0
 80051d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051da:	bf00      	nop
 80051dc:	e000ed08 	.word	0xe000ed08

080051e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051e6:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <xPortStartScheduler+0x124>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a47      	ldr	r2, [pc, #284]	@ (8005308 <xPortStartScheduler+0x128>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10b      	bne.n	8005208 <xPortStartScheduler+0x28>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005208:	4b3e      	ldr	r3, [pc, #248]	@ (8005304 <xPortStartScheduler+0x124>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a3f      	ldr	r2, [pc, #252]	@ (800530c <xPortStartScheduler+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10b      	bne.n	800522a <xPortStartScheduler+0x4a>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	613b      	str	r3, [r7, #16]
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800522a:	4b39      	ldr	r3, [pc, #228]	@ (8005310 <xPortStartScheduler+0x130>)
 800522c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	22ff      	movs	r2, #255	@ 0xff
 800523a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4b31      	ldr	r3, [pc, #196]	@ (8005314 <xPortStartScheduler+0x134>)
 8005250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005252:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <xPortStartScheduler+0x138>)
 8005254:	2207      	movs	r2, #7
 8005256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005258:	e009      	b.n	800526e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800525a:	4b2f      	ldr	r3, [pc, #188]	@ (8005318 <xPortStartScheduler+0x138>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3b01      	subs	r3, #1
 8005260:	4a2d      	ldr	r2, [pc, #180]	@ (8005318 <xPortStartScheduler+0x138>)
 8005262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005276:	2b80      	cmp	r3, #128	@ 0x80
 8005278:	d0ef      	beq.n	800525a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800527a:	4b27      	ldr	r3, [pc, #156]	@ (8005318 <xPortStartScheduler+0x138>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1c3 0307 	rsb	r3, r3, #7
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00b      	beq.n	800529e <xPortStartScheduler+0xbe>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60bb      	str	r3, [r7, #8]
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800529e:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <xPortStartScheduler+0x138>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <xPortStartScheduler+0x138>)
 80052a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <xPortStartScheduler+0x138>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052b0:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <xPortStartScheduler+0x138>)
 80052b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052bc:	4b17      	ldr	r3, [pc, #92]	@ (800531c <xPortStartScheduler+0x13c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a16      	ldr	r2, [pc, #88]	@ (800531c <xPortStartScheduler+0x13c>)
 80052c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052c8:	4b14      	ldr	r3, [pc, #80]	@ (800531c <xPortStartScheduler+0x13c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a13      	ldr	r2, [pc, #76]	@ (800531c <xPortStartScheduler+0x13c>)
 80052ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052d4:	f000 f8da 	bl	800548c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <xPortStartScheduler+0x140>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052de:	f000 f8f9 	bl	80054d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <xPortStartScheduler+0x144>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005324 <xPortStartScheduler+0x144>)
 80052e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052ee:	f7ff ff63 	bl	80051b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052f2:	f7ff fd43 	bl	8004d7c <vTaskSwitchContext>
	prvTaskExitError();
 80052f6:	f7ff ff1b 	bl	8005130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	e000ed00 	.word	0xe000ed00
 8005308:	410fc271 	.word	0x410fc271
 800530c:	410fc270 	.word	0x410fc270
 8005310:	e000e400 	.word	0xe000e400
 8005314:	20000594 	.word	0x20000594
 8005318:	20000598 	.word	0x20000598
 800531c:	e000ed20 	.word	0xe000ed20
 8005320:	2000000c 	.word	0x2000000c
 8005324:	e000ef34 	.word	0xe000ef34

08005328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005342:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <vPortEnterCritical+0x5c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a0e      	ldr	r2, [pc, #56]	@ (8005384 <vPortEnterCritical+0x5c>)
 800534a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800534c:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <vPortEnterCritical+0x5c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d110      	bne.n	8005376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005354:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <vPortEnterCritical+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <vPortEnterCritical+0x4e>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	603b      	str	r3, [r7, #0]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <vPortEnterCritical+0x4a>
	}
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000000c 	.word	0x2000000c
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005392:	4b12      	ldr	r3, [pc, #72]	@ (80053dc <vPortExitCritical+0x50>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <vPortExitCritical+0x26>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	607b      	str	r3, [r7, #4]
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053b2:	4b0a      	ldr	r3, [pc, #40]	@ (80053dc <vPortExitCritical+0x50>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	4a08      	ldr	r2, [pc, #32]	@ (80053dc <vPortExitCritical+0x50>)
 80053ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <vPortExitCritical+0x50>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <vPortExitCritical+0x44>
 80053c4:	2300      	movs	r3, #0
 80053c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	2000000c 	.word	0x2000000c

080053e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053e0:	f3ef 8009 	mrs	r0, PSP
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <pxCurrentTCBConst>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f01e 0f10 	tst.w	lr, #16
 80053f0:	bf08      	it	eq
 80053f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	6010      	str	r0, [r2, #0]
 80053fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005404:	f380 8811 	msr	BASEPRI, r0
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f7ff fcb4 	bl	8004d7c <vTaskSwitchContext>
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f380 8811 	msr	BASEPRI, r0
 800541c:	bc09      	pop	{r0, r3}
 800541e:	6819      	ldr	r1, [r3, #0]
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005426:	f01e 0f10 	tst.w	lr, #16
 800542a:	bf08      	it	eq
 800542c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005430:	f380 8809 	msr	PSP, r0
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	f3af 8000 	nop.w

08005440 <pxCurrentTCBConst>:
 8005440:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005462:	f7ff fbd1 	bl	8004c08 <xTaskIncrementTick>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800546c:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <SysTick_Handler+0x40>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005490:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <vPortSetupTimerInterrupt+0x34>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005496:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <vPortSetupTimerInterrupt+0x38>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800549c:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <vPortSetupTimerInterrupt+0x3c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0a      	ldr	r2, [pc, #40]	@ (80054cc <vPortSetupTimerInterrupt+0x40>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	099b      	lsrs	r3, r3, #6
 80054a8:	4a09      	ldr	r2, [pc, #36]	@ (80054d0 <vPortSetupTimerInterrupt+0x44>)
 80054aa:	3b01      	subs	r3, #1
 80054ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ae:	4b04      	ldr	r3, [pc, #16]	@ (80054c0 <vPortSetupTimerInterrupt+0x34>)
 80054b0:	2207      	movs	r2, #7
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	e000e010 	.word	0xe000e010
 80054c4:	e000e018 	.word	0xe000e018
 80054c8:	20000000 	.word	0x20000000
 80054cc:	10624dd3 	.word	0x10624dd3
 80054d0:	e000e014 	.word	0xe000e014

080054d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054e4 <vPortEnableVFP+0x10>
 80054d8:	6801      	ldr	r1, [r0, #0]
 80054da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054de:	6001      	str	r1, [r0, #0]
 80054e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054e2:	bf00      	nop
 80054e4:	e000ed88 	.word	0xe000ed88

080054e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054f4:	f7ff fadc 	bl	8004ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054f8:	4b5c      	ldr	r3, [pc, #368]	@ (800566c <pvPortMalloc+0x184>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005500:	f000 f924 	bl	800574c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005504:	4b5a      	ldr	r3, [pc, #360]	@ (8005670 <pvPortMalloc+0x188>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 8095 	bne.w	800563c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01e      	beq.n	8005556 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005518:	2208      	movs	r2, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	2b00      	cmp	r3, #0
 8005528:	d015      	beq.n	8005556 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f023 0307 	bic.w	r3, r3, #7
 8005530:	3308      	adds	r3, #8
 8005532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <pvPortMalloc+0x6e>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	617b      	str	r3, [r7, #20]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d06f      	beq.n	800563c <pvPortMalloc+0x154>
 800555c:	4b45      	ldr	r3, [pc, #276]	@ (8005674 <pvPortMalloc+0x18c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d86a      	bhi.n	800563c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005566:	4b44      	ldr	r3, [pc, #272]	@ (8005678 <pvPortMalloc+0x190>)
 8005568:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800556a:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <pvPortMalloc+0x190>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005570:	e004      	b.n	800557c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d903      	bls.n	800558e <pvPortMalloc+0xa6>
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f1      	bne.n	8005572 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800558e:	4b37      	ldr	r3, [pc, #220]	@ (800566c <pvPortMalloc+0x184>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005594:	429a      	cmp	r2, r3
 8005596:	d051      	beq.n	800563c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2208      	movs	r2, #8
 800559e:	4413      	add	r3, r2
 80055a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	1ad2      	subs	r2, r2, r3
 80055b2:	2308      	movs	r3, #8
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d920      	bls.n	80055fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <pvPortMalloc+0xfc>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	613b      	str	r3, [r7, #16]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	1ad2      	subs	r2, r2, r3
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055f6:	69b8      	ldr	r0, [r7, #24]
 80055f8:	f000 f90a 	bl	8005810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005674 <pvPortMalloc+0x18c>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	4a1b      	ldr	r2, [pc, #108]	@ (8005674 <pvPortMalloc+0x18c>)
 8005608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800560a:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <pvPortMalloc+0x18c>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <pvPortMalloc+0x194>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d203      	bcs.n	800561e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005616:	4b17      	ldr	r3, [pc, #92]	@ (8005674 <pvPortMalloc+0x18c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a18      	ldr	r2, [pc, #96]	@ (800567c <pvPortMalloc+0x194>)
 800561c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <pvPortMalloc+0x188>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	431a      	orrs	r2, r3
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005632:	4b13      	ldr	r3, [pc, #76]	@ (8005680 <pvPortMalloc+0x198>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	4a11      	ldr	r2, [pc, #68]	@ (8005680 <pvPortMalloc+0x198>)
 800563a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800563c:	f7ff fa46 	bl	8004acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <pvPortMalloc+0x17a>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	60fb      	str	r3, [r7, #12]
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	e7fd      	b.n	800565e <pvPortMalloc+0x176>
	return pvReturn;
 8005662:	69fb      	ldr	r3, [r7, #28]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3728      	adds	r7, #40	@ 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	200041a4 	.word	0x200041a4
 8005670:	200041b8 	.word	0x200041b8
 8005674:	200041a8 	.word	0x200041a8
 8005678:	2000419c 	.word	0x2000419c
 800567c:	200041ac 	.word	0x200041ac
 8005680:	200041b0 	.word	0x200041b0

08005684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d04f      	beq.n	8005736 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005696:	2308      	movs	r3, #8
 8005698:	425b      	negs	r3, r3
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <vPortFree+0xbc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <vPortFree+0x46>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60fb      	str	r3, [r7, #12]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <vPortFree+0x66>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <vPortFree+0xbc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01e      	beq.n	8005736 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d11a      	bne.n	8005736 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4b0e      	ldr	r3, [pc, #56]	@ (8005740 <vPortFree+0xbc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	43db      	mvns	r3, r3
 800570a:	401a      	ands	r2, r3
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005710:	f7ff f9ce 	bl	8004ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <vPortFree+0xc0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4413      	add	r3, r2
 800571e:	4a09      	ldr	r2, [pc, #36]	@ (8005744 <vPortFree+0xc0>)
 8005720:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005722:	6938      	ldr	r0, [r7, #16]
 8005724:	f000 f874 	bl	8005810 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005728:	4b07      	ldr	r3, [pc, #28]	@ (8005748 <vPortFree+0xc4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	4a06      	ldr	r2, [pc, #24]	@ (8005748 <vPortFree+0xc4>)
 8005730:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005732:	f7ff f9cb 	bl	8004acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200041b8 	.word	0x200041b8
 8005744:	200041a8 	.word	0x200041a8
 8005748:	200041b4 	.word	0x200041b4

0800574c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005752:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005758:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <prvHeapInit+0xac>)
 800575a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00c      	beq.n	8005780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3307      	adds	r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	4a1f      	ldr	r2, [pc, #124]	@ (80057f8 <prvHeapInit+0xac>)
 800577c:	4413      	add	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <prvHeapInit+0xb0>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800578a:	4b1c      	ldr	r3, [pc, #112]	@ (80057fc <prvHeapInit+0xb0>)
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4413      	add	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005798:	2208      	movs	r2, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0307 	bic.w	r3, r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <prvHeapInit+0xb4>)
 80057ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ae:	4b14      	ldr	r3, [pc, #80]	@ (8005800 <prvHeapInit+0xb4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057b6:	4b12      	ldr	r3, [pc, #72]	@ (8005800 <prvHeapInit+0xb4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005800 <prvHeapInit+0xb4>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005804 <prvHeapInit+0xb8>)
 80057da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a09      	ldr	r2, [pc, #36]	@ (8005808 <prvHeapInit+0xbc>)
 80057e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057e4:	4b09      	ldr	r3, [pc, #36]	@ (800580c <prvHeapInit+0xc0>)
 80057e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057ea:	601a      	str	r2, [r3, #0]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	2000059c 	.word	0x2000059c
 80057fc:	2000419c 	.word	0x2000419c
 8005800:	200041a4 	.word	0x200041a4
 8005804:	200041ac 	.word	0x200041ac
 8005808:	200041a8 	.word	0x200041a8
 800580c:	200041b8 	.word	0x200041b8

08005810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005818:	4b28      	ldr	r3, [pc, #160]	@ (80058bc <prvInsertBlockIntoFreeList+0xac>)
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e002      	b.n	8005824 <prvInsertBlockIntoFreeList+0x14>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d8f7      	bhi.n	800581e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4413      	add	r3, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d108      	bne.n	8005852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	441a      	add	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d118      	bne.n	8005898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <prvInsertBlockIntoFreeList+0xb0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d00d      	beq.n	800588e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	441a      	add	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e008      	b.n	80058a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800588e:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <prvInsertBlockIntoFreeList+0xb0>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e003      	b.n	80058a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d002      	beq.n	80058ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	2000419c 	.word	0x2000419c
 80058c0:	200041a4 	.word	0x200041a4

080058c4 <siprintf>:
 80058c4:	b40e      	push	{r1, r2, r3}
 80058c6:	b510      	push	{r4, lr}
 80058c8:	b09d      	sub	sp, #116	@ 0x74
 80058ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80058cc:	9002      	str	r0, [sp, #8]
 80058ce:	9006      	str	r0, [sp, #24]
 80058d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058d4:	480a      	ldr	r0, [pc, #40]	@ (8005900 <siprintf+0x3c>)
 80058d6:	9107      	str	r1, [sp, #28]
 80058d8:	9104      	str	r1, [sp, #16]
 80058da:	490a      	ldr	r1, [pc, #40]	@ (8005904 <siprintf+0x40>)
 80058dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e0:	9105      	str	r1, [sp, #20]
 80058e2:	2400      	movs	r4, #0
 80058e4:	a902      	add	r1, sp, #8
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80058ec:	f000 fa00 	bl	8005cf0 <_svfiprintf_r>
 80058f0:	9b02      	ldr	r3, [sp, #8]
 80058f2:	701c      	strb	r4, [r3, #0]
 80058f4:	b01d      	add	sp, #116	@ 0x74
 80058f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fa:	b003      	add	sp, #12
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000010 	.word	0x20000010
 8005904:	ffff0208 	.word	0xffff0208

08005908 <memset>:
 8005908:	4402      	add	r2, r0
 800590a:	4603      	mov	r3, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	d100      	bne.n	8005912 <memset+0xa>
 8005910:	4770      	bx	lr
 8005912:	f803 1b01 	strb.w	r1, [r3], #1
 8005916:	e7f9      	b.n	800590c <memset+0x4>

08005918 <_reclaim_reent>:
 8005918:	4b2d      	ldr	r3, [pc, #180]	@ (80059d0 <_reclaim_reent+0xb8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4283      	cmp	r3, r0
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	4604      	mov	r4, r0
 8005922:	d053      	beq.n	80059cc <_reclaim_reent+0xb4>
 8005924:	69c3      	ldr	r3, [r0, #28]
 8005926:	b31b      	cbz	r3, 8005970 <_reclaim_reent+0x58>
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	b163      	cbz	r3, 8005946 <_reclaim_reent+0x2e>
 800592c:	2500      	movs	r5, #0
 800592e:	69e3      	ldr	r3, [r4, #28]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	5959      	ldr	r1, [r3, r5]
 8005934:	b9b1      	cbnz	r1, 8005964 <_reclaim_reent+0x4c>
 8005936:	3504      	adds	r5, #4
 8005938:	2d80      	cmp	r5, #128	@ 0x80
 800593a:	d1f8      	bne.n	800592e <_reclaim_reent+0x16>
 800593c:	69e3      	ldr	r3, [r4, #28]
 800593e:	4620      	mov	r0, r4
 8005940:	68d9      	ldr	r1, [r3, #12]
 8005942:	f000 f881 	bl	8005a48 <_free_r>
 8005946:	69e3      	ldr	r3, [r4, #28]
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	b111      	cbz	r1, 8005952 <_reclaim_reent+0x3a>
 800594c:	4620      	mov	r0, r4
 800594e:	f000 f87b 	bl	8005a48 <_free_r>
 8005952:	69e3      	ldr	r3, [r4, #28]
 8005954:	689d      	ldr	r5, [r3, #8]
 8005956:	b15d      	cbz	r5, 8005970 <_reclaim_reent+0x58>
 8005958:	4629      	mov	r1, r5
 800595a:	4620      	mov	r0, r4
 800595c:	682d      	ldr	r5, [r5, #0]
 800595e:	f000 f873 	bl	8005a48 <_free_r>
 8005962:	e7f8      	b.n	8005956 <_reclaim_reent+0x3e>
 8005964:	680e      	ldr	r6, [r1, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f86e 	bl	8005a48 <_free_r>
 800596c:	4631      	mov	r1, r6
 800596e:	e7e1      	b.n	8005934 <_reclaim_reent+0x1c>
 8005970:	6961      	ldr	r1, [r4, #20]
 8005972:	b111      	cbz	r1, 800597a <_reclaim_reent+0x62>
 8005974:	4620      	mov	r0, r4
 8005976:	f000 f867 	bl	8005a48 <_free_r>
 800597a:	69e1      	ldr	r1, [r4, #28]
 800597c:	b111      	cbz	r1, 8005984 <_reclaim_reent+0x6c>
 800597e:	4620      	mov	r0, r4
 8005980:	f000 f862 	bl	8005a48 <_free_r>
 8005984:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005986:	b111      	cbz	r1, 800598e <_reclaim_reent+0x76>
 8005988:	4620      	mov	r0, r4
 800598a:	f000 f85d 	bl	8005a48 <_free_r>
 800598e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005990:	b111      	cbz	r1, 8005998 <_reclaim_reent+0x80>
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f858 	bl	8005a48 <_free_r>
 8005998:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800599a:	b111      	cbz	r1, 80059a2 <_reclaim_reent+0x8a>
 800599c:	4620      	mov	r0, r4
 800599e:	f000 f853 	bl	8005a48 <_free_r>
 80059a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80059a4:	b111      	cbz	r1, 80059ac <_reclaim_reent+0x94>
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 f84e 	bl	8005a48 <_free_r>
 80059ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80059ae:	b111      	cbz	r1, 80059b6 <_reclaim_reent+0x9e>
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 f849 	bl	8005a48 <_free_r>
 80059b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80059b8:	b111      	cbz	r1, 80059c0 <_reclaim_reent+0xa8>
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f844 	bl	8005a48 <_free_r>
 80059c0:	6a23      	ldr	r3, [r4, #32]
 80059c2:	b11b      	cbz	r3, 80059cc <_reclaim_reent+0xb4>
 80059c4:	4620      	mov	r0, r4
 80059c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059ca:	4718      	bx	r3
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	bf00      	nop
 80059d0:	20000010 	.word	0x20000010

080059d4 <__errno>:
 80059d4:	4b01      	ldr	r3, [pc, #4]	@ (80059dc <__errno+0x8>)
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000010 	.word	0x20000010

080059e0 <__libc_init_array>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005a18 <__libc_init_array+0x38>)
 80059e4:	4c0d      	ldr	r4, [pc, #52]	@ (8005a1c <__libc_init_array+0x3c>)
 80059e6:	1b64      	subs	r4, r4, r5
 80059e8:	10a4      	asrs	r4, r4, #2
 80059ea:	2600      	movs	r6, #0
 80059ec:	42a6      	cmp	r6, r4
 80059ee:	d109      	bne.n	8005a04 <__libc_init_array+0x24>
 80059f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005a20 <__libc_init_array+0x40>)
 80059f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005a24 <__libc_init_array+0x44>)
 80059f4:	f000 fc64 	bl	80062c0 <_init>
 80059f8:	1b64      	subs	r4, r4, r5
 80059fa:	10a4      	asrs	r4, r4, #2
 80059fc:	2600      	movs	r6, #0
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d105      	bne.n	8005a0e <__libc_init_array+0x2e>
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a08:	4798      	blx	r3
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7ee      	b.n	80059ec <__libc_init_array+0xc>
 8005a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a12:	4798      	blx	r3
 8005a14:	3601      	adds	r6, #1
 8005a16:	e7f2      	b.n	80059fe <__libc_init_array+0x1e>
 8005a18:	0800644c 	.word	0x0800644c
 8005a1c:	0800644c 	.word	0x0800644c
 8005a20:	0800644c 	.word	0x0800644c
 8005a24:	08006450 	.word	0x08006450

08005a28 <__retarget_lock_acquire_recursive>:
 8005a28:	4770      	bx	lr

08005a2a <__retarget_lock_release_recursive>:
 8005a2a:	4770      	bx	lr

08005a2c <memcpy>:
 8005a2c:	440a      	add	r2, r1
 8005a2e:	4291      	cmp	r1, r2
 8005a30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a34:	d100      	bne.n	8005a38 <memcpy+0xc>
 8005a36:	4770      	bx	lr
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a42:	4291      	cmp	r1, r2
 8005a44:	d1f9      	bne.n	8005a3a <memcpy+0xe>
 8005a46:	bd10      	pop	{r4, pc}

08005a48 <_free_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d041      	beq.n	8005ad4 <_free_r+0x8c>
 8005a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a54:	1f0c      	subs	r4, r1, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfb8      	it	lt
 8005a5a:	18e4      	addlt	r4, r4, r3
 8005a5c:	f000 f8e0 	bl	8005c20 <__malloc_lock>
 8005a60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <_free_r+0x90>)
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	b933      	cbnz	r3, 8005a74 <_free_r+0x2c>
 8005a66:	6063      	str	r3, [r4, #4]
 8005a68:	6014      	str	r4, [r2, #0]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a70:	f000 b8dc 	b.w	8005c2c <__malloc_unlock>
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d908      	bls.n	8005a8a <_free_r+0x42>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	1821      	adds	r1, r4, r0
 8005a7c:	428b      	cmp	r3, r1
 8005a7e:	bf01      	itttt	eq
 8005a80:	6819      	ldreq	r1, [r3, #0]
 8005a82:	685b      	ldreq	r3, [r3, #4]
 8005a84:	1809      	addeq	r1, r1, r0
 8005a86:	6021      	streq	r1, [r4, #0]
 8005a88:	e7ed      	b.n	8005a66 <_free_r+0x1e>
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b10b      	cbz	r3, 8005a94 <_free_r+0x4c>
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d9fa      	bls.n	8005a8a <_free_r+0x42>
 8005a94:	6811      	ldr	r1, [r2, #0]
 8005a96:	1850      	adds	r0, r2, r1
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d10b      	bne.n	8005ab4 <_free_r+0x6c>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	1850      	adds	r0, r2, r1
 8005aa2:	4283      	cmp	r3, r0
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	d1e0      	bne.n	8005a6a <_free_r+0x22>
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	6053      	str	r3, [r2, #4]
 8005aae:	4408      	add	r0, r1
 8005ab0:	6010      	str	r0, [r2, #0]
 8005ab2:	e7da      	b.n	8005a6a <_free_r+0x22>
 8005ab4:	d902      	bls.n	8005abc <_free_r+0x74>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	e7d6      	b.n	8005a6a <_free_r+0x22>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	1821      	adds	r1, r4, r0
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	bf04      	itt	eq
 8005ac4:	6819      	ldreq	r1, [r3, #0]
 8005ac6:	685b      	ldreq	r3, [r3, #4]
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	bf04      	itt	eq
 8005acc:	1809      	addeq	r1, r1, r0
 8005ace:	6021      	streq	r1, [r4, #0]
 8005ad0:	6054      	str	r4, [r2, #4]
 8005ad2:	e7ca      	b.n	8005a6a <_free_r+0x22>
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20004300 	.word	0x20004300

08005adc <sbrk_aligned>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	4e0f      	ldr	r6, [pc, #60]	@ (8005b1c <sbrk_aligned+0x40>)
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	6831      	ldr	r1, [r6, #0]
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	b911      	cbnz	r1, 8005aee <sbrk_aligned+0x12>
 8005ae8:	f000 fba4 	bl	8006234 <_sbrk_r>
 8005aec:	6030      	str	r0, [r6, #0]
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 fb9f 	bl	8006234 <_sbrk_r>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d103      	bne.n	8005b02 <sbrk_aligned+0x26>
 8005afa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005afe:	4620      	mov	r0, r4
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	1cc4      	adds	r4, r0, #3
 8005b04:	f024 0403 	bic.w	r4, r4, #3
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d0f8      	beq.n	8005afe <sbrk_aligned+0x22>
 8005b0c:	1a21      	subs	r1, r4, r0
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fb90 	bl	8006234 <_sbrk_r>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d1f2      	bne.n	8005afe <sbrk_aligned+0x22>
 8005b18:	e7ef      	b.n	8005afa <sbrk_aligned+0x1e>
 8005b1a:	bf00      	nop
 8005b1c:	200042fc 	.word	0x200042fc

08005b20 <_malloc_r>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	1ccd      	adds	r5, r1, #3
 8005b26:	f025 0503 	bic.w	r5, r5, #3
 8005b2a:	3508      	adds	r5, #8
 8005b2c:	2d0c      	cmp	r5, #12
 8005b2e:	bf38      	it	cc
 8005b30:	250c      	movcc	r5, #12
 8005b32:	2d00      	cmp	r5, #0
 8005b34:	4606      	mov	r6, r0
 8005b36:	db01      	blt.n	8005b3c <_malloc_r+0x1c>
 8005b38:	42a9      	cmp	r1, r5
 8005b3a:	d904      	bls.n	8005b46 <_malloc_r+0x26>
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	6033      	str	r3, [r6, #0]
 8005b40:	2000      	movs	r0, #0
 8005b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c1c <_malloc_r+0xfc>
 8005b4a:	f000 f869 	bl	8005c20 <__malloc_lock>
 8005b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b52:	461c      	mov	r4, r3
 8005b54:	bb44      	cbnz	r4, 8005ba8 <_malloc_r+0x88>
 8005b56:	4629      	mov	r1, r5
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f7ff ffbf 	bl	8005adc <sbrk_aligned>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	4604      	mov	r4, r0
 8005b62:	d158      	bne.n	8005c16 <_malloc_r+0xf6>
 8005b64:	f8d8 4000 	ldr.w	r4, [r8]
 8005b68:	4627      	mov	r7, r4
 8005b6a:	2f00      	cmp	r7, #0
 8005b6c:	d143      	bne.n	8005bf6 <_malloc_r+0xd6>
 8005b6e:	2c00      	cmp	r4, #0
 8005b70:	d04b      	beq.n	8005c0a <_malloc_r+0xea>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	4639      	mov	r1, r7
 8005b76:	4630      	mov	r0, r6
 8005b78:	eb04 0903 	add.w	r9, r4, r3
 8005b7c:	f000 fb5a 	bl	8006234 <_sbrk_r>
 8005b80:	4581      	cmp	r9, r0
 8005b82:	d142      	bne.n	8005c0a <_malloc_r+0xea>
 8005b84:	6821      	ldr	r1, [r4, #0]
 8005b86:	1a6d      	subs	r5, r5, r1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff ffa6 	bl	8005adc <sbrk_aligned>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d03a      	beq.n	8005c0a <_malloc_r+0xea>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	442b      	add	r3, r5
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	bb62      	cbnz	r2, 8005bfc <_malloc_r+0xdc>
 8005ba2:	f8c8 7000 	str.w	r7, [r8]
 8005ba6:	e00f      	b.n	8005bc8 <_malloc_r+0xa8>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	1b52      	subs	r2, r2, r5
 8005bac:	d420      	bmi.n	8005bf0 <_malloc_r+0xd0>
 8005bae:	2a0b      	cmp	r2, #11
 8005bb0:	d917      	bls.n	8005be2 <_malloc_r+0xc2>
 8005bb2:	1961      	adds	r1, r4, r5
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	6025      	str	r5, [r4, #0]
 8005bb8:	bf18      	it	ne
 8005bba:	6059      	strne	r1, [r3, #4]
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	bf08      	it	eq
 8005bc0:	f8c8 1000 	streq.w	r1, [r8]
 8005bc4:	5162      	str	r2, [r4, r5]
 8005bc6:	604b      	str	r3, [r1, #4]
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f82f 	bl	8005c2c <__malloc_unlock>
 8005bce:	f104 000b 	add.w	r0, r4, #11
 8005bd2:	1d23      	adds	r3, r4, #4
 8005bd4:	f020 0007 	bic.w	r0, r0, #7
 8005bd8:	1ac2      	subs	r2, r0, r3
 8005bda:	bf1c      	itt	ne
 8005bdc:	1a1b      	subne	r3, r3, r0
 8005bde:	50a3      	strne	r3, [r4, r2]
 8005be0:	e7af      	b.n	8005b42 <_malloc_r+0x22>
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	bf0c      	ite	eq
 8005be8:	f8c8 2000 	streq.w	r2, [r8]
 8005bec:	605a      	strne	r2, [r3, #4]
 8005bee:	e7eb      	b.n	8005bc8 <_malloc_r+0xa8>
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	6864      	ldr	r4, [r4, #4]
 8005bf4:	e7ae      	b.n	8005b54 <_malloc_r+0x34>
 8005bf6:	463c      	mov	r4, r7
 8005bf8:	687f      	ldr	r7, [r7, #4]
 8005bfa:	e7b6      	b.n	8005b6a <_malloc_r+0x4a>
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d1fb      	bne.n	8005bfc <_malloc_r+0xdc>
 8005c04:	2300      	movs	r3, #0
 8005c06:	6053      	str	r3, [r2, #4]
 8005c08:	e7de      	b.n	8005bc8 <_malloc_r+0xa8>
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f000 f80c 	bl	8005c2c <__malloc_unlock>
 8005c14:	e794      	b.n	8005b40 <_malloc_r+0x20>
 8005c16:	6005      	str	r5, [r0, #0]
 8005c18:	e7d6      	b.n	8005bc8 <_malloc_r+0xa8>
 8005c1a:	bf00      	nop
 8005c1c:	20004300 	.word	0x20004300

08005c20 <__malloc_lock>:
 8005c20:	4801      	ldr	r0, [pc, #4]	@ (8005c28 <__malloc_lock+0x8>)
 8005c22:	f7ff bf01 	b.w	8005a28 <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	200042f8 	.word	0x200042f8

08005c2c <__malloc_unlock>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	@ (8005c34 <__malloc_unlock+0x8>)
 8005c2e:	f7ff befc 	b.w	8005a2a <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	200042f8 	.word	0x200042f8

08005c38 <__ssputs_r>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	688e      	ldr	r6, [r1, #8]
 8005c3e:	461f      	mov	r7, r3
 8005c40:	42be      	cmp	r6, r7
 8005c42:	680b      	ldr	r3, [r1, #0]
 8005c44:	4682      	mov	sl, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	4690      	mov	r8, r2
 8005c4a:	d82d      	bhi.n	8005ca8 <__ssputs_r+0x70>
 8005c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c54:	d026      	beq.n	8005ca4 <__ssputs_r+0x6c>
 8005c56:	6965      	ldr	r5, [r4, #20]
 8005c58:	6909      	ldr	r1, [r1, #16]
 8005c5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c5e:	eba3 0901 	sub.w	r9, r3, r1
 8005c62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c66:	1c7b      	adds	r3, r7, #1
 8005c68:	444b      	add	r3, r9
 8005c6a:	106d      	asrs	r5, r5, #1
 8005c6c:	429d      	cmp	r5, r3
 8005c6e:	bf38      	it	cc
 8005c70:	461d      	movcc	r5, r3
 8005c72:	0553      	lsls	r3, r2, #21
 8005c74:	d527      	bpl.n	8005cc6 <__ssputs_r+0x8e>
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7ff ff52 	bl	8005b20 <_malloc_r>
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	b360      	cbz	r0, 8005cda <__ssputs_r+0xa2>
 8005c80:	6921      	ldr	r1, [r4, #16]
 8005c82:	464a      	mov	r2, r9
 8005c84:	f7ff fed2 	bl	8005a2c <memcpy>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	6126      	str	r6, [r4, #16]
 8005c96:	6165      	str	r5, [r4, #20]
 8005c98:	444e      	add	r6, r9
 8005c9a:	eba5 0509 	sub.w	r5, r5, r9
 8005c9e:	6026      	str	r6, [r4, #0]
 8005ca0:	60a5      	str	r5, [r4, #8]
 8005ca2:	463e      	mov	r6, r7
 8005ca4:	42be      	cmp	r6, r7
 8005ca6:	d900      	bls.n	8005caa <__ssputs_r+0x72>
 8005ca8:	463e      	mov	r6, r7
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	4632      	mov	r2, r6
 8005cae:	4641      	mov	r1, r8
 8005cb0:	f000 faa6 	bl	8006200 <memmove>
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	1b9b      	subs	r3, r3, r6
 8005cb8:	60a3      	str	r3, [r4, #8]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	4433      	add	r3, r6
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc6:	462a      	mov	r2, r5
 8005cc8:	f000 fac4 	bl	8006254 <_realloc_r>
 8005ccc:	4606      	mov	r6, r0
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d1e0      	bne.n	8005c94 <__ssputs_r+0x5c>
 8005cd2:	6921      	ldr	r1, [r4, #16]
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f7ff feb7 	bl	8005a48 <_free_r>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	f8ca 3000 	str.w	r3, [sl]
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cec:	e7e9      	b.n	8005cc2 <__ssputs_r+0x8a>
	...

08005cf0 <_svfiprintf_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	898b      	ldrh	r3, [r1, #12]
 8005cf8:	061b      	lsls	r3, r3, #24
 8005cfa:	b09d      	sub	sp, #116	@ 0x74
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460d      	mov	r5, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	d510      	bpl.n	8005d26 <_svfiprintf_r+0x36>
 8005d04:	690b      	ldr	r3, [r1, #16]
 8005d06:	b973      	cbnz	r3, 8005d26 <_svfiprintf_r+0x36>
 8005d08:	2140      	movs	r1, #64	@ 0x40
 8005d0a:	f7ff ff09 	bl	8005b20 <_malloc_r>
 8005d0e:	6028      	str	r0, [r5, #0]
 8005d10:	6128      	str	r0, [r5, #16]
 8005d12:	b930      	cbnz	r0, 8005d22 <_svfiprintf_r+0x32>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d1c:	b01d      	add	sp, #116	@ 0x74
 8005d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d22:	2340      	movs	r3, #64	@ 0x40
 8005d24:	616b      	str	r3, [r5, #20]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d2a:	2320      	movs	r3, #32
 8005d2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d34:	2330      	movs	r3, #48	@ 0x30
 8005d36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ed4 <_svfiprintf_r+0x1e4>
 8005d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d3e:	f04f 0901 	mov.w	r9, #1
 8005d42:	4623      	mov	r3, r4
 8005d44:	469a      	mov	sl, r3
 8005d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d4a:	b10a      	cbz	r2, 8005d50 <_svfiprintf_r+0x60>
 8005d4c:	2a25      	cmp	r2, #37	@ 0x25
 8005d4e:	d1f9      	bne.n	8005d44 <_svfiprintf_r+0x54>
 8005d50:	ebba 0b04 	subs.w	fp, sl, r4
 8005d54:	d00b      	beq.n	8005d6e <_svfiprintf_r+0x7e>
 8005d56:	465b      	mov	r3, fp
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff ff6b 	bl	8005c38 <__ssputs_r>
 8005d62:	3001      	adds	r0, #1
 8005d64:	f000 80a7 	beq.w	8005eb6 <_svfiprintf_r+0x1c6>
 8005d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d6a:	445a      	add	r2, fp
 8005d6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 809f 	beq.w	8005eb6 <_svfiprintf_r+0x1c6>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d82:	f10a 0a01 	add.w	sl, sl, #1
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	9307      	str	r3, [sp, #28]
 8005d8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d90:	4654      	mov	r4, sl
 8005d92:	2205      	movs	r2, #5
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	484e      	ldr	r0, [pc, #312]	@ (8005ed4 <_svfiprintf_r+0x1e4>)
 8005d9a:	f7fa fa21 	bl	80001e0 <memchr>
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	b9d8      	cbnz	r0, 8005dda <_svfiprintf_r+0xea>
 8005da2:	06d0      	lsls	r0, r2, #27
 8005da4:	bf44      	itt	mi
 8005da6:	2320      	movmi	r3, #32
 8005da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dac:	0711      	lsls	r1, r2, #28
 8005dae:	bf44      	itt	mi
 8005db0:	232b      	movmi	r3, #43	@ 0x2b
 8005db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dbc:	d015      	beq.n	8005dea <_svfiprintf_r+0xfa>
 8005dbe:	9a07      	ldr	r2, [sp, #28]
 8005dc0:	4654      	mov	r4, sl
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dce:	3b30      	subs	r3, #48	@ 0x30
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d94b      	bls.n	8005e6c <_svfiprintf_r+0x17c>
 8005dd4:	b1b0      	cbz	r0, 8005e04 <_svfiprintf_r+0x114>
 8005dd6:	9207      	str	r2, [sp, #28]
 8005dd8:	e014      	b.n	8005e04 <_svfiprintf_r+0x114>
 8005dda:	eba0 0308 	sub.w	r3, r0, r8
 8005dde:	fa09 f303 	lsl.w	r3, r9, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	46a2      	mov	sl, r4
 8005de8:	e7d2      	b.n	8005d90 <_svfiprintf_r+0xa0>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	9103      	str	r1, [sp, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfbb      	ittet	lt
 8005df6:	425b      	neglt	r3, r3
 8005df8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dfc:	9307      	strge	r3, [sp, #28]
 8005dfe:	9307      	strlt	r3, [sp, #28]
 8005e00:	bfb8      	it	lt
 8005e02:	9204      	strlt	r2, [sp, #16]
 8005e04:	7823      	ldrb	r3, [r4, #0]
 8005e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e08:	d10a      	bne.n	8005e20 <_svfiprintf_r+0x130>
 8005e0a:	7863      	ldrb	r3, [r4, #1]
 8005e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e0e:	d132      	bne.n	8005e76 <_svfiprintf_r+0x186>
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	9203      	str	r2, [sp, #12]
 8005e18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e1c:	3402      	adds	r4, #2
 8005e1e:	9305      	str	r3, [sp, #20]
 8005e20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ee4 <_svfiprintf_r+0x1f4>
 8005e24:	7821      	ldrb	r1, [r4, #0]
 8005e26:	2203      	movs	r2, #3
 8005e28:	4650      	mov	r0, sl
 8005e2a:	f7fa f9d9 	bl	80001e0 <memchr>
 8005e2e:	b138      	cbz	r0, 8005e40 <_svfiprintf_r+0x150>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	eba0 000a 	sub.w	r0, r0, sl
 8005e36:	2240      	movs	r2, #64	@ 0x40
 8005e38:	4082      	lsls	r2, r0
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	3401      	adds	r4, #1
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e44:	4824      	ldr	r0, [pc, #144]	@ (8005ed8 <_svfiprintf_r+0x1e8>)
 8005e46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e4a:	2206      	movs	r2, #6
 8005e4c:	f7fa f9c8 	bl	80001e0 <memchr>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d036      	beq.n	8005ec2 <_svfiprintf_r+0x1d2>
 8005e54:	4b21      	ldr	r3, [pc, #132]	@ (8005edc <_svfiprintf_r+0x1ec>)
 8005e56:	bb1b      	cbnz	r3, 8005ea0 <_svfiprintf_r+0x1b0>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	3307      	adds	r3, #7
 8005e5c:	f023 0307 	bic.w	r3, r3, #7
 8005e60:	3308      	adds	r3, #8
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e66:	4433      	add	r3, r6
 8005e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6a:	e76a      	b.n	8005d42 <_svfiprintf_r+0x52>
 8005e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e70:	460c      	mov	r4, r1
 8005e72:	2001      	movs	r0, #1
 8005e74:	e7a8      	b.n	8005dc8 <_svfiprintf_r+0xd8>
 8005e76:	2300      	movs	r3, #0
 8005e78:	3401      	adds	r4, #1
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f04f 0c0a 	mov.w	ip, #10
 8005e82:	4620      	mov	r0, r4
 8005e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e88:	3a30      	subs	r2, #48	@ 0x30
 8005e8a:	2a09      	cmp	r2, #9
 8005e8c:	d903      	bls.n	8005e96 <_svfiprintf_r+0x1a6>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0c6      	beq.n	8005e20 <_svfiprintf_r+0x130>
 8005e92:	9105      	str	r1, [sp, #20]
 8005e94:	e7c4      	b.n	8005e20 <_svfiprintf_r+0x130>
 8005e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e7f0      	b.n	8005e82 <_svfiprintf_r+0x192>
 8005ea0:	ab03      	add	r3, sp, #12
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <_svfiprintf_r+0x1f0>)
 8005ea8:	a904      	add	r1, sp, #16
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f3af 8000 	nop.w
 8005eb0:	1c42      	adds	r2, r0, #1
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	d1d6      	bne.n	8005e64 <_svfiprintf_r+0x174>
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	065b      	lsls	r3, r3, #25
 8005eba:	f53f af2d 	bmi.w	8005d18 <_svfiprintf_r+0x28>
 8005ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ec0:	e72c      	b.n	8005d1c <_svfiprintf_r+0x2c>
 8005ec2:	ab03      	add	r3, sp, #12
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <_svfiprintf_r+0x1f0>)
 8005eca:	a904      	add	r1, sp, #16
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f000 f879 	bl	8005fc4 <_printf_i>
 8005ed2:	e7ed      	b.n	8005eb0 <_svfiprintf_r+0x1c0>
 8005ed4:	08006410 	.word	0x08006410
 8005ed8:	0800641a 	.word	0x0800641a
 8005edc:	00000000 	.word	0x00000000
 8005ee0:	08005c39 	.word	0x08005c39
 8005ee4:	08006416 	.word	0x08006416

08005ee8 <_printf_common>:
 8005ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	4616      	mov	r6, r2
 8005eee:	4698      	mov	r8, r3
 8005ef0:	688a      	ldr	r2, [r1, #8]
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	bfb8      	it	lt
 8005efc:	4613      	movlt	r3, r2
 8005efe:	6033      	str	r3, [r6, #0]
 8005f00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f04:	4607      	mov	r7, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	b10a      	cbz	r2, 8005f0e <_printf_common+0x26>
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	6033      	str	r3, [r6, #0]
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	0699      	lsls	r1, r3, #26
 8005f12:	bf42      	ittt	mi
 8005f14:	6833      	ldrmi	r3, [r6, #0]
 8005f16:	3302      	addmi	r3, #2
 8005f18:	6033      	strmi	r3, [r6, #0]
 8005f1a:	6825      	ldr	r5, [r4, #0]
 8005f1c:	f015 0506 	ands.w	r5, r5, #6
 8005f20:	d106      	bne.n	8005f30 <_printf_common+0x48>
 8005f22:	f104 0a19 	add.w	sl, r4, #25
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	6832      	ldr	r2, [r6, #0]
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dc26      	bgt.n	8005f7e <_printf_common+0x96>
 8005f30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	3b00      	subs	r3, #0
 8005f38:	bf18      	it	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	0692      	lsls	r2, r2, #26
 8005f3e:	d42b      	bmi.n	8005f98 <_printf_common+0xb0>
 8005f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f44:	4641      	mov	r1, r8
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c8      	blx	r9
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d01e      	beq.n	8005f8c <_printf_common+0xa4>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	6922      	ldr	r2, [r4, #16]
 8005f52:	f003 0306 	and.w	r3, r3, #6
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	bf02      	ittt	eq
 8005f5a:	68e5      	ldreq	r5, [r4, #12]
 8005f5c:	6833      	ldreq	r3, [r6, #0]
 8005f5e:	1aed      	subeq	r5, r5, r3
 8005f60:	68a3      	ldr	r3, [r4, #8]
 8005f62:	bf0c      	ite	eq
 8005f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f68:	2500      	movne	r5, #0
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	bfc4      	itt	gt
 8005f6e:	1a9b      	subgt	r3, r3, r2
 8005f70:	18ed      	addgt	r5, r5, r3
 8005f72:	2600      	movs	r6, #0
 8005f74:	341a      	adds	r4, #26
 8005f76:	42b5      	cmp	r5, r6
 8005f78:	d11a      	bne.n	8005fb0 <_printf_common+0xc8>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e008      	b.n	8005f90 <_printf_common+0xa8>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4652      	mov	r2, sl
 8005f82:	4641      	mov	r1, r8
 8005f84:	4638      	mov	r0, r7
 8005f86:	47c8      	blx	r9
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d103      	bne.n	8005f94 <_printf_common+0xac>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f94:	3501      	adds	r5, #1
 8005f96:	e7c6      	b.n	8005f26 <_printf_common+0x3e>
 8005f98:	18e1      	adds	r1, r4, r3
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	2030      	movs	r0, #48	@ 0x30
 8005f9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fa2:	4422      	add	r2, r4
 8005fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fac:	3302      	adds	r3, #2
 8005fae:	e7c7      	b.n	8005f40 <_printf_common+0x58>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	47c8      	blx	r9
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d0e6      	beq.n	8005f8c <_printf_common+0xa4>
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7d9      	b.n	8005f76 <_printf_common+0x8e>
	...

08005fc4 <_printf_i>:
 8005fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	7e0f      	ldrb	r7, [r1, #24]
 8005fca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fcc:	2f78      	cmp	r7, #120	@ 0x78
 8005fce:	4691      	mov	r9, r2
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fda:	d807      	bhi.n	8005fec <_printf_i+0x28>
 8005fdc:	2f62      	cmp	r7, #98	@ 0x62
 8005fde:	d80a      	bhi.n	8005ff6 <_printf_i+0x32>
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	f000 80d1 	beq.w	8006188 <_printf_i+0x1c4>
 8005fe6:	2f58      	cmp	r7, #88	@ 0x58
 8005fe8:	f000 80b8 	beq.w	800615c <_printf_i+0x198>
 8005fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ff4:	e03a      	b.n	800606c <_printf_i+0xa8>
 8005ff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ffa:	2b15      	cmp	r3, #21
 8005ffc:	d8f6      	bhi.n	8005fec <_printf_i+0x28>
 8005ffe:	a101      	add	r1, pc, #4	@ (adr r1, 8006004 <_printf_i+0x40>)
 8006000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006004:	0800605d 	.word	0x0800605d
 8006008:	08006071 	.word	0x08006071
 800600c:	08005fed 	.word	0x08005fed
 8006010:	08005fed 	.word	0x08005fed
 8006014:	08005fed 	.word	0x08005fed
 8006018:	08005fed 	.word	0x08005fed
 800601c:	08006071 	.word	0x08006071
 8006020:	08005fed 	.word	0x08005fed
 8006024:	08005fed 	.word	0x08005fed
 8006028:	08005fed 	.word	0x08005fed
 800602c:	08005fed 	.word	0x08005fed
 8006030:	0800616f 	.word	0x0800616f
 8006034:	0800609b 	.word	0x0800609b
 8006038:	08006129 	.word	0x08006129
 800603c:	08005fed 	.word	0x08005fed
 8006040:	08005fed 	.word	0x08005fed
 8006044:	08006191 	.word	0x08006191
 8006048:	08005fed 	.word	0x08005fed
 800604c:	0800609b 	.word	0x0800609b
 8006050:	08005fed 	.word	0x08005fed
 8006054:	08005fed 	.word	0x08005fed
 8006058:	08006131 	.word	0x08006131
 800605c:	6833      	ldr	r3, [r6, #0]
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6032      	str	r2, [r6, #0]
 8006064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800606c:	2301      	movs	r3, #1
 800606e:	e09c      	b.n	80061aa <_printf_i+0x1e6>
 8006070:	6833      	ldr	r3, [r6, #0]
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	1d19      	adds	r1, r3, #4
 8006076:	6031      	str	r1, [r6, #0]
 8006078:	0606      	lsls	r6, r0, #24
 800607a:	d501      	bpl.n	8006080 <_printf_i+0xbc>
 800607c:	681d      	ldr	r5, [r3, #0]
 800607e:	e003      	b.n	8006088 <_printf_i+0xc4>
 8006080:	0645      	lsls	r5, r0, #25
 8006082:	d5fb      	bpl.n	800607c <_printf_i+0xb8>
 8006084:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006088:	2d00      	cmp	r5, #0
 800608a:	da03      	bge.n	8006094 <_printf_i+0xd0>
 800608c:	232d      	movs	r3, #45	@ 0x2d
 800608e:	426d      	negs	r5, r5
 8006090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006094:	4858      	ldr	r0, [pc, #352]	@ (80061f8 <_printf_i+0x234>)
 8006096:	230a      	movs	r3, #10
 8006098:	e011      	b.n	80060be <_printf_i+0xfa>
 800609a:	6821      	ldr	r1, [r4, #0]
 800609c:	6833      	ldr	r3, [r6, #0]
 800609e:	0608      	lsls	r0, r1, #24
 80060a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80060a4:	d402      	bmi.n	80060ac <_printf_i+0xe8>
 80060a6:	0649      	lsls	r1, r1, #25
 80060a8:	bf48      	it	mi
 80060aa:	b2ad      	uxthmi	r5, r5
 80060ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80060ae:	4852      	ldr	r0, [pc, #328]	@ (80061f8 <_printf_i+0x234>)
 80060b0:	6033      	str	r3, [r6, #0]
 80060b2:	bf14      	ite	ne
 80060b4:	230a      	movne	r3, #10
 80060b6:	2308      	moveq	r3, #8
 80060b8:	2100      	movs	r1, #0
 80060ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060be:	6866      	ldr	r6, [r4, #4]
 80060c0:	60a6      	str	r6, [r4, #8]
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	db05      	blt.n	80060d2 <_printf_i+0x10e>
 80060c6:	6821      	ldr	r1, [r4, #0]
 80060c8:	432e      	orrs	r6, r5
 80060ca:	f021 0104 	bic.w	r1, r1, #4
 80060ce:	6021      	str	r1, [r4, #0]
 80060d0:	d04b      	beq.n	800616a <_printf_i+0x1a6>
 80060d2:	4616      	mov	r6, r2
 80060d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80060d8:	fb03 5711 	mls	r7, r3, r1, r5
 80060dc:	5dc7      	ldrb	r7, [r0, r7]
 80060de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060e2:	462f      	mov	r7, r5
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	460d      	mov	r5, r1
 80060e8:	d9f4      	bls.n	80060d4 <_printf_i+0x110>
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d10b      	bne.n	8006106 <_printf_i+0x142>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07df      	lsls	r7, r3, #31
 80060f2:	d508      	bpl.n	8006106 <_printf_i+0x142>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	6861      	ldr	r1, [r4, #4]
 80060f8:	4299      	cmp	r1, r3
 80060fa:	bfde      	ittt	le
 80060fc:	2330      	movle	r3, #48	@ 0x30
 80060fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006102:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006106:	1b92      	subs	r2, r2, r6
 8006108:	6122      	str	r2, [r4, #16]
 800610a:	f8cd a000 	str.w	sl, [sp]
 800610e:	464b      	mov	r3, r9
 8006110:	aa03      	add	r2, sp, #12
 8006112:	4621      	mov	r1, r4
 8006114:	4640      	mov	r0, r8
 8006116:	f7ff fee7 	bl	8005ee8 <_printf_common>
 800611a:	3001      	adds	r0, #1
 800611c:	d14a      	bne.n	80061b4 <_printf_i+0x1f0>
 800611e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006122:	b004      	add	sp, #16
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	f043 0320 	orr.w	r3, r3, #32
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	4832      	ldr	r0, [pc, #200]	@ (80061fc <_printf_i+0x238>)
 8006132:	2778      	movs	r7, #120	@ 0x78
 8006134:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	6831      	ldr	r1, [r6, #0]
 800613c:	061f      	lsls	r7, r3, #24
 800613e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006142:	d402      	bmi.n	800614a <_printf_i+0x186>
 8006144:	065f      	lsls	r7, r3, #25
 8006146:	bf48      	it	mi
 8006148:	b2ad      	uxthmi	r5, r5
 800614a:	6031      	str	r1, [r6, #0]
 800614c:	07d9      	lsls	r1, r3, #31
 800614e:	bf44      	itt	mi
 8006150:	f043 0320 	orrmi.w	r3, r3, #32
 8006154:	6023      	strmi	r3, [r4, #0]
 8006156:	b11d      	cbz	r5, 8006160 <_printf_i+0x19c>
 8006158:	2310      	movs	r3, #16
 800615a:	e7ad      	b.n	80060b8 <_printf_i+0xf4>
 800615c:	4826      	ldr	r0, [pc, #152]	@ (80061f8 <_printf_i+0x234>)
 800615e:	e7e9      	b.n	8006134 <_printf_i+0x170>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	f023 0320 	bic.w	r3, r3, #32
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	e7f6      	b.n	8006158 <_printf_i+0x194>
 800616a:	4616      	mov	r6, r2
 800616c:	e7bd      	b.n	80060ea <_printf_i+0x126>
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	6825      	ldr	r5, [r4, #0]
 8006172:	6961      	ldr	r1, [r4, #20]
 8006174:	1d18      	adds	r0, r3, #4
 8006176:	6030      	str	r0, [r6, #0]
 8006178:	062e      	lsls	r6, r5, #24
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	d501      	bpl.n	8006182 <_printf_i+0x1be>
 800617e:	6019      	str	r1, [r3, #0]
 8006180:	e002      	b.n	8006188 <_printf_i+0x1c4>
 8006182:	0668      	lsls	r0, r5, #25
 8006184:	d5fb      	bpl.n	800617e <_printf_i+0x1ba>
 8006186:	8019      	strh	r1, [r3, #0]
 8006188:	2300      	movs	r3, #0
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	4616      	mov	r6, r2
 800618e:	e7bc      	b.n	800610a <_printf_i+0x146>
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	6032      	str	r2, [r6, #0]
 8006196:	681e      	ldr	r6, [r3, #0]
 8006198:	6862      	ldr	r2, [r4, #4]
 800619a:	2100      	movs	r1, #0
 800619c:	4630      	mov	r0, r6
 800619e:	f7fa f81f 	bl	80001e0 <memchr>
 80061a2:	b108      	cbz	r0, 80061a8 <_printf_i+0x1e4>
 80061a4:	1b80      	subs	r0, r0, r6
 80061a6:	6060      	str	r0, [r4, #4]
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	2300      	movs	r3, #0
 80061ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b2:	e7aa      	b.n	800610a <_printf_i+0x146>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	4632      	mov	r2, r6
 80061b8:	4649      	mov	r1, r9
 80061ba:	4640      	mov	r0, r8
 80061bc:	47d0      	blx	sl
 80061be:	3001      	adds	r0, #1
 80061c0:	d0ad      	beq.n	800611e <_printf_i+0x15a>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	079b      	lsls	r3, r3, #30
 80061c6:	d413      	bmi.n	80061f0 <_printf_i+0x22c>
 80061c8:	68e0      	ldr	r0, [r4, #12]
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	4298      	cmp	r0, r3
 80061ce:	bfb8      	it	lt
 80061d0:	4618      	movlt	r0, r3
 80061d2:	e7a6      	b.n	8006122 <_printf_i+0x15e>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4632      	mov	r2, r6
 80061d8:	4649      	mov	r1, r9
 80061da:	4640      	mov	r0, r8
 80061dc:	47d0      	blx	sl
 80061de:	3001      	adds	r0, #1
 80061e0:	d09d      	beq.n	800611e <_printf_i+0x15a>
 80061e2:	3501      	adds	r5, #1
 80061e4:	68e3      	ldr	r3, [r4, #12]
 80061e6:	9903      	ldr	r1, [sp, #12]
 80061e8:	1a5b      	subs	r3, r3, r1
 80061ea:	42ab      	cmp	r3, r5
 80061ec:	dcf2      	bgt.n	80061d4 <_printf_i+0x210>
 80061ee:	e7eb      	b.n	80061c8 <_printf_i+0x204>
 80061f0:	2500      	movs	r5, #0
 80061f2:	f104 0619 	add.w	r6, r4, #25
 80061f6:	e7f5      	b.n	80061e4 <_printf_i+0x220>
 80061f8:	08006421 	.word	0x08006421
 80061fc:	08006432 	.word	0x08006432

08006200 <memmove>:
 8006200:	4288      	cmp	r0, r1
 8006202:	b510      	push	{r4, lr}
 8006204:	eb01 0402 	add.w	r4, r1, r2
 8006208:	d902      	bls.n	8006210 <memmove+0x10>
 800620a:	4284      	cmp	r4, r0
 800620c:	4623      	mov	r3, r4
 800620e:	d807      	bhi.n	8006220 <memmove+0x20>
 8006210:	1e43      	subs	r3, r0, #1
 8006212:	42a1      	cmp	r1, r4
 8006214:	d008      	beq.n	8006228 <memmove+0x28>
 8006216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800621a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800621e:	e7f8      	b.n	8006212 <memmove+0x12>
 8006220:	4402      	add	r2, r0
 8006222:	4601      	mov	r1, r0
 8006224:	428a      	cmp	r2, r1
 8006226:	d100      	bne.n	800622a <memmove+0x2a>
 8006228:	bd10      	pop	{r4, pc}
 800622a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800622e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006232:	e7f7      	b.n	8006224 <memmove+0x24>

08006234 <_sbrk_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4d06      	ldr	r5, [pc, #24]	@ (8006250 <_sbrk_r+0x1c>)
 8006238:	2300      	movs	r3, #0
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	f7fa ff84 	bl	800114c <_sbrk>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_sbrk_r+0x1a>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_sbrk_r+0x1a>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	200042f4 	.word	0x200042f4

08006254 <_realloc_r>:
 8006254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006258:	4607      	mov	r7, r0
 800625a:	4614      	mov	r4, r2
 800625c:	460d      	mov	r5, r1
 800625e:	b921      	cbnz	r1, 800626a <_realloc_r+0x16>
 8006260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006264:	4611      	mov	r1, r2
 8006266:	f7ff bc5b 	b.w	8005b20 <_malloc_r>
 800626a:	b92a      	cbnz	r2, 8006278 <_realloc_r+0x24>
 800626c:	f7ff fbec 	bl	8005a48 <_free_r>
 8006270:	4625      	mov	r5, r4
 8006272:	4628      	mov	r0, r5
 8006274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006278:	f000 f81a 	bl	80062b0 <_malloc_usable_size_r>
 800627c:	4284      	cmp	r4, r0
 800627e:	4606      	mov	r6, r0
 8006280:	d802      	bhi.n	8006288 <_realloc_r+0x34>
 8006282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006286:	d8f4      	bhi.n	8006272 <_realloc_r+0x1e>
 8006288:	4621      	mov	r1, r4
 800628a:	4638      	mov	r0, r7
 800628c:	f7ff fc48 	bl	8005b20 <_malloc_r>
 8006290:	4680      	mov	r8, r0
 8006292:	b908      	cbnz	r0, 8006298 <_realloc_r+0x44>
 8006294:	4645      	mov	r5, r8
 8006296:	e7ec      	b.n	8006272 <_realloc_r+0x1e>
 8006298:	42b4      	cmp	r4, r6
 800629a:	4622      	mov	r2, r4
 800629c:	4629      	mov	r1, r5
 800629e:	bf28      	it	cs
 80062a0:	4632      	movcs	r2, r6
 80062a2:	f7ff fbc3 	bl	8005a2c <memcpy>
 80062a6:	4629      	mov	r1, r5
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff fbcd 	bl	8005a48 <_free_r>
 80062ae:	e7f1      	b.n	8006294 <_realloc_r+0x40>

080062b0 <_malloc_usable_size_r>:
 80062b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b4:	1f18      	subs	r0, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bfbc      	itt	lt
 80062ba:	580b      	ldrlt	r3, [r1, r0]
 80062bc:	18c0      	addlt	r0, r0, r3
 80062be:	4770      	bx	lr

080062c0 <_init>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr

080062cc <_fini>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr
